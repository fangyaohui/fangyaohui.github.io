<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>75-41 拜占庭&amp;非拜占庭</title>
      <link href="/2025/03/25/75-41%20%E6%8B%9C%E5%8D%A0%E5%BA%AD&amp;%E9%9D%9E%E6%8B%9C%E5%8D%A0%E5%BA%AD/"/>
      <url>/2025/03/25/75-41%20%E6%8B%9C%E5%8D%A0%E5%BA%AD&amp;%E9%9D%9E%E6%8B%9C%E5%8D%A0%E5%BA%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="75-41-拜占庭-非拜占庭"><a href="#75-41-拜占庭-非拜占庭" class="headerlink" title="75-41 拜占庭&amp;非拜占庭"></a>75-41 拜占庭&amp;非拜占庭</h1><h2 id="拜占庭容错（BFT）"><a href="#拜占庭容错（BFT）" class="headerlink" title="拜占庭容错（BFT）"></a><strong>拜占庭容错（BFT）</strong></h2><p>拜占庭容错算法假设系统中可能存在<strong>恶意节点（Byzantine Nodes）</strong>，这些节点可能故意发送错误信息、篡改数据或拒绝协作，甚至与其他恶意节点合谋破坏系统。其目标是让系统在存在一定数量的恶意节点时仍能达成一致。</p><p>源自“拜占庭将军问题”（Byzantine Generals Problem）：</p><blockquote><p>一支拜占庭军队包围了一座城市，多位将军需要通过信使协商进攻或撤退的策略。但其中可能存在叛徒将军故意传递错误指令，导致军队行动不一致。如何在这种不可信环境下达成共识？</p></blockquote><h2 id="非拜占庭容错（Non-BFT）"><a href="#非拜占庭容错（Non-BFT）" class="headerlink" title="非拜占庭容错（Non-BFT）"></a><strong>非拜占庭容错（Non-BFT）</strong></h2><p>非拜占庭容错算法假设节点故障是**良性（Crash Fault）**的，即节点可能宕机或网络断开，但不会故意作恶。其目标是解决因节点崩溃或网络延迟导致的共识问题。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 选举算法 </tag>
            
            <tag> 拜占庭 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-40 Raft协议</title>
      <link href="/2025/03/25/75-40%20Raft%E5%8D%8F%E8%AE%AE/"/>
      <url>/2025/03/25/75-40%20Raft%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="75-40-Raft协议"><a href="#75-40-Raft协议" class="headerlink" title="75-40 Raft协议"></a>75-40 Raft协议</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到Raft协议，那就要先聊聊分布式环境下存在的一个困境。在分布式系统中，节点间的通信依赖网络，而网络本身是不可靠的（延迟、丢包、分区），节点也可能随时宕机。这导致一个根本问题：<strong>如何在不可靠的节点和网络中，让多个节点就某个值（或状态）达成一致？</strong></p><p>网络是不可靠的，节点也是不可靠的，那么如何在一群节点中就某一个问题达成一致呢？！</p><p>这就是分布式环境下存在的一个困境。</p><p>那么Raft算法就是针对在不可靠的节点和网络中，让多个节点就某一个问题（值或者状态）达成一致，即分布式一致性算法。</p><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>CAP 原则又称 CAP 定理, 指的是在一个分布式系统中, Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）, 三者不可得兼。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503252021000.png" alt="image-20250325202128903"></p><h2 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h2><p>Raft 正常工作时的流程如下图，也就是正常情况下日志复制的流程。Raft 中使用日志来记录所有操作，所有结点都有自己的日志列表来记录所有请求。算法将机器分成三种角色：<strong>Leader</strong>、<strong>Follower</strong> 和 <strong>Candidate</strong>。正常情况下只存在一个 Leader，其他均为 Follower，所有客户端都与 Leader 进行交互。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503252037753.gif" alt="tcCXcV"></p><p>所有操作采用类似<strong>两阶段提交</strong>的方式，Leader 在收到来自客户端的请求后并不会执行，只是将其写入自己的日志列表中，然后将该操作发送给所有的 Follower。Follower 在收到请求后也只是写入自己的日志列表中然后回复 Leader，当有超过半数的结点写入后 Leader 才会提交该操作并返回给客户端，同时通知所有其他结点提交该操作。</p><p>通过这一流程保证了只要提交过后的操作一定在多数结点上留有记录（在日志列表中），从而保证了该数据不会丢失。</p><blockquote><p>Raft 是一个非拜占庭的一致性算法，即所有通信是正确的而非伪造的。<strong>N个结点的情况下（N为奇数）可以最多容忍(N-1)&#x2F;2个结点故障</strong>。如果更多的节点故障，后续的Leader选举和日志同步将无法进行。</p></blockquote><p>Raft算法在具体实现中，将分布式一致性问题分解为了<strong>Leader选举</strong>、<strong>日志同步</strong>和<strong>安全性保证</strong>三大子问题</p><h3 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h3><blockquote><h3 id="场景-2：Leader-宕机，触发选举"><a href="#场景-2：Leader-宕机，触发选举" class="headerlink" title="场景 2：Leader 宕机，触发选举"></a><strong>场景 2：Leader 宕机，触发选举</strong></h3><ol><li><p><strong>Leader（A）宕机</strong>：</p><ul><li>B 和 C 的 <code>选举超时计时器</code> 未被重置，计时器到期后，它们认为 Leader 已失联。</li></ul></li><li><p><strong>转换为 Candidate 状态</strong>：</p><ul><li>假设 B 的计时器先到期：<ul><li>B 自增 Term（如 Term 1 → Term 2）。</li><li>B 将自身状态改为 <strong>Candidate</strong>，并发起选举投票（RequestVote RPC）。</li><li>B 先投票给自己，然后向 A 和 C 请求投票。</li></ul></li></ul></li><li><p><strong>投票规则</strong>：</p><ul><li>每个节点在 <strong>同一 Term 内只能投一次票</strong>（先到先得）。</li><li>投票条件：<ol><li>Candidate 的 Term ≥ 当前节点的 Term。</li><li>Candidate 的日志至少和当前节点一样新（通过最后一条日志的 Term 和 Index 判断）。</li></ol></li></ul></li><li><p><strong>收集投票</strong>：</p><ul><li>C 收到 B 的投票请求（Term&#x3D;2），发现 Term&#x3D;2 &gt; 自己当前的 Term&#x3D;1，且 B 的日志足够新。</li><li>C 投票给 B，并更新自己的 Term 为 2。</li><li>A 已宕机，无法响应。</li></ul></li><li><p><strong>成为 Leader</strong>：</p><ul><li>B 获得 <strong>多数票（2&#x2F;3）</strong>，从 Candidate 转换为 Leader。</li><li>B 立即向所有节点发送心跳，阻止其他节点发起新选举。</li></ul></li></ol><hr><h3 id="场景-3：选举冲突（Split-Vote）"><a href="#场景-3：选举冲突（Split-Vote）" class="headerlink" title="场景 3：选举冲突（Split Vote）"></a><strong>场景 3：选举冲突（Split Vote）</strong></h3><p>假设 B 和 C 的选举超时计时器同时到期，均发起投票：</p><ol><li><strong>B 和 C 同时成为 Candidate</strong>：<ul><li>B 自增 Term 到 2，C 自增 Term 到 2，各自发起投票。</li></ul></li><li><strong>投票分散</strong>：<ul><li>B 投票给自己，并请求 A 和 C 的投票。</li><li>C 投票给自己，并请求 A 和 B 的投票。</li><li>结果：<ul><li>B 获得 1 票（自己），C 获得 1 票（自己）。</li><li>无 Candidate 获得多数票（2&#x2F;3）。</li></ul></li></ul></li><li><strong>重新选举</strong>：<ul><li>B 和 C 的选举超时计时器再次到期（随机化超时时间可降低冲突概率）。</li><li>假设 B 先超时：<ul><li>B 自增 Term 到 3，发起新一轮投票。</li><li>C 收到 Term&#x3D;3 的请求，投票给 B。</li><li>B 获得 2 票，成为 Leader。</li></ul></li></ul></li></ol></blockquote><h4 id="任期Term"><a href="#任期Term" class="headerlink" title="任期Term"></a>任期Term</h4><p>Raft算法将时间分为一个个的任期（term），每一个term的开始都是Leader选举。 每一个任期以一次选举作为起点，所以当一个结点成为 Candidate 并向其他结点请求投票时，会将自己的 Term 加 1，表明新一轮的开始以及旧 Leader 的任期结束。所有结点在收到比自己更新的 Term 之后就会更新自己的 Term 并转成 Follower，而收到过时的消息则拒绝该请求。 在成功选举Leader之后，Leader会在整个term内管理整个集群。如果Leader选举失败，该term就会因为没有Leader而结束。</p><h4 id="投票"><a href="#投票" class="headerlink" title="投票"></a>投票</h4><p>在投票时候，所有服务器采用先来先得的原则，在一个任期内只可以投票给一个结点，<strong>得到超过半数</strong>的投票才可成为 Leader，从而保证了一个任期内只会有一个 Leader 产生（Election Safety）。</p><p>在 Raft 中日志只有从 Leader 到 Follower 这一流向，所以需要保证 Leader 的日志必须正确，即必须拥有所有已在多数节点上存在的日志，这一步骤由投票来限制。</p><p>会利用如下规则判断是否投票：</p><ul><li>首先会判断请求的term是否更大，不是则说明是旧消息，拒绝该请求。</li><li>如果任期Term相同，则比较index，index较大则为更加新的日志；如果任期Term不同，term更大的则为更新的消息。如果是更新的消息，则给Candidate投票。</li></ul><p>所以一旦这个节点故障数超过一半则会失效。</p><h3 id="日志同步"><a href="#日志同步" class="headerlink" title="日志同步"></a>日志同步</h3><p>通过上面的Leader选举算法选举出了新Leader之后，就需要所有的follower进行日志同步了。</p><p>Leader选出后，就开始接收客户端的请求。Leader把请求作为日志条目（Log entries）加入到它的日志中，然后并行的向其他服务器发起 <strong>AppendEntries RPC</strong> （RPC细节参见八、Raft算法总结）复制日志条目。当这条日志被复制到大多数服务器上，Leader将这条日志应用到它的状态机并向客户端返回执行结果。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503252210931.png" alt="img"></p><p>Raft日志同步保证如下两点：</p><ul><li>如果不同日志中的两个条目有着相同的索引和任期号，则它们所存储的命令是相同的。</li><li>如果不同日志中的两个条目有着相同的索引和任期号，则它们之前的所有条目都是完全一样的。</li></ul><p>Leader 会给每个 Follower 发送该 RPC 以追加日志，请求中除了当前任期 term、Leader 的 id 和已提交的日志 index，还有将要追加的日志列表（空则成为心跳包），前一个日志的 index 和 term。</p><p>在复制的过程中，Raft会保证如下几点：</p><ul><li><strong>Leader 绝不会覆盖或删除自己的日志，只会追加 （Leader Append-Only）</strong>，成为 Leader 的结点里的日志一定拥有所有已被多数节点拥有的日志条目，所以先前的日志条目很可能已经被提交，因此不可以删除之前的日志。</li><li>如果两个日志的 index 和 term 相同，那么这两个日志相同 （Log Matching），<strong>第二点主要是因为一个任期内只可能出现一个 Leader，而 Leader 只会为一个 index 创建一个日志条目，而且一旦写入就不会修改，因此保证了日志的唯一性。</strong></li><li><strong>如果两个日志相同，那么他们之前的日志均相同</strong>，因为在写入日志时会检查前一个日志是否一致，从而递归的保证了前面的所有日志都一致。从而也保证了当一个日志被提交之后，所有结点在该 index 上提交的内容是一样的（State Machine Safety）。</li></ul><h3 id="安全性保障（核心）"><a href="#安全性保障（核心）" class="headerlink" title="安全性保障（核心）"></a>安全性保障（核心）</h3><p>Raft算法中引入了如下两条规则，来确保了</p><ul><li><strong>已经commit的消息，一定会存在于后续的Leader节点上，并且绝对不会在后续操作中被删除。</strong></li><li>对于并未commit的消息，可能会丢失。</li></ul><h4 id="多数投票规则"><a href="#多数投票规则" class="headerlink" title="多数投票规则"></a>多数投票规则</h4><p>在上面投票环节也有介绍过，一个candidate必须获得集群中的多数投票，才能被选为Leader；而对于每条commit过的消息，它必须是被复制到了集群中的多数节点，也就是说成为Leader的节点，至少有1个包含了commit消息的节点给它投了票。</p><p>而在投票的过程中每个节点都会与candidate比较日志的最后index以及相应的term，如果要成为Leader，必须有更大的index或者更新的term，所以Leader上肯定有commit过的消息。</p><h4 id="提交规则"><a href="#提交规则" class="headerlink" title="提交规则"></a>提交规则</h4><p>上面说到，只要日志在多数结点上存在，那么 Leader 就可以提交该操作。但是<strong>Raft额外限制了 Leader只对自己任期内的日志条目适用该规则，先前任期的条目只能由当前任期的提交而间接被提交。</strong> 也就是说，当前任期的Leader，不会去负责之前term的日志提交，之前term的日志提交，只会随着当前term的日志提交而间接提交。</p><p>这样理解起来还是比较抽象，下面举一个例子，该集群中有S1到S5共5个节点，</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503252222947.png" alt="HIAsDK"></p><ul><li>Raft 的核心安全机制：<ol><li>Leader 只能提交自己 Term 的日志。</li><li>提交新 Term 的日志时，隐式提交所有之前未提交的日志。</li><li>选举约束：只有日志足够新的节点才能成为 Leader。</li></ol></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/shenmingxueIT/article/details/122554106?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522e5516caa8f60dbdaa0e81f77e8f8714d%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=e5516caa8f60dbdaa0e81f77e8f8714d&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122554106-null-null.142%5Ev102%5Epc_search_result_base6&utm_term=Raft&spm=1018.2226.3001.4187">分布式共识算法 —— Raft详解</a></li><li><a href="https://blog.csdn.net/zhousenshan/article/details/137998763">一文彻底搞懂Raft算法，看这篇就够了！！！</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 选举算法 </tag>
            
            <tag> CAP理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-39 Kafka</title>
      <link href="/2025/03/25/75-39%20Kafka/"/>
      <url>/2025/03/25/75-39%20Kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="75-39-Kafka"><a href="#75-39-Kafka" class="headerlink" title="75-39 Kafka"></a>75-39 Kafka</h1><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503251307672.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503251311134.jpeg" alt="img"></p><ul><li><strong><a href="https://zhida.zhihu.com/search?content_id=186455936&content_type=Article&match_order=1&q=Producer&zhida_source=entity">Producer</a></strong>：Producer 即生产者，消息的产生者，是消息的入口</li><li><strong><a href="https://zhida.zhihu.com/search?content_id=186455936&content_type=Article&match_order=1&q=Broker&zhida_source=entity">Broker</a></strong>：Broker 是 kafka 一个实例，每个服务器上有一个或多个 kafka 的实例，简单的理解就是一台 kafka 服务器，<code>kafka cluster</code>表示集群的意思</li><li><strong>Topic</strong>：消息的主题，可以理解为消息队列，kafka的数据就保存在topic。在每个 broker 上都可以创建多个 topic 。</li><li><strong><a href="https://zhida.zhihu.com/search?content_id=186455936&content_type=Article&match_order=1&q=Partition&zhida_source=entity">Partition</a></strong>：Topic的分区，每个 topic 可以有多个分区，分区的作用是做负载，提高 kafka 的吞吐量。<strong>同一个 topic 在不同的分区的数据是不重复的，partition 的表现形式就是一个一个的文件夹</strong>！</li><li><strong><a href="https://zhida.zhihu.com/search?content_id=186455936&content_type=Article&match_order=1&q=Replication&zhida_source=entity">Replication</a></strong>：每一个分区都有多个副本，副本的作用是做备胎，主分区（Leader）会将数据同步到从分区（Follower）。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为 Leader。在kafka中默认副本的最大数量是10个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本</li><li><strong>Message</strong>：每一条发送的消息主体。</li><li><strong>Consumer</strong>：消费者，即消息的消费方，是消息的出口。</li><li><strong><a href="https://zhida.zhihu.com/search?content_id=186455936&content_type=Article&match_order=1&q=Consumer+Group&zhida_source=entity">Consumer Group</a></strong>：我们可以将多个消费组组成一个消费者组，<strong>在 kafka 的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个topic的不同分区的数据，这也是为了提高kafka的吞吐量</strong>！</li><li><strong><a href="https://zhida.zhihu.com/search?content_id=186455936&content_type=Article&match_order=1&q=Zookeeper&zhida_source=entity">Zookeeper</a></strong>：kafka 集群依赖 zookeeper 来保存集群的的元信息，来保证系统的可用性。</li></ul><h2 id="Kafka为什么这么快"><a href="#Kafka为什么这么快" class="headerlink" title="Kafka为什么这么快"></a>Kafka为什么这么快</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503251336613.png" alt="image-20250325133654564"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503251337799.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503251337100.png" alt="img"></p><p>针对消息队列中存在的过程进行了优化，消息队列需要进行持久化（保存消息）、传输消息等过程。那么针对这两个步骤，就可以进行针对的优化，比如我们在持久化的时候，采用顺序写而非随机写，对于操作系统来说，随机写耗时比较长，一方面你需要找到具体的位置然后进行写操作。但是顺序写直接跳过了找到具体位置这一步，所以耗时比较短，在Kafka中是如何实现的顺序写的呢？引入了内存进行缓存，具体技术细节下文进行详细的介绍。</p><p>那么针对消息的发送这一步的优化，因为其消息的传输都是通过网络进行通信的，那么一方面我们可以对传输的消息进行压缩，从而减少其网络传输量，同时在操作系统方面，我们也可以采用零拷贝技术减少其在操作系统中用户态与内核态之间的转换以及多次拷贝的消耗。然后我们也可以批次进行传输，比如等待1s，把这一秒内积累的消息进行传输，从而减少其网络开销与IO操作。</p><p>从上面的四点，我们可以得出Kafka每秒可以处理十几万消息的原因。</p><h2 id="Kafka是如何保证顺序消费的？"><a href="#Kafka是如何保证顺序消费的？" class="headerlink" title="Kafka是如何保证顺序消费的？"></a>Kafka是如何保证顺序消费的？</h2><p>根据上面的结构图，我们可以了解到，Kafka的核心概念包括Topic（主题）和Partition（分区）。每个Topic可以划分为多个Partition，这些Partition分布在Kafka集群的多个Broker上，以实现水平扩展和容错。一个Broker上可能存储多个不同Topic的分区副本。一个Topic可以被<strong>多个消费组（Consumer Group）独立消费</strong>，每个消费组维护自己的消费进度（Offset），从而实现“发布-订阅”模式。</p><p>Kafka生产者通过以下策略将消息发送到Topic的某个分区：</p><ol><li><strong>显式指定分区</strong>：生产者直接指定目标分区。</li><li><strong>按Key哈希</strong>：若未指定分区但消息有Key，则对Key进行哈希（默认Murmur2算法），再对分区数取模，确定目标分区。</li><li><strong>轮询（Round Robin）</strong>：若未指定分区且无Key，则依次轮询所有可用分区。</li></ol><p>Kafka保证<strong>单个分区内的消息顺序性</strong>，即同一分区的消息按写入顺序被消费者读取。要保证全局顺序，需将所有相关消息发送到同一分区（例如通过固定Key）。</p><p>Kafka通过以下机制确保顺序消费：</p><ol><li><strong>分区单消费者</strong>：同一消费组中，一个分区只能被一个消费者实例独占消费，避免并发读取导致乱序。</li><li><strong>顺序写入</strong>：生产者向分区追加消息时，保证写入顺序；消费者按Offset顺序读取。</li></ol><p>PS：所以通过以上了解，Kafka可以保证同一分区内顺序消费，但是不保证分区之间顺序消费。</p><h2 id="Kafka是如何保证消息不丢失的？"><a href="#Kafka是如何保证消息不丢失的？" class="headerlink" title="Kafka是如何保证消息不丢失的？"></a>Kafka是如何保证消息不丢失的？</h2><p>基本原理：</p><ol><li><strong>消息写入到日志文件</strong>：Kafka 中的消息首先被追加写入到一个称为日志（Log）的文件中。这个日志文件是一个持久化的、有序的、不可修改的消息记录。、</li><li><strong>磁盘存储</strong>：一旦消息写入到日志文件中，就会被存储在磁盘上。这样即使 Kafka 服务发生故障、Broker 重启，消息数据仍然可以从磁盘上加载并重新构建。</li><li><strong>消息索引</strong>：为了快速检索消息，Kafka 维护了一个消息索引。这个索引存储了每个分区中消息的偏移量和物理位置，使得 Kafka 能够快速定位和检索消息。</li><li><strong>复制和 ISR</strong>：为了进一步提高可靠性，Kafka 支持消息的复制。每个分区的消息可以有多个副本，它们分布在不同的 Broker 上。ISR（In-Sync Replica）机制确保了 Leader 和 Follower 之间的数据同步，保障了消息的持久性。</li></ol><p>当 Producer 发送消息到 Kafka Broker 时，这些消息首先被追加写入到一个称为日志文件的数据文件中。每个主题（Topic）的分区都有一个对应的日志文件。</p><p>消息的写入是顺序的，新的消息会被追加到已有的日志文件的末尾。这种顺序写入方式对于磁盘的性能是友好的，也确保了消息在磁盘上的存储是有序的。</p><p>对于每个分区，Kafka 维护一个或多个日志文件。每个日志文件中存储的消息都有一个唯一的偏移量，用于标识消息在分区中的位置。</p><p>随着时间的推移或者达到一定大小，日志文件会发生滚动（Roll），即新的消息开始写入到一个新的日志文件中。这确保了日志文件的大小是可控的。</p><p>日志文件被进一步划分为日志段（Log Segment）。一个日志段包含了一定范围内的消息，从某个偏移量开始，到下一个滚动点或者文件结尾为止。</p><p>日志段的引入使得 Kafka 能够更有效地管理磁盘空间。当一个日志段变为不再活跃（已经过期或者被复制到其他 Broker）时，它可以被删除或归档。</p><p>每个日志段都有一个保留时间（TTL）或保留大小。当日志段达到这个保留时间或保留大小时，它就可以被删除。这确保了 Kafka 的磁盘空间被有效地管理。</p><p>Kafka 使用日志段的索引来快速定位和检索消息。索引存储了每条消息的偏移量和物理位置，确保了消息的快速检索。</p><p>简单一句话，在Kafka中通过日志来保证其持久化，以便其不会丢失消息。每一个分区会维护一个文件夹，在该文件夹下会存在三种类型的日志文件，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503251652645.png" alt="在这里插入图片描述"></p><p>同时为了避免日志文件过大导致其IO操作过于耗时，所以Kafka采用了分段日志的形式来解决一个日志文件过长的问题。</p><h2 id="Kafka的确认机制与RocketMQ确认机制有什么区别"><a href="#Kafka的确认机制与RocketMQ确认机制有什么区别" class="headerlink" title="Kafka的确认机制与RocketMQ确认机制有什么区别"></a>Kafka的确认机制与<strong>RocketMQ</strong>确认机制有什么区别</h2><ul><li>ACK&#x3D;0：这是最不可靠的模式。生产者在发送消息后不会等待来自服务器的确认。这意味着消息可能会在发送之后丢失，而生产者将无法知道它是否成功到达服务器。</li><li>ACK&#x3D;1：这是默认模式，也是一种折衷方式。在这种模式下，生产者会在消息发送后等待来自分区领导者（leader）的确认，但不会等待所有副本（replicas）的确认。这意味着只要消息被写入分区领导者，生产者就会收到确认。如果分区领导者成功写入消息，但在同步到所有副本之前宕机，消息可能会丢失。</li><li>ACK&#x3D;-1：这是最可靠的模式。在这种模式下，生产者会在消息发送后等待所有副本的确认。只有在所有副本都成功写入消息后，生产者才会收到确认。这确保了消息的可靠性，但会导致更长的延迟。</li></ul><p>这是应为Kafka天然的为集群而设计的，其设计之初就为了保证高可用采用了集群的形式。其生产者发送Kafka消息的时候，其会由Kafka的leader节点进行持久化操作，但是也会对其副本进行持久化操作。那么针对这几种情况就有了其ACK确认的三种形式。</p><p>RocketMQ 提供了三种消息发送方式：同步发送、异步发送和单向发送： </p><ul><li>同步发送：是指消息发送方发出一条消息后，会在收到服务端同步响应之后才发下一条消息的通讯方式。应用场景非常广泛，例如重要通知邮件、报名短信通知、营销短信系统等。</li><li>异步发送：是指发送方发出一条消息后，不等服务端返回响应，接着发送下一条消息的通讯方式，但是需要实现异步发送回调接口（SendCallback）。消息发送方在发送了一条消息后，不需要等待服务端响应即可发送第二条消息。发送方通过回调接口接收服务端响应，并处理响应结果。适用于链路耗时较长，对响应时间较为敏感的业务场景，例如，视频上传后通知启动转码服务，转码完成后通知推送转码结果等。 </li><li>单向发送：发送方只负责发送消息，不等待服务端返回响应且没有回调函数触发，即只发送请求不等待应答。此方式发送消息的过程耗时非常短，一般在微秒级别。适用于某些耗时非常短，但对可靠性要求并不高的场景，例如日志收集。</li></ul><h2 id="Kafka一定不会存在消息丢失吗"><a href="#Kafka一定不会存在消息丢失吗" class="headerlink" title="Kafka一定不会存在消息丢失吗"></a>Kafka一定不会存在消息丢失吗</h2><p>KafkaBroker 集群接收到数据后会将数据进行持久化存储到磁盘，为了提高吞吐量和性能，采用的是「<strong>异步批量刷盘的策略</strong>」，也就是说按照一定的消息量和间隔时间进行刷盘。首先会将数据存储到 「<strong>PageCache</strong>」 中，至于什么时候将 Cache 中的数据刷盘是由「<strong>操作系统</strong>」根据自己的策略决定或者调用 fsync 命令进行强制刷盘，如果此时 Broker 宕机 Crash 掉，且选举了一个落后 Leader Partition 很多的 Follower Partition 成为新的 Leader Partition，那么落后的消息数据就会丢失。</p><blockquote><p><strong>痛点</strong>：</p><ul><li><strong>运维复杂度高</strong>：需独立维护ZooKeeper集群，增加运维负担。</li><li><strong>性能瓶颈</strong>：ZooKeeper的写性能限制了Kafka集群规模（如百万级分区场景）。</li><li><strong>脑裂风险</strong>：网络分区时，ZooKeeper和Kafka Controller可能状态不一致。</li><li><strong>扩展性差</strong>：ZooKeeper集群规模受限（通常3-5节点），而Kafka集群可扩展至数百节点。</li></ul></blockquote><h2 id="Kafka选择使用raft协议实现zraft代替zk"><a href="#Kafka选择使用raft协议实现zraft代替zk" class="headerlink" title="Kafka选择使用raft协议实现zraft代替zk"></a>Kafka选择使用raft协议实现zraft代替zk</h2><p>是的，Kafka引入<strong>KRaft模式</strong>（即Kafka Raft Metadata模式，简称KRaft）的核心目标之一正是为了<strong>消除Kafka对ZooKeeper的强依赖</strong>，将元数据管理和集群协调功能完全内化到Kafka自身中。这是Kafka社区近年来最重要的架构演进之一，解决了ZooKeeper带来的复杂性和性能瓶颈问题。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在2025年3月18日宣布发布Apache Kafka 4.0.0版本，Apache Kafka 4.0.0 是 Kafka的一个重要里程碑，标志着其架构的重大转变。标志着第一个完全不使用Apache ZooKeeper的主要版本，默认运行在KRaft模式下，简化了Kafka的部署和管理。<strong>消除了维护单独ZooKeeper集成的复杂性</strong>。这一更改显著降低了运营开销，增强了可扩展性，并简化了管理任务</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>KRaft模式通过<strong>内嵌Raft共识算法</strong>，将元数据管理和集群协调功能转移到Kafka自身，完全去除了ZooKeeper。</p><h4 id="1-元数据分区（Metadata-Topic）"><a href="#1-元数据分区（Metadata-Topic）" class="headerlink" title="1. 元数据分区（Metadata Topic）"></a>1. <strong>元数据分区（Metadata Topic）</strong></h4><blockquote><ul><li><strong>元数据存储</strong>：Topic、分区、Broker、消费者组等元数据。</li><li><strong>集群协调</strong>：Controller选举、Broker注册、分区Leader选举等。</li><li><strong>分布式锁</strong>：保障操作的原子性。</li></ul></blockquote><ul><li>Kafka使用一个特殊的内部Topic（<code>__cluster_metadata</code>）存储所有元数据。</li><li>该Topic由<strong>Raft协议</strong>管理，通过多个Kafka节点（称为Controller节点）组成Raft集群，负责元数据的读写和复制。</li></ul><h4 id="2-Controller角色的进化"><a href="#2-Controller角色的进化" class="headerlink" title="2. Controller角色的进化"></a>2. <strong>Controller角色的进化</strong></h4><ul><li><strong>传统模式</strong>：单个Active Controller（依赖ZooKeeper选举）。</li><li><strong>KRaft模式</strong>：多个Controller节点组成Raft集群，通过选举产生Leader Controller，其他节点作为Follower。</li><li><strong>职责</strong>：元数据管理、Broker注册、分区Leader选举等，全部由Raft协议保障一致性。</li></ul><h4 id="3-Raft协议的作用"><a href="#3-Raft协议的作用" class="headerlink" title="3. Raft协议的作用"></a>3. <strong>Raft协议的作用</strong></h4><ul><li><strong>日志复制</strong>：元数据变更以日志形式复制到所有Controller节点。</li><li><strong>Leader选举</strong>：Raft协议自动处理Controller Leader故障转移。</li><li><strong>安全性</strong>：保证元数据操作的强一致性（线性一致性）。</li></ul><h3 id="Kafka-4-0-0版本更新特性"><a href="#Kafka-4-0-0版本更新特性" class="headerlink" title="Kafka 4.0.0版本更新特性"></a>Kafka 4.0.0版本更新特性</h3><h4 id="KIP-996：预投票机制"><a href="#KIP-996：预投票机制" class="headerlink" title="KIP-996：预投票机制"></a>KIP-996：预投票机制</h4><p>KRaft模式下，节点可能因瞬时网络问题（如 GC 暂停）误判领导者失联，触发不必要的选举，导致：</p><ol><li>集群波动：频繁领导者切换影响吞吐量</li><li>元数据竞争：多个节点同时发起选举引发脑裂风险</li></ol><p>预投票机制原理</p><ol><li><p>预投票阶段：</p></li><li><p>节点感知领导者失联后，先向其他节点发送预投票请求（携带自身日志最新偏移量）</p></li></ol><p>接收节点检查请求者日志是否足够新（避免落后副本成为领导者）</p><p>正式选举：</p><ul><li><p>仅当获得多数预投票认可后，节点才发起正式选举</p></li><li><p>否则进入冷却期（election.backoff.ms）</p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://kafka1x.apachecn.org/intro.html">Kafka官方文档</a></li><li><a href="https://blog.csdn.net/qq_32828253/article/details/110732652">Kafka 设计架构原理详细解析（超详细图解）</a></li><li><a href="https://blog.csdn.net/Mrxiao_bo/article/details/136545326">深入了解Kafka的数据持久化机制</a></li><li><a href="https://blog.csdn.net/qq_42651904/article/details/146379501">Apache Kafka 4.0正式发布，首个默认KRaft模式运行，移除单独维护Zookeeper降低复杂性</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-37 虚拟线程</title>
      <link href="/2025/03/22/75-37%20%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/"/>
      <url>/2025/03/22/75-37%20%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="75-37-虚拟线程"><a href="#75-37-虚拟线程" class="headerlink" title="75-37 虚拟线程"></a>75-37 虚拟线程</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 虚拟线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-36 适配器模式</title>
      <link href="/2025/03/22/75-36%20%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/03/22/75-36%20%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="75-36-适配器模式"><a href="#75-36-适配器模式" class="headerlink" title="75-36 适配器模式"></a>75-36 适配器模式</h1><h2 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h2><p>适配器模式是一种结构型设计模式，它允许将不兼容的对象转换成可兼容的接口。主要目的是解决在不改变现有代码的情况下，<strong>使不兼容的接口之间能够正常工作</strong>，通过创建一个中间转换的适配器来将一个对象转换成我们所需要的接口。</p><h2 id="角色组成"><a href="#角色组成" class="headerlink" title="角色组成"></a>角色组成</h2><ul><li><strong>目标接口（target）</strong>：需要适配的标准接口。</li><li><strong>源对象（source）</strong>：需要被适配的不兼容对象。</li><li><strong>适配器对象（adapter）</strong>：充当中间转换角色，该对象将源对象转换成目标接口。</li></ul><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><ul><li>当需要使用一个现存的类，但它提供的接口与我们系统的接口不兼容，而我们还不能修改它时</li><li>当多个团队独立开发系统的各功能模块，然后组合在一起，但由于某些原因事先不能确定接口时。（别和我说这不可能，这太tm可能了）</li></ul><p>首先我们需要确定一下我们需要兼容的目标接口，比如就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String tag,String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们需要使用的一个新的日志功能，且我们还是需要使用原来的日志接口，但是这两个并不兼容，且我们不能直接修改原有接口的代码的情况下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NbLogger</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">d</span><span class="params">(<span class="type">int</span> priority, String message, Object ... obj)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体提供日志功能的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NbLoggerImp</span> <span class="keyword">implements</span> <span class="title class_">NbLogger</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">d</span><span class="params">(<span class="type">int</span> priority, String message, Object... obj)</span> &#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;牛逼logger记录:%s&quot;</span>,message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们就需要引入一个适配器类，来中和这两个不兼容的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAdapter</span> <span class="keyword">implements</span> <span class="title class_">LogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> NbLogger nbLogger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogAdapter</span><span class="params">(NbLogger nbLogger)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nbLogger = nbLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String tag, String message)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(nbLogger);</span><br><span class="line">        nbLogger.d(<span class="number">1</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-35 动态代理</title>
      <link href="/2025/03/21/75-35%20JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2025/03/21/75-35%20JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="75-35-动态代理"><a href="#75-35-动态代理" class="headerlink" title="75-35 动态代理"></a>75-35 动态代理</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JDK 动态代理的提出背景是为了解决 <strong>代码侵入性</strong> 和 <strong>横切关注点（Cross-Cutting Concerns）的复用问题</strong>，核心是让开发者能够在不修改原始代码的前提下，<strong>动态地为对象添加额外的逻辑</strong>。</p><p>就比如现在我们有一段公用逻辑，这段逻辑需要出现在大量的方法处理之前或者之后等其他情况下，在没有动态代理的情况下，我们需要硬编码再代码中，一方面耦合度非常高，且代码重复度也很高，没有做到代码复用。所以我们就想，是否可以把这段公用的逻辑代码提取出来，然后在需要的方法开头或者结尾或者等情况下进行动态的把这段代码编入进行，自动化的！诶没错，这就涉及到动态代理了。</p><p>那么什么是动态代理呢？</p><h2 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h2><p>动态代理（Dynamic Proxy）是一种在 <strong>运行时动态生成代理对象</strong> 的技术，它允许开发者在不修改原始代码的前提下，<strong>透明地为目标对象添加额外的功能</strong>（如日志、事务、权限校验等）。其核心思想是通过“<strong>代理对象</strong>”在<strong>调用者</strong>和<strong>实际对象</strong>之间插入一层间接层，从而实现对目标方法的统一增强或拦截。</p><h2 id="动态代理的核心价值"><a href="#动态代理的核心价值" class="headerlink" title="动态代理的核心价值"></a>动态代理的核心价值</h2><ol><li><strong>解耦业务逻辑与通用逻辑</strong><br>将日志、事务等横切关注点（Cross-Cutting Concerns）从业务代码中剥离，实现功能模块的<strong>高内聚、低耦合</strong>。</li><li><strong>避免代码重复</strong><br>通用逻辑（如权限校验）只需编写一次，即可通过代理应用到多个对象的方法上。</li><li><strong>动态扩展性</strong><br>运行时按需生成代理对象，无需预定义代理类，适合框架或库的设计（如 Spring AOP）。</li></ol><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503212344748.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代理模式是给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问，起到对代理对象已有功能的增强。</span><br><span class="line">代理模式是一种结构型设计模式。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503212348962.png" alt="image-20250321234830921">。</p><h2 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h2><p>动态代理这个思想的实现在JDK中有两种实现方式，JDK动态代理和CGLIB动态代理。下面来分别对其原理进行介绍。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>JDK原生动态代理的组成分为三个部分： <code>抽象主题角色</code> 、 <code>真实主题角色</code> 、 <code>增强主题角色</code> 。</p><p>1、定义抽象主题角色接口 <code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、定义真实主题角色类 <code>UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行UserService.select()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行UserService.update()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、定义增加主题角色类 <code>LogHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 用于存储真实的被代理对象</span></span><br><span class="line">    Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 真实方法执行前的增强</span></span><br><span class="line">        before(method.getName());</span><br><span class="line">        <span class="comment">// 真实方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        after(method.getName());</span><br><span class="line">        <span class="comment">// 真实方法执行后的增强</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] 准备开始执行%s方法%n&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] %s方法方法执行结束%n&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编写客户端（其中有生产JDK原生动态代理的核心代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化被代理对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">targetInstance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取被代理对象的类加载器，用作生成代理对象的必要参数</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> targetInstance.getClass().getClassLoader();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取被代理对象的实现接口，用作生成代理对象的必要参数</span></span><br><span class="line">        <span class="comment">// 方法映射就是基于这个参数实现的</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = targetInstance.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取被代理对象的增强主题类，用作生成代理对象的必要参数</span></span><br><span class="line">        <span class="type">LogHandler</span> <span class="variable">logHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogHandler</span>(targetInstance);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代理对象的核心代码！！！！</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (UserService)Proxy.newProxyInstance(classLoader, interfaces, logHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用代理对象执行方法</span></span><br><span class="line">        proxyInstance.select();</span><br><span class="line">        System.out.println();</span><br><span class="line">        proxyInstance.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>在上面的 4.1 JDK原生动态代理 模块中，我们知道动态代理的实现是基于接口实现的。本章我们将介绍 CGLIB动态代理 ，CGLIB 实现动态代理的方式与 JDK 代理略有区别，<strong>CGLIB 是基于继承实现的动态代理</strong>，CGLIB 会生成一个动态代理子类，这个子类需要重写被代理对象的所有非 finanl 方法，在子类中采用方法拦截的技术拦截所有的父类方法调用，顺势织入横切逻辑。</p><p>在介绍基于 CGLIB 实现动态代理之前，我想先说一下实现动态代理需要实现的几个模块：</p><p>首先，我们需要一个被代理对象（普通类，不要求需要实现什么接口）；</p><p>其次，我们需要编写一个增强类（我们需要代理的目的就是为了实现对原本方法的增强），所有的增强逻辑都基于它来实现，增强类需要实现 CGLIB 的 MethodInterceptor接口，并重写其中唯一一个方法 intercept，后面操作就可 JDK 的动态代理类似了，基于intercept 方法区执行被代理类的方法，并在方法执行前后完成对被代理方法的增强；<br>最后，我们需要基于 CGLIB 的对象生成目标对象的被代理对象。</p><p>编写一个被代理对象 <code>UserService</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行UserService.select()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行UserService.update()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写对被代理对象的增强类 <code>LogInterceptor</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           表示要增强的对象（被代理对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      表示被拦截的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects     表示参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 表示对连接方法的代理,invokeSuper方法表示对被代理对象方法的调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 前置增强</span></span><br><span class="line">        before(method.getName());</span><br><span class="line">        <span class="comment">// 调用被实际方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">        <span class="comment">// 后置增强</span></span><br><span class="line">        after(method.getName());</span><br><span class="line">        <span class="comment">// 返回实际对象的结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] 准备开始执行%s方法%n&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), methodName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s] %s方法方法执行结束%n&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成代理对象并执行代理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Enhancer 为 CGLIB 代理增强类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 设置被代理类（父类），以便 CGLIB 去生成该类的子类</span></span><br><span class="line">        enhancer.setSuperclass(UserService.class);</span><br><span class="line">        <span class="comment">// 你可以认为是设置增强方法</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">LogInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代理对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) enhancer.create();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行代理方法</span></span><br><span class="line">        proxy.select();</span><br><span class="line">        System.out.println();</span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/m0_45067620/article/details/136176227?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522c0529b0413d06540ab7a90e11aa2fd76%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=c0529b0413d06540ab7a90e11aa2fd76&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-136176227-null-null.142%5Ev102%5Epc_search_result_base6&utm_term=%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86&spm=1018.2226.3001.4187">【Java】万字解读Java的动态代理（JDK原生动态代理、CGLIB动态代理）</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-34 限流&amp;降级&amp;熔断机制</title>
      <link href="/2025/03/20/75-34%20%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2025/03/20/75-34%20%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="75-34-限流-降级-熔断机制"><a href="#75-34-限流-降级-熔断机制" class="headerlink" title="75-34 限流&amp;降级&amp;熔断机制"></a>75-34 限流&amp;降级&amp;熔断机制</h1><h2 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h2><p>熔断机制（Circuit Breaker）是一种保护系统稳定性的重要手段。它的主要目的是防止系统在依赖的服务出现问题时，继续发送请求，从而保护系统免受进一步的影响。熔断机制通过监控请求的成功和失败率，在检测到故障率超过预设阈值时，自动切换到熔断状态，停止对故障服务的请求。熔断状态一段时间后，再尝试恢复服务的调用。</p><p><strong>熔断机制是一种有效的保护系统的方法，尤其是在依赖外部服务时。通过合理的熔断配置，可以避免系统因为外部服务故障而陷入崩溃状态，从而提升系统的稳定性和可靠性。</strong></p><h3 id="熔断的三种状态"><a href="#熔断的三种状态" class="headerlink" title="熔断的三种状态"></a>熔断的三种状态</h3><ol><li>闭合状态：正常状态下，所有请求都会被发送到依赖服务，监控请求的成功和失败情况。</li><li>断开状态：当故障率超过阈值时，熔断器进入断开状态，此时，所有请求都会立即失败或返回备用方案，而不会发送到依赖服务。</li><li>半开状态：在断开状态保持一段时间后，熔断器尝试恢复部分请求，如果部分请求成功，则恢复到闭合状态；如果仍然失败，则回到断开状态。</li></ol><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>降级是当系统负载过高时，主动关闭一些非核心功能，以确保核心功能的正常运行。一般用于在系统资源有限或响应时间过长时，通过降低服务质量保障核心服务。</p><p>举例来说，双十一期间，淘宝上面会把退款功能关闭，这就是一种降级手段，<strong>通过把一些非核心功能降级掉来保证核心功能可用</strong>。或者在某次腾讯视频挂了的时候用户名称默认显示腾讯用户，这也是一种降级方式，用兜底名称做展示。</p><p>降级可以在客户端，也可以在服务端，比如关闭部分非核心功能的话，可以直接把入口关掉，及服务端直接下掉入口。也可以客户端直接返回兜底逻辑，不做业务逻辑处理起到降级的目的。</p><h3 id="降级方式"><a href="#降级方式" class="headerlink" title="降级方式"></a>降级方式</h3><ol><li><strong>延迟服务</strong>：比如发表了评论，重要服务，比如在文章中显示正常，但是延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行。</li><li><strong>在粒度范围内关闭服务</strong>：比如关闭相关文章的推荐，直接关闭推荐区。</li><li><strong>页面异步请求降级</strong>：比如商品详情页上有推荐信息&#x2F;配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；</li><li><strong>写降级</strong>：比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将 DB降级为Cache。</li><li><strong>读降级</strong>：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景；</li></ol><h3 id="降级的介入方式"><a href="#降级的介入方式" class="headerlink" title="降级的介入方式"></a>降级的介入方式</h3><p>降级的介入方式一般分为：自动开关降级和人工开关降级；</p><h4 id="自动开关降级"><a href="#自动开关降级" class="headerlink" title="自动开关降级"></a>自动开关降级</h4><p>自动开关降级的方式一般是当系统达到某些设定的条件（系统负载、资源使用情况、SLA等指标）之后，自动执行一些策略。</p><ol><li>服务超时；</li><li>失败次数；</li><li>发生故障；</li><li>限流降级；</li></ol><h4 id="手动开关降级"><a href="#手动开关降级" class="headerlink" title="手动开关降级"></a>手动开关降级</h4><p>还有一种降级方式，那就是人工开关降级。</p><p>人工开关降级是指当系统维护人员在发现系统异常之后，通过人工修改参数、关闭服务等方式进行降级的方法。</p><p>这种方式的好处是比较灵活，能够根据异常情况灵活应对，但弊端是对人的要求比较高，一来需要维护人员对系统有足够的了解，另外要求维护人员在系统异常时能够在第一时间进行处置。</p><p>还有一种情况，可能也会人工介入，那就是在大促之前，预估到流量会十分巨大，提早的识别出风险，为了节省资源保证主流程的可用，开发人员可以手动将某个功能降级掉。</p><p>这里说的人工开关降级，并不一定是要人工操作，也可能是人工通过一个定时任务进行定时触发的。</p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>限流的是控制系统的并发流量，通过限制请求流量的手段防止过度的流量导致系统崩溃。一般用于应对突发流量高峰。</p><p>一般是被调用方对调用方进行限流。举个例子，我提供了一个查询用户信息服务，给集团内外的很多调用方使用，但是我为了保证我的可用性，我会对每个调用方做限流，防止某个调用方不守规矩，把我的服务打挂了。</p><h3 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h3><p>常见的限流算法有：</p><ol><li><strong>漏桶算法（常用）</strong>：系统请求先进入漏桶，再从漏桶中逐一取出请求执行，控制漏桶的流量。</li><li><strong>令牌桶算法（常用）</strong>：系统请求会得到一个令牌，从令牌桶中取出一个令牌执行，控制令牌桶中令牌的数量。</li><li><strong>计数器算法（简单）</strong>：系统请求被计数，通过比较当前请求数与限流阈值来判断是否限流。</li><li><strong>可以阻塞算法</strong>：当系统达到限流阈值时，不再接受新请求，等到限流阈值降下来再接受请求。</li><li><strong>令牌环算法</strong>：与令牌桶算法类似，但是在多个令牌桶之间形成环形结构，以便在不同的请求处理速率之间进行平衡。</li><li><strong>最小延迟算法</strong>：基于预测每个请求的处理时间，并在处理完请求后进行延迟，以控制请求的速率。</li><li><strong>滑动窗口（常用）</strong>：基于一个固定大小的时间窗口，允许在该时间窗口内的请求数不超过设定的阈值。这个时间窗口随着时间的推移不断滑动，以适应不同时间段内的请求流量。</li></ol><h2 id="降级限流熔断工具"><a href="#降级限流熔断工具" class="headerlink" title="降级限流熔断工具"></a>降级限流熔断工具</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503201617184.png" alt="image-20250320161720094"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/weixin_44046545/article/details/139815722?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-139815722.142%5Ev102%5Epc_search_result_base6&spm=1018.2226.3001.4187">服务器雪崩的应对策略之—-熔断机制</a></li><li><a href="https://blog.csdn.net/qq_38196449/article/details/141467150?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522cef494cf816ec4e4a5e5b9cf4ad7c777%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=cef494cf816ec4e4a5e5b9cf4ad7c777&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-141467150-null-null.142%5Ev102%5Epc_search_result_base6&utm_term=%E7%86%94%E6%96%AD%E5%92%8C%E9%99%90%E6%B5%81%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">【通俗易懂】限流、降级、熔断有什么区别？</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 熔断 </tag>
            
            <tag> 降级 </tag>
            
            <tag> 限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-33 OAuth2</title>
      <link href="/2025/03/19/75-33%20OAuth2/"/>
      <url>/2025/03/19/75-33%20OAuth2/</url>
      
        <content type="html"><![CDATA[<h1 id="75-33-OAuth2实现SSO"><a href="#75-33-OAuth2实现SSO" class="headerlink" title="75-33 OAuth2实现SSO"></a>75-33 OAuth2实现SSO</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503191942929.webp" alt="image"></p><p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p><p>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reactor模式 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80-06 时序小记</title>
      <link href="/2025/03/11/80-06%20%E6%97%B6%E5%BA%8F%E5%B0%8F%E8%AE%B0/"/>
      <url>/2025/03/11/80-06%20%E6%97%B6%E5%BA%8F%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="80-06-时序小记"><a href="#80-06-时序小记" class="headerlink" title="80-06 时序小记"></a>80-06 时序小记</h1><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><h3 id="Jupyter使用"><a href="#Jupyter使用" class="headerlink" title="Jupyter使用"></a>Jupyter使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 激活你的conda环境（关键步骤！）</span></span><br><span class="line">conda activate news</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装ipykernel（必须在当前环境中安装）</span></span><br><span class="line">pip install ipykernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将当前环境写入Jupyter内核（注意参数替换）</span></span><br><span class="line">python -m ipykernel install --user --name news --display-name <span class="string">&quot;News Environment&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 验证是否成功（应看到新内核）</span></span><br><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-32 Reactor模式</title>
      <link href="/2025/03/11/75-32%20Reactor%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/03/11/75-32%20Reactor%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="75-32-Reactor模式"><a href="#75-32-Reactor模式" class="headerlink" title="75-32 Reactor模式"></a>75-32 Reactor模式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111510898.png" alt="image-20250311151016857"></p><p>Reactor 是事件驱动模型的一种实现。</p><p>这种模式下，IO 读写线程、业务线程工作时，必有数据可操作执行，不会在 IO 等待上浪费资源，这便是事件驱动的核心思想。</p><p>举个简单例子，10个士兵接到命令，在接下来将执行秘密任务，但具体时间待定；一种方式时，这10个士兵自己掌握主动权，隔一段时间就会自己询问将军是否准备执行任务，这种模式比较低下，因为士兵需要花很多精力自己去确认任务执行时间，同时也会耽搁自己的训练时间。</p><p>另一种方式为，士兵接到即将执行秘密任务的通知后，会自己做好准备随时执行，在最终执行命名没下达之前，会继续自己的日常训练；等需要执行任务时，将军会立刻通知士兵们立即行动；很显然，这种模式，士兵们的时间资源并没有浪费。这便是事件驱动的优势所在。</p><p><code>Reactor 模型</code>的核心便是<code>事件驱动</code>，同时，为了让其网络 IO 层拥有了高性能的能力，一般会采用 IO 多路复用处理方案。</p><p>Reactor 模式由 Reactor 线程、Handlers 处理器两大角色组成，两大角色的职责分别如下：</p><ul><li>Reactor 线程的职责：主要负责<strong>连接建立</strong>、<strong>监听IO事件</strong>、<strong>IO事件读写</strong>以及将<strong>事件分发到Handlers 处理器</strong>。</li><li>Handlers 处理器（业务处理）的职责：非阻塞的执行业务处理逻辑。</li></ul><p><strong>I&#x2F;O 多路复用监听事件，收到事件后，根据事件类型分配（Dispatch）给某个进程 &#x2F; 线程</strong>。</p><h2 id="单Reactor单进程-线程"><a href="#单Reactor单进程-线程" class="headerlink" title="单Reactor单进程&#x2F;线程"></a>单Reactor单进程&#x2F;线程</h2><p>一般来说，C 语言实现的是「单 Reactor 单进程」的方案，因为 C 语编写完的程序，运行后就是一个独立的进程，不需要在进程中再创建线程。 </p><p>而 Java 语言实现的是「单 Reactor 单线程」的方案，因为 Java 程序是跑在 Java 虚拟机这个进程上面的，虚拟机中有很多线程，我们写的 Java 程序只是其中的一个线程而已。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111535205.png" alt="image-20250311153557135"></p><p>可以看到进程里有 Reactor、Acceptor、Handler 这三个对象： </p><ul><li>Reactor 对象的作用是监听和分发事件；</li><li>Acceptor 对象的作用是获取连接；</li><li>Handler 对象的作用是处理业务；</li></ul><p>接下来，介绍下「单 Reactor 单进程」这个方案： </p><ul><li>Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型；</li><li>如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；</li><li>如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应； </li><li>Handler 对象通过 read -&gt; 业务处理 -&gt; send 的流程来完成完整的业务流程。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>但是，这种方案存在 2 个缺点： </p><ul><li>第一个缺点，因为只有一个进程，无法充分利用 多核 CPU 的性能； </li><li>第二个缺点，Handler 对象在业务处理时，整个进程是无法处理其他连接的事件的，如果业务处理耗时比较长，那么就造成响应的延迟；</li></ul><p>所以，单 Reactor 单进程的方案不适用计算机密集型的场景，只适用于业务处理非常快速的场景。</p><h2 id="单-Reactor-多线程-多进程"><a href="#单-Reactor-多线程-多进程" class="headerlink" title="单 Reactor 多线程 &#x2F; 多进程"></a>单 Reactor 多线程 &#x2F; 多进程</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111540345.png" alt="image-20250311154030266"></p><p>详细说一下这个方案：</p><ul><li>Reactor 对象通过 select （IO 多路复用接口） 监听事件，收到事件后通过 dispatch 进行分发，具体分发给 Acceptor 对象还是 Handler 对象，还要看收到的事件类型； </li><li>如果是连接建立的事件，则交由 Acceptor 对象进行处理，Acceptor 对象会通过 accept 方法 获取连接，并创建一个 Handler 对象来处理后续的响应事件；</li><li>如果不是连接建立事件， 则交由当前连接对应的 Handler 对象来进行响应；</li></ul><p>上面的三个步骤和单 Reactor 单线程方案是一样的，接下来的步骤就开始不一样了： </p><ul><li>Handler 对象不再负责业务处理，只负责数据的接收和发送，Handler 对象通过 read 读取到数据后，会将数据发给子线程里的 Processor 对象进行业务处理； </li><li>子线程里的 Processor 对象就进行业务处理，处理完后，将结果发给主线程中的 Handler 对象，接着由 Handler 通过 send 方法将响应结果发送给 client；</li></ul><p>另外，「单 Reactor」的模式还有个问题，因为一个 Reactor 对象承担所有事件的监听和响应，而且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。</p><h2 id="多-Reactor-多进程-线程"><a href="#多-Reactor-多进程-线程" class="headerlink" title="多 Reactor 多进程 &#x2F; 线程"></a>多 Reactor 多进程 &#x2F; 线程</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111544085.png" alt="image-20250311154403011"></p><p>大名鼎鼎的两个开源软件 Netty 和 Memcache 都采用了「多 Reactor 多线程」的方案。</p><h2 id="Proactor"><a href="#Proactor" class="headerlink" title="Proactor"></a>Proactor</h2><p>前面提到的 Reactor 是非阻塞同步网络模式，而 Proactor 是异步网络模式。</p><p>先再来回顾一下非阻塞IO和异步IO。</p><p>阻塞IO</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111546540.png" alt="image-20250311154659489"></p><p>非阻塞IO</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111547822.png" alt="image-20250311154710766"></p><p>异步IO</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111547883.png" alt="image-20250311154752831"></p><p>因此，Reactor 可以理解为「来了事件操作系统通知应用进程，让应用进程来处理」，而 Proactor 可以理解为「来了事件操作系统来处理，处理完再通知应用进程」。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111548593.png" alt="image-20250311154836536"></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reactor模式 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-31 TLB</title>
      <link href="/2025/03/09/75-31%20TLB/"/>
      <url>/2025/03/09/75-31%20TLB/</url>
      
        <content type="html"><![CDATA[<h1 id="75-31-TLB"><a href="#75-31-TLB" class="headerlink" title="75-31 TLB"></a>75-31 TLB</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091400589.png" alt="image-20250309140033533"></p><p>虚拟地址转化为物理地址是通过内存管理单元（Memory Management Unit，MMU）来完成的。MMU是计算机系统中的硬件组件，负责虚拟地址和物理地址之间的转换。</p><p>在虚拟地址转换的过程中，通常会使用页表（Page Table）来进行映射。页表是一种数据结构，它将虚拟地址空间划分为固定大小的页（Page），对应于物理内存中的页框（Page Frame）。每个页表项（Page Table Entry）记录了虚拟页和物理页的对应关系。</p><p> 当程序访问一个虚拟地址时，MMU会将虚拟地址分解为页号和页内偏移量。然后，MMU会查找页表，根据页号找到对应的页表项。页表项中包含了物理页的地址或页框号。最后，MMU将物理页的地址与页内偏移量组合，得到对应的物理地址。 </p><p>虚拟地址转化为物理地址的过程中，还可能涉及到多级页表、<strong>TLB（Translation Lookaside Buffer）缓存等机制</strong>，以提高地址转换的效率。</p><h2 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h2><p>CPU通过MMU来获取虚拟地址所对应的物理地址，并根据物理地址获取到其对应的值。<strong>TLB缓存的就是部分热点虚拟地址所对应的物理地址</strong>。</p><p>当一个<strong>TLB 缓存的虚拟页</strong>被**换出到 swap（硬盘）*<em>后，TLB 和页表需要进行相应处理，以确保地址转换的正确性，否则 CPU 可能会访问到*<em>已经不存在的物理地址</em></em>，导致数据错误。</p><p>当操作系统决定<strong>将页换出</strong>到 <strong>swap</strong>，它必须保证 TLB 里不再缓存这个虚拟地址的旧映射，否则：</p><ul><li>CPU 可能继续访问 TLB 里的旧数据，进而访问一个<strong>已经被释放的物理地址</strong>，导致内存错误。</li><li>可能导致新的进程错误地使用了这个被换出的物理页。</li></ul><p>当<strong>某个页被换出到 swap</strong>，系统会执行：</p><ol><li><strong>清除 TLB 缓存</strong>（避免进程错误访问）。</li><li><strong>修改页表</strong>（记录该页在 swap 位置，标记为无效）。</li><li><strong>触发缺页异常</strong>（如果进程后续访问，需要从 swap 恢复）。</li></ol><p>这一机制保证了 <strong>操作系统能够正确管理虚拟内存，即使物理内存不足，也能安全高效运行进程</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-29 快速幂</title>
      <link href="/2025/03/06/75-29%20%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2025/03/06/75-29%20%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h1 id="75-29-快速幂"><a href="#75-29-快速幂" class="headerlink" title="75-29 快速幂"></a>75-29 快速幂</h1><h3 id="快速幂简介"><a href="#快速幂简介" class="headerlink" title="快速幂简介"></a><strong>快速幂简介</strong></h3><p>快速幂（<strong>Exponentiation by Squaring</strong>）是一种高效计算 <strong>a^b % p</strong>（a 的 b 次幂对 p 取模）的算法。它的核心思想是 <strong>利用二进制分解指数，减少乘法次数，从而优化时间复杂度</strong>，从 O(b) 降低到 O(log b)。</p><hr><h3 id="快速幂的核心思想"><a href="#快速幂的核心思想" class="headerlink" title="快速幂的核心思想"></a><strong>快速幂的核心思想</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503062105329.png" alt="image-20250306210518259"></p><hr><h3 id="示例：计算-2¹³"><a href="#示例：计算-2¹³" class="headerlink" title="示例：计算 2¹³"></a><strong>示例：计算 2¹³</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503062105859.png" alt="image-20250306210536820"></p><hr><h3 id="快速幂的用途"><a href="#快速幂的用途" class="headerlink" title="快速幂的用途"></a><strong>快速幂的用途</strong></h3><ol><li><strong>大数计算</strong>：当 a 和 b 非常大时，使用普通幂计算会导致指数爆炸，而快速幂能够有效降低计算量。</li><li><strong>取模运算</strong>：许多问题涉及 <strong>大数取模</strong>（如 <strong>a^b % p</strong>），使用快速幂可以避免中间结果溢出。</li><li><strong>密码学</strong>：RSA 加密等算法中，涉及大数的幂运算，快速幂是其核心优化技巧之一。</li><li><strong>数学竞赛 &amp; 算法竞赛</strong>：快速幂是一个常见的算法基础，可以用来高效解决涉及幂运算的计算题。</li></ol><hr><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a><strong>Python 实现</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fast_pow</span>(<span class="params">a, b, mod</span>):</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    base = a % mod  <span class="comment"># 先取模，防止溢出</span></span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b &amp; <span class="number">1</span>:  <span class="comment"># 如果 b 是奇数</span></span><br><span class="line">            res = (res * base) % mod</span><br><span class="line">        base = (base * base) % mod  <span class="comment"># 计算 base^2</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>  <span class="comment"># b 右移，相当于 b // 2</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="built_in">print</span>(fast_pow(<span class="number">2</span>, <span class="number">13</span>, <span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>))  <span class="comment"># 8192</span></span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ol><li><strong>快速幂利用指数的二进制表示，减少不必要的乘法</strong>。</li><li><strong>时间复杂度是 O(log b)，远优于普通幂的 O(b)</strong>。</li><li><strong>应用广泛，尤其适用于大数取模计算</strong>。</li></ol><p>这样，你就能在面试或者算法竞赛中高效地使用快速幂了！🚀</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-29 快速幂</title>
      <link href="/2025/03/06/75-30%20%E5%80%8D%E5%A2%9E%E6%B3%95/"/>
      <url>/2025/03/06/75-30%20%E5%80%8D%E5%A2%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="75-30-倍增法"><a href="#75-30-倍增法" class="headerlink" title="75-30 倍增法"></a>75-30 倍增法</h1><h2 id="倍增思想举例"><a href="#倍增思想举例" class="headerlink" title="倍增思想举例"></a>倍增思想举例</h2><p>A、B两点之间相隔若干单位为1的距离，如何从最快地从A走到B？</p><p>朴素的想法是：因为A B之间距离未知，只能从A开始试探性走1步、走2步、……看看走多少步能到达B，这样的时间复杂度是o(n)的。当然这样是不够高效（耗时间）。</p><p>实际上可以只记录走1,2,4,8,16步能到达的地方</p><p>从A出发：若跳8个格子（超过B了，放弃）</p><p>​         若跳4个格子（超过B了，放弃）</p><p>​         若跳2个格子（没超过B，可以跳）</p><p>​         若跳1个格子（没超过B，可以跳）</p><p>​    其中关键的思想是：它绝对不会连着跳两步都是跳相同的格子数，例如：如果跳两次2个格子都是可行的话，那么它干嘛不直接跳4个格子呢？依此类推。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-28 Zset</title>
      <link href="/2025/03/05/75-28%20Zset/"/>
      <url>/2025/03/05/75-28%20Zset/</url>
      
        <content type="html"><![CDATA[<h1 id="75-28-Zset"><a href="#75-28-Zset" class="headerlink" title="75-28 Zset"></a>75-28 Zset</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有序集合 Zset 与 普通集合 Set 类似 , 都是 没有重复元素的集合 ;</p><p>有序集合 Zset 中的 元素排序 , 是 根据 评分 进行排序 , 每个成员 都关联了一个 评分 , 在该 有序集合 中 , 根据 评分 由低到高 进行排序 ;</p><p>Zset 中的元素 是 不可重复的 , 但是 元素 关联 的 评分 是可以重复的 , 也就是说 存在 两个不同的元素 关联着 相同的 评分 ;</p><p>Zset 中的元素 是 有序 的 , 根据 排序的索引 或者 元素的评分 可以获取 指定范围 的 成员 ; 如 : 获取 中间元素 ;</p><h2 id="查询-Zset-所有数据"><a href="#查询-Zset-所有数据" class="headerlink" title="查询 Zset 所有数据"></a>查询 Zset 所有数据</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503052241930.png" alt="image-20250305224135855"></p><p>其它请详看：<a href="https://blog.csdn.net/shulianghan/article/details/129106569">【Redis】Redis 有序集合 Zset 操作 ( 简介 | 查询操作 | 增加操作 | 删除操作 | 修改操作 )</a></p><h2 id="可以使用Redis的Zset来实现Redis的延时消息"><a href="#可以使用Redis的Zset来实现Redis的延时消息" class="headerlink" title="可以使用Redis的Zset来实现Redis的延时消息"></a>可以使用Redis的Zset来实现Redis的延时消息</h2><p>Redis可以通过使用zset（有序集合）来实现延时消息功能。具体来说，可以将消息的发送时间作为score，消息内容作为value存储在zset中，然后通过轮询zset，检查当前时间是否达到消息的发送时间，来实现延时消息的投递。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Zset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-27 跳表</title>
      <link href="/2025/03/05/75-27%20%E8%B7%B3%E8%A1%A8/"/>
      <url>/2025/03/05/75-27%20%E8%B7%B3%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="75-27-跳表"><a href="#75-27-跳表" class="headerlink" title="75-27 跳表"></a>75-27 跳表</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503052235042.png" alt="image-20250305223557957"></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>基于二分查找，复杂度为O(log n)；</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 跳表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-26 MVCC多版本并发控制</title>
      <link href="/2025/03/04/75-26%20MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/2025/03/04/75-26%20MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="75-26-MVCC多版本并发控制"><a href="#75-26-MVCC多版本并发控制" class="headerlink" title="75-26 MVCC多版本并发控制"></a>75-26 MVCC多版本并发控制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MVCC ，也就是多版本并发控制，是为了在<a href="https://so.csdn.net/so/search?q=%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE&spm=1001.2101.3001.7020">读取数据</a>时不加锁来提高读取效率和并发性的一种手段。</p><p><a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">数据库</a>并发有以下几种场景：</p><ul><li>读-读：不存在任何问题。</li><li>读-写：有线程安全问题，可能出现脏读、幻读、不可重复读。</li><li>写-写：有线程安全问题，可能存在更新丢失等。</li></ul><p>MVCC 解决的就是读写时的线程安全问题，线程不用去争抢<strong>读写锁</strong>。</p><p>MVCC 允许多个事务<strong>并发执行</strong>，同时避免加锁带来的性能问题。其本质是<strong>通过维护数据的多个版本</strong>，让事务可以“看到”不同的历史数据版本，从而实现<strong>非阻塞读</strong>。</p><p>在 MySQL 的 <code>InnoDB</code> 存储引擎中，MVCC 主要用于 <strong><code>READ COMMITTED</code></strong> 和 <strong><code>REPEATABLE READ</code></strong> 两个隔离级别。</p><p>当一个事务要对数据库中的数据进行修改时，<strong>MVCC 会为该事务创建一个数据快照</strong>，而不是直接修改实际的数据行。</p><blockquote><p>在 MySQL 的 <strong>InnoDB 存储引擎</strong>中，快照通过 <strong>Undo Log</strong> 来实现。每次数据更新时，InnoDB 会保存旧版本的数据，并通过指针来链式存储这些旧版本数据，从而形成数据的版本链。</p><ul><li><strong>Undo Log</strong> 记录的是事务对数据所做修改前的状态（旧值），事务提交后，InnoDB 将会清理这些快照数据。</li><li>对于读操作，事务通过 <strong>Read View</strong> 来判断是否能够读取某个版本的数据，并确定是否读取 Undo Log 中的旧数据。</li></ul></blockquote><h2 id="MVCC简单介绍"><a href="#MVCC简单介绍" class="headerlink" title="MVCC简单介绍"></a>MVCC简单介绍</h2><p>1、读操作（SELECT）：</p><p>当一个事务执行读操作时，它会使用快照读取。快照读取是基于事务开始时数据库中的状态创建的，因此事务不会读取其他事务尚未提交的修改。具体工作情况如下：</p><ul><li>对于读取操作，事务会查找符合条件的数据行，并选择符合其事务开始时间的数据版本进行读取。</li><li>如果某个数据行有多个版本，事务会选择不晚于其开始时间的最新版本，确保事务只读取在它开始之前已经存在的数据。</li><li>事务读取的是快照数据，因此其他并发事务对数据行的修改不会影响当前事务的读取操作。</li></ul><p>2、写操作（INSERT、UPDATE、DELETE）：</p><p>当一个事务执行写操作时，它会生成一个新的数据版本，并将修改后的数据写入数据库。具体工作情况如下：</p><ul><li>对于写操作，事务会为要修改的数据行创建一个新的版本，并将修改后的数据写入新版本。</li><li>新版本的数据会带有当前事务的版本号，以便其他事务能够正确读取相应版本的数据。</li><li>原始版本的数据仍然存在，供其他事务使用快照读取，这保证了其他事务不受当前事务的写操作影响。</li></ul><p>3、事务提交和回滚：</p><ul><li>当一个事务提交时，它所做的修改将成为数据库的最新版本，并且对其他事务可见。</li><li>当一个事务回滚时，它所做的修改将被撤销，对其他事务不可见。</li></ul><p>4、版本的回收：</p><p>为了防止数据库中的版本无限增长，MVCC 会定期进行版本的回收。回收机制会删除已经不再需要的旧版本数据，从而释放空间。</p><p>MVCC 通过创建数据的多个版本和使用快照读取来实现并发控制。读操作使用旧版本数据的快照，写操作创建新版本，并确保原始版本仍然可用。这样，不同的事务可以在一定程度上并发执行，而不会相互干扰，从而提高了数据库的并发性能和数据一致性。</p><p>在 MySQL 中，MVCC 主要依赖 <strong>Undo Log</strong>（回滚日志）和 <strong>Read View</strong>（快照视图） 来实现。</p><table><thead><tr><th align="center">组件</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>Undo Log</strong></td><td align="center">记录数据修改前的旧版本，支持 MVCC 快照读和事务回滚</td></tr><tr><td align="center"><strong>Read View</strong></td><td align="center">事务读取时，记录<strong>活跃事务 ID 列表</strong>，确保事务只能看到<strong>符合 MVCC 规则</strong>的数据</td></tr><tr><td align="center"><strong>Redo Log</strong></td><td align="center">记录数据修改后的新版本（事务提交后用于崩溃恢复，但与 MVCC 关系不大）</td></tr><tr><td align="center"><strong>Binlog</strong></td><td align="center">归档日志，用于主从复制（和 MVCC 关系不大）</td></tr></tbody></table><h2 id="一致性非锁定读和锁定读"><a href="#一致性非锁定读和锁定读" class="headerlink" title="一致性非锁定读和锁定读"></a>一致性非锁定读和锁定读</h2><h3 id="一致性非锁定读"><a href="#一致性非锁定读" class="headerlink" title="一致性非锁定读"></a>一致性非锁定读</h3><p>对于 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-consistent-read.html"><strong>一致性非锁定读（Consistent Nonlocking Reads）</strong></a>的实现，通常做法是加一个版本号或者时间戳字段，在更新数据的同时版本号 + 1 或者更新时间戳。查询时，将当前可见的版本号与对应记录的版本号进行比对，如果记录的版本小于可见版本，则表示该记录可见</p><p>在 <code>InnoDB</code> 存储引擎中，<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html">多版本控制 (multi versioning)</a> 就是对非锁定读的实现。如果读取的行正在执行 <code>DELETE</code> 或 <code>UPDATE</code> 操作，这时读取操作不会去等待行上锁的释放。相反地，<code>InnoDB</code> 存储引擎会去读取行的一个快照数据，对于这种读取历史数据的方式，我们叫它快照读 (snapshot read)</p><p>在 <code>Repeatable Read</code> 和 <code>Read Committed</code> 两个隔离级别下，如果是执行普通的 <code>select</code> 语句（不包括 <code>select ... lock in share mode</code> ,<code>select ... for update</code>）则会使用 <code>一致性非锁定读（MVCC）</code>。并且在 <code>Repeatable Read</code> 下 <code>MVCC</code> 实现了可重复读和防止部分幻读</p><h3 id="锁定读"><a href="#锁定读" class="headerlink" title="锁定读"></a>锁定读</h3><p>如果执行的是下列语句，就是 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking-reads.html"><strong>锁定读（Locking Reads）</strong></a></p><ul><li><code>select ... lock in share mode</code></li><li><code>select ... for update</code></li><li><code>insert</code>、<code>update</code>、<code>delete</code> 操作</li></ul><p>在锁定读下，读取的是数据的最新版本，这种读也被称为 <code>当前读（current read）</code>。锁定读会对读取到的记录加锁：</p><ul><li><code>select ... lock in share mode</code>：对记录加 <code>S</code> 锁，其它事务也可以加<code>S</code>锁，如果加 <code>x</code> 锁则会被阻塞</li><li><code>select ... for update</code>、<code>insert</code>、<code>update</code>、<code>delete</code>：对记录加 <code>X</code> 锁，且其它事务不能加任何锁</li></ul><p>在一致性非锁定读下，即使读取的记录已被其它事务加上 <code>X</code> 锁，这时记录也是可以被读取的，即读取的快照数据。上面说了，在 <code>Repeatable Read</code> 下 <code>MVCC</code> 防止了部分幻读，这边的 “部分” 是指在 <code>一致性非锁定读</code> 情况下，只能读取到第一次查询之前所插入的数据（根据 Read View 判断数据可见性，Read View 在第一次查询时生成）。但是！如果是 <code>当前读</code> ，每次读取的都是最新数据，这时如果两次查询中间有其它事务插入数据，就会产生幻读。所以， **<code>InnoDB</code> 在实现<code>Repeatable Read</code> 时，如果执行的是当前读，则会对读取的记录使用 <code>Next-key Lock</code> ，来防止其它事务在间隙间插入数据。</p><h2 id="InnoDB-对-MVCC-的实现"><a href="#InnoDB-对-MVCC-的实现" class="headerlink" title="InnoDB 对 MVCC 的实现"></a>InnoDB 对 MVCC 的实现</h2><p><code>MVCC</code> 的实现依赖于：<strong>隐藏字段、Read View、undo log</strong>。在内部实现中，<code>InnoDB</code> 通过数据行的 <code>DB_TRX_ID</code> 和 <code>Read View</code> 来判断数据的可见性，如不可见，则通过数据行的 <code>DB_ROLL_PTR</code> 找到 <code>undo log</code> 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 <code>Read View</code> 之前已经提交的修改和该事务本身做的修改。</p><h3 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h3><p>在内部，<code>InnoDB</code> 存储引擎为每行数据添加了三个 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html">隐藏字段</a>：</p><ul><li><code>DB_TRX_ID（6字节）</code>：表示最后一次插入或更新该行的事务 id。此外，<code>delete</code> 操作在内部被视为更新，只不过会在记录头 <code>Record header</code> 中的 <code>deleted_flag</code> 字段将其标记为已删除</li><li><code>DB_ROLL_PTR（7字节）</code> 回滚指针，指向该行的 <code>undo log</code> 。如果该行未被更新，则为空</li><li><code>DB_ROW_ID（6字节）</code>：如果没有设置主键且该表没有唯一非空索引时，<code>InnoDB</code> 会使用该 id 来生成聚簇索引。</li></ul><h3 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReadView</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  trx_id_t m_low_limit_id;      <span class="comment">/* 大于等于这个 ID 的事务均不可见 */</span></span><br><span class="line"></span><br><span class="line">  trx_id_t m_up_limit_id;       <span class="comment">/* 小于这个 ID 的事务均可见 */</span></span><br><span class="line"></span><br><span class="line">  trx_id_t m_creator_trx_id;    <span class="comment">/* 创建该 Read View 的事务ID */</span></span><br><span class="line"></span><br><span class="line">  trx_id_t m_low_limit_no;      <span class="comment">/* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */</span></span><br><span class="line"></span><br><span class="line">  ids_t m_ids;                  <span class="comment">/* 创建 Read View 时的活跃事务列表 */</span></span><br><span class="line"></span><br><span class="line">  m_closed;                     <span class="comment">/* 标记 Read View 是否 close */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041829179.png" alt="trans_visible"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 事务 </tag>
            
            <tag> MVCC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-25 MySQL事务隔离等级</title>
      <link href="/2025/03/04/75-25%20MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%AD%89%E7%BA%A7/"/>
      <url>/2025/03/04/75-25%20MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%AD%89%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="75-25-MySQL事务隔离等级"><a href="#75-25-MySQL事务隔离等级" class="headerlink" title="75-25 MySQL事务隔离等级"></a>75-25 MySQL事务隔离等级</h1><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li><strong>读未提交</strong>：最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读。</strong></li><li><strong>读已提交</strong>：允许读取并发事务已经提交的数据，可以阻止脏读，但是<strong>幻读</strong>或<strong>不可重复读</strong>仍有可能发生。</li><li><strong>可重复读</strong>：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li><li><strong>可串行化</strong>：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读，但是并发性不行。</strong></li></ul><h2 id="脏写"><a href="#脏写" class="headerlink" title="脏写"></a>脏写</h2><p>因为在MySQL中存在行级锁，所以在MySQL中是不存在脏写这种情况的。</p><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>脏读其本质就是因为一个事务读取到了另一个事务还未提交的数据，如果另一个事务回滚了，就会导致其两次读取的数据不一致。</p><p><strong>脏读的本质</strong>是<strong>一个事务读取了另一个未提交事务修改的数据</strong>，但这个事务可能会<strong>回滚</strong>，导致读取到的数据是<strong>无效的（即“脏数据”）</strong>。</p><p>事务读取了<strong>错误的数据</strong>，但后续业务逻辑<strong>已经基于这个错误数据执行了某些操作</strong>，这会导致数据错误传播，甚至影响业务决策。</p><p>那么读未提交会导致脏读这一问题就清晰了起来。</p><p>在 读未提交的隔离级别下，事务 2 在事务 1 <strong>未提交前</strong> 就能读到它修改的数据。而 <strong>如果应用层没有额外的锁机制</strong>，可能会导致以下情况：</p><ol><li>事务 1 扣减了 3 件库存，<strong>但还未提交</strong>（数据库里还是 <code>5</code>，事务内部暂时变成 <code>2</code>）。</li><li>事务 2 读取到<strong>仍然是 <code>5</code></strong>，因为事务 1 还没提交。</li><li>然后事务一提交成功，数据库显示为2；</li><li>事务 2 也尝试购买 3 件，导致库存变成 <code>2 - 3 = -1</code>。</li><li>事务 1 提交后，最终库存就变成了<strong>负数</strong>（超卖）。</li></ol><p>读已提交可以解决脏读这个问题。</p><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p>不可重复读问题的本质是指在一个事务中，多次读取同一个数据结果数据不一致，从而导致的问题。</p><p>其实这个问题你说是问题也不一定就是什么大问题。因为这取决于你自己想要数据库是什么样子的，如果你希望看到的场景是不可重复读，也就是事务 A 在执行期间多次查询一条数据，每次都可以查到其它已经提交的事务修改过的值，那么就是不可重复读，如果你希望这样子，那也没问题。</p><p>如果你期望的是可重复读，但是数据库表现的是不可重复读，让你事务 A 执行期间多次查到的值都不一样，都的问题是别的提交过的事务修改过的，那么此时你就可以认为，数据库有问题，这个问题就是「不可重复读」。</p><p>隔离等级：可重复读解决了这个问题，但还是可能导致幻读问题。</p><p>通过MVCC可以解决不可重复读问题。</p><h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p>幻读本质指的是在一个事务中，多次查询数据量结果不一致，比如第一次查询到了10条，第二次查询到了11条数据。</p><p>简单来说，你一个事务 A，先发送一条 SQL 语句，里面有一个条件，要查询一批数据出来，如 <code>SELECT * FROM table WHERE id &gt; 10</code>。然后呢，它一开始查询出来了 10 条数据。接着这个时候，别的事务 B往表里插了几条数据，而且事务 B 还提交了，此时多了几行数据。</p><p>幻读就是你一个事务用一样的 SQL 多次查询，结果每次查询都会发现查到一些之前没看到过的数据。注意，幻读特指的是你查询到了之前查询没看到过的数据。此时说明你是幻读了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/150107974">大白话讲解脏写、脏读、不可重复读和幻读</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-24 MySQL日志</title>
      <link href="/2025/03/03/75-24%20MySQL%E6%97%A5%E5%BF%97/"/>
      <url>/2025/03/03/75-24%20MySQL%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="75-24-MySQL日志"><a href="#75-24-MySQL日志" class="headerlink" title="75-24 MySQL日志"></a>75-24 MySQL日志</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MySQL中的日志主要用于<strong>数据恢复、性能优化、问题排查</strong>等。它们分为几类，每种日志都有不同的作用。主要包括：</p><ol><li><strong>错误日志（Error Log）</strong></li><li><strong>通用查询日志（General Query Log）</strong></li><li><strong>慢查询日志（Slow Query Log）</strong></li><li><strong>二进制日志（Binary Log, Binlog）</strong></li><li><strong>事务日志（Redo Log &amp; Undo Log）</strong></li><li><strong>中继日志（Relay Log）</strong></li></ol><p>其中比较重要的日志有：<strong>二进制日志</strong>、<strong>事务日志（Redo Log &amp; Undo Log）</strong>。</p><p>对于MySQL中的日志，其日志的主要作用牢牢抓住数据恢复、性能优化和问题排查。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503032346671.png" alt="image-20250303234614620"></p><h2 id="Redo-Log"><a href="#Redo-Log" class="headerlink" title="Redo Log"></a>Redo Log</h2><p>redo log（重做日志）是 InnoDB 存储引擎独有的，它让 MySQL 拥有了崩溃恢复能力。</p><p>比如 MySQL 实例挂了或宕机了，重启时，InnoDB 存储引擎会使用 redo log 恢复数据，保证数据的持久性与完整性。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503032358239.png" alt="img"></p><p>MySQL中的数据是以页为基本单位进行操作的，如果在执行一条SQL语句时，MySQL会先将符合的那一页加载到Buffer Pool中。那么如果后续还执行这同样的SQL，那么MySQL则会优先在Buffer Pool中进行查找，同样的如果是更新，也会优先在Buffer Pool中查询后进行更新。</p><p>这里也同样是内存中和硬盘中的存取速度不一致导致的一些问题，为了解决这些问题，所以MySQL设计在内存（也就是InnoDB设计了一个Redo Log Buffer）任何的插入或者更新操作都会优先的写入这个Redo Log Buffer中，但是这里是内存中，如果这时候宕机了如何。且内存中并不支持持久化，所以需要按照一定的规则把Redo Pool Buffer中的刷新到硬盘中（Redo Log），我们也称这这操作为刷屏操作，那么刷盘时机几种情况呢。</p><h3 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h3><p>InnoDB 刷新重做日志的时机有几种情况：</p><p>InnoDB 将 redo log 刷到磁盘上有几种情况：</p><ol><li>事务提交：当事务提交时，log buffer 里的 redo log 会被刷新到磁盘（可以通过<code>innodb_flush_log_at_trx_commit</code>参数控制，后文会提到）。</li><li>log buffer 空间不足时：log buffer 中缓存的 redo log 已经占满了 log buffer 总容量的大约一半左右，就需要把这些日志刷新到磁盘上。</li><li>事务日志缓冲区满：InnoDB 使用一个事务日志缓冲区（transaction log buffer）来暂时存储事务的重做日志条目。当缓冲区满时，会触发日志的刷新，将日志写入磁盘。</li><li>Checkpoint（检查点）：InnoDB 定期会执行检查点操作，将内存中的脏数据（已修改但尚未写入磁盘的数据）刷新到磁盘，并且会将相应的重做日志一同刷新，以确保数据的一致性。</li><li>后台刷新线程：InnoDB 启动了一个后台线程，负责周期性（每隔 1 秒）地将脏页（已修改但尚未写入磁盘的数据页）刷新到磁盘，并将相关的重做日志一同刷新。</li><li>正常关闭服务器：MySQL 关闭的时候，redo log 都会刷入到磁盘里去。</li></ol><p>总之，InnoDB 在多种情况下会刷新重做日志，以保证数据的持久性和一致性。</p><p>Redo Log日志主要是为了保证MySQL崩溃后可以进行数据恢复，从而可以保证恢复后的数据与崩溃之前的数据一致性。</p><ul><li><strong>Redo Log 不是基于 SQL 语句的，而是基于物理页的变更记录。</strong></li><li><strong>Redo Log 可能在事务提交之前就被写入磁盘，但事务提交后才标记为持久化。</strong></li><li><strong>Redo Log 主要用于崩溃恢复，而不是用于回滚（回滚是通过 Undo Log 实现的）。</strong></li></ul><p><code>Redo Log</code> 是<strong>物理级别的日志</strong>，记录的是“<strong>某个数据页的某个位置修改了什么</strong>”，而<strong>不是 SQL 语句</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041530356.png" alt="img"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>那么通过上面的了解学习，为什么在MySQL进行了一个SQL操作时，找到了对于的数据页并知道了需要对该数据页的哪些进行何种操作的话，为什么 MySQL 不直接写数据，而是先写 Redo Log？</p><p>因为 <strong>Redo Log 是顺序写入，磁盘 IO 更高效</strong>（相比之下，直接写数据是随机 IO，性能较差）。</p><p>事务执行时，直接写入 <code>Redo Log</code>，然后再通过后台线程慢慢将数据刷入数据页，提高了系统的吞吐量。</p><h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><p><strong>redo log 它是物理日志</strong>，记录内容是“在某个数据页上做了什么修改”，属于 InnoDB 存储引擎。</p><p><strong>而 binlog 是逻辑日志</strong>，记录内容是语句的原始逻辑，类似于“给 ID&#x3D;2 这一行的 c 字段加 1”，属于<code>MySQL Server</code> 层。</p><p>不管用什么存储引擎，<strong>只要发生了表数据更新，都会产生 binlog 日志。</strong></p><p>binlog日志会记录下所有SQL相关操作，其属于MySQL服务层，而Redo log属于MySQL的存储引擎，且是物理日志。binlog日志一般会用来做数据同步，可以说 MySQL 数据库的<strong>数据备份、主备、主主、主从</strong>都离不开 binlog，需要依靠 binlog 来同步数据，保证数据一致性。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041544842.png" alt="img"></p><p>binlog 会记录所有涉及更新数据的逻辑操作，并且是<strong>顺序写</strong>。</p><blockquote><h3 id="1-什么是顺序写？"><a href="#1-什么是顺序写？" class="headerlink" title="1. 什么是顺序写？"></a><strong>1. 什么是顺序写？</strong></h3><p>在 MySQL 中，**顺序写（Sequential Write）**指的是数据按照**连续的物理地址**写入存储设备（通常是磁盘或 SSD）。顺序写数据时，磁头（对于机械硬盘）或者 Flash 控制器（对于 SSD）<strong>可以直接按顺序写入数据块，而不需要频繁地寻找新的存储位置</strong>。</p><p>在 <strong>binlog（Binary Log，二进制日志）</strong> 中，<strong>顺序写</strong>意味着：</p><ul><li><strong>事务执行后，MySQL 会将变更记录按顺序追加到 Binlog 文件的末尾</strong>，而不会频繁跳跃到磁盘的不同位置去写数据。</li><li>Binlog <strong>不会进行随机修改，而是一次性地追加新的日志记录</strong>，直到达到设定的 binlog 文件大小（由 <code>max_binlog_size</code> 控制），然后 MySQL 会创建新的 binlog 文件继续记录。</li></ul><hr><h3 id="2-顺序写的反面是什么？"><a href="#2-顺序写的反面是什么？" class="headerlink" title="2. 顺序写的反面是什么？"></a><strong>2. 顺序写的反面是什么？</strong></h3><p>顺序写的反面是 <strong>随机写（Random Write）</strong>。<br><strong>随机写</strong>指的是数据<strong>写入磁盘上的不同位置</strong>，而不是按照顺序追加。例如：</p><ul><li>当我们修改数据库的某个数据页时，如果数据存储的位置不连续，就会触发磁盘的<strong>随机 IO</strong>，需要磁头<strong>跳转到不同的物理位置</strong>写入数据。</li></ul><p>在 MySQL 里，<strong>数据页的修改（如 InnoDB 表的数据变更）通常涉及随机写</strong>：</p><ul><li>MySQL 需要在磁盘上的<strong>不同物理位置</strong>修改数据。</li><li>如果数据页未加载到缓冲池（Buffer Pool），需要额外的磁盘读取（即“读-修改-写”模式）。</li><li>这就导致了<strong>磁盘的随机 IO 负担较大</strong>。</li></ul></blockquote><h3 id="记录格式"><a href="#记录格式" class="headerlink" title="记录格式"></a>记录格式</h3><p>binlog 日志有三种格式，可以通过<code>binlog_format</code>参数指定。</p><ul><li><strong>statement</strong></li><li><strong>row</strong></li><li><strong>mixed</strong></li></ul><p>指定<code>statement</code>，记录的内容是<code>SQL</code>语句原文，比如执行一条<code>update T set update_time=now() where id=1</code>，记录的内容如下。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041557544.png" alt="img"></p><p>同步数据时，会执行记录的<code>SQL</code>语句，但是有个问题，<code>update_time=now()</code>这里会获取当前系统时间，直接执行会导致与原库的数据不一致。</p><p>为了解决这种问题，我们需要指定为<code>row</code>，记录的内容不再是简单的<code>SQL</code>语句了，还包含操作的具体数据，记录内容如下。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041558013.png" alt="img"></p><p><code>row</code>格式记录的内容看不到详细信息，要通过<code>mysqlbinlog</code>工具解析出来。</p><p><code>update_time=now()</code>变成了具体的时间<code>update_time=1627112756247</code>，条件后面的@1、@2、@3 都是该行数据第 1 个~3 个字段的原始值（<strong>假设这张表只有 3 个字段</strong>）。</p><p>这样就能保证同步数据的一致性，通常情况下都是指定为<code>row</code>，这样可以为数据库的恢复与同步带来更好的可靠性。</p><p>但是这种格式，需要更大的容量来记录，比较占用空间，恢复与同步时会更消耗 IO 资源，影响执行速度。</p><p>所以就有了一种折中的方案，指定为<code>mixed</code>，记录的内容是前两者的混合。</p><p>MySQL 会判断这条<code>SQL</code>语句是否可能引起数据不一致，如果是，就用<code>row</code>格式，否则就用<code>statement</code>格式。</p><h3 id="写入机制"><a href="#写入机制" class="headerlink" title="写入机制"></a>写入机制</h3><p>binlog 的写入时机也非常简单，事务执行过程中，先把日志写到<code>binlog cache</code>，事务提交的时候，再把<code>binlog cache</code>写到 binlog 文件中。</p><p>对于这里binlog的写入情况与Redo log写入机制差不多，在这里也引入了一个binlog cache，用来缓解内存与硬盘之间数据读取速度不匹配的矛盾。</p><p>但是因为一个事务具有原子性，其应当是不可拆分的，所以无论这个事务有多大，其应一次性写入binlog中，所以系统会为每个线程分配一个块内存来作为binlog cache。</p><blockquote><p>MySQL <strong>即使是执行一条简单的 SQL 语句</strong>，在 <strong>InnoDB</strong> 存储引擎下，也会<strong>以事务的方式执行</strong>，但具体情况取决于 SQL 语句的类型和 <code>autocommit</code> 设置。</p><ul><li><strong>在 MySQL 8.0 中，默认启用了 <code>autocommit=1</code>，即自动提交模式</strong>。</li><li><strong>如果 <code>autocommit=1</code>，那么每一条 SQL 语句都会被视为一个事务，并在执行完成后立即提交</strong>，写入 binlog（如果开启了 binlog）。</li><li><strong>如果 <code>autocommit=0</code>，则 SQL 语句执行后不会立即提交，需要手动 <code>COMMIT</code>，否则事务可能会回滚（ROLLBACK）。</strong></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041603989.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041605520.png" alt="img"></p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p><strong>redo log（重做日志）让 InnoDB 存储引擎拥有了崩溃恢复能力。</strong></p><p><strong>binlog（归档日志）保证了 MySQL 集群架构的数据一致性。</strong></p><p>虽然它们都属于持久化的保证，但是侧重点不同。</p><p>在执行更新语句过程，会记录 redo log 与 binlog 两块日志，以基本的事务为单位，redo log 在事务执行过程中可以不断写入，而 binlog 只有在提交事务时才写入，所以 redo log 与 binlog 的写入时机不一样。</p><blockquote><p>我们结合 <strong>一个简单的例子</strong> 来说明这一过程。</p><hr><h2 id="1-示例：MySQL-事务执行过程"><a href="#1-示例：MySQL-事务执行过程" class="headerlink" title="1. 示例：MySQL 事务执行过程"></a><strong>1. 示例：MySQL 事务执行过程</strong></h2><p>假设你在 MySQL 里执行以下事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;  <span class="comment">-- 开启事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;  <span class="comment">-- 提交事务</span></span><br></pre></td></tr></table></figure><p>这个事务的作用是：</p><ul><li><strong>从 ID&#x3D;1 的账户中扣除 100 元</strong></li><li><strong>向 ID&#x3D;2 的账户中增加 100 元</strong></li><li><strong>最后提交事务，确保这两步修改要么全部生效，要么全部不生效</strong></li></ul><p>在 <strong>事务的执行过程中，MySQL 需要保证数据的可靠性和恢复能力</strong>，所以它会写两种日志：</p><ul><li><strong>Redo Log（重做日志）</strong>：用于崩溃恢复，保证数据持久化到磁盘，即使宕机也能恢复数据。</li><li><strong>Binlog（二进制日志）</strong>：用于主从复制和数据恢复，记录事务的逻辑操作。</li></ul><hr><h2 id="2-Redo-Log-和-Binlog-在事务中的写入时机"><a href="#2-Redo-Log-和-Binlog-在事务中的写入时机" class="headerlink" title="2. Redo Log 和 Binlog 在事务中的写入时机"></a><strong>2. Redo Log 和 Binlog 在事务中的写入时机</strong></h2><h3 id="【Step-1】开始事务"><a href="#【Step-1】开始事务" class="headerlink" title="【Step 1】开始事务"></a><strong>【Step 1】开始事务</strong></h3><ul><li><strong>MySQL 解析 <code>BEGIN;</code>，事务开始</strong></li><li><strong>此时，Redo Log 和 Binlog 里都没有任何内容</strong></li></ul><hr><h3 id="【Step-2】执行第一个-UPDATE-语句"><a href="#【Step-2】执行第一个-UPDATE-语句" class="headerlink" title="【Step 2】执行第一个 UPDATE 语句"></a><strong>【Step 2】执行第一个 <code>UPDATE</code> 语句</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>MySQL 执行这条语句后，修改的是 InnoDB 的数据页</strong>（假设数据页原本在 Buffer Pool 中）。</li><li><strong>此时，MySQL 需要记录该修改，以便宕机时能够恢复，因此会写入 Redo Log Buffer（Redo Log 先写入内存）。</strong></li><li><strong>但是 Binlog 并不会立即写入，而是先放到 Binlog Cache 中，并不会立即落盘。</strong></li></ul><p>✅ <strong>Redo Log（物理日志）</strong>：</p><ul><li>记录 <strong>“账户 1 余额减少 100 元”</strong> 的物理变更。</li><li><strong>可以随时写入</strong>（即使事务还没提交）。</li></ul><p>❌ <strong>Binlog（逻辑日志）</strong>：</p><ul><li><strong>不会立即写入 binlog，而是等到事务提交时再一次性写入。</strong></li></ul><hr><h3 id="【Step-3】执行第二个-UPDATE-语句"><a href="#【Step-3】执行第二个-UPDATE-语句" class="headerlink" title="【Step 3】执行第二个 UPDATE 语句"></a><strong>【Step 3】执行第二个 <code>UPDATE</code> 语句</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>同样，MySQL 记录了 ID&#x3D;2 账户增加 100 元的变更</strong>。</li><li><strong>Redo Log Buffer 再次写入这个修改，Binlog 仍然不会写入。</strong></li></ul><p>✅ <strong>Redo Log（物理日志）</strong>：</p><ul><li>记录 <strong>“账户 2 余额增加 100 元”</strong>。</li><li><strong>事务执行过程中不断写入 Redo Log Buffer</strong>。</li></ul><p>❌ <strong>Binlog（逻辑日志）</strong>：</p><ul><li>依然 <strong>不会立即写入</strong>，仍然在 Binlog Cache 里。</li></ul><hr><h3 id="【Step-4】提交事务（COMMIT）"><a href="#【Step-4】提交事务（COMMIT）" class="headerlink" title="【Step 4】提交事务（COMMIT）"></a><strong>【Step 4】提交事务（COMMIT）</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>当事务提交时，MySQL 采用<strong>两阶段提交（2PC）</strong>，以保证 Binlog 和 Redo Log 的一致性。流程如下：</p><ol><li><p><strong>写入 Binlog</strong>：</p><ul><li><p>事务提交时，MySQL <strong>一次性</strong> 把 <strong>整个事务的 SQL 语句记录</strong>（逻辑变更）<strong>写入 Binlog 文件</strong>。</p></li><li><p>这时候 Binlog 记录的内容类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE accounts SET balance = balance - 100 WHERE id = 1;</span><br><span class="line">UPDATE accounts SET balance = balance + 100 WHERE id = 2;</span><br></pre></td></tr></table></figure></li><li><p>Binlog <strong>必须一次性写入整个事务，否则无法用于主从复制和 Point-In-Time 恢复</strong>。</p></li></ul></li><li><p><strong>Redo Log 进入 Prepare 阶段</strong>：</p><ul><li><strong>在写入 Binlog 之后，MySQL 进入 Redo Log 的 prepare 阶段</strong>，确保 redo log 记录的物理变更与 binlog 对应。</li></ul></li><li><p><strong>Redo Log 标记 Commit 并落盘</strong>：</p><ul><li>在 <strong>事务提交成功后，Redo Log 记录 <code>commit</code>，此时数据才真正持久化到磁盘</strong>。</li><li>Redo Log <strong>先写入磁盘，数据页可以稍后再写入</strong>，这就是<strong>WAL（Write Ahead Logging）机制</strong>。</li></ul></li></ol><hr><h2 id="3-为什么-Redo-Log-可以提前写入，而-Binlog-只能在提交时写？"><a href="#3-为什么-Redo-Log-可以提前写入，而-Binlog-只能在提交时写？" class="headerlink" title="3. 为什么 Redo Log 可以提前写入，而 Binlog 只能在提交时写？"></a><strong>3. 为什么 Redo Log 可以提前写入，而 Binlog 只能在提交时写？</strong></h2><table><thead><tr><th><strong>日志类型</strong></th><th><strong>写入时机</strong></th><th><strong>写入内容</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>Redo Log（重做日志）</strong></td><td><strong>事务执行过程中不断写入</strong></td><td><strong>记录的是物理数据页的变化</strong></td><td><strong>保证崩溃恢复，即使宕机也能恢复数据</strong></td></tr><tr><td><strong>Binlog（二进制日志）</strong></td><td><strong>事务提交时一次性写入</strong></td><td><strong>记录的是 SQL 语句（逻辑变更）</strong></td><td><strong>用于主从复制和数据恢复，必须保证事务完整性</strong></td></tr></tbody></table><ul><li><strong>Redo Log 可以提前写入，因为它记录的是“物理变更”，即数据页的修改记录</strong>。即使事务最终回滚，Redo Log 也可以用来撤销修改（Undo Log 负责事务回滚）。</li><li><strong>Binlog 必须等到事务提交时一次性写入，原因是 Binlog 记录的是事务的逻辑 SQL 语句</strong>，如果事务未提交就写入，可能会导致数据不一致。</li></ul><hr><h2 id="4-现实场景下的作用"><a href="#4-现实场景下的作用" class="headerlink" title="4. 现实场景下的作用"></a><strong>4. 现实场景下的作用</strong></h2><h3 id="✅-场景-1：MySQL-崩溃恢复"><a href="#✅-场景-1：MySQL-崩溃恢复" class="headerlink" title="✅ 场景 1：MySQL 崩溃恢复"></a><strong>✅ 场景 1：MySQL 崩溃恢复</strong></h3><p>假设 MySQL 在 <code>COMMIT</code> 之前发生宕机：</p><ul><li><strong>由于 Redo Log 在事务执行过程中已经写入，所以可以用于恢复未提交的事务，使数据保持一致性</strong>。</li><li><strong>Binlog 只有在事务提交后才写入，因此 Binlog 不会包含未提交的事务</strong>。</li></ul><h3 id="✅-场景-2：MySQL-主从复制"><a href="#✅-场景-2：MySQL-主从复制" class="headerlink" title="✅ 场景 2：MySQL 主从复制"></a><strong>✅ 场景 2：MySQL 主从复制</strong></h3><ul><li><strong>主库的 Binlog 需要完整记录事务，以便从库可以进行一致性的重放</strong>。</li><li><strong>如果 Binlog 允许拆开写入，可能会导致从库的数据不一致（比如只执行了一半的 SQL 语句）</strong>。</li></ul></blockquote><ul><li><strong>Redo Log 可以提前写入，因为它记录的是“物理变更”，即数据页的修改记录</strong>。即使事务最终回滚，Redo Log 也可以用来撤销修改（Undo Log 负责事务回滚）。</li><li><strong>Binlog 必须等到事务提交时一次性写入，原因是 Binlog 记录的是事务的逻辑 SQL 语句</strong>，如果事务未提交就写入，可能会导致数据不一致。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041613856.png" alt="img"></p><p>使用<strong>两阶段提交</strong>后，写入 binlog 时发生异常也不会有影响，因为 MySQL 根据 redo log 日志恢复数据时，发现 redo log 还处于<code>prepare</code>阶段，并且没有对应 binlog 日志，就会回滚该事务。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041614450.png" alt="img"></p><p>再看一个场景，redo log 设置<code>commit</code>阶段发生异常，那会不会回滚事务呢？</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503041615730.png" alt="img"></p><p>并不会回滚事务，它会执行上图框住的逻辑，虽然 redo log 是处于<code>prepare</code>阶段，但是能通过事务<code>id</code>找到对应的 binlog 日志，所以 MySQL 认为是完整的，就会提交事务恢复数据。</p><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>每一个事务对数据的修改都会被记录到 undo log ，当执行事务过程中出现错误或者需要执行回滚操作的话，MySQL 可以利用 undo log 将数据恢复到事务开始之前的状态。</p><p>undo log 属于逻辑日志，记录的是 SQL 语句，比如说事务执行一条 DELETE 语句，那 undo log 就会记录一条相对应的 INSERT 语句。同时，undo log 的信息也会被记录到 redo log 中，因为 undo log 也要实现持久性保护。并且，undo-log 本身是会被删除清理的，例如 INSERT 操作，在事务提交之后就可以清除掉了；UPDATE&#x2F;DELETE 操作在事务提交不会立即删除，会加入 history list，由后台线程 purge 进行清理。</p><p>undo log 是采用 segment（段）的方式来记录的，每个 undo 操作在记录的时候占用一个 <strong>undo log segment</strong>（undo 日志段），undo log segment 包含在 <strong>rollback segment</strong>（回滚段）中。事务开始时，需要为其分配一个 rollback segment。每个 rollback segment 有 1024 个 undo log segment，这有助于管理多个并发事务的回滚需求。</p><blockquote><h3 id="MySQL-事务中-Undo-Log、Redo-Log-和-Binlog-的协同工作"><a href="#MySQL-事务中-Undo-Log、Redo-Log-和-Binlog-的协同工作" class="headerlink" title="MySQL 事务中 Undo Log、Redo Log 和 Binlog 的协同工作"></a><strong>MySQL 事务中 Undo Log、Redo Log 和 Binlog 的协同工作</strong></h3><p>我们用一个<strong>具体的事务</strong>，结合 <strong>Undo Log</strong>、<strong>Redo Log</strong> 和 <strong>Binlog</strong>，详细讲解它们在 MySQL 中如何协同工作。</p><hr><h2 id="🔹-1-事务示例"><a href="#🔹-1-事务示例" class="headerlink" title="🔹 1. 事务示例"></a><strong>🔹 1. 事务示例</strong></h2><p>假设有一个 <code>accounts</code> 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> accounts (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    balance <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT INTO</span> accounts <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>现在，我们执行下面的事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>这个事务的执行流程涉及到 <strong>三种日志</strong>，分别承担不同的职责。</p><hr><h2 id="🔹-2-Undo-Log、Redo-Log-和-Binlog-在事务中的作用"><a href="#🔹-2-Undo-Log、Redo-Log-和-Binlog-在事务中的作用" class="headerlink" title="🔹 2. Undo Log、Redo Log 和 Binlog 在事务中的作用"></a><strong>🔹 2. Undo Log、Redo Log 和 Binlog 在事务中的作用</strong></h2><h3 id="🚀-Step-1：事务开始（BEGIN）"><a href="#🚀-Step-1：事务开始（BEGIN）" class="headerlink" title="🚀 Step 1：事务开始（BEGIN）"></a><strong>🚀 Step 1：事务开始（BEGIN）</strong></h3><ul><li>事务开始后，MySQL <strong>不会</strong> 立即写日志，但 <strong>Undo Log、Redo Log 和 Binlog 的空间已经准备好</strong>。</li></ul><hr><h3 id="🚀-Step-2：执行-UPDATE-语句"><a href="#🚀-Step-2：执行-UPDATE-语句" class="headerlink" title="🚀 Step 2：执行 UPDATE 语句"></a><strong>🚀 Step 2：执行 <code>UPDATE</code> 语句</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这个 SQL 语句对 <code>id=1</code> 的 <code>balance</code> 进行了修改，涉及 <strong>数据页的变更</strong>，此时涉及 <strong>Undo Log、Redo Log 和缓冲池（Buffer Pool）</strong>。</p><h4 id="1-Undo-Log-记录数据的旧值"><a href="#1-Undo-Log-记录数据的旧值" class="headerlink" title="(1) Undo Log 记录数据的旧值"></a><strong>(1) Undo Log 记录数据的旧值</strong></h4><ul><li><pre><code>Undo Log<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 记录 </span><br><span class="line"></span><br><span class="line">修改前的 `balance=1000`</span><br><span class="line"></span><br><span class="line">，以便事务回滚时能够恢复：</span><br><span class="line"></span><br></pre></td></tr></table></figure>UNDO_LOG: &#123; TABLE: accounts, ROW_ID: 1, OLD_VALUE: 1000, NEW_VALUE: 900 &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  Undo Log</span><br></pre></td></tr></table></figure> 主要用于：1. **事务回滚**：如果事务最终 `ROLLBACK`，MySQL 读取 `Undo Log` 并恢复 `balance = 1000`。2. **MVCC（多版本并发控制）**：如果有事务要读取旧版本数据，MySQL 可以利用 `Undo Log` 构造**一致性快照**。</code></pre></li></ul><h4 id="2-Redo-Log-记录数据变更"><a href="#2-Redo-Log-记录数据变更" class="headerlink" title="(2) Redo Log 记录数据变更"></a><strong>(2) Redo Log 记录数据变更</strong></h4><ul><li><pre><code>Redo Log<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 记录 </span><br><span class="line"></span><br><span class="line">数据页的物理修改</span><br><span class="line"></span><br><span class="line">，保证事务崩溃后仍能恢复：</span><br><span class="line"></span><br></pre></td></tr></table></figure>REDO_LOG: &#123; TABLE: accounts, ROW_ID: 1, CHANGE: balance=900 &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `Redo Log` **先写入 `Redo Buffer`，稍后刷盘到 `Redo Log` 文件**。</span><br><span class="line"></span><br><span class="line">#### **(3) 数据写入缓冲池（Buffer Pool）**</span><br><span class="line"></span><br><span class="line">- `UPDATE` 语句并不会**立即**将 `balance=900` 写入磁盘，而是修改 **Buffer Pool**（内存中的数据页）。</span><br><span class="line">- 之后 **由 InnoDB 的 Checkpoint 机制决定何时把数据同步到磁盘**。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **🚀 Step 3：事务提交（COMMIT）**</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>当事务提交时，涉及 <strong>Redo Log、Binlog 以及 Undo Log</strong> 的处理。</p><h4 id="1-Binlog-记录完整的-SQL-操作"><a href="#1-Binlog-记录完整的-SQL-操作" class="headerlink" title="(1) Binlog 记录完整的 SQL 操作"></a><strong>(1) Binlog 记录完整的 SQL 操作</strong></h4><ul><li><p>Binlog 是逻辑日志</p><p>，记录的是 </p><p>SQL 语句</p><p>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BINLOG: &#123; TRANSACTION: &quot;UPDATE accounts SET balance = balance - 100 WHERE id = 1;&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><p>Binlog </p><p>仅在事务提交时写入磁盘</p><p>，它的作用：</p><ol><li><strong>用于主从复制</strong>，保证主库与从库数据一致。</li><li><strong>用于 Point-in-Time Recovery（时间点恢复）</strong>，支持基于 Binlog 进行数据回溯。</li></ol></li></ul><h4 id="2-Redo-Log-标记事务提交"><a href="#2-Redo-Log-标记事务提交" class="headerlink" title="(2) Redo Log 标记事务提交"></a><strong>(2) Redo Log 标记事务提交</strong></h4><ul><li><p>Redo Log 采用 “WAL（Write-Ahead Logging）” 机制</p><p>，它在事务执行过程中就已经写入了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redo Log Buffer</span><br></pre></td></tr></table></figure><p>，但 </p><p>只有在事务提交时，才会将事务标记为 “提交” 状态</p><p>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REDO_LOG: &#123; TRANSACTION_ID: 1001, STATUS: COMMITTED &#125;</span><br></pre></td></tr></table></figure></li><li><p>这样，即使 MySQL <strong>崩溃重启</strong>，也能通过 Redo Log <strong>恢复已提交事务的数据</strong>。</p></li></ul><h4 id="3-Undo-Log-的处理"><a href="#3-Undo-Log-的处理" class="headerlink" title="(3) Undo Log 的处理"></a><strong>(3) Undo Log 的处理</strong></h4><ul><li><strong>Undo Log 不能立即删除！</strong></li><li><strong><code>Insert Undo Log</code> 可以立即删除</strong>（如果事务插入数据，回滚后不再需要）。</li><li><strong><code>Update Undo Log</code> 需要保留一段时间</strong>，用于 <strong>MVCC（多版本并发控制）</strong>。</li><li><strong>最终</strong>，当没有事务再需要这些 Undo Log 后，InnoDB 的 <code>Purge</code> 线程会清理它们。</li></ul><hr><h2 id="🔹-3-总结：三种日志的作用"><a href="#🔹-3-总结：三种日志的作用" class="headerlink" title="🔹 3. 总结：三种日志的作用"></a><strong>🔹 3. 总结：三种日志的作用</strong></h2><table><thead><tr><th><strong>日志类型</strong></th><th><strong>作用</strong></th><th><strong>写入时机</strong></th><th><strong>删除时机</strong></th></tr></thead><tbody><tr><td><strong>Undo Log</strong></td><td>记录数据的<strong>旧值</strong>，支持事务回滚 &amp; MVCC</td><td>事务执行过程中写入</td><td><code>Insert Undo Log</code> 在 <code>COMMIT</code> 时可删除，<code>Update Undo Log</code> 需要等待 <code>MVCC</code> 处理后清理</td></tr><tr><td><strong>Redo Log</strong></td><td>记录<strong>数据页的物理修改</strong>，保证崩溃恢复</td><td>事务执行过程中写入</td><td>事务提交后，数据持久化到磁盘后可覆盖</td></tr><tr><td><strong>Binlog</strong></td><td>记录<strong>SQL 逻辑操作</strong>，用于主从复制 &amp; 数据恢复</td><td>事务提交时一次性写入</td><td>需要长期保留，以支持数据恢复</td></tr></tbody></table><hr><h2 id="🔹-4-事务回滚（ROLLBACK）"><a href="#🔹-4-事务回滚（ROLLBACK）" class="headerlink" title="🔹 4. 事务回滚（ROLLBACK）"></a><strong>🔹 4. 事务回滚（ROLLBACK）</strong></h2><p>如果事务 <strong>执行 <code>ROLLBACK</code></strong>，流程如下：</p><ol><li><strong>读取 <code>Undo Log</code></strong>，将 <code>balance = 900</code> 还原为 <code>1000</code>。</li><li><strong>不再写入 <code>Redo Log</code>（事务未提交）</strong>。</li><li><strong>Binlog 不会记录该事务（因为事务未提交）</strong>。</li></ol><hr><h2 id="🔹-5-事务崩溃恢复"><a href="#🔹-5-事务崩溃恢复" class="headerlink" title="🔹 5. 事务崩溃恢复"></a><strong>🔹 5. 事务崩溃恢复</strong></h2><p>如果在事务 <code>COMMIT</code> 之前发生崩溃：</p><ul><li><strong>Redo Log 记录了数据页修改</strong>，但 <strong>没有提交标记</strong>，MySQL 在恢复时会 <strong>丢弃这个未提交的事务</strong>。</li><li><strong>Undo Log 仍然有效</strong>，回滚事务，保证数据一致性。</li><li><strong>Binlog 没有记录这个事务（因为它在事务提交时才写入）</strong>。</li></ul><p>如果在事务 <code>COMMIT</code> 之后发生崩溃：</p><ul><li><strong>Redo Log 记录了事务提交标记</strong>，MySQL 通过 <code>Redo Log</code> 进行数据恢复。</li><li><strong>Binlog 记录完整事务，可用于主从复制</strong>。</li></ul><hr><h2 id="🔹-6-总结"><a href="#🔹-6-总结" class="headerlink" title="🔹 6. 总结"></a><strong>🔹 6. 总结</strong></h2><ol><li><strong>Undo Log</strong><ul><li><strong>作用</strong>：支持<strong>事务回滚</strong>和<strong>MVCC</strong>，记录<strong>数据的旧值</strong>。</li><li><strong>删除时机</strong>：Insert Undo 在事务提交时删除，Update Undo 需要等 MVCC 结束后清理。</li></ul></li><li><strong>Redo Log</strong><ul><li><strong>作用</strong>：保证数据 <strong>崩溃恢复</strong>，记录 <strong>数据页的物理修改</strong>。</li><li><strong>提交后数据才真正持久化</strong>，即使崩溃也能恢复。</li></ul></li><li><strong>Binlog</strong><ul><li><strong>作用</strong>：主从复制 &amp; 时间点恢复，记录 <strong>SQL 逻辑操作</strong>。</li><li><strong>提交时才写入</strong>，保证数据一致性。</li></ul></li></ol><p>👉 <strong>最终，MySQL 依靠</strong> <code>Undo Log</code> <strong>保证事务原子性（回滚）</strong>，<code>Redo Log</code> <strong>保证崩溃恢复</strong>，<code>Binlog</code> <strong>支持复制和数据恢复</strong>，三者互相配合，确保事务的可靠性和一致性。🚀</p><hr><p>你还有哪些疑问吗？😊</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80-05 时序预测工业应用场景</title>
      <link href="/2025/03/03/80-05%20%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E5%B7%A5%E4%B8%9A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2025/03/03/80-05%20%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E5%B7%A5%E4%B8%9A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="80-05-时序预测工业应用场景"><a href="#80-05-时序预测工业应用场景" class="headerlink" title="80-05 时序预测工业应用场景"></a>80-05 时序预测工业应用场景</h1><h2 id="GPT推荐时序预测工业应用场景"><a href="#GPT推荐时序预测工业应用场景" class="headerlink" title="GPT推荐时序预测工业应用场景"></a>GPT推荐时序预测工业应用场景</h2><h3 id="时间序列预测在工业场景中的应用分析"><a href="#时间序列预测在工业场景中的应用分析" class="headerlink" title="时间序列预测在工业场景中的应用分析"></a>时间序列预测在工业场景中的应用分析</h3><p>时间序列预测在工业领域有广泛的应用，可以帮助优化生产、降低成本、提升效率和减少风险。以下是几个典型的工业应用场景：</p><hr><h3 id="1-设备维护与故障预测（Predictive-Maintenance）"><a href="#1-设备维护与故障预测（Predictive-Maintenance）" class="headerlink" title="1. 设备维护与故障预测（Predictive Maintenance）"></a>1. 设备维护与故障预测（Predictive Maintenance）</h3><p><strong>📌 场景：</strong></p><ul><li>工厂的<strong>传感器数据</strong>（如温度、振动、压力、电流等）可用于预测设备的健康状况，防止突发故障。</li><li>例如，<strong>风力发电机</strong>的传感器可以检测叶片的振动模式，预测可能的损坏时间，从而提前安排维修，降低停机损失。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测设备的剩余寿命（RUL，Remaining Useful Life）。</li><li>预测设备的异常趋势，提前进行预防性维护。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>LSTM&#x2F;GRU</strong>（处理时间序列的状态变化）。</li><li><strong>TCN（时间卷积网络）</strong>（捕捉长期依赖）。</li><li><strong>Transformer</strong>（建模复杂的多变量时间序列）。</li></ul><hr><h3 id="2-生产需求预测（Demand-Forecasting）"><a href="#2-生产需求预测（Demand-Forecasting）" class="headerlink" title="2. 生产需求预测（Demand Forecasting）"></a>2. 生产需求预测（Demand Forecasting）</h3><p><strong>📌 场景：</strong></p><ul><li><strong>制造企业</strong>可以利用历史订单数据预测未来的生产需求，合理安排生产计划，避免原材料短缺或库存积压。</li><li>例如，<strong>汽车制造商</strong>可以预测未来几个月的市场需求，调整生产节奏，提高资源利用率。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测未来订单数量。</li><li>预测市场需求波动，优化库存管理。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>DeepAR</strong>（适用于多个相关时间序列的预测）。</li><li><strong>Transformer</strong>（用于多因素建模，如市场趋势、节假日等）。</li><li><strong>Prophet</strong>（适用于周期性明显的预测，如季节性需求）。</li></ul><hr><h3 id="3-能源消耗预测（Energy-Consumption-Forecasting）"><a href="#3-能源消耗预测（Energy-Consumption-Forecasting）" class="headerlink" title="3. 能源消耗预测（Energy Consumption Forecasting）"></a>3. 能源消耗预测（Energy Consumption Forecasting）</h3><p><strong>📌 场景：</strong></p><ul><li><strong>电网公司</strong>需要预测未来的用电需求，以优化电力调度，防止电力浪费或供电不足。</li><li><strong>工业园区</strong>可以预测不同时间段的能源消耗，优化节能策略，降低生产成本。</li><li>例如，<strong>钢铁厂</strong>的电弧炉能耗高度波动，精准预测能耗可以优化电费支出。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测未来的电力、燃气或水资源消耗。</li><li>预测峰值负载，避免设备过载或资源短缺。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>LSTM&#x2F;GRU</strong>（适用于非线性时间序列）。</li><li><strong>Transformer</strong>（适用于大规模数据预测）。</li><li><strong>XGBoost</strong>（适用于结构化特征的预测，如温度、湿度、生产计划等）。</li></ul><hr><h3 id="4-质量检测与异常检测（Quality-Inspection-Anomaly-Detection）"><a href="#4-质量检测与异常检测（Quality-Inspection-Anomaly-Detection）" class="headerlink" title="4. 质量检测与异常检测（Quality Inspection &amp; Anomaly Detection）"></a>4. 质量检测与异常检测（Quality Inspection &amp; Anomaly Detection）</h3><p><strong>📌 场景：</strong></p><ul><li><strong>半导体制造</strong>等精密行业需要通过传感器数据（如温度、湿度、振动）来预测产品质量，减少次品率。</li><li>例如，<strong>钢材生产线</strong>可以通过高温炉的温度曲线预测材料的硬度和韧性，优化加热参数。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测产品质量趋势，减少废品率。</li><li>预测异常生产情况（如设备过热、材料偏差）。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>Autoencoder + LSTM</strong>（用于异常检测）。</li><li><strong>GAN（生成对抗网络）</strong>（生成正常数据，识别异常情况）。</li><li><strong>Isolation Forest</strong>（用于检测异常时间序列数据）。</li></ul><hr><h3 id="5-物流与供应链优化（Logistics-Supply-Chain）"><a href="#5-物流与供应链优化（Logistics-Supply-Chain）" class="headerlink" title="5. 物流与供应链优化（Logistics &amp; Supply Chain）"></a>5. 物流与供应链优化（Logistics &amp; Supply Chain）</h3><p><strong>📌 场景：</strong></p><ul><li><strong>仓储物流公司</strong>可以预测未来的运输需求，优化调度，减少空载率。</li><li><strong>港口管理</strong>可以预测未来船舶到港时间，提高卸货效率，减少拥堵。</li><li>例如，<strong>快递公司</strong>可以预测“双11”购物节期间的订单量，提前准备仓储与配送能力。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测货运需求，优化运输计划。</li><li>预测供应链瓶颈，提高物流效率。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>Time Series Transformer</strong>（用于复杂供应链预测）。</li><li><strong>DeepAR</strong>（适用于多个商品的需求预测）。</li><li><strong>XGBoost</strong>（结合时间序列特征与结构化特征优化预测）。</li></ul><hr><h3 id="6-环境监测与污染预测（Environmental-Monitoring）"><a href="#6-环境监测与污染预测（Environmental-Monitoring）" class="headerlink" title="6. 环境监测与污染预测（Environmental Monitoring）"></a>6. 环境监测与污染预测（Environmental Monitoring）</h3><p><strong>📌 场景：</strong></p><ul><li><strong>工厂排放管理</strong>：预测未来污染物排放趋势，确保达标排放。</li><li><strong>空气质量监测</strong>：预测空气污染指数（AQI），为政府提供治理建议。</li><li><strong>水质监测</strong>：预测工业污水的污染变化趋势，防止突发污染事故。</li><li>例如，<strong>火电厂</strong>可以预测未来CO₂排放量，优化环保措施。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测空气污染指数（如PM2.5、SO₂）。</li><li>预测水质变化，提前采取治理措施。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>LSTM</strong>（捕捉污染变化趋势）。</li><li><strong>CNN-LSTM</strong>（结合空间信息与时间序列信息）。</li><li><strong>Bayesian Model（贝叶斯模型）</strong>（用于污染浓度不确定性预测）。</li></ul><hr><h3 id="7-价格预测（Price-Forecasting）"><a href="#7-价格预测（Price-Forecasting）" class="headerlink" title="7. 价格预测（Price Forecasting）"></a>7. 价格预测（Price Forecasting）</h3><p><strong>📌 场景：</strong></p><ul><li><strong>原材料采购</strong>：工厂可以预测<strong>钢材、塑料、原油等原材料价格</strong>，降低采购成本。</li><li><strong>电力市场</strong>：电网公司可以预测<strong>电价</strong>，优化发电调度，降低成本。</li><li>例如，<strong>钢铁制造商</strong>可以利用历史数据预测铁矿石价格波动，提前调整采购策略。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测原材料价格波动，优化采购计划。</li><li>预测电力价格，优化电力交易。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>ARIMA</strong>（适用于稳定的时间序列）。</li><li><strong>LSTM&#x2F;GRU</strong>（适用于非线性价格波动）。</li><li><strong>Transformer</strong>（适用于复杂市场波动建模）。</li></ul><hr><h3 id="8-生产线排程优化（Production-Scheduling）"><a href="#8-生产线排程优化（Production-Scheduling）" class="headerlink" title="8. 生产线排程优化（Production Scheduling）"></a>8. 生产线排程优化（Production Scheduling）</h3><p><strong>📌 场景：</strong></p><ul><li><strong>半导体制造</strong>需要预测未来生产负载，优化设备排班，减少等待时间。</li><li><strong>汽车装配线</strong>可以预测未来的生产节奏，优化工人排班，提高产能。</li><li>例如，<strong>智能工厂</strong>可以预测生产瓶颈，调整生产计划，提高设备利用率。</li></ul><p><strong>📊 预测目标：</strong></p><ul><li>预测生产负载，优化设备调度。</li><li>预测生产周期，提高效率。</li></ul><p><strong>🔧 适用技术：</strong></p><ul><li><strong>Reinforcement Learning（强化学习）+ LSTM</strong>（用于动态调度）。</li><li><strong>Time Series Transformer</strong>（用于复杂生产计划预测）。</li><li><strong>XGBoost</strong>（用于结合历史数据与外部因素优化预测）。</li></ul><hr><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>时间序列预测在工业领域的应用极为广泛，可以帮助企业降低成本、提高生产效率、优化供应链管理等。<strong>不同场景下需要不同的深度学习方法，结合具体需求选择最优的预测策略</strong>。</p><p>如果你对某个具体场景感兴趣，我可以帮你细化分析或提供代码示例！ 😊</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80-04 时序预测基础概念</title>
      <link href="/2025/03/03/80-04%20%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/2025/03/03/80-04%20%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="80-04-时序预测基础概念"><a href="#80-04-时序预测基础概念" class="headerlink" title="80-04 时序预测基础概念"></a>80-04 时序预测基础概念</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="深度学习在时间序列预测中的快速入门"><a href="#深度学习在时间序列预测中的快速入门" class="headerlink" title="深度学习在时间序列预测中的快速入门"></a>深度学习在时间序列预测中的快速入门</h3><p>时间序列预测是指利用历史数据来预测未来的趋势，在金融、天气预报、库存管理等领域应用广泛。深度学习因其强大的特征提取能力，在复杂的时间序列数据上表现优异。以下是快速入门所需的关键知识：</p><hr><h3 id="1-关键模型"><a href="#1-关键模型" class="headerlink" title="1. 关键模型"></a>1. 关键模型</h3><ul><li><strong>RNN（循环神经网络）</strong>：适用于短期依赖的序列，但长序列会导致梯度消失问题。</li><li><strong>LSTM（长短时记忆网络）</strong>：通过门控机制解决RNN的梯度消失问题，适用于长期依赖的序列。</li><li><strong>GRU（门控循环单元）</strong>：与LSTM类似，但结构更简单，计算效率更高。</li><li><strong>TCN（时间卷积网络）</strong>：用一维卷积替代循环结构，支持长序列建模，训练更快。</li><li><strong>Transformer（如Time Series Transformer）</strong>：基于自注意力机制，可以捕捉长距离依赖关系，适用于复杂的时间序列。</li><li><strong>DeepAR</strong>：亚马逊提出的一种基于RNN的概率时间序列预测方法，适用于多个相关序列的预测。</li></ul><hr><h3 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2. 数据处理"></a>2. 数据处理</h3><ul><li><strong>时间窗滑动（Sliding Window）</strong>：将时间序列转换成监督学习格式，即<code>(历史数据 -&gt; 未来数据) </code>对。</li><li><strong>归一化（Normalization）</strong>：使用 <code>Min-Max Scaling</code> 或 <code>Z-score Standardization</code> 归一化数据，以提高训练稳定性。</li><li><strong>时间特征工程</strong>：提取时间戳的特征，如<strong>小时、星期、月份、节假日等</strong>，帮助模型学习周期性规律。</li><li><strong>平稳性处理</strong>：使用<strong>差分（Differencing）</strong>、**移动平均（Moving Average）**等方法减少趋势性影响。</li></ul><hr><h3 id="3-训练时常用的评价指标"><a href="#3-训练时常用的评价指标" class="headerlink" title="3. 训练时常用的评价指标"></a>3. 训练时常用的评价指标</h3><ol><li><p><strong>均方误差（MSE, Mean Squared Error）</strong>：</p><p>MSE&#x3D;1n∑(ytrue−ypred)2MSE &#x3D; \frac{1}{n} \sum (y_{\text{true}} - y_{\text{pred}})^2</p><ul><li>惩罚较大的预测误差，对极端值较敏感。</li></ul></li><li><p><strong>均方根误差（RMSE, Root Mean Squared Error）</strong>：</p><p>RMSE&#x3D;MSERMSE &#x3D; \sqrt{MSE}</p><ul><li>与MSE类似，但具有与数据单位相同的量纲，更易解释。</li></ul></li><li><p><strong>平均绝对误差（MAE, Mean Absolute Error）</strong>：</p><p>MAE&#x3D;1n∑∣ytrue−ypred∣MAE &#x3D; \frac{1}{n} \sum |y_{\text{true}} - y_{\text{pred}}|</p><ul><li>对离群值不敏感，但可能低估大误差的影响。</li></ul></li><li><p><strong>平均绝对百分比误差（MAPE, Mean Absolute Percentage Error）</strong>：</p><p>MAPE&#x3D;100%n∑∣ytrue−ypredytrue∣MAPE &#x3D; \frac{100%}{n} \sum \left| \frac{y_{\text{true}} - y_{\text{pred}}}{y_{\text{true}}} \right|</p><ul><li>适用于相对误差衡量，数值越小表示预测越精准。</li></ul></li><li><p><strong>R²（决定系数）</strong>：</p><p>R2&#x3D;1−∑(ytrue−ypred)2∑(ytrue−yˉ)2R^2 &#x3D; 1 - \frac{\sum (y_{\text{true}} - y_{\text{pred}})^2}{\sum (y_{\text{true}} - \bar{y})^2}</p><ul><li>反映模型对数据的解释能力，范围在 <code>[0,1]</code>，越接近 <code>1</code> 说明模型拟合效果越好。</li></ul></li><li><p><strong>SMAPE（对称平均绝对百分比误差）</strong>：</p><p>SMAPE&#x3D;100%n∑∣ytrue−ypred∣(∣ytrue∣+∣ypred∣)&#x2F;2SMAPE &#x3D; \frac{100%}{n} \sum \frac{|y_{\text{true}} - y_{\text{pred}}|}{(|y_{\text{true}}| + |y_{\text{pred}}|)&#x2F;2}</p><ul><li>解决MAPE在 <code>y_true ≈ 0</code> 时的异常问题。</li></ul></li></ol><hr><h3 id="4-快速训练时间序列模型的推荐流程"><a href="#4-快速训练时间序列模型的推荐流程" class="headerlink" title="4. 快速训练时间序列模型的推荐流程"></a>4. 快速训练时间序列模型的推荐流程</h3><ol><li>数据预处理：<ul><li>归一化、平稳化、滑动窗口切割。</li></ul></li><li>选择模型架构：<ul><li>短期依赖选用<strong>LSTM&#x2F;GRU</strong>，长序列选用<strong>Transformer&#x2F;TCN</strong>。</li></ul></li><li>训练模型：<ul><li>选择合适的<strong>损失函数</strong>（如 <code>MSE</code>）并进行梯度下降优化。</li></ul></li><li>评估模型：<ul><li>使用 <code>MSE</code>、<code>RMSE</code>、<code>R²</code> 等指标进行模型评估。</li></ul></li><li>超参数调优：<ul><li>通过<strong>学习率调整、窗口大小选择、隐藏层神经元数量优化</strong>等提高效果。</li></ul></li><li>实际部署：<ul><li>结合 <code>PyTorch</code> 或 <code>TensorFlow</code> 进行推理，并持续优化。</li></ul></li></ol><hr><h3 id="5-代码示例（LSTM-预测时间序列）"><a href="#5-代码示例（LSTM-预测时间序列）" class="headerlink" title="5. 代码示例（LSTM 预测时间序列）"></a>5. 代码示例（LSTM 预测时间序列）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成模拟时间序列数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_dataset</span>(<span class="params">data, time_step=<span class="number">10</span></span>):</span><br><span class="line">    X, Y = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - time_step):</span><br><span class="line">        X.append(data[i:i + time_step])</span><br><span class="line">        Y.append(data[i + time_step])</span><br><span class="line">    <span class="keyword">return</span> np.array(X), np.array(Y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 LSTM 模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LSTMModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_size, hidden_size, num_layers</span>):</span><br><span class="line">        <span class="built_in">super</span>(LSTMModel, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Linear(hidden_size, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out, _ = <span class="variable language_">self</span>.lstm(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.fc(out[:, -<span class="number">1</span>, :])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练流程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_model</span>(<span class="params">model, X_train, Y_train, epochs=<span class="number">50</span>, lr=<span class="number">0.001</span></span>):</span><br><span class="line">    criterion = nn.MSELoss()</span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr=lr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        outputs = model(torch.FloatTensor(X_train))</span><br><span class="line">        loss = criterion(outputs, torch.FloatTensor(Y_train))</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> epoch % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Epoch [<span class="subst">&#123;epoch&#125;</span>/<span class="subst">&#123;epochs&#125;</span>], Loss: <span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = np.sin(np.linspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">500</span>))  <span class="comment"># 生成正弦波数据</span></span><br><span class="line">X, Y = create_dataset(data)</span><br><span class="line">X = np.expand_dims(X, axis=-<span class="number">1</span>)  <span class="comment"># LSTM 需要输入 (batch, time_step, feature)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model = LSTMModel(input_size=<span class="number">1</span>, hidden_size=<span class="number">64</span>, num_layers=<span class="number">2</span>)</span><br><span class="line">train_model(model, X, Y)</span><br></pre></td></tr></table></figure><hr><h3 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h3><p>时间序列预测是一个强大且实用的任务，深度学习方法（LSTM、GRU、Transformer等）提供了更好的建模能力。常用的评估指标包括 <strong>MSE、RMSE、MAE、MAPE、R²</strong> 等，不同场景下选择合适的指标才能得到准确的评估。通过数据预处理、模型优化和超参数调优，可以不断提高预测精度并应用到实际业务中。</p><hr><p>你可以先尝试 LSTM 进行预测，如果需要更高级的优化（如 Transformer），可以进一步学习 <strong>自注意力机制</strong> 和 <strong>多头注意力</strong> 的实现方式。我可以帮助你逐步深入！ 😊</p><h2 id="常用数据集"><a href="#常用数据集" class="headerlink" title="常用数据集"></a>常用数据集</h2><p><a href="https://blog.csdn.net/qq_43747519/article/details/132246960?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522598e0ec76efe134cd66cd990279eec9b%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=598e0ec76efe134cd66cd990279eec9b&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-132246960-null-null.142%5Ev101%5Epc_search_result_base6&utm_term=%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E9%9B%86&spm=1018.2226.3001.4187">时间序列常用数据集（electrity，ETT，exchange，ILL，traffic，weather）</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-23 MySQL索引</title>
      <link href="/2025/03/03/75-23%20MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2025/03/03/75-23%20MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="75-23-MySQL索引"><a href="#75-23-MySQL索引" class="headerlink" title="75-23 MySQL索引"></a>75-23 MySQL索引</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。</strong></p><p>其最主要的作用就是提供了一个数据结构让数据库可以快速的查询到目标数据。</p><p>MySQL8之后默认的存储引擎为InnoDB，但是无论是InnoDB还是MyISAM，其索引所选择的数据结构都是B+树。有个问题，为什么选择B+树作为其存储引擎的索引结构呢？</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>认识一个新的事物，先来看看该事物有什么优点和缺点。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>第一点，不必多言，引入了索引之后，数据库在某些查询方面的效率大幅度提升，较少了IO次数（为什么）；</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果我们将某些字段加入了索引，那么如果我对这个索引字段进行了修改，那么存储引擎也会同步的对索引进行更新，那么必然就会造成SQL执行效率降低；</li><li>MySQL同时需要保存索引排序后的物理文件，这在一定程度上也会耗费一些空间（问题不大）；</li></ol><p><strong>但是总体来说，如果数据库的数据量比较大的情况下，引入索引好处是优于坏处的，索引查询绝大部分情况下是比全表查询要快的。</strong></p><h2 id="B-树-B-树"><a href="#B-树-B-树" class="headerlink" title="B 树&amp; B+树"></a>B 树&amp; B+树</h2><p>B 树也称 B-树,全称为 <strong>多路平衡查找树</strong> ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 <code>Balanced</code> （平衡）的意思。</p><p>目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p><p><strong>B 树&amp; B+树两者有何异同呢？</strong></p><ul><li>B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li><li>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li><li>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li><li>在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</li></ul><p>综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024757.png" alt="image-20241014161223591"></p><p>为什么要这么设计呢？这都是有原因的，MySQL作为硬盘存储数据库，选用B+Tree作为其数据结构非常适合。</p><p>系统从磁盘读取数据到内存时是以**磁盘块（block）**为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</p><p>在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。</p><h2 id="MyISAM-引擎和-InnoDB-引擎B-Tree实现"><a href="#MyISAM-引擎和-InnoDB-引擎B-Tree实现" class="headerlink" title="MyISAM 引擎和 InnoDB 引擎B+Tree实现"></a>MyISAM 引擎和 InnoDB 引擎B+Tree实现</h2><h3 id="MyISAM-的索引存储方式（非聚簇索引）"><a href="#MyISAM-的索引存储方式（非聚簇索引）" class="headerlink" title="MyISAM 的索引存储方式（非聚簇索引）"></a><strong>MyISAM 的索引存储方式（非聚簇索引）</strong></h3><p>在 <strong>MyISAM</strong> 里，数据和索引是 <strong>分开的</strong>，索引存的是数据所在的位置。</p><ul><li><strong>索引文件（B+Tree 结构）</strong> 存的是主键 <code>id</code>，叶子节点存的是数据的物理地址（类似于“目录”指向“文件”）。</li><li><strong>数据文件</strong> 存的是具体的表数据。</li></ul><p><strong>特点</strong>：</p><ul><li>由于索引的叶子节点存的是数据的<strong>地址</strong>，所以需要<strong>多一步</strong>去磁盘取数据。</li><li><strong>索引文件和数据文件是分离的</strong>。</li></ul><h3 id="InnoDB-的索引存储方式（聚簇索引）"><a href="#InnoDB-的索引存储方式（聚簇索引）" class="headerlink" title="InnoDB 的索引存储方式（聚簇索引）"></a>InnoDB 的索引存储方式（聚簇索引）</h3><p>在 <strong>InnoDB</strong> 里，<strong>表的数据文件本身就是 B+Tree 索引</strong>，数据直接存放在叶子节点中，而不是存储地址。</p><p><strong>特点</strong>：</p><ul><li><strong>主键索引（聚簇索引）和数据存储在一起</strong>，查找速度更快。</li><li><strong>表数据是按照主键顺序存储的</strong>，所以如果主键是<strong>无序的或过长</strong>，会导致频繁的索引分裂，影响性能。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031600764.png" alt="image-20250303160023720"></p><h3 id="为什么-InnoDB-不建议使用长主键？"><a href="#为什么-InnoDB-不建议使用长主键？" class="headerlink" title="为什么 InnoDB 不建议使用长主键？"></a><strong>为什么 InnoDB 不建议使用长主键？</strong></h3><p>由于 InnoDB <strong>所有的辅助索引都存储的是主键值</strong>（而不是物理地址），所以：</p><ul><li><strong>如果主键字段很长（比如 <code>UUID</code>），所有辅助索引的叶子节点都会变大，占用更多的磁盘和内存。</strong></li><li><strong>如果主键是无序的（如 <code>UUID</code>），插入数据时可能会导致 B+Tree 频繁分裂，影响插入性能。</strong></li><li><strong>建议使用自增 <code>ID</code> 作为主键，保证主键有序，提升索引效率。</strong></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ol><li><strong>MyISAM（非聚簇索引）</strong>：索引存储的是<strong>数据地址</strong>，需要多一步磁盘读取。</li><li><strong>InnoDB（聚簇索引）</strong>：索引存储的是<strong>完整数据</strong>，查询主键时更快。</li><li><strong>InnoDB 的辅助索引存的是主键值</strong>，因此主键设计要尽量简短且递增，以减少索引占用空间，提高插入性能。</li></ol><h2 id="索引类型分类"><a href="#索引类型分类" class="headerlink" title="索引类型分类"></a>索引类型分类</h2><p>按照数据结构维度划分：</p><ul><li>BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</li><li>哈希索引：类似键值对的形式，一次即可定位。</li><li>RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li></ul><p>按照底层存储方式角度划分：</p><ul><li><strong>聚簇索引（聚集索引）</strong>：索引结构和数据一起存放的索引，<strong>InnoDB 中的主键索引就属于聚簇索引</strong>。</li><li><strong>非聚簇索引（非聚集索引）</strong>：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。</li></ul><p>按照应用维度划分：</p><ul><li>主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。</li><li>普通索引：仅加速查询。</li><li>唯一索引：加速查询 + 列值唯一（可以有 NULL）。</li><li>覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。</li><li><strong>联合索引</strong>：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li><li>前缀索引：对文本的前几个字符创建索引，相比普通索引建立的数据更小，因为只取前几个字符。</li></ul><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>数据表的主键列使用的就是主键索引。</p><p>一张数据表有只能有一个主键，并且主键不能为 null，不能重复。</p><p>在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，<strong>InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031608072.png" alt="主键索引"></p><h3 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h3><p>二级索引（Secondary Index）的叶子节点存储的数据是<strong>主键的值</strong>，也就是说，<strong>通过二级索引可以定位主键的位置</strong>，二级索引又称为<strong>辅助索引</strong>&#x2F;非主键索引。</p><p>唯一索引，普通索引，前缀索引等索引都属于二级索引。</p><ol><li><strong>唯一索引(Unique Key)</strong>:唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。</li><li><strong>普通索引(Index)</strong>:普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。</li><li><strong>前缀索引(Prefix)</strong>:前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小，因为只取前几个字符。</li><li><strong>全文索引(Full Text)</strong>:全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。</li></ol><h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>聚簇索引（Clustered Index）即<strong>索引结构和数据一起存放的索引</strong>，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。</p><p><strong>优点</strong>：</p><ul><li><strong>查询速度非常快</strong>：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。<strong>相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。</strong></li><li><strong>对排序查找和范围查找优化</strong>：聚簇索引对于主键的排序查找和范围查找速度非常快。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>依赖于有序的数据</strong>：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。</li><li><strong>更新代价大</strong>：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，<strong>所以对于主键索引来说，主键一般都是不可被修改的</strong>。</li></ul><h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p>非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。</p><p><strong>优点</strong>：</p><p>更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的。</p><p><strong>缺点</strong>：</p><ul><li><strong>依赖于有序的数据</strong>:跟聚簇索引一样，非聚簇索引也依赖于有序的数据</li><li><strong>可能会二次查询(回表)</strong>:这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。</li></ul><h4 id="非聚簇索引一定回表查询吗-覆盖索引"><a href="#非聚簇索引一定回表查询吗-覆盖索引" class="headerlink" title="非聚簇索引一定回表查询吗(覆盖索引)?"></a>非聚簇索引一定回表查询吗(覆盖索引)?</h4><p><strong>非聚簇索引不一定回表查询。</strong></p><p>试想一种情况，用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM table WHERE name=&#x27;guang19&#x27;;</span><br></pre></td></tr></table></figure><p>那么这个索引的 key 本身就是 name，查到对应的 name 直接返回就行了，无需回表查询。</p><p>即使是 MYISAM 也是这样，虽然 MYISAM 的主键索引确实需要回表，因为它的主键索引的叶子节点存放的是指针。但是！<strong>如果 SQL 查的就是主键呢?</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM table WHERE id=1;</span><br></pre></td></tr></table></figure><p>主键索引本身的 key 就是主键，查到返回就行了。这种情况就称之为覆盖索引了</p><h3 id="覆盖索引-联合索引"><a href="#覆盖索引-联合索引" class="headerlink" title="覆盖索引 &amp; 联合索引"></a>覆盖索引 &amp; 联合索引</h3><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 <strong>覆盖索引（Covering Index）</strong> 。</p><blockquote><p>在 InnoDB 存储引擎中，非主键索引的叶子节点包含的是主键的值。这意味着，当使用非主键索引进行查询时，数据库会先找到对应的主键值，然后再通过主键索引来定位和检索完整的行数据。这个过程被称为“回表”。</p></blockquote><p><strong>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。</strong></p><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><p>我们这里简单演示一下覆盖索引的效果。</p><p>创建一百万条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `cus_order` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `score` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">100000</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031630200.png" alt="image-20250303163033081"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031632632.png" alt="image-20250303163241575"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031635832.png" alt="image-20250303163558775"></p><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><p>使用表中的多个字段创建索引，就是 <strong>联合索引</strong>，也叫 <strong>组合索引</strong> 或 <strong>复合索引</strong>。</p><p>最左前缀匹配原则指的是在使用联合索引时，MySQL 会根据索引中的字段顺序，从左到右依次匹配查询条件中的字段。<strong>如果查询条件与索引中的最左侧字段相匹配，那么 MySQL 就会使用索引来过滤数据，这样可以提高查询效率。</strong></p><p>最左匹配原则会一直向右匹配，直到遇到范围查询（如 &gt;、&lt;）为止。对于 &gt;&#x3D;、&lt;&#x3D;、BETWEEN 以及前缀匹配 LIKE 的范围查询，不会停止匹配（相关阅读：<a href="https://mp.weixin.qq.com/s/8qemhRg5MgXs1So5YCv0fQ">联合索引的最左匹配原则全网都在说的一个错误结论</a>）。</p><blockquote><p>使用联合索引时，存在<strong>最左匹配原则</strong>，也就是按照最左优先的方式进行索引的匹配。</p><p>在使用联合索引进行查询的时候，如果不遵循「最左匹配原则」，联合索引会失效，这样就无法利用到索引快速查询的特性了。</p><p>比如，如果创建了一个 (a, b, c) 联合索引，如果查询条件是以下这几种，就可以利用联合索引：</p><ul><li>where a&#x3D;1；</li><li>where a&#x3D;1 and b&#x3D;2 and c&#x3D;3；</li><li>where a&#x3D;1 and b&#x3D;2；</li></ul><p>**需要注意的是，因为有查询优化器，所以 a 字段在 where 子句的顺序并不重要。**但是，如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><ul><li>where b&#x3D;2；</li><li>where c&#x3D;3；</li><li>where b&#x3D;2 and c&#x3D;3；</li></ul><p>上面这些查询条件之所以会失效，是因为(a, b, c) 联合索引，是先按 a 排序，在 a 相同的情况再按 b 排序，在 b 相同的情况再按 c 排序。所以，<strong>b 和 c 是全局无序，局部相对有序的</strong>，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的。</p></blockquote><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p><strong>索引下推（Index Condition Pushdown，简称 ICP）</strong> 是 <strong>MySQL 5.6</strong> 版本中提供的一项索引优化功能，它允许存储引擎在索引遍历过程中，执行部分 <code>WHERE</code>字句的判断条件，直接过滤掉不满足条件的记录，从而减少回表次数，提高查询效率。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031659468.png" alt="img"></p><p>MySQL 可以简单分为 Server 层和存储引擎层这两层。Server 层处理查询解析、分析、优化、缓存以及与客户端的交互等操作，而存储引擎层负责数据的存储和读取，MySQL 支持 InnoDB、MyISAM、Memory 等多种存储引擎。</p><p>索引下推的<strong>下推</strong>其实就是指将部分上层（Server 层）负责的事情，交给了下层（存储引擎层）去处理。</p><p>我们这里结合索引下推原理再对上面提到的例子进行解释。</p><p>没有索引下推之前：</p><ul><li>存储引擎层先根据 <code>zipcode</code> 索引字段找到所有 <code>zipcode = &#39;431200&#39;</code> 的用户的主键 ID，然后二次回表查询，获取完整的用户数据；</li><li>存储引擎层把所有 <code>zipcode = &#39;431200&#39;</code> 的用户数据全部交给 Server 层，Server 层根据<code>MONTH(birthdate) = 3</code>这一条件再进一步做筛选。</li></ul><p>有了索引下推之后：</p><ul><li>存储引擎层先根据 <code>zipcode</code> 索引字段找到所有 <code>zipcode = &#39;431200&#39;</code> 的用户，然后直接判断 <code>MONTH(birthdate) = 3</code>，筛选出符合条件的主键 ID；</li><li>二次回表查询，根据符合条件的主键 ID 去获取完整的用户数据；</li><li>存储引擎层把符合条件的用户数据全部交给 Server 层。</li></ul><p>可以看出，除了可以减少回表次数之外，索引下推还可以减少存储引擎层和 Server 层的数据传输量。</p><p>最后，总结一下索引下推应用范围：</p><ol><li>适用于 InnoDB 引擎和 MyISAM 引擎的查询。</li><li>适用于执行计划是 range, ref, eq_ref, ref_or_null 的范围查询。</li><li><strong>对于 InnoDB 表，仅用于非聚簇索引。索引下推的目标是减少全行读取次数，从而减少 I&#x2F;O 操作。对于 InnoDB 聚集索引，完整的记录已经读入 InnoDB 缓冲区。在这种情况下使用索引下推 不会减少 I&#x2F;O。</strong></li><li>子查询不能使用索引下推，因为子查询通常会创建临时表来处理结果，而这些临时表是没有索引的。</li><li>存储过程不能使用索引下推，因为存储引擎无法调用存储函数。</li></ol><h3 id="知道如何分析-SQL-语句是否走索引查询"><a href="#知道如何分析-SQL-语句是否走索引查询" class="headerlink" title="知道如何分析 SQL 语句是否走索引查询"></a>知道如何分析 SQL 语句是否走索引查询</h3><p>我们可以使用 <code>EXPLAIN</code> 命令来分析 SQL 的 <strong>执行计划</strong> ，这样就知道语句是否命中索引了。执行计划是指一条 SQL 语句在经过 MySQL 查询优化器的优化会后，具体的执行方式。</p><p><code>EXPLAIN</code> 并不会真的去执行相关的语句，而是通过 <strong>查询优化器</strong> 对语句进行分析，找出最优的查询方案，并显示对应的信息。</p><p><code>EXPLAIN</code> 的输出格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> `score`,`name` <span class="keyword">FROM</span> `cus_order` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `score` <span class="keyword">DESC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> cus_order <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">997572</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031707135.png" alt="image-20250303170713074"></p><h2 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h2><h3 id="不满足最左匹配原则"><a href="#不满足最左匹配原则" class="headerlink" title="不满足最左匹配原则"></a>不满足最左匹配原则</h3><p>不做过多介绍，简单的说查询的字段中并不满足最左匹配原则。例如我们定义的索引字段为（a,b,c），结果我们的where语句中使用的条件为b，则该查询时无法走索引查询的。</p><h3 id="使用Select"><a href="#使用Select" class="headerlink" title="使用Select *"></a>使用Select *</h3><p>如果select语句中的查询列，都是索引列，那么这些列被称为覆盖索引。这种情况下，查询的相关字段都能走索引，索引查询效率相对来说更高一些。</p><p>那么如果使用Select * 是无法走覆盖查询的，但是使用了Select * 一定不会走索引查询码？答案是否定的。</p><blockquote><p>这里是我之前的一个思维误区 select _ 不会导致索引失效 之前测试发现失效是因为 where 后面的查询范围过大 导致索引失效 并不是 select _ 引起的 但是为什么不推荐使用 select *</p></blockquote><h3 id="索引列上有计算-索引列用了函数"><a href="#索引列上有计算-索引列用了函数" class="headerlink" title="索引列上有计算 &amp; 索引列用了函数"></a>索引列上有计算 &amp; 索引列用了函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">+</span><span class="number">1</span><span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>  <span class="keyword">where</span> SUBSTR(height,<span class="number">1</span>,<span class="number">2</span>)<span class="operator">=</span><span class="number">17</span>;</span><br></pre></td></tr></table></figure><h3 id="字段类型不同"><a href="#字段类型不同" class="headerlink" title="字段类型不同"></a>字段类型不同</h3><blockquote><p>在sql语句中因为字段类型不同，而导致索引失效的问题，很容易遇到，可能是我们日常工作中最容易忽略的问题。</p><p>到底怎么回事呢？</p><p>请大家注意观察一下t_user表中的code字段，它是varchar字符类型的。</p><p>在sql语句中查询数据时，查询条件我们可以写成这样：</p><p>explain </p><p>select * from user where code&#x3D;”101”;<br>执行结果：</p><p>从上图中看到，该code字段走了索引。</p><p>温馨提醒一下，查询字符字段时，用双引号“和单引号’都可以。</p><p>但如果你在写sql时，不小心把引号弄掉了，把sql语句变成了：</p><p>explain </p><p>select * from user where code&#x3D;101;<br>执行结果：</p><p>你会惊奇的发现，该sql语句竟然变成了全表扫描。因为少写了引号，这种小小的失误，竟然让code字段上的索引失效了。</p><p>这时你心里可能有一万个为什么，其中有一个肯定是：为什么索引会失效呢？</p><p>答：因为code字段的类型是varchar，而传参的类型是int，两种类型不同。</p><p>此外，还有一个有趣的现象，如果int类型的height字段，在查询时加了引号条件，却还可以走索引：</p><p>explain select * from user </p><p>where height&#x3D;’175’;<br>执行结果：</p><p>从图中看出该sql语句确实走了索引。int类型的参数，不管在查询时加没加引号，都能走索引。</p><p>这是变魔术吗？这不科学呀。</p><p>答：mysql发现如果是int类型字段作为查询条件时，它会自动将该字段的传参进行隐式转换，把字符串转换成int类型。</p><p>mysql会把上面列子中的字符串175，转换成数字175，所以仍然能走索引。</p><p>接下来，看一个更有趣的sql语句：</p><p>select 1 + ‘1’;<br>它的执行结果是2，还是11呢？</p><p>好吧，不卖关子了，直接公布答案执行结果是2。</p><p>mysql自动把字符串1，转换成了int类型的1，然后变成了：1+1&#x3D;2。</p><p>但如果你确实想拼接字符串该怎么办？</p><p>答：可以使用concat关键字。</p><p>具体拼接sql如下：</p><p>select concat(1,’1’);<br>接下来，关键问题来了：为什么字符串类型的字段，传入了int类型的参数时索引会失效呢？</p><p>答：根据mysql官网上解释，字符串’1’、’ 1 ‘、’1a’都能转换成int类型的1，也就是说可能会出现多个字符串，对应一个int类型参数的情况。那么，mysql怎么知道该把int类型的1转换成哪种字符串，用哪个索引快速查值?</p><p>感兴趣的小伙伴可以再看看官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/type-conversion.html">https://dev.mysql.com/doc/refman/8.0/en/type-conversion.html</a></p></blockquote><h3 id="like左边包含"><a href="#like左边包含" class="headerlink" title="like左边包含%"></a>like左边包含%</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">where</span> code <span class="keyword">like</span> <span class="string">&#x27;%1%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>该sql语句的索引也会失效。</p><p>下面用一句话总结一下规律：当like语句中的%，出现在查询条件的左边时，索引会失效。</p><p>那么，为什么会出现这种现象呢？</p><p>答：其实很好理解，索引就像字典中的目录。一般目录是按字母或者拼音从小到大，从左到右排序，是有顺序的。</p><p>我们在查目录时，通常会先从左边第一个字母进行匹对，如果相同，再匹对左边第二个字母，如果再相同匹对其他的字母，以此类推。</p><p>通过这种方式我们能快速锁定一个具体的目录，或者缩小目录的范围。</p><p>但如果你硬要跟目录的设计反着来，先从字典目录右边匹配第一个字母，这画面你可以自行脑补一下，你眼中可能只剩下绝望了，哈哈。</p><h3 id="使用or关键字"><a href="#使用or关键字" class="headerlink" title="使用or关键字"></a>使用or关键字</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031726670.png" alt="image-20250303172639602"></p><h3 id="列对比"><a href="#列对比" class="headerlink" title="列对比"></a>列对比</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031727235.png" alt="image-20250303172705185"></p><h3 id="not-in和not-exists"><a href="#not-in和not-exists" class="headerlink" title="not in和not exists"></a>not in和not exists</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031728864.png" alt="image-20250303172843800"></p><h3 id="order-by的坑"><a href="#order-by的坑" class="headerlink" title="order by的坑"></a>order by的坑</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031730120.png" alt="image-20250303173031056"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503031730140.png" alt="image-20250303173046101"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://javaguide.cn/database/mysql/mysql-index.html">MySQL索引详解</a></li><li><a href="https://blog.csdn.net/weixin_46224056/article/details/137597431">索引失效的10种场景，你知道几个呢？（面试必刷!）</a></li><li><a href="https://mp.weixin.qq.com/s/mwME3qukHBFul57WQLkOYg">美团暑期实习一面：MySQl 索引失效的场景有哪些？</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-22 锁</title>
      <link href="/2025/03/02/75-22%20%E9%94%81/"/>
      <url>/2025/03/02/75-22%20%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="75-22-锁"><a href="#75-22-锁" class="headerlink" title="75-22 锁"></a>75-22 锁</h1><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>。</p><p>像 Java 中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现。</p><p>高并发的场景下，激烈的锁竞争会造成线程阻塞，大量阻塞线程会导致系统的上下文切换，增加系统的性能开销。并且，悲观锁还可能会存在死锁问题（线程获得锁的顺序不当时），影响代码的正常运行。</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了（具体方法可以使用版本号机制或 CAS 算法）。</p><p>高并发的场景下，乐观锁相比悲观锁来说，不存在锁竞争造成线程阻塞，也不会有死锁问题，在性能上往往会更胜一筹。但是，如果冲突频繁发生（写占比非常多的情况），会频繁失败并重试，这样同样会非常影响性能，导致 CPU 飙升。</p><p>理论上来说：</p><ul><li><strong>悲观锁</strong>通常多用于<strong>写比较多的情况（多写场景，竞争激烈）</strong>，这样可以避免频繁失败和重试影响性能，悲观锁的开销是固定的。不过，如果乐观锁解决了频繁失败和重试这个问题的话（比如<code>LongAdder</code>），也是可以考虑使用乐观锁的，要视实际情况而定。</li><li><strong>乐观锁</strong>通常多用于<strong>写比较少的情况（多读场景，竞争较少）</strong>，这样可以避免频繁加锁影响性能。不过，乐观锁主要针对的对象是单个共享变量（参考<code>java.util.concurrent.atomic</code>包下面的原子变量类）。</li></ul><h3 id="如何实现乐观锁"><a href="#如何实现乐观锁" class="headerlink" title="如何实现乐观锁"></a>如何实现乐观锁</h3><h4 id="版本号机制"><a href="#版本号机制" class="headerlink" title="版本号机制"></a>版本号机制</h4><p>一般是在数据表中加上一个数据版本号 <code>version</code> 字段，表示数据被修改的次数。当数据被修改时，<code>version</code> 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 <code>version</code> 值，在提交更新时，若刚才读取到的 version 值为当前数据库中的 <code>version</code> 值相等时才更新，否则重试更新操作，直到更新成功。</p><p><strong>举一个简单的例子</strong>：假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ <code>balance</code> ）为 $100 。</p><ol><li>操作员 A 此时将其读出（ <code>version</code>&#x3D;1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。</li><li>在操作员 A 操作的过程中，操作员 B 也读入此用户信息（ <code>version</code>&#x3D;1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。</li><li>操作员 A 完成了修改工作，将数据版本号（ <code>version</code>&#x3D;1 ），连同帐户扣除后余额（ <code>balance</code>&#x3D;$50 ），提交至数据库更新，此时由于提交数据版本等于数据库记录当前版本，数据被更新，数据库记录 <code>version</code> 更新为 2 。</li><li>操作员 B 完成了操作，也将版本号（ <code>version</code>&#x3D;1 ）试图向数据库提交数据（ <code>balance</code>&#x3D;$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 1 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须等于当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。</li></ol><p>这样就避免了操作员 B 用基于 <code>version</code>&#x3D;1 的旧数据修改的结果覆盖操作员 A 的操作结果的可能。</p><h4 id="CAS-算法实现乐观锁"><a href="#CAS-算法实现乐观锁" class="headerlink" title="CAS 算法实现乐观锁"></a>CAS 算法实现乐观锁</h4><p>CAS 的全称是 <strong>Compare And Swap（比较与交换）</strong> ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p>CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。</p><blockquote><p><strong>原子操作</strong> 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。</p></blockquote><p>CAS 涉及到三个操作数：</p><ul><li><strong>V</strong>：要更新的变量值(Var)</li><li><strong>E</strong>：预期值(Expected)</li><li><strong>N</strong>：拟写入的新值(New)</li></ul><p>当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新。</p><p><strong>举一个简单的例子</strong>：线程 A 要修改变量 i 的值为 6，i 原值为 1（V &#x3D; 1，E&#x3D;1，N&#x3D;6，假设不存在 ABA 问题）。</p><ol><li>i 与 1 进行比较，如果相等， 则说明没被其他线程修改，可以被设置为 6 。</li><li>i 与 1 进行比较，如果不相等，则说明被其他线程修改，当前线程放弃更新，CAS 操作失败。</li></ol><p>当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>在 Java 中，实现 CAS（Compare-And-Swap, 比较并交换）操作的一个关键类是<code>Unsafe</code>。</p><p><code>Unsafe</code>类位于<code>sun.misc</code>包下，是一个提供低级别、不安全操作的类。由于其强大的功能和潜在的危险性，它通常用于 JVM 内部或一些需要极高性能和底层访问的库中，而不推荐普通开发者在应用程序中使用。关于 <code>Unsafe</code>类的详细介绍，可以阅读这篇文章：📌<a href="https://javaguide.cn/java/basis/unsafe.html">Java 魔法类 Unsafe 详解</a>。</p><p><code>sun.misc</code>包下的<code>Unsafe</code>类提供了<code>compareAndSwapObject</code>、<code>compareAndSwapInt</code>、<code>compareAndSwapLong</code>方法来实现的对<code>Object</code>、<code>int</code>、<code>long</code>类型的 CAS 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以原子方式更新对象字段的值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o        要操作的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset   对象字段的内存偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expected 期望的旧值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x        要设置的新值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果值被成功更新，则返回 true；否则返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object expected, Object x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以原子方式更新 int 类型的对象字段的值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> expected, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以原子方式更新 long 类型的对象字段的值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapLong</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">long</span> expected, <span class="type">long</span> x)</span>;</span><br></pre></td></tr></table></figure><p><code>Unsafe</code>类中的 CAS 方法是<code>native</code>方法。<code>native</code>关键字表明这些方法是用本地代码（通常是 C 或 C++）实现的，而不是用 Java 实现的。这些方法直接调用底层的硬件指令来实现原子操作。也就是说，Java 语言并没有直接用 Java 实现 CAS。</p><p>更准确点来说，Java 中 CAS 是 C++ 内联汇编的形式实现的，通过 JNI（Java Native Interface） 调用。因此，CAS 的具体实现与操作系统以及 CPU 密切相关。</p><p>由于 CAS 操作可能会因为并发冲突而失败，因此通常会与<code>while</code>循环搭配使用，在失败后不断重试，直到操作成功。这就是 <strong>自旋锁机制</strong> 。</p><h3 id="CAS-算法存在哪些问题？"><a href="#CAS-算法存在哪些问题？" class="headerlink" title="CAS 算法存在哪些问题？"></a>CAS 算法存在哪些问题？</h3><h4 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h4><p>如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。这个问题被称为 CAS 操作的 <strong>“ABA”问题。</strong></p><p>ABA 问题的解决思路是在变量前面追加上<strong>版本号或者时间戳</strong>。JDK 1.5 以后的 <code>AtomicStampedReference</code> 类就是用来解决 ABA 问题的，其中的 <code>compareAndSet()</code> 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><h4 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h4><p>CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。</p><p>如果 JVM 能够支持处理器提供的<code>pause</code>指令，那么自旋操作的效率将有所提升。<code>pause</code>指令有两个重要作用：</p><ol><li><strong>延迟流水线执行指令</strong>：<code>pause</code>指令可以延迟指令的执行，从而减少 CPU 的资源消耗。具体的延迟时间取决于处理器的实现版本，在某些处理器上，延迟时间可能为零。</li><li><strong>避免内存顺序冲突</strong>：在退出循环时，<code>pause</code>指令可以避免由于内存顺序冲突而导致的 CPU 流水线被清空，从而提高 CPU 的执行效率。</li></ol><h4 id="只能保证一个共享变量的原"><a href="#只能保证一个共享变量的原" class="headerlink" title="只能保证一个共享变量的原"></a>只能保证一个共享变量的原</h4><p>CAS 操作仅能对单个共享变量有效。当需要操作多个共享变量时，CAS 就显得无能为力。不过，从 JDK 1.5 开始，Java 提供了<code>AtomicReference</code>类，这使得我们能够保证引用对象之间的原子性。通过将多个变量封装在一个对象中，我们可以使用<code>AtomicReference</code>来执行 CAS 操作。</p><p>除了 <code>AtomicReference</code> 这种方式之外，还可以利用加锁来保证。</p><h2 id="无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁"><a href="#无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁" class="headerlink" title="无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁"></a><strong>无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</strong></h2><p>这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p><p>首先为什么Synchronized能实现线程同步？</p><p>在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。</p><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><p>synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？</p><p>我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。</p><p><strong>Mark Word</strong>：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p><p><strong>Klass Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p><p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p><p>现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p><p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p><p><strong>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</strong></p><p>通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022215775.webp" alt="图片"></p><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a><strong>无锁</strong></h3><p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p><p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的<strong>CAS原理及应用即是无锁的实现</strong>。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p><p><strong>场景</strong>：</p><ul><li>只有一个线程访问资源，不需要加锁。</li></ul><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p><strong>概念</strong>：</p><ul><li><strong>当一个线程第一次获取锁后，JVM 让它“偏向”这个线程</strong>，下次这个线程再来，就不用重新加锁。</li><li><strong>如果没有其它线程竞争，锁不会升级</strong>，提高性能。</li></ul><p>🔹 <strong>场景</strong>：</p><ul><li><strong>线程几乎不会竞争</strong>，比如 <strong>一个线程不断调用一个同步方法</strong>。</li></ul><p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，<strong>而是检测Mark Word里是否存储着指向当前线程的偏向锁</strong>。引入偏向锁是为了在<strong>无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径</strong>，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</p><p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a><strong>轻量级锁</strong></h3><p><strong>概念</strong>：</p><ul><li><strong>如果多个线程访问同步代码，但没有真正的锁竞争</strong>，JVM <strong>使用 CAS（无锁操作）尝试加锁</strong>，而不是进入重量级锁。</li></ul><p>🔹 <strong>场景</strong>：</p><ul><li><strong>多个线程访问同步代码</strong>，但不会发生<strong>真正的竞争（线程执行时间错开）</strong>。</li></ul><p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p><p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</p><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p><p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p><p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a><strong>重量级锁</strong></h3><p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p><p>整体的锁状态升级流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022255978.webp" alt="图片"></p><p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p><h2 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a><strong>公平锁 VS 非公平锁</strong></h2><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p><p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p>直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022301942.webp" alt="图片"></p><h2 id="可重入锁-VS-非可重入锁"><a href="#可重入锁-VS-非可重入锁" class="headerlink" title="可重入锁 VS 非可重入锁"></a><strong>可重入锁 VS 非可重入锁</strong></h2><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022303140.webp" alt="图片"></p><p>首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p><p>当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status &#x3D;&#x3D; 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status !&#x3D; 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status !&#x3D; 0的话会导致其获取锁失败，当前线程阻塞。</p><p>释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 &#x3D;&#x3D; 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。</p><h2 id="独享锁-VS-共享锁"><a href="#独享锁-VS-共享锁" class="headerlink" title="独享锁 VS 共享锁"></a><strong>独享锁 VS 共享锁</strong></h2><p><strong>共享锁【S锁】</strong><br>又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</p><p><strong>排他锁（独享锁）【X锁】</strong><br>又称写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。</p><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。</p><p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p><p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p><p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p><p>下图为ReentrantReadWriteLock的部分源码：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022306517.webp" alt="图片"></p><p>我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p><p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。</p><h2 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h2><p>假设事务 A 锁住了表T里的一行记录，这时候，你执行了一个 DDL 语句，想给这张表加个字段，这时候需要锁表吧？但是由于表里有一行记录被锁住了，所以这时候锁表时会 block。</p><p>那 Mysql 在锁表时，怎么判断表里有没有记录被锁住呢？</p><p>最简单暴力的，遍历整张表，遍历每行记录，遇到一个锁，就说明表里加锁了。</p><p>这样做可以，但是很傻，性能很差，高性能的 MySQL，不允许这样的做法存在。</p><p>MySQL会怎么做呢？</p><p>行锁是行级别的，粒度比较小，好，那我要你在拿行锁之前，必须先拿一个假的表锁，表示你想去锁住表里的某一行或者多行记录。</p><p>这样，Mysql 在判断表里有没有记录被锁定，就不需要遍历整张表了，它只需要看看，有没有人拿了这个假的表锁。</p><p><strong>这个假的表锁，就是我们常说的，意向锁。</strong></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651749434&idx=3&sn=5ffa63ad47fe166f2f1a9f604ed10091&chksm=bd12a5778a652c61509d9e718ab086ff27ad8768586ea9b38c3dcf9e017a8e49bcae3df9bcc8&scene=38#wechat_redirect">【基本功】不可不说的Java“锁”事</a></li><li><a href="https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/">Mysql锁：灵魂七拷问</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 锁 </tag>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-21 AQS</title>
      <link href="/2025/03/02/75-21%20AQS/"/>
      <url>/2025/03/02/75-21%20AQS/</url>
      
        <content type="html"><![CDATA[<h1 id="75-21-AQS"><a href="#75-21-AQS" class="headerlink" title="75-21 AQS"></a>75-21 AQS</h1><h2 id="AQS介绍"><a href="#AQS介绍" class="headerlink" title="AQS介绍"></a>AQS介绍</h2><p>AQS 的全称为 <code>AbstractQueuedSynchronizer</code> ，翻译过来的意思就是抽象队列同步器。这个类在 <code>java.util.concurrent.locks</code> 包下面。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022042101.png" alt="img"></p><p>你可以把 AQS 想象成一个 <strong>排队买票的场景</strong>：</p><ul><li>售票窗口（临界资源）一次只能处理一个人。</li><li>买票的人（线程）来了之后，要 <strong>排队</strong>，按顺序等着窗口处理。</li><li>有的窗口（<code>ReentrantLock</code>）一次只接待一个人，而有的窗口（<code>Semaphore</code>）可能同时处理多个。</li><li>售票员（AQS）管理着整个队伍，决定谁该进、谁该等。</li></ul><p>换句话说，AQS <strong>管理着一组线程的访问权限</strong>，确保 <strong>资源访问的有序性和安全性</strong>。</p><p>AQS 为构建锁和同步器提供了一些通用功能的实现。因此，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 <code>ReentrantLock</code>，<code>Semaphore</code>，其他的诸如 <code>ReentrantReadWriteLock</code>，<code>SynchronousQueue</code>等等皆是基于 AQS 的。</p><p><a href="https://so.csdn.net/so/search?q=AQS&spm=1001.2101.3001.7020">AQS</a>（ AbstractQueuedSynchronizer ）是一个用来构建锁和同步器（所谓同步，是指线程之间的通信、协作）的框架。</p><hr><h2 id="锁原理-信号量-vs-管程"><a href="#锁原理-信号量-vs-管程" class="headerlink" title="锁原理 - 信号量 vs 管程"></a>锁原理 - 信号量 vs 管程</h2><p>在并发编程领域，有两大核心问题：<strong>互斥</strong>与<strong>同步</strong>，互斥即同一时刻只允许一个线程访问共享资源，同步，即线程之间如何通信、协作，一般这两大问题可以通过<strong>信号量</strong>和<strong>管程</strong>来解决。</p><p>并发编程领域主要就是两个核心问题：互斥和同步，并发就是我们需要保证在多个线程工作时，对于某些资源我们希望其按照规则来获取，对于某些操作，我们希望其按照规则来进行执行。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>**信号量（Semaphore）**是操作系统提供的一种进程间常见的通信方式，主要用来协调并发程序对共享资源的访问，操作系统可以保证对信号量操作的原子性。它是怎么实现的呢。</p><p>信号量由一个共享整型变量 S 和两个原子操作 PV 组成，S 只能通过 P 和 V 操作来改变</p><p>P 操作：即请求资源，意味着 S 要减 1，如果 S &lt;  0, 则表示没有资源了，此时线程要进入等待队列（同步队列）等待</p><p>V 操作:  即释放资源，意味着 S 要加 1， 如果 S 小于等于 0，说明等待队列里有线程，此时就需要唤醒线程。</p><p>示意图如下</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022055175.png" alt="图片"></p><p>信号量机制的引入解决了进程同步和互斥问题，<strong>但信号量的大量同步操作分散在各个进程中不便于管理</strong>，还有可能导致系统死锁。如：生产者消费者问题中将P、V颠倒可能死锁（见文末参考链接），另外条件越多，需要的信号量就越多，需要更加谨慎地处理信号量之间的处理顺序，否则很容易造成死锁现象。</p><p>基于信号量给编程带来的隐患，于是有了提出了对开发者更加友好的并发编程模型-管程。</p><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><p>Dijkstra 于 1971 年提出：把所有进程对某一种<strong>临界资源</strong>的同步操作都集中起来，构成一个所谓的秘书进程。凡要访问该临界资源的进程，都需先报告秘书，由秘书来实现诸进程对同一临界资源的<strong>互斥</strong>使用，这种机制就是管程。</p><p><strong>管程（Monitor）是一种同步机制</strong>，用于管理多个线程对 <strong>共享资源的访问</strong>。它本质上是 <strong>一个封装了互斥锁和条件变量的对象</strong>，提供了一种安全的方式来协调线程的执行。</p><h4 id="二、形象类比：管程就像“洗手间”"><a href="#二、形象类比：管程就像“洗手间”" class="headerlink" title="二、形象类比：管程就像“洗手间”"></a><strong>二、形象类比：管程就像“洗手间”</strong></h4><h5 id="1-互斥锁（Mutex）：控制进入"><a href="#1-互斥锁（Mutex）：控制进入" class="headerlink" title="1. 互斥锁（Mutex）：控制进入"></a><strong>1. 互斥锁（Mutex）：控制进入</strong></h5><p>想象有一个公共 <strong>洗手间（共享资源）</strong>，为了避免混乱，它 <strong>一次只能允许一个人（线程）进入</strong>，其他人必须 <strong>排队等待</strong>。</p><ul><li><strong>锁（Lock）</strong>：洗手间的门锁，确保同一时间 <strong>最多只有一个人</strong> 在里面。</li><li><strong>进入洗手间（临界区代码）</strong>：一个人使用资源，别人不能抢占。</li><li><strong>离开洗手间（释放锁）</strong>：使用完毕后，释放锁，让下一个人进入。</li></ul><h5 id="2-条件变量（Condition）：等待合适的条件"><a href="#2-条件变量（Condition）：等待合适的条件" class="headerlink" title="2. 条件变量（Condition）：等待合适的条件"></a><strong>2. 条件变量（Condition）：等待合适的条件</strong></h5><p>假设 <strong>洗手间里有 3 个蹲位</strong>：</p><ul><li>如果你进来发现所有蹲位都被占了（条件不满足），你只能 <strong>排队等候</strong>。</li><li><strong>当有蹲位空出来时（某人离开），系统会通知你可以使用</strong>。</li></ul><p><strong>🔹 这对应了管程的两种操作</strong>：</p><ul><li><code>wait()</code>: 线程 <strong>等待某个条件</strong>（比如蹲位空出）。</li><li><code>notify()/notifyAll()</code>: <strong>通知等待的线程</strong>，某个条件满足了（蹲位空了）。</li></ul><p><strong>在没有管程之前（monitor），如果这个共享资源存在多个的话，那么就需要多个互斥锁（也就是多个信号量），那么每一个需要使用共享资源的话，都需要一一询问每一个信号量，判断是否可以使用，很是麻烦。那么管程（monitor）就是将这些信号量归于一起，以后任何线程想使用共享资源的话，直接来问ta就可以了。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022115432.png" alt="图片"></p><hr><h2 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h2><p>AQS 全称是 AbstractQueuedSynchronizer，是一个用来构建<strong>锁</strong>和<strong>同步器</strong>的框架，它维护了一个共享资源 state 和一个 FIFO 的等待队列（即上文中管程的入口等待队列），底层利用了 CAS 机制来保证操作的原子性。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022116441.jpeg" alt="图片"></p><h3 id="AQS四大疑问"><a href="#AQS四大疑问" class="headerlink" title="AQS四大疑问"></a>AQS四大疑问</h3><h4 id="AQS的作用是什么？"><a href="#AQS的作用是什么？" class="headerlink" title="AQS的作用是什么？"></a>AQS的作用是什么？</h4><p>AQS 解决了开发者在实现同步器时的复杂性问题。它提供了一个通用框架，用于实现各种同步器，例如 <strong>可重入锁</strong>（<code>ReentrantLock</code>）、<strong>信号量</strong>（<code>Semaphore</code>）和 <strong>倒计时器</strong>（<code>CountDownLatch</code>）。通过封装底层的线程同步机制，AQS 将复杂的线程管理逻辑隐藏起来，使开发者只需专注于具体的同步逻辑。</p><h4 id="AQS-为什么使用-CLH-锁队列的变体？"><a href="#AQS-为什么使用-CLH-锁队列的变体？" class="headerlink" title="AQS 为什么使用 CLH 锁队列的变体？"></a>AQS 为什么使用 CLH 锁队列的变体？</h4><p>CLH 锁是一种基于 <strong>自旋锁</strong> 的优化实现。</p><p>先说一下自旋锁存在的问题：自旋锁通过线程不断对一个原子变量执行 <code>compareAndSet</code>（简称 <code>CAS</code>）操作来尝试获取锁。在高并发场景下，多个线程会同时竞争同一个原子变量，容易造成某个线程的 <code>CAS</code> 操作长时间失败，从而导致 <strong>“饥饿”问题</strong>（某些线程可能永远无法获取锁）。</p><p>CLH 锁通过引入一个队列来组织并发竞争的线程，对自旋锁进行了改进：</p><ul><li>每个线程会作为一个节点加入到队列中，并通过自旋监控前一个线程节点的状态，而不是直接竞争共享变量。</li><li>线程按顺序排队，确保公平性，从而避免了 “饥饿” 问题。</li></ul><p>AQS（AbstractQueuedSynchronizer）在 CLH 锁的基础上进一步优化，形成了其内部的 <strong>CLH 队列变体</strong>。主要改进点有以下两方面：</p><ol><li>自旋 + 阻塞： CLH 锁使用纯自旋方式等待锁的释放，但大量的自旋操作会占用过多的 CPU 资源。AQS 引入了自旋 + 阻塞的混合机制： <ul><li>如果线程获取锁失败，会先短暂自旋尝试获取锁；</li><li>如果仍然失败，则线程会进入阻塞状态，等待被唤醒，从而减少 CPU 的浪费。</li></ul></li><li><strong>单向队列改为双向队列</strong>：CLH 锁使用单向队列，节点只知道前驱节点的状态，而当某个节点释放锁时，需要通过队列唤醒后续节点。AQS 将队列改为 <strong>双向队列</strong>，新增了 <code>next</code> 指针，使得节点不仅知道前驱节点，也可以直接唤醒后继节点，从而简化了队列操作，提高了唤醒效率。</li></ol><h4 id="AQS-的性能比较好，原因是什么？"><a href="#AQS-的性能比较好，原因是什么？" class="headerlink" title="AQS 的性能比较好，原因是什么？"></a>AQS 的性能比较好，原因是什么？</h4><p>因为 AQS 里使用了 <code>CAS</code> + <code>线程阻塞/唤醒</code> 。</p><p>在 AQS 的实现里，大量使用了 <code>CAS</code> 操作，<code>CAS</code> 基于内存地址直接进行数据修改，保证并发安全的同时，性能也很好。</p><p>但是如果一直通过 <code>CAS</code> 操作来更新数据，会比较占用 CPU。因此 AQS 同时结合了 <code>CAS</code> 和 <code>线程的阻塞/唤醒</code> 机制，当 <code>CAS</code> 没有成功获取资源时，会对线程进行阻塞，避免一直空转占用 CPU 资源。</p><h4 id="AQS-中为什么-Node-节点需要不同的状态？"><a href="#AQS-中为什么-Node-节点需要不同的状态？" class="headerlink" title="AQS 中为什么 Node 节点需要不同的状态？"></a>AQS 中为什么 Node 节点需要不同的状态？</h4><p>AQS 中的 <code>waitStatus</code> 状态类似于 <strong>状态机</strong> ，通过不同状态来表明 Node 节点的不同含义，并且根据不同操作，来控制状态之间的流转。</p><p>在 AQS 中，一个节点加入队列之后，初始状态为 <code>0</code> 。</p><p>当有新的节点加入队列，此时新节点的前继节点状态就会由 <code>0</code> 更新为 <code>SIGNAL</code> ，表示前继节点释放锁之后，需要对新节点进行唤醒操作。</p><p>如果一个节点在队列中等待获取锁锁时，因为某种原因失败了，该节点的状态就会变为 <code>CANCELLED</code> ，表明取消获取锁，这种状态的节点是异常的，无法被唤醒，也无法唤醒后继节点</p><h3 id="AQS核心思想"><a href="#AQS核心思想" class="headerlink" title="AQS核心思想"></a>AQS核心思想</h3><p>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是基于 <strong>CLH 锁</strong> （Craig, Landin, and Hagersten locks） 进一步优化实现的。</p><p>AQS 将每条请求共享资源的线程封装成一个 CLH 变体队列的一个结点（Node）来实现锁的分配。在 CLH 变体队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022150053.png" alt="CLH 变体队列结构"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022150548.png" alt="CLH 变体队列"></p><h3 id="Node-节点-waitStatus-状态含义"><a href="#Node-节点-waitStatus-状态含义" class="headerlink" title="Node 节点 waitStatus 状态含义"></a>Node 节点 waitStatus 状态含义</h3><table><thead><tr><th>Node 节点状态</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>CANCELLED</code></td><td>1</td><td>表示线程已经取消获取锁。线程在等待获取资源时被中断、等待资源超时会更新为该状态。</td></tr><tr><td><code>SIGNAL</code></td><td>-1</td><td>表示后继节点需要当前节点唤醒。在当前线程节点释放锁之后，需要对后继节点进行唤醒。</td></tr><tr><td><code>CONDITION</code></td><td>-2</td><td>表示节点在等待 Condition。当其他线程调用了 Condition 的 <code>signal()</code> 方法后，节点会从等待队列转移到同步队列中等待获取资源。</td></tr><tr><td><code>PROPAGATE</code></td><td>-3</td><td>用于共享模式，在共享模式下，前继节点不仅会唤醒后继节点，同时也可能会唤醒后继节点的后继节点。</td></tr><tr><td></td><td>0</td><td>加入队列的新节点的初始状态。</td></tr></tbody></table><p>如果 <code>waitStatus &gt; 0</code> ，表明节点的状态已经取消等待获取资源。</p><p>如果 <code>waitStatus &lt; 0</code> ，表明节点的处于有效的等待状态。</p><p>因此在 AQS 的源码中，经常使用 <code>&gt; 0</code> 、 <code>&lt; 0</code> 来对 <code>waitStatus</code> 进行判断</p><h2 id="图解-AQS-工作原理"><a href="#图解-AQS-工作原理" class="headerlink" title="图解 AQS 工作原理"></a>图解 AQS 工作原理</h2><p>至此，AQS 中以独占模式获取资源、释放资源的源码就讲完了。为了对 AQS 的工作原理、节点状态变化有一个更加清晰的认识，接下来会通过画图的方式来了解整个 AQS 的工作原理。</p><p>由于 AQS 是底层同步工具，获取和释放资源的方法并没有提供具体实现，因此这里基于 <code>ReentrantLock</code> 来画图进行讲解。</p><p>假设总共有 3 个线程尝试获取锁，线程分别为 <code>T1</code> 、 <code>T2</code> 和 <code>T3</code> 。</p><p>此时，假设线程 <code>T1</code> 先获取到锁，线程 <code>T2</code> 排队等待获取锁。在线程 <code>T2</code> 进入队列之前，需要对 AQS 内部队列进行初始化。<code>head</code> 节点在初始化后状态为 <code>0</code> 。AQS 内部初始化后的队列如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022159664.png" alt="img"></p><p>此时，线程 <code>T2</code> 尝试获取锁。由于线程 <code>T1</code> 持有锁，因此线程 <code>T2</code> 会进入队列中等待获取锁。同时会将前继节点（ <code>head</code> 节点）的状态由 <code>0</code> 更新为 <code>SIGNAL</code> ，表示需要对 <code>head</code> 节点的后继节点进行唤醒。此时，AQS 内部队列如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022200899.png" alt="img"></p><p>此时，线程 <code>T3</code> 尝试获取锁。由于线程 <code>T1</code> 持有锁，因此线程 <code>T3</code> 会进入队列中等待获取锁。同时会将前继节点（线程 <code>T2</code> 节点）的状态由 <code>0</code> 更新为 <code>SIGNAL</code> ，表示线程 <code>T2</code> 节点需要对后继节点进行唤醒。此时，AQS 内部队列如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022201209.png" alt="img"></p><p>此时，假设线程 <code>T1</code> 释放锁，会唤醒后继节点 <code>T2</code> 。线程 <code>T2</code> 被唤醒后获取到锁，并且会从等待队列中退出。</p><p>这里线程 <code>T2</code> 节点退出等待队列并不是直接从队列移除，而是令线程 <code>T2</code> 节点成为新的 <code>head</code> 节点，以此来退出资源获取的等待。此时 AQS 内部队列如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022201720.png" alt="img"></p><p>此时，假设线程 <code>T2</code> 释放锁，会唤醒后继节点 <code>T3</code> 。线程 <code>T3</code> 获取到锁之后，同样也退出等待队列，即将线程 <code>T3</code> 节点变为 <code>head</code> 节点来退出资源获取的等待。此时 AQS 内部队列如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503022202274.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java并发 </tag>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80-03 时序预测论文阅读笔记</title>
      <link href="/2025/02/28/80-03%20%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2025/02/28/80-03%20%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="80-03-时序预测论文阅读笔记"><a href="#80-03-时序预测论文阅读笔记" class="headerlink" title="80-03 时序预测论文阅读笔记"></a>80-03 时序预测论文阅读笔记</h1><h2 id="Adaptive-Normalization-for-Non-stationary-Time-Series-Forecasting-A-Temporal-Slice-Perspective"><a href="#Adaptive-Normalization-for-Non-stationary-Time-Series-Forecasting-A-Temporal-Slice-Perspective" class="headerlink" title="Adaptive Normalization for Non-stationary Time Series Forecasting: A Temporal Slice Perspective"></a>Adaptive Normalization for Non-stationary Time Series Forecasting: A Temporal Slice Perspective</h2><h3 id="摘要总结"><a href="#摘要总结" class="headerlink" title="摘要总结"></a>摘要总结</h3><h4 id="1-时间序列预测的挑战"><a href="#1-时间序列预测的挑战" class="headerlink" title="1. 时间序列预测的挑战"></a>1. <strong>时间序列预测的挑战</strong></h4><ul><li>深度学习模型因其捕获序列依赖性的强大能力在时间序列预测中取得进展。</li><li>然而，现实世界的数据往往存在非平稳性，即数据分布随时间变化，这使得准确预测变得具有挑战性。</li></ul><h4 id="2-现有方法的不足"><a href="#2-现有方法的不足" class="headerlink" title="2. 现有方法的不足"></a>2. <strong>现有方法的不足</strong></h4><ul><li>目前的解决方案通过<strong>标准化来减少非平稳性</strong>，但这些方法通常假设时间序列中的所有时间点具有相同的统计属性，并忽视输入序列和水平序列之间的分布差异。</li><li>这种方法过于理想，可能导致次优的预测结果。</li></ul><h4 id="3-提出的SAN方法"><a href="#3-提出的SAN方法" class="headerlink" title="3. 提出的SAN方法"></a>3. <strong>提出的SAN方法</strong></h4><ul><li><strong>切片级自适应归一化（SAN）</strong>：一种新的方法，<strong>旨在通过灵活的归一化和反归一化增强时间序列预测</strong>。</li><li>两个关键设计：<ol><li><strong>局部时间片归一化</strong>：SAN通过以子序列为单位消除非平稳性，而非全局实例。</li><li><strong>轻微网络模块建模统计特性</strong>：SAN通过独立建模原始时间序列统计特性的演变趋势来进一步优化预测。</li></ol></li><li>SAN是一种通用的模型无关插件，能更有效地减轻时间序列数据的非平稳性影响。</li></ul><h4 id="4-实验证明"><a href="#4-实验证明" class="headerlink" title="4. 实验证明"></a>4. <strong>实验证明</strong></h4><ul><li>SAN在四种常用的预测模型上进行了实例化，并在基准数据集上测试，验证了其有效性。</li><li>公开了相关代码，提供了进一步的实验支持。<a href="https://github.com/icantnamemyself/SAN">https://github.com/icantnamemyself/SAN</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502282202409.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502282215973.png" alt="image-20250228221524632"></p><h3 id="与归一化方法的比较"><a href="#与归一化方法的比较" class="headerlink" title="与归一化方法的比较"></a>与归一化方法的比较</h3><p>在本节中，我们将SAN与三种最先进的非平稳时间序列预测归一化方法进行比较:RevIN[17]、非平稳变压器(NST)[25]和Dish-TS[10]。在第4.2节中相同的实验设置下，我们报告了Autoformer和FEDformer在每个数据集的所有预测长度上的平均MSE评估以及表4中的相对改进。由于NST只能适用于基于变压器的模型，其他模型没有那么复杂，而其他方法则更加灵活，可以应用于任意预测模型。</p><p>在现有的规范化方法中，SAN的性能是最好的。改进效果显著，平均MSE降低了10.71%。除了Weather之外，SAN的性能始终优于基线模型，并且在Exchange和ILI等典型非平稳数据集(由ADF测试确定)中的改进更为明显。比较表明，从时间切片的角度来看，SAN可能比考虑整个实例更有效地去除非平稳因素。此外，所提出的两阶段训练模式至关重要，因为它使SAN在很大程度上优于Dish-TS，而后者忽略了双层优化的本质。然而，SAN的这种特殊能力可能会导致过度平方化问题[25]，从而导致Weather数据集的性能下降。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在本研究中，我们着重于利用一种新的切片视图来缓解时间序列数据的非平稳性。我们提出了用于时间序列预测的SAN框架，这是一种模型不可知的方法，<strong>通过去除非平稳因素来标准化输入</strong>，并通过在每片基础上的反规范化将其恢复到输出。此外，SAN还利用一种新颖的统计预测模块，将非平稳预测分解为两个子任务，从而简化了预测模型的性能。为了证明SAN的优势，我们在一个广泛使用的基准数据集上进行了实验，发现SAN显著改善了主流预测模型，并且优于最先进的归一化方法。<strong>我们希望SAN可以作为时间序列预测的基础组件</strong>，并促进从切片角度对时间序列建模的进一步研究。</p><hr><h2 id="FreTS-Frequency-domain-MLPs-are-More-Effective-Learners-in-Time-Series-Forecasting-论文详解"><a href="#FreTS-Frequency-domain-MLPs-are-More-Effective-Learners-in-Time-Series-Forecasting-论文详解" class="headerlink" title="FreTS: Frequency-domain MLPs are More Effective Learners in Time Series Forecasting 论文详解"></a>FreTS: Frequency-domain MLPs are More Effective Learners in Time Series Forecasting 论文详解</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>时间序列预测在不同的行业中发挥了关键作用，包括金融、交通、能源和医疗保健领域。虽然现有文献设计了许多基于RNN、GNN或Transformers的复杂架构，但提出了另一种基于多层感知器（MLP）的方法，其结构简单、复杂度低、性能优越。然而，大多数基于MLP的预测方法都存在逐点映射和信息瓶颈，这在很大程度上阻碍了预测性能。为了克服这个问题，我们探索了在频域中应用MLP进行时间序列预测的新方向。我们研究了频域MLP的学习模式，发现了它们有利于预测的两个固有特征，（i）全局视图：频谱使MLP拥有完整的信号视图，更容易学习全局依赖关系，（ii）能量压缩：频域MLP专注于具有紧凑信号能量的频率分量的较小关键部分。然后，我们提出了FreTS，这是一种基于频域MLP构建的简单而有效的时间序列预测架构。FreTS主要涉及两个阶段，（i）域转换，将时域信号转换为频域复数；（ii）频率学习，它执行我们重新设计的MLP，用于学习频率分量的实部和虚部。在系列间和系列内尺度上运行的上述阶段进一步有助于通道和时间依赖性学习。对13个真实世界基准（包括7个短期预测基准和6个长期预测基准）的广泛实验表明，我们始终优于最先进的方法。代码可在此存储库中获得：<a href="https://github.com/aikunyi/FreTS">https://github.com/aikunyi/FreTS</a>.</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503032203174.png" alt="image-20250303220320114"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503032203442.png" alt="image-20250303220340224"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80-01 Adaptive Normalization for Non-stationary Time Series Forecasting</title>
      <link href="/2025/02/28/80-01%20Adaptive%20Normalization%20for%20Non-stationary%20Time%20Series%20Forecasting%20A%20Temporal%20Slice%20Perspective%20/"/>
      <url>/2025/02/28/80-01%20Adaptive%20Normalization%20for%20Non-stationary%20Time%20Series%20Forecasting%20A%20Temporal%20Slice%20Perspective%20/</url>
      
        <content type="html"><![CDATA[<h1 id="80-01-Adaptive-Normalization-for-Non-stationary-Time-Series-Forecasting-A-Temporal-Slice-Perspective"><a href="#80-01-Adaptive-Normalization-for-Non-stationary-Time-Series-Forecasting-A-Temporal-Slice-Perspective" class="headerlink" title="80-01 Adaptive Normalization for Non-stationary Time Series Forecasting: A Temporal Slice Perspective"></a>80-01 Adaptive Normalization for Non-stationary Time Series Forecasting: A Temporal Slice Perspective</h1><h2 id="摘要总结"><a href="#摘要总结" class="headerlink" title="摘要总结"></a>摘要总结</h2><h3 id="1-时间序列预测的挑战"><a href="#1-时间序列预测的挑战" class="headerlink" title="1. 时间序列预测的挑战"></a>1. <strong>时间序列预测的挑战</strong></h3><ul><li>深度学习模型因其捕获序列依赖性的强大能力在时间序列预测中取得进展。</li><li>然而，现实世界的数据往往存在非平稳性，即数据分布随时间变化，这使得准确预测变得具有挑战性。</li></ul><h3 id="2-现有方法的不足"><a href="#2-现有方法的不足" class="headerlink" title="2. 现有方法的不足"></a>2. <strong>现有方法的不足</strong></h3><ul><li>目前的解决方案通过<strong>标准化来减少非平稳性</strong>，但这些方法通常假设时间序列中的所有时间点具有相同的统计属性，并忽视输入序列和水平序列之间的分布差异。</li><li>这种方法过于理想，可能导致次优的预测结果。</li></ul><h3 id="3-提出的SAN方法"><a href="#3-提出的SAN方法" class="headerlink" title="3. 提出的SAN方法"></a>3. <strong>提出的SAN方法</strong></h3><ul><li><strong>切片级自适应归一化（SAN）</strong>：一种新的方法，<strong>旨在通过灵活的归一化和反归一化增强时间序列预测</strong>。</li><li>两个关键设计：<ol><li><strong>局部时间片归一化</strong>：SAN通过以子序列为单位消除非平稳性，而非全局实例。</li><li><strong>轻微网络模块建模统计特性</strong>：SAN通过独立建模原始时间序列统计特性的演变趋势来进一步优化预测。</li></ol></li><li>SAN是一种通用的模型无关插件，能更有效地减轻时间序列数据的非平稳性影响。</li></ul><h3 id="4-实验证明"><a href="#4-实验证明" class="headerlink" title="4. 实验证明"></a>4. <strong>实验证明</strong></h3><ul><li>SAN在四种常用的预测模型上进行了实例化，并在基准数据集上测试，验证了其有效性。</li><li>公开了相关代码，提供了进一步的实验支持。<a href="https://github.com/icantnamemyself/SAN">https://github.com/icantnamemyself/SAN</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502282202409.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502282215973.png" alt="image-20250228221524632"></p><h2 id="与归一化方法的比较"><a href="#与归一化方法的比较" class="headerlink" title="与归一化方法的比较"></a>与归一化方法的比较</h2><p>在本节中，我们将SAN与三种最先进的非平稳时间序列预测归一化方法进行比较:RevIN[17]、非平稳变压器(NST)[25]和Dish-TS[10]。在第4.2节中相同的实验设置下，我们报告了Autoformer和FEDformer在每个数据集的所有预测长度上的平均MSE评估以及表4中的相对改进。由于NST只能适用于基于变压器的模型，其他模型没有那么复杂，而其他方法则更加灵活，可以应用于任意预测模型。</p><p>在现有的规范化方法中，SAN的性能是最好的。改进效果显著，平均MSE降低了10.71%。除了Weather之外，SAN的性能始终优于基线模型，并且在Exchange和ILI等典型非平稳数据集(由ADF测试确定)中的改进更为明显。比较表明，从时间切片的角度来看，SAN可能比考虑整个实例更有效地去除非平稳因素。此外，所提出的两阶段训练模式至关重要，因为它使SAN在很大程度上优于Dish-TS，而后者忽略了双层优化的本质。然而，SAN的这种特殊能力可能会导致过度平方化问题[25]，从而导致Weather数据集的性能下降。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在本研究中，我们着重于利用一种新的切片视图来缓解时间序列数据的非平稳性。我们提出了用于时间序列预测的SAN框架，这是一种模型不可知的方法，<strong>通过去除非平稳因素来标准化输入</strong>，并通过在每片基础上的反规范化将其恢复到输出。此外，SAN还利用一种新颖的统计预测模块，将非平稳预测分解为两个子任务，从而简化了预测模型的性能。为了证明SAN的优势，我们在一个广泛使用的基准数据集上进行了实验，发现SAN显著改善了主流预测模型，并且优于最先进的归一化方法。<strong>我们希望SAN可以作为时间序列预测的基础组件</strong>，并促进从切片角度对时间序列建模的进一步研究。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80-02 BasisFormer:Attention-based Time Series Forecasting with Learnable and Interpretable Basis</title>
      <link href="/2025/02/28/80-02%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ABasisFormer%20Attention-based%20Time%20Series%20Forecasting%20with%20Learnable%20and%20Interpretable%20Basis/"/>
      <url>/2025/02/28/80-02%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ABasisFormer%20Attention-based%20Time%20Series%20Forecasting%20with%20Learnable%20and%20Interpretable%20Basis/</url>
      
        <content type="html"><![CDATA[<h1 id="80-02-BasisFormer-Attention-based-Time-Series-Forecasting-with-Learnable-and-Interpretable-Basis"><a href="#80-02-BasisFormer-Attention-based-Time-Series-Forecasting-with-Learnable-and-Interpretable-Basis" class="headerlink" title="80-02 BasisFormer: Attention-based Time Series Forecasting with Learnable and Interpretable Basis"></a>80-02 BasisFormer: Attention-based Time Series Forecasting with Learnable and Interpretable Basis</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>基函数（Bases）因其能够作为特征提取器或未来参考模板的特性，已成为现代基于深度学习的时间序列预测模型的重要组成部分。为了高效运作，基函数需满足两大条件：</p><ol><li>需针对特定时间序列数据集定制化；</li><li>需与集合内各时间序列保持显著相关性。然而，现有前沿方法难以同时满足这两项要求。</li></ol><p>为解决这一挑战，本文提出<strong>BasisFormer</strong>——一种<strong>端到端的时间序列预测架构</strong>，通过可学习且可解释的基函数实现高效建模。该架构包含三大核心模块：</p><ol><li><strong>基函数生成</strong>：通过自适应自监督学习获取基函数，将时间序列的历史段与未来段视为两个独立视图，并采用对比学习策略；</li><li><strong>相似性系数计算</strong>：设计<strong>Coef模块</strong>，利用双向交叉注意力机制计算历史视图中时间序列与基函数之间的相关性系数；</li><li><strong>预测整合</strong>：基于相关性系数，在<strong>Forecast模块</strong>中选择并整合未来视图中的基函数，生成精准预测结果。<br>在6个基准数据集上的实验表明，BasisFormer在单变量与多变量预测任务中分别以**11.04%<strong>和</strong>15.78%**的优势超越现有最优方法。代码已开源：<a href="https://github.com/nzl5116190/Basisformer">https://github.com/nzl5116190/Basisformer</a>.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502282239097.png" alt="image-20250228223943058"></p><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><p>我们提出了一种基础学习的自监督方法，将时间序列的历史部分和未来部分视为两个不同的视图并采用对比学习，这确保了时间序列基础的选择在两个视图中是一致的。</p><p> 我们设计了Coef 和Forecast 模块，根据衡量时间序列与历史视图中的基础之间相似性的系数，选择并合并未来视图中的相关基础。</p><p>我们对六个数据集进行了广泛的实验，发现我们的模型在单变量预测任务上比以前的 SOTA 方法高出 11.04%，在多变量预测任务上比以前的 SOTA 方法高出 15.78%。</p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p>假设我们有一个维度为 C 的时间序列集合，这意味着 C 个相关的时间序列需要同时预测。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502282300756.png" alt="image-20250228230023291"></p><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>数据集：本研究使用的六个数据集包括以下内容：</p><ol><li>ETT，由电力变压器的温度数据组成； </li><li>用电量，包括多个客户的用电量数据； </li><li>汇率，包含特定时间范围内的金融汇率； </li><li>交通，包括与道路交通相关的数据； </li><li>天气，涉及各种天气指标； </li><li>疾病，包括记录的流感样疾病数据。</li></ol><p>请注意，ETT 进一步分为四个子数据集：ETTh1、ETTh2、ETTm1 和 ETTm2，表 1 中的结果仅基于 ETTm2 子数据集。 其余三个子数据集的结果可以在附录中找到。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502282305624.png" alt="image-20250228230533876"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-20 JIT &amp; AOT</title>
      <link href="/2025/02/28/75-20%20JIT/"/>
      <url>/2025/02/28/75-20%20JIT/</url>
      
        <content type="html"><![CDATA[<h1 id="75-20-JIT-AOT"><a href="#75-20-JIT-AOT" class="headerlink" title="75-20 JIT &amp; AOT"></a>75-20 JIT &amp; AOT</h1><h2 id="JIT-是什么？"><a href="#JIT-是什么？" class="headerlink" title="JIT 是什么？"></a>JIT 是什么？</h2><p>JIT（Just-In-Time，即时编译器）是 Java 虚拟机（JVM）中的一项关键优化技术，它的作用是<strong>在运行时将字节码编译为机器码</strong>，从而提高 Java 程序的执行效率。</p><p>传统上，Java 代码的执行流程如下：</p><ol><li><strong>Java 源代码（.java）</strong> → 通过 <strong>Java 编译器（javac）</strong> 编译成 <strong>字节码（.class）</strong>。</li><li><strong>字节码</strong> 由 <strong>JVM 的解释器（Interpreter）</strong> 按行解释执行，性能较低。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503012330743.png" alt="image.png"></p><p>JIT 编译器的作用就是：</p><ul><li><strong>在运行时检测热点代码</strong></li><li><strong>将这些热点代码编译为机器码</strong></li><li><strong>让后续执行时直接运行机器码，提升性能</strong></li></ul><h2 id="JIT-解决了什么问题？"><a href="#JIT-解决了什么问题？" class="headerlink" title="JIT 解决了什么问题？"></a>JIT 解决了什么问题？</h2><p>JVM 早期执行 Java 代码时，采用<strong>解释执行</strong>方式：</p><ul><li>解释器逐行翻译字节码，转换为 CPU 可以执行的指令。</li><li>由于解释执行逐行转换，<strong>性能较低</strong>，尤其是热点代码需要被重复解释执行。</li></ul><p>JIT 编译器引入后：</p><ul><li>发现某段代码被**高频执行（热点代码）**时，JIT 会将其编译成机器码。</li><li>这样 JVM 下次运行该代码时，不需要解释执行，而是<strong>直接执行机器码</strong>，提升速度。</li></ul><h2 id="哪些程序代码会被编译为本地代码？如何编译为本地代码？"><a href="#哪些程序代码会被编译为本地代码？如何编译为本地代码？" class="headerlink" title="哪些程序代码会被编译为本地代码？如何编译为本地代码？"></a>哪些程序代码会被编译为本地代码？如何编译为本地代码？</h2><p>程序中的代码只有是热点代码时，才会编译为本地代码，那么什么是热点代码呢？</p><p>运行过程中会被即时编译器编译的“热点代码”有两类：</p><p>1、被多次调用的方法。</p><p>2、被多次执行的循环体。</p><p>两种情况，编译器都是以整个方法作为编译对象。 这种编译方法因为编译发生在方法执行过程之中，因此形象的称之为栈上替换（On Stack Replacement，OSR），即方法栈帧还在栈上，方法就被替换了。</p><h2 id="JIT-的分类"><a href="#JIT-的分类" class="headerlink" title="JIT 的分类"></a>JIT 的分类</h2><p>JIT 不是单一的编译器，而是包括多个不同级别的优化器，主要有两种模式：</p><ol><li><strong>C1 编译器（Client Compiler，轻量优化）</strong><ul><li>适用于 <strong>客户端应用</strong>（如桌面应用）。</li><li><strong>编译速度快</strong>，适合短时间运行的 Java 进程。</li><li>主要优化：<strong>方法内联、死代码消除、局部变量优化等</strong>。</li></ul></li><li><strong>C2 编译器（Server Compiler，深度优化）</strong><ul><li>适用于 <strong>服务器端应用</strong>（如 Web 服务器）。</li><li><strong>编译时间较长，但优化效果更好</strong>，适合长期运行的 Java 进程。</li><li>主要优化：<strong>指令重排、循环展开、逃逸分析等</strong>。</li></ul></li></ol><p>JVM 会根据应用类型选择合适的 JIT 编译器，Java 8 默认使用 <strong>C1+C2 组合（分层编译）</strong>。</p><h2 id="AOT，Ahead-Of-Time，指运行前编译，预先编译。"><a href="#AOT，Ahead-Of-Time，指运行前编译，预先编译。" class="headerlink" title="AOT，Ahead Of Time，指运行前编译，预先编译。"></a>AOT，Ahead Of Time，指运行前编译，预先编译。</h2><p>AOT 编译能直接将源代码转化为机器码，内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化，AOT 缺点就是在程序运行前编译会使程序安装的时间增加。</p><p>（3）AOT的优点</p><p>简单来讲，Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验。</p><p>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗 可以在程序运行初期就达到最高性能，程序启动速度快 运行产物只有机器码，打包体积小.</p><p>AOT 适合嵌入式相关应用上，内存占用小，运行快。</p><p>但是全方面使用AOT的话就会导致Java中的动态代理失效，所以一般JDK是使用分层编译和AOT协同使用。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> JIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-19 Linux文件权限</title>
      <link href="/2025/02/28/75-19%20Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
      <url>/2025/02/28/75-19%20Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="75-19-Linux文件权限"><a href="#75-19-Linux文件权限" class="headerlink" title="75-19 Linux文件权限"></a>75-19 Linux文件权限</h1><p>使用<code>ls -l</code>或者<code>ll</code>指令可以直接查看到如下的标记，这些标记代表的相关文件或<a href="https://so.csdn.net/so/search?q=%E6%96%87%E4%BB%B6%E5%A4%B9&spm=1001.2101.3001.7020">文件夹</a>的权限类型及所属：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281839949.png" alt="image-20240222100605216"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281840642.png" alt="image-20250228184058582"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281841449.png" alt="image-20250228184136368"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281842117.png" alt="image-20250228184251046"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281844606.png" alt="image-20250228184435557"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281843748.png" alt="image-20250228184310672"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给文件file.txt的所有者（u）增加读取（+r）权限</span></span><br><span class="line"><span class="built_in">chmod</span> u+r file.txt</span><br><span class="line"><span class="comment"># 从文件file.txt的拥有者同组用户（g）中移除写入（-w）权限</span></span><br><span class="line"><span class="built_in">chmod</span> g-w file.txt</span><br><span class="line"><span class="comment"># 给目录directory的其他用户（o）增加执行（+x）权限</span></span><br><span class="line"><span class="built_in">chmod</span> o+x directory</span><br><span class="line"><span class="comment"># 给文件file.txt的所有用户（a）设置读取和写入权限</span></span><br><span class="line"><span class="built_in">chmod</span> a=rw file.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-38 装饰器模式</title>
      <link href="/2025/02/28/75-38%20%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/02/28/75-38%20%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="75-38-装饰器模式"><a href="#75-38-装饰器模式" class="headerlink" title="75-38 装饰器模式"></a>75-38 装饰器模式</h1><p>装饰器模式是一种结构型设计模式，<strong>它允许你在不改变对象结构的前提下</strong>，动态地为对象添加额外的功能。它通过将对象嵌入到另一个装饰器对象中来实现功能扩展，且每个装饰器对象都可以独立地扩展功能。与继承方式不同，装饰器模式可以在运行时动态地给对象增加功能，而无需修改对象本身的代码。</p><h2 id="装饰器模式的结构"><a href="#装饰器模式的结构" class="headerlink" title="装饰器模式的结构"></a><strong>装饰器模式的结构</strong></h2><ol><li><strong>Component（组件接口）</strong>：定义一个基础接口，通常是被装饰的目标类或接口。</li><li><strong>ConcreteComponent（具体组件）</strong>：实现了 <code>Component</code> 接口的具体类，是装饰器模式的基础对象。</li><li><strong>Decorator（装饰器类）</strong>：继承自 <code>Component</code>，并持有一个 <code>Component</code> 对象，通过代理的方式添加新的功能。</li><li><strong>ConcreteDecorator（具体装饰器）</strong>：实现了具体的扩展功能。</li></ol><h2 id="具体例子：咖啡店的装饰器模式"><a href="#具体例子：咖啡店的装饰器模式" class="headerlink" title="具体例子：咖啡店的装饰器模式"></a>具体例子：咖啡店的装饰器模式</h2><p>假设你经营一家咖啡店，提供了基本的咖啡（例如：黑咖啡），但是你希望客户可以根据自己的口味需求来“装饰”自己的咖啡，比如加糖、加奶、加巧克力等。为了实现这个功能，你可以使用装饰器模式。</p><h3 id="步骤1：定义组件接口"><a href="#步骤1：定义组件接口" class="headerlink" title="步骤1：定义组件接口"></a><strong>步骤1：定义组件接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Coffee 接口：组件接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>;  <span class="comment">// 计算咖啡的价格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤2：创建具体组件（黑咖啡）"><a href="#步骤2：创建具体组件（黑咖啡）" class="headerlink" title="步骤2：创建具体组件（黑咖啡）"></a><strong>步骤2：创建具体组件（黑咖啡）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConcreteComponent：黑咖啡类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlackCoffee</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5.0</span>;  <span class="comment">// 黑咖啡的基础价格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤3：定义装饰器（父类）"><a href="#步骤3：定义装饰器（父类）" class="headerlink" title="步骤3：定义装饰器（父类）"></a><strong>步骤3：定义装饰器（父类）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decorator：装饰器类，持有一个 Coffee 对象，并重写 cost 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoffeeDecorator</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Coffee coffee;  <span class="comment">// 持有一个 Coffee 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CoffeeDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.cost();  <span class="comment">// 默认直接调用基础咖啡的价格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤4：创建具体装饰器（加糖、加奶等）"><a href="#步骤4：创建具体装饰器（加糖、加奶等）" class="headerlink" title="步骤4：创建具体装饰器（加糖、加奶等）"></a><strong>步骤4：创建具体装饰器（加糖、加奶等）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConcreteDecorator：加糖的装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SugarDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SugarDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.cost() + <span class="number">1.0</span>;  <span class="comment">// 加糖需要额外的费用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteDecorator：加奶的装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MilkDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MilkDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.cost() + <span class="number">1.5</span>;  <span class="comment">// 加奶需要额外的费用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤5：使用装饰器来“装饰”咖啡"><a href="#步骤5：使用装饰器来“装饰”咖啡" class="headerlink" title="步骤5：使用装饰器来“装饰”咖啡"></a><strong>步骤5：使用装饰器来“装饰”咖啡</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeShop</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlackCoffee</span>();  <span class="comment">// 先购买一杯黑咖啡</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Black Coffee cost: &quot;</span> + coffee.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户要求加糖</span></span><br><span class="line">        coffee = <span class="keyword">new</span> <span class="title class_">SugarDecorator</span>(coffee);</span><br><span class="line">        System.out.println(<span class="string">&quot;Black Coffee with Sugar cost: &quot;</span> + coffee.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户又要求加奶</span></span><br><span class="line">        coffee = <span class="keyword">new</span> <span class="title class_">MilkDecorator</span>(coffee);</span><br><span class="line">        System.out.println(<span class="string">&quot;Black Coffee with Sugar and Milk cost: &quot;</span> + coffee.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281858726.png" alt="image-20250228185837675"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 装饰器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>66 消息队列</title>
      <link href="/2025/02/27/66%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2025/02/27/66%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="66-消息队列"><a href="#66-消息队列" class="headerlink" title="66 消息队列"></a>66 消息队列</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>参考资料：<a href="https://blog.csdn.net/Dean_xiu/article/details/119942872">消息队列MQ快速入门（概念、RPC、MQ实质思路、队列介绍、队列对比、应用场景）</a></p><ul><li>消息队列就是一个使用队列来通信的组件；</li><li>为什么需要消息队列？</li></ul><blockquote><p>在实际的商业项目中，它这么做肯定是有道理的。那么没有引入消息队列之前服务存在哪些问题呢？就拿支付服务来说，你提交了一个支付订单后，后台需要进行扣库存、扣款、短信通知等等，你需要等待后台把所有该做的做完了才能知道自己有没有购买成功，用户等等时间过长，后台请求链太多，很多业务不需要马上做完，比如短信通知等等，这些响应速度对于业务来说无关紧要，所以就提出了异步处理。</p><p>异步处理就是指我现在不做这个工作，我把这个工作丢给箱子里，有人会来这个箱子里找属于它的工作，我丢完我的工作就做完了，就可以给用户响应了，解耦，异步，提高性能。</p></blockquote><p>应用在：<strong>服务解耦、流量控制</strong>，有好处也有坏处，坏处就是服务的稳定性降低，人多就不好控制，系统也一样。</p><p>消息队列具有两种模型：队列模型和发布&#x2F;订阅模型。这两个模型简单的来说就是：队列模型即一条消息只能被一个消费者消费、发布订阅模型即一条消息可以被多个消费者消费。</p><p>其设计模式就是一发一存一消费，生产者——消费者模型。</p><h3 id="五种队列"><a href="#五种队列" class="headerlink" title="五种队列"></a><a href="https://www.cnblogs.com/youngdeng/p/14446456.html"><strong>五种队列</strong></a></h3><h4 id="简单队列"><a href="#简单队列" class="headerlink" title="简单队列"></a>简单队列</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262015061.png" alt="image-20241010103902441"></p><p>一言以蔽之：简单队列——一个消息对应一个消费者</p><h4 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016701.png" alt="image-20241010103946974"></p><p><strong>一个生产者对应多个消费者，但是只能有一个消费者获得消息！！！</strong></p><p><strong>竞争消费者模式。</strong></p><p>这条消息具体会被哪个消费者消费事先并不知。</p><p>如何分发消息使之最大限度的发挥每一个消费者的效率——负载均衡。</p><h4 id="发布-订阅模型"><a href="#发布-订阅模型" class="headerlink" title="发布&#x2F;订阅模型"></a>发布&#x2F;订阅模型</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016841.png" alt="image-20241010104244264"></p><p><strong>一个消费者将消息首先发送到交换器，交换器绑定到多个队列，然后被监听该队列的消费者所接收并消费。</strong></p><p>ps:X表示交换器，在RabbitMQ中，交换器主要有四种类型:direct、fanout、topic、headers，这里的交换器是 fanout。下面我们会详细介绍这几种交换器。</p><h4 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016157.png" alt="image-20241010104645021"></p><p>生产者将消息发送到direct交换器，在绑定队列和交换器的时候有一个路由key，生产者发送的消息会指定一个路由key，那么消息只会发送到相应key相同的队列，接着监听该队列的消费者消费消息。</p><p><strong>也就是让消费者有选择性的接收消息。</strong></p><h4 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016683.png" alt="image-20241010104842332"></p><p>上面的路由模式是根据路由key进行完整的匹配（完全相等才发送消息），这里的通配符模式通俗的来讲就是模糊匹配。</p><p><strong>符号“#”表示匹配一个或多个词，符号“*”表示匹配一个词。</strong></p><h4 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h4><p>前面五种队列模式介绍完了，但是实际上只有三种，第一种简单队列，第二种工作模式，剩下的三种都是和交换器绑定的合起来称为一种，这小节我们就来详细介绍交换器。</p><p>　　交换器分为四种，分别是：direct、fanout、topic和 headers。</p><p>　　前面三种分别对应路由模式、发布订阅模式和通配符模式，headers 交换器允许匹配 AMQP 消息的 header 而非路由键，除此之外，header 交换器和 direct 交换器完全一致，但是性能却差很多，因此基本上不会用到该交换器，这里也不详细介绍。</p><p>　　<strong>①、direct</strong></p><p>　　如果路由键完全匹配的话，消息才会被投放到相应的队列。</p><p> 　<img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016021.png" alt="img"></p><p>　　<strong>②、fanout</strong></p><p>　　当发送一条消息到fanout交换器上时，它会把消息投放到所有附加在此交换器上的队列。</p><p> 　<img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016623.png" alt="img"></p><p>　　<strong>③、topic</strong></p><p>　　设置模糊的绑定方式，“*”操作符将“.”视为分隔符，匹配单个字符；“#”操作符没有分块的概念，它将任意“.”均视为关键字的匹配部分，能够匹配多个字符。</p><h3 id="常用6种消息队列介绍和对比"><a href="#常用6种消息队列介绍和对比" class="headerlink" title="常用6种消息队列介绍和对比"></a>常用6种消息队列介绍和对比</h3><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016935.png" alt="image-20241013145858213"></p><p>RabbitMQ是流行的开源消息队列系统，<strong>用erlang语言开发</strong>。RabbitMQ是AMQP（高级消息队列协议）的标准实现。支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX，持久化。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016086.png" alt="image-20241013150152976"></p><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。对Spring的支持，ActiveMQ可以很容易内嵌到使用Spring的系统里面去，而且也支持Spring2.0的特性</p><h4 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h4><p>号称史上最快的消息队列，它实际类似于Socket的一系列接口，他跟Socket的区别是：普通的socket是端到端的（1:1的关系），而ZMQ却是可以N：M 的关系，人们对BSD套接字的了解较多的是点对点的连接，点对点连接需要显式地建立连接、销毁连接、选择协议（TCP&#x2F;UDP）和处理错误等，而ZMQ屏蔽了这些细节，让你的网络编程更为简单。ZMQ用于node与node间的通信，node可以是主机或者是进程。</p><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><ul><li>分布式消息发布订阅系统，其分区特性、可复制和可容错都是其不错的特性</li><li>快速持久化，可在O(1)的系统开销下进行消息持久化</li><li>高吞吐，在一台普通的服务器上就可以达到10W&#x2F;s的吞吐率</li><li>完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式、自动实现负载均衡</li><li>支持同步和异步复制两种</li><li>支持数据批量发送和拉取</li><li>zero-copy：减少IO操作步骤</li><li>数据迁移、扩容对用户透明</li><li>无需停机即可扩展机器</li><li>其他特性：严格的消息顺序、丰富的消息拉取机制、高效订阅者水平扩展、实时的消息订阅、亿级的消息堆积能力、定期删除机制</li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>客户端语言丰富</li><li>性能卓越、单机写入TPS约在百万级&#x2F;秒，消息大小为10个字节</li><li>提供完全分布式架构，并有replica机制，拥有较高的可用性和可靠性，理论上支持消息无限堆积</li><li>支持批量操作</li><li>消费者采用Pull方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次</li><li>有优秀的第三方Kafka Web管理界面kafka-Manager</li><li>在日志领域比较成熟，被多家公司和多个开源项目使用</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>Kafka单机超过64个队列&#x2F;分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li><li>使用短轮询方式，实时性取决于轮询间隔时间</li><li>消费失败不支持重试</li><li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序</li></ul><h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><h5 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h5><ul><li>具有高性能、高可靠、高实时、分布式特点</li><li>Producer、Consumer、队列都可以分布式</li><li>Producer向一些队列轮流发送消息，队列集合称为Topic，Consumer如果做广播消费，则一个consumer实例消费这个Topic对应的所有队列，如果做集群消费，则多个Consumer实例平均消费这个topic对应的队列集合</li><li>能够保证严格的消息顺序</li><li>提供丰富的消息拉取模式</li><li>高效的订阅者水平扩展能力</li><li>实时的消息订阅机制</li><li>亿级消息堆积能力</li><li>较少的依赖</li><li>可以运行在Java语言所支持的平台之上</li></ul><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>单机支持1万以上持久化队列</li><li>所有消息都是持久化的，先写入系统PageCache，然后刷盘，可以保证内存和磁盘都有一份数据，访问时，直接从内存取</li><li>模型简单，接口易用</li><li>性能优越，可以大量堆积消息在broker中</li><li>支持多种消费，包括集群消费，广播消费等</li><li>各个环节分布式扩展设计</li><li>开发都较活跃，版本更新快</li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>没有web管理界面，提供了一个CLI管理工具来查询、管理和诊断各种问题</li><li>没有在MQ核心去实现JMS等接口</li></ul><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016781.png" alt="image-20241013150748148"></p><ul><li>ActiveMQ，最早的时候大家都用，但现在用的不是很多了，没经过大规模吞吐量场景的验证，社区不是很活跃，主流上不选择这个</li><li>RabbitMQ较为成熟一些，在可用性、稳定性、可靠性上，RabbitMQ都要超过kafka，综合性能不错，但是erlang语言阻止了大量java工程师深入研究，且不支持事务，消息吞吐能力有限</li><li>Kafka的性能是比RabbitMQ要更强的，RabbitMQ在有大量的消息堆积时，性能会下降，而Kafka不会，但是Kafka的设计初衷是处理日志的，可以看做一个日志系统，针对性非常强，没有具备一个成熟MQ应该具备的特性，它还是个孩子啊</li><li>RocketMQ的思路起源于Kafka,但它对消息的可靠传输及事务性做了优化，适合一些大规模的分布式系统应用，但是生态不够成熟，会有黄掉的风险</li><li>ZeroMQ只是一个网络编程的Pattern库，将常见的网络请求形式（分组管理、链接管理、发布订阅等）进行模式化、组件化。简单来说就是在socket之上、MQ之下。使用ZeroMQ的话，需要对自己的业务代码进行改造，不利于服务解耦</li></ul><h3 id="消息队列如何保证消息的顺序性？"><a href="#消息队列如何保证消息的顺序性？" class="headerlink" title="消息队列如何保证消息的顺序性？"></a>消息队列如何保证消息的顺序性？</h3><h4 id="为什么会出现顺序混乱"><a href="#为什么会出现顺序混乱" class="headerlink" title="为什么会出现顺序混乱"></a>为什么会出现顺序混乱</h4><p>根本原因是一个队列中存在多个消费者，多个消费者的消费速度不一定，可能导致后提交的消息却先被消费了。在生产中经常会有一些类似报表系统这样的系统，需要做 MySQL 的 binlog 同步。比如订单系统要同步订单表的数据到大数据部门的 MySQL 库中用于报表统计分析，通常的做法是基于 Canal 这样的中间件去监听订单数据库的 binlog，然后把这些 binlog 发送到 MQ 中，再由消费者从 MQ 中获取 binlog 落地到大数据部门的 MySQL 中。</p><p>在这个过程中，可能会有对某个订单的增删改操作，比如有三条 binlog 执行顺序是增加、修改、删除；消费者愣是换了顺序给执行成删除、修改、增加，这样能行吗？肯定是不行的</p><h4 id="RabbitMQ消息顺序错乱"><a href="#RabbitMQ消息顺序错乱" class="headerlink" title="RabbitMQ消息顺序错乱"></a>RabbitMQ消息顺序错乱</h4><p>对于 RabbitMQ 来说，<strong>导致上面顺序错乱的原因通常是消费者是集群部署</strong>，不同的消费者消费到了同一订单的不同的消息，如消费者 A 执行了增加，消费者 B 执行了修改，消费者 C 执行了删除，但是消费者 C 执行比消费者 B 快，消费者 B 又比消费者 A 快，就会导致消费 binlog 执行到数据库的时候顺序错乱，本该顺序是增加、修改、删除，变成了删除、修改、增加。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281322544.png" alt="img"></p><h4 id="Kafka-消息顺序错乱"><a href="#Kafka-消息顺序错乱" class="headerlink" title="Kafka 消息顺序错乱"></a>Kafka 消息顺序错乱</h4><p>对于 Kafka 来说，一个 topic 下同一个 partition 中的消息肯定是有序的，生产者在写的时候可以指定一个 key，通过我们会用订单号作为 key，这个 key 对应的消息都会发送到同一个 partition 中，所以消费者消费到的消息也一定是有序的。</p><p>那么为什么 Kafka 还会存在消息错乱的问题呢？问题就出在消费者身上。通常我们消费到同一个 key 的多条消息后，会使用多线程技术去并发处理来提高消息处理速度，否则一条消息的处理需要耗时几十 ms，1 秒也就只能处理几十条消息，吞吐量就太低了。而多线程并发处理的话，binlog 执行到数据库的时候就不一定还是原来的顺序了。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281325804.png" alt="img"></p><h4 id="RocketMQ-消息顺序错乱"><a href="#RocketMQ-消息顺序错乱" class="headerlink" title="RocketMQ 消息顺序错乱"></a>RocketMQ 消息顺序错乱</h4><p>对于 RocketMQ 来说，每个 Topic 可以指定多个 MessageQueue，当我们写入消息的时候，会把消息均匀地分发到不同的 MessageQueue 中，比如同一个订单号的消息，增加 binlog 写入到 MessageQueue1 中，修改 binlog 写入到 MessageQueue2 中，删除 binlog 写入到 MessageQueue3 中。</p><p>但是当消费者有多台机器的时候，会组成一个 Consumer Group，Consumer Group 中的每台机器都会负责消费一部分 MessageQueue 的消息，所以可能消费者 A 消费了 MessageQueue1 的消息执行增加操作，消费者 B 消费了 MessageQueue2 的消息执行修改操作，消费者 C 消费了 MessageQueue3 的消息执行删除操作，但是此时消费 binlog 执行到数据库的时候就不一定是消费者 A 先执行了，有可能消费者 C 先执行删除操作，因为几台消费者是并行执行，是不能够保证他们之间的执行顺序的。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281326416.png" alt="img"></p><h4 id="如何保证消息的顺序性？"><a href="#如何保证消息的顺序性？" class="headerlink" title="如何保证消息的顺序性？"></a>如何保证消息的顺序性？</h4><p>知道了为什么会出现顺序错乱之后，就要想办法保证消息的顺序性了。从前面可以知道，顺序错乱要么是<strong>由于多个消费者消费到了同一个订单号的不同消息</strong>，<strong>要么是由于同一个订单号的消息分发到了 MQ 中的不同机器中</strong>。不同的消息队列保证消息顺序性的方案也各不相同。</p><h4 id="RabbitMQ-保证消息的顺序性"><a href="#RabbitMQ-保证消息的顺序性" class="headerlink" title="RabbitMQ 保证消息的顺序性"></a>RabbitMQ 保证消息的顺序性</h4><p>RabbitMQ 的问题是由于不同的消息都发送到了同一个 queue 中，多个消费者都消费同一个 queue 的消息。解决这个问题，我们可以给 RabbitMQ 创建多个 queue，每个消费者固定消费一个 queue 的消息，生产者发送消息的时候，同一个订单号的消息发送到同一个 queue 中，由于同一个 queue 的消息是一定会保证有序的，那么同一个订单号的消息就只会被一个消费者顺序消费，从而保证了消息的顺序性。</p><p>如下图是 RabbitMQ 保证消息顺序性的方案：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281329874.png" alt="img"></p><p>保证单消费者单独消费。</p><h4 id="Kafka-保证消息的顺序性"><a href="#Kafka-保证消息的顺序性" class="headerlink" title="Kafka 保证消息的顺序性"></a>Kafka 保证消息的顺序性</h4><p>Kafka 从生产者到消费者消费消息这一整个过程其实都是可以保证有序的，导致最终乱序是由于消费者端需要使用多线程并发处理消息来提高吞吐量，比如消费者消费到了消息以后，开启 32 个线程处理消息，每个线程线程处理消息的快慢是不一致的，所以才会导致最终消息有可能不一致。</p><p>所以对于 Kafka 的消息顺序性保证，其实我们只需要保证同一个订单号的消息只被同一个线程处理的就可以了。由此我们可以在线程处理前增加个内存队列，每个线程只负责处理其中一个内存队列的消息，同一个订单号的消息发送到同一个内存队列中即可。</p><p>如下图是 Kafka 保证消息顺序性的方案：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281331199.png" alt="img"></p><h4 id="RocketMQ-保证消息的顺序性"><a href="#RocketMQ-保证消息的顺序性" class="headerlink" title="RocketMQ 保证消息的顺序性"></a>RocketMQ 保证消息的顺序性</h4><p>RocketMQ 的消息乱序是由于同一个订单号的 binlog 进入了不同的 MessageQueue，进而导致一个订单的 binlog 被不同机器上的 Consumer 处理。</p><p>要解决 RocketMQ 的乱序问题，我们只需要想办法让同一个订单的 binlog 进入到同一个 MessageQueue 中就可以了。因为同一个 MessageQueue 内的消息是一定有序的，一个 MessageQueue 中的消息只能交给一个 Consumer 来进行处理，所以 Consumer 消费的时候就一定会是有序的。</p><p>如下图是 RocketMQ 保证消息顺序性的方案：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281333418.png" alt="img"></p><hr><h3 id="消息队列如何保证消息消费时的幂等性"><a href="#消息队列如何保证消息消费时的幂等性" class="headerlink" title="消息队列如何保证消息消费时的幂等性"></a>消息队列如何保证消息消费时的幂等性</h3><p>幂等性，通俗点说，就<strong>一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的</strong>，不能出错。</p><p><strong>需要让生产者发送每条数据的时候，里面加一个全局唯一的id，类似订单id之类的东西，然后你这里消费到了之后，先根据这个id去比如redis里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个id写redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</strong></p><p>方案就是每一个消息都有一个唯一的标识，比如UUID之类的，在消费者消费之前先判断一下该UUID是否消费过，消费过之后该消息就无需继续消费了。</p><p><strong>如何保证MQ的消费是幂等性的，需要结合具体的业务来看</strong></p><hr><h2 id="目前常见消息队列对比"><a href="#目前常见消息队列对比" class="headerlink" title="目前常见消息队列对比"></a>目前常见消息队列对比</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503141822901.png" alt="image-20250314182247809"></p><h2 id="基于Netty实现huiMQ自定义消息队列"><a href="#基于Netty实现huiMQ自定义消息队列" class="headerlink" title="基于Netty实现huiMQ自定义消息队列"></a>基于Netty实现huiMQ自定义消息队列</h2><p>Netty服务端将会作为huiMQ，这里先搭一个Netty服务端与Netty客户端，具体的代码请参考：<a href="https://blog.csdn.net/fyh2944163240/article/details/142862284?spm=1001.2014.3001.5502">68 Netty</a></p><p>具体项目代码请查看：<a href="https://github.com/fangyaohui/screw-it-development/blob/main/screw-it-development-platform/screw-it-development-bus/screw-it-development-queue/screw-it-development-server/src/main/java/com/fang/screw/server/component/HuiMessageQueue.java">点击查看</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016692.png" alt="image-20241013142639323"></p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="发送消息队列"><a href="#发送消息队列" class="headerlink" title="发送消息队列"></a>发送消息队列</h4><p> 所有需要发送的消息都会被统一存在一个队列中，然后由一个线程来对这个队列中的消息发送到Netty服务端中。但是这里会存在消息生产者发送到消息队列时失败，从而导致消息丢失，所以为了保证消息不丢失，在该线程发送后，会把这条消息暂时存放在一个Map中，等到消息队列发送确认响应后才会把这条消息消除，如果超过2秒还未回复，就会把这个消息重新放回待发送消息队列中，同时把重传次数加一，如果重传次数大于5次，就会写入日志。</p><p>我们待发送消息队列选择BlockingQueue，该队列是线程安全的，阻塞队列（BlockingQueue） 是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 采用阻塞队列保证线程的安全 以便免多线程的情况下导致数据丢失 同时阻塞队列也可以当队列满的时候阻塞线程让其之后再重新添加运行</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;MessageBase.Message&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;MessageBase.Message&gt;(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待确认的消息Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, MessageBase.Message&gt; waitAckMessageMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待确认消息超时Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, LocalDateTime&gt; messageTimeOutMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 超时</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">2000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最多超时重传次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">maxRetries</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SocketChannel socketChannel;</span><br></pre></td></tr></table></figure><h4 id="发送消息线程"><a href="#发送消息线程" class="headerlink" title="发送消息线程"></a>发送消息线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 构建一个线程来一直对队列中的消息发送到Netty服务端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendMessageByThread</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;sendMessageByThread ready&quot;</span>);</span><br><span class="line">                MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> blockingQueue.take();</span><br><span class="line">                log.info(<span class="string">&quot;sendMessageByThread working&quot;</span>);</span><br><span class="line">                sendMessage(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;sendMessageByThread is interrupt 发送消息线程被中断&quot;</span>);</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 线程调用 让消息发送到Netty服务端的具体实现逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span>  &#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(MessageBase.Message message)</span>&#123;</span><br><span class="line">    <span class="comment">// 超过最大重传次数</span></span><br><span class="line">    <span class="keyword">if</span>(message.getRetryCount() &gt; maxRetries)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;消息传输失败次数超过5次：&quot;</span> + message.toString());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (socketChannel.isActive())&#123;</span><br><span class="line">            socketChannel.writeAndFlush(message);</span><br><span class="line">            waitAckMessageMap.put(message.getRequestId(),message);</span><br><span class="line">            messageTimeOutMap.put(message.getRequestId(),LocalDateTime.now().plusSeconds(timeout));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;Netty连接失败，请重试&quot;</span>);</span><br><span class="line">            addMessageBlockingQueue(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="确认消息定时任务"><a href="#确认消息定时任务" class="headerlink" title="确认消息定时任务"></a>确认消息定时任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 将超时的消息重新加入队列中重新进行发送</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">messageRetryThread</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        log.info(<span class="string">&quot;messageRetryThread working&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String, MessageBase.Message&gt; entry : waitAckMessageMap.entrySet())&#123;</span><br><span class="line">          MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">          <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">          <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> messageTimeOutMap.get(key);</span><br><span class="line">          <span class="keyword">if</span>(time.isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">              MessageBase.<span class="type">Message</span> <span class="variable">newMessage</span> <span class="operator">=</span> MessageBase.Message.newBuilder()</span><br><span class="line">                      .setRequestId(message.getRequestId())</span><br><span class="line">                      .setCmd(message.getCmd())</span><br><span class="line">                      .setContent(message.getContent())</span><br><span class="line">                      .setRetryCount(message.getRetryCount()+<span class="number">1</span>)</span><br><span class="line">                      .setUrlPath(message.getUrlPath())</span><br><span class="line">                      .build();</span><br><span class="line">              addMessageBlockingQueue(newMessage);</span><br><span class="line">              messageTimeOutMap.remove(key);</span><br><span class="line">              waitAckMessageMap.remove(key);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安排任务在延迟2秒后开始执行，之后每隔3秒执行一次</span></span><br><span class="line">    scheduledExecutorService.scheduleAtFixedRate(task,<span class="number">2</span>,<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收Netty服务端ACK消息"><a href="#接收Netty服务端ACK消息" class="headerlink" title="接收Netty服务端ACK消息"></a>接收Netty服务端ACK消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MessageBase.Message) &#123;</span><br><span class="line">            MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> (MessageBase.Message) msg;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(message.getCmd() == MessageBase.Message.CommandType.ACK)&#123;</span><br><span class="line">                SendMessageThread.getAckAndRemoveMessage(message.getRequestId());</span><br><span class="line">                log.info(<span class="string">&quot;收到ACK：&quot;</span> + message.getRequestId());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Received response from server:&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;ID: &quot;</span> + message.getRequestId());</span><br><span class="line">                System.out.println(<span class="string">&quot;Content: &quot;</span> + message.getContent());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Received an unknown message type: &quot;</span> + msg.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端连接成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.error(<span class="string">&quot;客户端发生异常&quot;</span>, cause);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 根据RequestId来消除待确认中的消息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getAckAndRemoveMessage</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    messageTimeOutMap.remove(key);</span><br><span class="line">    waitAckMessageMap.remove(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><p>更详细的代码请查看：<a href="https://github.com/fangyaohui/screw-it-development/blob/main/screw-it-development-platform/screw-it-development-bus/screw-it-development-queue/screw-it-development-client/src/main/java/com/fang/screw/client/component/NettyClient.java">点击查看</a></p><h5 id="NettyClient"><a href="#NettyClient" class="headerlink" title="NettyClient"></a>NettyClient</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">54021</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SendMessageThread</span> <span class="variable">sendMessageThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendMessageThread</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 添加消息到阻塞队列中 为消息生产者调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMessageBlockingQueue</span><span class="params">(MessageBase.Message message)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!socketChannel.isActive())&#123;</span><br><span class="line">            <span class="built_in">this</span>.start();</span><br><span class="line">        &#125;</span><br><span class="line">        sendMessageThread.addMessageBlockingQueue(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 该方法提供获取SocketChannel 暂时无用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SocketChannel &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SocketChannel <span class="title function_">getSocketChannel</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!socketChannel.isActive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> socketChannel;</span><br><span class="line"><span class="comment">//            socketChannel = socketChannel1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> socketChannel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 连接断开重新连接</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SocketChannel &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketChannel <span class="title function_">retryConnect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">        bootstrap.group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .remoteAddress(host, port)</span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>)</span><br><span class="line">                .option(ChannelOption.TCP_NODELAY, <span class="literal">true</span>)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        ch.pipeline()</span><br><span class="line">                                <span class="comment">// 空闲检测</span></span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)) <span class="comment">// 60秒写空闲，30秒读空闲</span></span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">HeartbeatHandler</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32FrameDecoder</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufDecoder</span>(MessageBase.Message.getDefaultInstance()))</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32LengthFieldPrepender</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufEncoder</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">NettyClientHandler</span>())</span><br><span class="line">                        ; <span class="comment">// 自定义处理器</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.connect();</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess())&#123;</span><br><span class="line">            <span class="keyword">return</span> (SocketChannel) future.channel();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> Netty客户端启动函数 调用Start可以启动对Netty服务端的连接</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">        bootstrap.group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .remoteAddress(host, port)</span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>)</span><br><span class="line">                .option(ChannelOption.TCP_NODELAY, <span class="literal">true</span>)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        ch.pipeline()</span><br><span class="line">                                <span class="comment">// 空闲检测</span></span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)) <span class="comment">// 60秒写空闲，30秒读空闲</span></span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">HeartbeatHandler</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32FrameDecoder</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufDecoder</span>(MessageBase.Message.getDefaultInstance()))</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32LengthFieldPrepender</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufEncoder</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">NettyClientHandler</span>())</span><br><span class="line">                        ; <span class="comment">// 自定义处理器</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.connect();</span><br><span class="line">        <span class="comment">//客户端断线重连逻辑</span></span><br><span class="line">        future.addListener((ChannelFutureListener) future1 -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (future1.isSuccess()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;连接Netty服务端成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;连接失败，进行断线重连&quot;</span>);</span><br><span class="line">                future1.channel().eventLoop().schedule(<span class="built_in">this</span>::start, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        socketChannel = (SocketChannel) future.channel();</span><br><span class="line"></span><br><span class="line">        sendMessageThread.setSocketChannel(socketChannel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="SendMessageThread"><a href="#SendMessageThread" class="headerlink" title="SendMessageThread"></a>SendMessageThread</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.screw.client.Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fang.screw.client.component.NettyClient;</span><br><span class="line"><span class="keyword">import</span> com.fang.screw.client.protocol.MessageBase;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> SendMessageThread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 采用阻塞队列保证线程的安全 以便免多线程的情况下导致数据丢失 同时阻塞队列也可以当队列满的时候阻塞线程让其之后再重新添加运行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;MessageBase.Message&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;MessageBase.Message&gt;(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待确认的消息Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, MessageBase.Message&gt; waitAckMessageMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待确认消息超时Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, LocalDateTime&gt; messageTimeOutMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">2000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最多超时重传次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">maxRetries</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SendMessageThread</span><span class="params">()</span>&#123;</span><br><span class="line">        sendMessageByThread();</span><br><span class="line">        messageRetryThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SendMessageThread</span><span class="params">(SocketChannel socketChannel1)</span>&#123;</span><br><span class="line">        socketChannel = socketChannel1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSocketChannel</span><span class="params">(SocketChannel socketChannel1)</span>&#123;</span><br><span class="line">        socketChannel = socketChannel1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMessageBlockingQueue</span><span class="params">(MessageBase.Message message)</span>&#123;</span><br><span class="line">        blockingQueue.add(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 构建一个线程来一直对队列中的消息发送到Netty服务端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendMessageByThread</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    log.info(<span class="string">&quot;sendMessageByThread ready&quot;</span>);</span><br><span class="line">                    MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> blockingQueue.take();</span><br><span class="line">                    log.info(<span class="string">&quot;sendMessageByThread working&quot;</span>);</span><br><span class="line">                    sendMessage(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;sendMessageByThread is interrupt 发送消息线程被中断&quot;</span>);</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 线程调用 让消息发送到Netty服务端的具体实现逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span>  &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(MessageBase.Message message)</span>&#123;</span><br><span class="line">        <span class="comment">// 超过最大重传次数</span></span><br><span class="line">        <span class="keyword">if</span>(message.getRetryCount() &gt; maxRetries)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息传输失败次数超过5次：&quot;</span> + message.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (socketChannel.isActive())&#123;</span><br><span class="line">                socketChannel.writeAndFlush(message);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;Netty连接失败，请重试&quot;</span>);</span><br><span class="line"><span class="comment">//                socketChannel = NettyClient.getSocketChannel();</span></span><br><span class="line">                addMessageBlockingQueue(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 将超时的消息重新加入队列中重新进行发送</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">messageRetryThread</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;messageRetryThread working&quot;</span>);</span><br><span class="line">          <span class="keyword">for</span> (Map.Entry&lt;String, MessageBase.Message&gt; entry : waitAckMessageMap.entrySet())&#123;</span><br><span class="line">              MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">              <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">              <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> messageTimeOutMap.get(key);</span><br><span class="line">              <span class="keyword">if</span>(time.isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">                  MessageBase.<span class="type">Message</span> <span class="variable">newMessage</span> <span class="operator">=</span> MessageBase.Message.newBuilder()</span><br><span class="line">                          .setRequestId(message.getRequestId())</span><br><span class="line">                          .setCmd(message.getCmd())</span><br><span class="line">                          .setContent(message.getContent())</span><br><span class="line">                          .setRetryCount(message.getRetryCount()+<span class="number">1</span>)</span><br><span class="line">                          .setUrlPath(message.getUrlPath())</span><br><span class="line">                          .build();</span><br><span class="line">                  addMessageBlockingQueue(newMessage);</span><br><span class="line">                  messageTimeOutMap.remove(key);</span><br><span class="line">                  waitAckMessageMap.remove(key);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 安排任务在延迟2秒后开始执行，之后每隔3秒执行一次</span></span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(task,<span class="number">2</span>,<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 根据RequestId来消除待确认中的消息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getAckAndRemoveMessage</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        messageTimeOutMap.remove(key);</span><br><span class="line">        waitAckMessageMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="huiMQ"><a href="#huiMQ" class="headerlink" title="huiMQ"></a>huiMQ</h3><h4 id="保存消息"><a href="#保存消息" class="headerlink" title="保存消息"></a>保存消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 保存消息到消息队列中 并且保存到MySQL数据库持久化 注意这里是一个事务 要么都成功要么都别成功</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> boolean &#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveMessage</span><span class="params">(MessageBase.Message message)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 保存到消息队列中</span></span><br><span class="line">        <span class="keyword">if</span>(!messageQueueMap.containsKey(message.getChannel()))&#123;</span><br><span class="line">            BlockingQueue&lt;MessageBase.Message&gt; messageBlockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;MessageBase.Message&gt;(<span class="number">1024</span>);</span><br><span class="line">            messageQueueMap.put(message.getChannel(),messageBlockingQueue);</span><br><span class="line">        &#125;</span><br><span class="line">        messageQueueMap.get(message.getChannel()).add(message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存到MySQL数据库中</span></span><br><span class="line">        <span class="keyword">if</span>(!messageQueueMapper.exists(Wrappers.&lt;MessageQueuePO&gt;lambdaQuery()</span><br><span class="line">                .eq(MessageQueuePO::getRequestId,message.getRequestId())</span><br><span class="line">                .eq(MessageQueuePO::getDelFlag,<span class="number">0</span>)))&#123;</span><br><span class="line">            <span class="type">MessageQueuePO</span> <span class="variable">messageQueuePO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageQueuePO</span>();</span><br><span class="line">            messageQueuePO.setRequestId(message.getRequestId());</span><br><span class="line">            messageQueuePO.setCmd(message.getCmdValue());</span><br><span class="line">            messageQueuePO.setContent(message.getContent());</span><br><span class="line">            messageQueuePO.setUrlPath(message.getUrlPath());</span><br><span class="line">            messageQueueMapper.insert(messageQueuePO);</span><br><span class="line">            log.info(<span class="string">&quot;HuiMQ保存消息：&quot;</span> + messageQueuePO.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.info(<span class="string">&quot;保存消息至消息队列错误！&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="收到消费端发来请求消息"><a href="#收到消费端发来请求消息" class="headerlink" title="收到消费端发来请求消息"></a>收到消费端发来请求消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费端请求发送消息</span></span><br><span class="line">                <span class="comment">// 检查是否有超时的消息 如果有则将其重新放置于待重传的消息队列中</span></span><br><span class="line">                HuiMessageQueue.checkTimeOutMessage();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(HuiMessageQueue.messageQueueMap.containsKey(message.getChannel()))&#123;</span><br><span class="line">                    BlockingQueue&lt;MessageBase.Message&gt; queue = HuiMessageQueue.messageQueueMap.get(message.getChannel());</span><br><span class="line">                    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                        MessageBase.<span class="type">Message</span> <span class="variable">sendMessage</span> <span class="operator">=</span> queue.take();</span><br><span class="line">                        log.info(<span class="string">&quot;HuiMQ向消费者发送消息：&quot;</span> + sendMessage.toString());</span><br><span class="line">                        ctx.writeAndFlush(sendMessage);</span><br><span class="line">                        <span class="comment">// 将消费列为带确认消息</span></span><br><span class="line">                        HuiMessageQueue.waitAckMessageMap.put(sendMessage.getRequestId(),sendMessage);</span><br><span class="line">                        HuiMessageQueue.messageTimeOutMap.put(sendMessage.getRequestId(), LocalDateTime.now().plusSeconds(<span class="number">2L</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 检查是否有超时没有收到确认消息的消息 将其重新放置在待发送消息队列中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/13</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkTimeOutMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,LocalDateTime&gt; mapEntry : messageTimeOutMap.entrySet())&#123;</span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> mapEntry.getValue();</span><br><span class="line">            <span class="keyword">if</span>(time.isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapEntry.getKey();</span><br><span class="line">                MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> waitAckMessageMap.get(s);</span><br><span class="line">                waitAckMessageMap.remove(s);</span><br><span class="line">                messageTimeOutMap.remove(s);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存到消息队列中</span></span><br><span class="line">                <span class="keyword">if</span>(!messageQueueMap.containsKey(message.getChannel()))&#123;</span><br><span class="line">                    BlockingQueue&lt;MessageBase.Message&gt; messageBlockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;MessageBase.Message&gt;(<span class="number">1024</span>);</span><br><span class="line">                    messageQueueMap.put(message.getChannel(),messageBlockingQueue);</span><br><span class="line">                &#125;</span><br><span class="line">                messageQueueMap.get(message.getChannel()).add(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="收到消费端ACK消息"><a href="#收到消费端ACK消息" class="headerlink" title="收到消费端ACK消息"></a>收到消费端ACK消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;收到消费端发来的ACK报文：&quot;</span> + message.getRequestId());</span><br><span class="line">HuiMessageQueue.setMessageAck(message.getRequestId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/13</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setMessageAck</span><span class="params">(String requestId)</span>&#123;</span><br><span class="line">        messageTimeOutMap.remove(requestId);</span><br><span class="line">        waitAckMessageMap.remove(requestId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><h4 id="标记需要监听消息方法"><a href="#标记需要监听消息方法" class="headerlink" title="标记需要监听消息方法"></a>标记需要监听消息方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> HuiListener</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> HuiMQ监听注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Target(value = ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HuiListener &#123;</span><br><span class="line">    String <span class="title function_">queueName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取所有被HuiListener注解标记的方法"><a href="#获取所有被HuiListener注解标记的方法" class="headerlink" title="获取所有被HuiListener注解标记的方法"></a>获取所有被HuiListener注解标记的方法</h4><p>通过BeanPostProcessor来获取所有被指定注解标记的方法，BeanPostProcessor会在每个Bean初始化前后调用，分别为postProcessBeforeInitialization和postProcessAfterInitialization。</p><p>这里会将所有被HuiListener标记的方法和Bean注册到huiListenerRegistry中，为了方便之后通过反射的方式来直接运行指定方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> HuiListenerAnnotationBeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuiListenerAnnotationBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span>, InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HuiListenerRegistry</span> <span class="variable">huiListenerRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuiListenerRegistry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">huiListenerFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 在 bean 的初始化方法（如 <span class="doctag">@PostConstruct</span> 注解的方法或 init-method 指定的方法）之前调用。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessBeforeInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 在 bean 的初始化方法之后调用。查看当前的bean是否存在被HuiListener注解过的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">        Method[] methods = bean.getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(HuiListener.class))&#123;</span><br><span class="line">                processHuiListener(method,bean);</span><br><span class="line">                huiListenerFlag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessAfterInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processHuiListener</span><span class="params">(Method method,Object bean)</span>&#123;</span><br><span class="line">        <span class="type">HuiListener</span> <span class="variable">huiListener</span> <span class="operator">=</span> method.getAnnotation(HuiListener.class);</span><br><span class="line">        <span class="type">HuiListenerEndpoint</span> <span class="variable">huiListenerEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuiListenerEndpoint</span>();</span><br><span class="line">        huiListenerEndpoint.setBean(bean);</span><br><span class="line">        huiListenerEndpoint.setMethod(method);</span><br><span class="line">        huiListenerRegistry.registerListenerEndpoint(huiListener.queueName(),huiListenerEndpoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> HuiListenerEndpoint</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuiListenerEndpoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> HuiListenerRegistry</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuiListenerRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String,HuiListenerEndpoint&gt; huiListenerEndpointConcurrentHashMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 添加HuiListener监听的方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> queueName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> huiListenerEndpoint</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerListenerEndpoint</span><span class="params">(String queueName,HuiListenerEndpoint huiListenerEndpoint)</span>&#123;</span><br><span class="line">        huiListenerEndpointConcurrentHashMap.put(queueName,huiListenerEndpoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 消费者处理收到消息的主要逻辑</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> boolean &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(MessageBase.Message message)</span>&#123;</span><br><span class="line">        <span class="type">HuiListenerEndpoint</span> <span class="variable">huiListenerEndpoint</span> <span class="operator">=</span> huiListenerEndpointConcurrentHashMap.get(message.getChannel());</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isEmpty(huiListenerEndpoint))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息无对应Channel消费：&quot;</span> + message.getChannel());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> huiListenerEndpoint.getMethod();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> huiListenerEndpoint.getBean();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class&lt;?&gt;[] classes = method.getParameterTypes();</span><br><span class="line">            method.invoke(bean,JSON.parseObject(message.getContent(),classes[<span class="number">0</span>]));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息消费异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定期发送请求消息"><a href="#定期发送请求消息" class="headerlink" title="定期发送请求消息"></a>定期发送请求消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> getMessageThread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetMessageThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NettyClient nettyClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private static HuiListenerRegistry huiListenerRegistry = new HuiListenerRegistry();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GetMessageThread</span><span class="params">(NettyClient nettyClient)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.nettyClient = nettyClient;</span><br><span class="line">        regularGetMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 定时发送是否存在消息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">regularGetMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line"><span class="comment">//            log.info(&quot;regularGetMessage is running&quot;);</span></span><br><span class="line">            Set&lt;String&gt; channel = HuiListenerRegistry.huiListenerEndpointConcurrentHashMap.keySet();</span><br><span class="line">            <span class="keyword">for</span>(String s : channel)&#123;</span><br><span class="line">                MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBase.Message.newBuilder()</span><br><span class="line">                        .setCmd(MessageBase.Message.CommandType.SEND_MESSAGE)</span><br><span class="line">                        .setChannel(s).build();</span><br><span class="line">                nettyClient.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(task,<span class="number">2</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消费端启动定期请求消息"><a href="#消费端启动定期请求消息" class="headerlink" title="消费端启动定期请求消息"></a>消费端启动定期请求消息</h4><p>如果这个服务中有被HuiListener注解标记的方法就会启用这个方法，SmartInitializingSingleton会在所有的Bean初始化之后运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MyBeanInjector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanInjector</span> <span class="keyword">implements</span> <span class="title class_">SmartInitializingSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NettyClient nettyClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBeanInjector</span><span class="params">(NettyClient nettyClient)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.nettyClient = nettyClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSingletonsInstantiated</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;GetMessageThread is ready&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (HuiListenerAnnotationBeanPostProcessor.huiListenerFlag)&#123;</span><br><span class="line">            <span class="type">GetMessageThread</span> <span class="variable">getMessageThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetMessageThread</span>(nettyClient);</span><br><span class="line">            log.info(<span class="string">&quot;GetMessageThread is running&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用HuiMQ"><a href="#使用HuiMQ" class="headerlink" title="使用HuiMQ"></a>使用HuiMQ</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> ReceiveHuiMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveHuiMessage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HuiListener(queueName = &quot;queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noticeUserHaveComment</span><span class="params">(CommentVO commentVO)</span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;Chat模块接收到消息：&quot;</span> + commentVO.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="如何保证消息不丢失"><a href="#如何保证消息不丢失" class="headerlink" title="如何保证消息不丢失"></a>如何保证消息不丢失</h3><p>对于生产者来说需要做到失败重传，采用确认机制可以有效避免消息丢失；</p><p>对于Broker来说，需要控制给生产者确认的时机，在Broker保存消息到MySQL后再进行返回，可以有效避免消息丢失；</p><p>对于消费者来说，需要在消息真正消费之后再给Broker进行确认，可以避免消息丢失；</p><h3 id="如何保证消息不会被重复消费"><a href="#如何保证消息不会被重复消费" class="headerlink" title="如何保证消息不会被重复消费"></a>如何保证消息不会被重复消费</h3><p>对于正常的业务消息在消息队列中是不可避免会存在重复消费问题，所以我们只能在业务层面进行消除该影响。</p><p>这种问题就是典型的幂等性问题，即对于同样的一种操作所带来的结果是一致的，比如这种<code>update t1 set money = 150 where id = 1 and money = 100;</code> 执行多少遍<code>money</code>都是150，这就叫幂等。</p><p>所以我们一般的解决方法是添加版本号version，在执行SQL时判断version是否一致，不一致则不执行。或者记录关键的key，像订单号这种，执行过的就不需要再执行。</p><h3 id="如何保证消息的有序性"><a href="#如何保证消息的有序性" class="headerlink" title="如何保证消息的有序性"></a>如何保证消息的有序性</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262016697.png" alt="image-20241013145317056"></p><h3 id="如何处理消息堆积"><a href="#如何处理消息堆积" class="headerlink" title="如何处理消息堆积"></a>如何处理消息堆积</h3><p>消息队列根本原因是消费者消费跟不上生产者，我们可以优化下消费逻辑，比如之前是一条一条消息消费处理的，这次我们批量处理，比如数据库的插入，一条一条插和批量插效率是不一样的。</p><p>假如逻辑我们已经都优化了，但还是慢，那就得考虑水平扩容了，增加<code>Topic</code>的队列数和消费者数量，<strong>注意队列数一定要增加</strong>，不然新增加的消费者是没东西消费的。<strong>一个Topic中，一个队列只会分配给一个消费者</strong>。</p><h2 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="适配RabbitMQ"><a href="#适配RabbitMQ" class="headerlink" title="适配RabbitMQ"></a>适配RabbitMQ</h3><h4 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitmq--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在SpringBoot项目中引入这个依赖。</p><h4 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常见面试问题"><a href="#常见面试问题" class="headerlink" title="常见面试问题"></a>常见面试问题</h2><p>以下是涵盖整个消息队列知识点的面试题，难度循序渐进，共有30个问题：</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li>什么是消息队列？它在分布式系统中起到什么作用？</li><li>请解释一下消息队列的生产者和消费者模型。</li><li>消息队列和传统的数据库队列有什么区别？</li><li>请简述一下消息队列的工作原理。</li><li>什么是消息队列的持久化？为什么需要持久化？</li><li>什么是消息的ACK机制，如何保证消息的可靠性？</li><li>什么是消息的顺序性？消息队列是如何保证顺序性的？</li><li>什么是消息的幂等性？如何保证消息的幂等性？</li></ol><p>下面是对这些问题的详细介绍：</p><h4 id="1-什么是消息队列？它在分布式系统中起到什么作用？"><a href="#1-什么是消息队列？它在分布式系统中起到什么作用？" class="headerlink" title="1. 什么是消息队列？它在分布式系统中起到什么作用？"></a>1. 什么是消息队列？它在分布式系统中起到什么作用？</h4><p><strong>消息队列（MQ，Message Queue）</strong> 是一种<strong>通信机制</strong>，通常用于<strong>异步消息传递</strong>。在消息队列中，生产者将消息发送到队列中，消费者从队列中取出消息并处理。它是一个<strong>暂时存储</strong>的中介，通过消息队列的方式，使得消息传递可以解耦发送者和接收者。</p><p><strong>在分布式系统中的作用</strong>：</p><ul><li><strong>解耦</strong>：通过消息队列，生产者和消费者不需要直接通信，可以异步地进行消息传递，降低系统间的耦合度。</li><li><strong>异步处理</strong>：系统中的处理任务不必同步进行，可以将处理过程异步化，从而提高系统的响应速度和吞吐量。</li><li><strong>流量削峰</strong>：在流量突增的情况下，消息队列能够缓冲积压的请求，防止系统压力过大导致崩溃或响应延迟。</li><li><strong>系统稳定性</strong>：通过消息队列，可以实现系统组件的松耦合，避免一个模块的故障导致整个系统崩溃。</li><li><strong>容错性</strong>：如果某个消费者处理失败，消息可以重新投递，或者可以使用死信队列（DLQ）来处理无法消费的消息。</li></ul><h4 id="2-请解释一下消息队列的生产者和消费者模型"><a href="#2-请解释一下消息队列的生产者和消费者模型" class="headerlink" title="2. 请解释一下消息队列的生产者和消费者模型"></a>2. 请解释一下消息队列的生产者和消费者模型</h4><p><strong>生产者-消费者模型</strong>是消息队列的基本工作模式。它包括两个主要的角色：生产者和消费者。</p><ul><li><strong>生产者（Producer）</strong>：生产者负责生成消息并将消息发送到消息队列中。生产者通常不关心消息队列的具体实现，只需要知道如何发送消息。</li><li><strong>消费者（Consumer）</strong>：消费者从消息队列中取出消息并进行处理。消费者是被动的，它只在队列中有消息时才会进行处理。</li></ul><p>消息队列的优势之一在于它解耦了生产者和消费者。生产者不需要关心消息的消费过程，消费者也不需要知道消息是如何产生的。</p><h4 id="3-消息队列和传统的数据库队列有什么区别？"><a href="#3-消息队列和传统的数据库队列有什么区别？" class="headerlink" title="3. 消息队列和传统的数据库队列有什么区别？"></a>3. 消息队列和传统的数据库队列有什么区别？</h4><p>消息队列和数据库队列在实现和使用上有几个重要的区别：</p><ol><li><strong>用途不同</strong>：<ul><li><strong>消息队列</strong>：主要用于异步消息传递，解耦系统之间的通信，通常具有高吞吐量和低延迟，适用于分布式系统中的异步处理。</li><li><strong>数据库队列</strong>：通常用于数据库内部的任务排队，适用于小规模的内部操作，性能和扩展性较差。</li></ul></li><li><strong>数据存储方式</strong>：<ul><li><strong>消息队列</strong>：通常将消息存储在内存或磁盘中，支持高吞吐量的消息处理。队列中的消息在被消费后会被删除。</li><li><strong>数据库队列</strong>：通过数据库表实现队列结构，消息存储在数据库中。一般使用数据库的事务机制来保证数据的一致性。</li></ul></li><li><strong>性能与吞吐量</strong>：<ul><li><strong>消息队列</strong>：设计上注重性能和可扩展性，支持高并发的消息传递。</li><li><strong>数据库队列</strong>：通常性能较低，因为数据库是为存储和查询设计的，并不适合高吞吐量的消息传递。</li></ul></li><li><strong>扩展性</strong>：<ul><li><strong>消息队列</strong>：大多数消息队列系统（如 Kafka、RabbitMQ）具备高可扩展性，可以支持分布式部署，适应不断增长的负载。</li><li><strong>数据库队列</strong>：数据库系统通常并非为高并发消息传递设计，扩展性差，容易成为性能瓶颈。</li></ul></li></ol><h4 id="4-请简述一下消息队列的工作原理"><a href="#4-请简述一下消息队列的工作原理" class="headerlink" title="4. 请简述一下消息队列的工作原理"></a>4. 请简述一下消息队列的工作原理</h4><p>消息队列的工作原理通常包括以下几个步骤：</p><ol><li><strong>生产者发送消息</strong>：生产者将消息发送到消息队列中。消息队列接收到消息后会将其存储在队列中（通常存储在内存或磁盘中）。</li><li><strong>消费者获取消息</strong>：消费者从队列中取出消息并处理。消费消息时，消息队列会根据配置的消费方式（如轮询、广播等）将消息分配给消费者。</li><li><strong>消息确认</strong>：消费者处理完消息后，需要对消息进行确认（ACK）。确认表示消费者已经成功处理了该消息，可以从队列中删除该消息。</li><li><strong>消息持久化</strong>：消息队列通常支持消息持久化，即将消息写入磁盘，以防系统故障时丢失消息。</li><li><strong>死信队列</strong>：如果消费者不能处理某些消息（例如消息格式错误），这些消息可以被转移到死信队列中，后续可以进行人工处理或重试。</li></ol><h4 id="5-什么是消息队列的持久化？为什么需要持久化？"><a href="#5-什么是消息队列的持久化？为什么需要持久化？" class="headerlink" title="5. 什么是消息队列的持久化？为什么需要持久化？"></a>5. 什么是消息队列的持久化？为什么需要持久化？</h4><p><strong>消息队列的持久化</strong>是指将消息存储到磁盘或其他持久化介质中，确保消息不会因为系统崩溃而丢失。消息队列通常支持两种持久化模式：<strong>同步持久化</strong>和<strong>异步持久化</strong>。</p><p><strong>为什么需要持久化</strong>：</p><ul><li><strong>数据安全性</strong>：在系统发生故障（如服务器崩溃、电力中断等）时，持久化可以确保消息不会丢失，能够在系统恢复后继续处理。</li><li><strong>可靠性</strong>：消息队列的持久化保证了消息的可靠传递，即使系统重启或崩溃，消息仍然可以被消费。</li><li><strong>事务性</strong>：持久化的消息可以确保消息的传递符合原子性，即消息不会重复消费或漏掉。</li></ul><h4 id="6-什么是消息的ACK机制，如何保证消息的可靠性？"><a href="#6-什么是消息的ACK机制，如何保证消息的可靠性？" class="headerlink" title="6. 什么是消息的ACK机制，如何保证消息的可靠性？"></a>6. 什么是消息的ACK机制，如何保证消息的可靠性？</h4><p><strong>ACK（Acknowledgment，确认机制）</strong> 是消费者在成功消费完消息后，向消息队列发送的确认信号。它用于告知消息队列该消息已成功处理，可以从队列中删除。</p><p><strong>如何保证消息的可靠性</strong>：</p><ol><li><strong>消息的确认机制</strong>：消费者在处理完消息后需要发送ACK确认。如果没有收到ACK，消息队列会认为该消息没有成功消费，并且可以将其重新投递。</li><li><strong>消息的重试机制</strong>：如果消费者处理失败，消息队列可以将消息重试，直到成功为止，或者将消息转移到死信队列进行处理。</li><li><strong>消息持久化</strong>：将消息持久化到磁盘中，可以确保在系统重启或崩溃后，消息不会丢失，并且可以重新投递。</li><li><strong>幂等性</strong>：在分布式系统中，由于网络和系统的故障，消息可能会被重复消费。通过保证消费的幂等性，确保即使同一条消息被消费多次，也不会对业务逻辑产生不一致的影响。</li></ol><h4 id="7-什么是消息的顺序性？消息队列是如何保证顺序性的？"><a href="#7-什么是消息的顺序性？消息队列是如何保证顺序性的？" class="headerlink" title="7. 什么是消息的顺序性？消息队列是如何保证顺序性的？"></a>7. 什么是消息的顺序性？消息队列是如何保证顺序性的？</h4><p><strong>消息的顺序性</strong>是指消息被生产者发送到队列中的顺序应该保持一致，消费者按顺序处理这些消息。即：消息在生产者端的顺序应该与消费者端的顺序一致。</p><p><strong>如何保证顺序性</strong>：</p><ul><li><strong>单队列消费</strong>：消息队列通常通过保证每个队列只有一个消费者来保证顺序性。消费者按顺序消费队列中的消息。</li><li><strong>分区与分组</strong>：在一些高级消息队列系统（如 Kafka）中，消息可以根据分区进行处理，确保同一个分区内的消息顺序性。消费者通过消费者组来保证顺序性，多个消费者可以并行消费不同分区的消息。</li></ul><h4 id="8-什么是消息的幂等性？如何保证消息的幂等性？"><a href="#8-什么是消息的幂等性？如何保证消息的幂等性？" class="headerlink" title="8. 什么是消息的幂等性？如何保证消息的幂等性？"></a>8. 什么是消息的幂等性？如何保证消息的幂等性？</h4><p><strong>消息的幂等性</strong>是指消息无论被消费多少次，消费者的业务逻辑结果始终保持一致，避免了重复消费导致的副作用。例如，在支付系统中，即使消息被重复处理，也不会导致重复扣款。</p><p><strong>如何保证消息的幂等性</strong>：</p><ol><li><strong>唯一标识符</strong>：给每条消息加上唯一的标识符（如 UUID），消费端可以根据标识符判断该消息是否已被处理过，避免重复消费。</li><li><strong>去重机制</strong>：可以在数据库层面或缓存层面做去重，记录已处理过的消息 ID，当发现消息已处理过时，跳过该消息。</li><li><strong>业务设计</strong>：通过设计幂等的业务逻辑，例如在数据库中执行“插入或更新”的操作，确保相同的数据操作不会对系统产生副作用。</li></ol><p>通过这些手段，消息队列可以实现幂等消费，确保消息多次消费不会引起系统的不一致性。</p><h3 id="常见消息队列系统"><a href="#常见消息队列系统" class="headerlink" title="常见消息队列系统"></a>常见消息队列系统</h3><ol><li>请简述RabbitMQ、Kafka、ActiveMQ的主要特点和应用场景。</li><li>在Kafka中，什么是分区（Partition）？它是如何提高性能的？</li><li>Kafka中如何保证消息的顺序性？</li><li>RabbitMQ是如何处理消息的路由与交换的？什么是交换器（Exchange）和队列（Queue）的关系？</li><li>请解释一下消息队列中的”死信队列”（DLQ），它的作用是什么？</li><li>ActiveMQ中的“持久化”机制是如何实现的？它与“非持久化”消息有什么区别？</li><li>消息队列中的”事务机制”是如何工作的？</li></ol><h4 id="1-请简述RabbitMQ、Kafka、ActiveMQ的主要特点和应用场景"><a href="#1-请简述RabbitMQ、Kafka、ActiveMQ的主要特点和应用场景" class="headerlink" title="1. 请简述RabbitMQ、Kafka、ActiveMQ的主要特点和应用场景"></a>1. 请简述RabbitMQ、Kafka、ActiveMQ的主要特点和应用场景</h4><h5 id="RabbitMQ-2"><a href="#RabbitMQ-2" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h5><p><strong>主要特点</strong>：</p><ul><li>基于AMQP协议（Advanced Message Queuing Protocol），非常适合消息的可靠传递。</li><li>支持多种消息交换模式，如<strong>发布&#x2F;订阅、请求&#x2F;响应</strong>。</li><li>提供消息确认（ACK）、消息持久化等特性，保证消息的可靠性。</li><li>支持多个消费者消费同一个队列中的消息，支持消息的负载均衡。</li><li>可以通过**交换器（Exchange）**来进行灵活的消息路由。</li></ul><p><strong>应用场景</strong>：</p><ul><li>适用于<strong>异步任务处理</strong>、<strong>消息调度</strong>、<strong>微服务架构中服务间的消息传递</strong>。</li><li>适合对消息的可靠性、顺序性要求较高的场景，尤其是需要灵活的消息路由。</li></ul><h5 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h5><p><strong>主要特点</strong>：</p><ul><li>基于分布式架构，支持海量数据的高吞吐量处理。</li><li>消息被写入到**分区（Partition）<strong>中，可以通过</strong>消费者组（Consumer Group）**来高效地并行消费。</li><li>消息按时间顺序写入，提供高吞吐量和低延迟的消息处理能力。</li><li>强大的消息持久化机制，支持<strong>日志存储（Log-based Storage）</strong>。</li><li>消息的顺序性只在<strong>同一个分区</strong>内保证。</li></ul><p><strong>应用场景</strong>：</p><ul><li>适用于需要高吞吐量、高可用性的场景，例如<strong>日志处理、事件流处理、实时数据分析</strong>。</li><li>适合高并发、大规模分布式系统的数据流处理。</li></ul><h5 id="ActiveMQ-1"><a href="#ActiveMQ-1" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h5><p><strong>主要特点</strong>：</p><ul><li>支持JMS（Java Message Service），适用于Java应用中进行消息传递。</li><li>提供点对点和发布&#x2F;订阅两种模式。</li><li>支持消息持久化、事务处理、消息确认等。</li><li>支持多种协议，如<strong>OpenWire、AMQP、STOMP</strong>等。</li><li>支持集群化部署和高可用配置。</li></ul><p><strong>应用场景</strong>：</p><ul><li>适用于Java应用之间的消息传递和集成，尤其是基于JMS的消息传递机制。</li><li>适用于<strong>企业级应用、分布式系统中的服务通信、数据同步等</strong>。</li></ul><h4 id="2-在Kafka中，什么是分区（Partition）？它是如何提高性能的？"><a href="#2-在Kafka中，什么是分区（Partition）？它是如何提高性能的？" class="headerlink" title="2. 在Kafka中，什么是分区（Partition）？它是如何提高性能的？"></a>2. 在Kafka中，什么是分区（Partition）？它是如何提高性能的？</h4><p>**分区（Partition）*<em>是Kafka中最重要的概念之一。每个主题（Topic）可以分为多个分区，每个分区是一个*<em>有序的消息队列</em></em>。消息写入一个分区后，消费者可以根据分区读取消息。</p><p><strong>如何提高性能</strong>：</p><ul><li><strong>并行消费</strong>：通过分区，Kafka能够将一个主题的消息分布到多个分区上，使得多个消费者可以并行处理不同分区的消息。这种并行消费大大提高了系统的吞吐量。</li><li><strong>负载均衡</strong>：Kafka允许消费者根据需要动态调整分配到的分区，平衡消费负载，避免单个消费者的压力过大。</li><li><strong>数据局部性</strong>：每个分区存储在不同的机器上，多个分区分布在集群的不同节点上，使得消息存储与消费的负载得到有效分担。</li></ul><h4 id="3-Kafka中如何保证消息的顺序性？"><a href="#3-Kafka中如何保证消息的顺序性？" class="headerlink" title="3. Kafka中如何保证消息的顺序性？"></a>3. Kafka中如何保证消息的顺序性？</h4><p>Kafka保证消息顺序性的方式如下：</p><ul><li><strong>同一分区内顺序性</strong>：Kafka确保同一个分区内的消息严格按顺序消费。每个分区是一个单独的队列，消息会按写入顺序进行排列，消费者按顺序读取。</li><li><strong>消费者组（Consumer Group）</strong>：在一个消费者组内，Kafka确保每个消费者只会消费某些分区，避免多个消费者并行消费同一分区，导致顺序混乱。</li></ul><p><strong>注意</strong>：如果需要跨分区的顺序保证，Kafka本身无法做到，因为跨分区的消息会被并行处理，不能保证顺序。</p><h4 id="4-RabbitMQ是如何处理消息的路由与交换的？什么是交换器（Exchange）和队列（Queue）的关系？"><a href="#4-RabbitMQ是如何处理消息的路由与交换的？什么是交换器（Exchange）和队列（Queue）的关系？" class="headerlink" title="4. RabbitMQ是如何处理消息的路由与交换的？什么是交换器（Exchange）和队列（Queue）的关系？"></a>4. RabbitMQ是如何处理消息的路由与交换的？什么是交换器（Exchange）和队列（Queue）的关系？</h4><p><strong>RabbitMQ中的路由机制</strong>：</p><ul><li><p>Exchange：Exchange是RabbitMQ的路由器，负责接收生产者发送的消息并根据消息的路由规则将其分发到一个或多个队列中。Exchange的类型有多种，如</p><p>direct、fanout、topic、headers</p><p>等，分别对应不同的路由策略。</p><ul><li><strong>direct Exchange</strong>：将消息直接路由到绑定的队列。</li><li><strong>fanout Exchange</strong>：将消息广播到所有绑定的队列。</li><li><strong>topic Exchange</strong>：根据路由键的模式将消息路由到匹配的队列。</li><li><strong>headers Exchange</strong>：根据消息头部的信息进行路由。</li></ul></li></ul><p><strong>队列（Queue）</strong>：队列是消息的存储区。消费者从队列中取出消息并处理。</p><p><strong>关系</strong>：</p><ul><li>生产者将消息发送给Exchange，Exchange根据绑定的路由规则将消息转发到一个或多个队列。消费者从队列中消费消息。Exchange和队列的关系决定了消息的路由路径。</li></ul><h4 id="5-请解释一下消息队列中的”死信队列”（DLQ），它的作用是什么？"><a href="#5-请解释一下消息队列中的”死信队列”（DLQ），它的作用是什么？" class="headerlink" title="5. 请解释一下消息队列中的”死信队列”（DLQ），它的作用是什么？"></a>5. 请解释一下消息队列中的”死信队列”（DLQ），它的作用是什么？</h4><p>**死信队列（DLQ，Dead Letter Queue）*<em>是一个特殊的队列，用于存储无法成功消费的消息。这些消息可能因为*<em>消费者处理失败</em></em>、<strong>消息过期</strong>、<strong>队列满</strong>等原因未能成功消费。</p><p><strong>作用</strong>：</p><ul><li><strong>消息隔离</strong>：死信队列可以有效隔离无法消费的消息，避免它们影响正常的消息消费流程。</li><li><strong>问题排查</strong>：将无法处理的消息放入死信队列，便于开发人员进行诊断、排查和手动处理。</li><li><strong>重试机制</strong>：死信队列中的消息可以根据需要进行重试，或者通过人工干预对其进行处理。</li></ul><h4 id="6-ActiveMQ中的“持久化”机制是如何实现的？它与“非持久化”消息有什么区别？"><a href="#6-ActiveMQ中的“持久化”机制是如何实现的？它与“非持久化”消息有什么区别？" class="headerlink" title="6. ActiveMQ中的“持久化”机制是如何实现的？它与“非持久化”消息有什么区别？"></a>6. ActiveMQ中的“持久化”机制是如何实现的？它与“非持久化”消息有什么区别？</h4><p>**持久化（Persistent）**机制：ActiveMQ将消息存储到磁盘上，以确保即使消息中间的Broker发生崩溃，消息也不会丢失。持久化消息的存储过程包括将消息写入磁盘、确保消息的安全性等。</p><p><strong>如何实现</strong>：</p><ul><li>在消息发送时，生产者可以设置消息为持久化类型（<code>setPersistent(true)</code>）。</li><li>消息在Broker中存储时，会被写入到磁盘上的消息存储文件（通常是数据库或文件系统）中。</li></ul><p><strong>与非持久化消息的区别</strong>：</p><ul><li><strong>持久化消息</strong>：消息会存储在磁盘中，保证消息在Broker重启后依然存在，可以通过持久化存储来确保消息不会丢失。</li><li><strong>非持久化消息</strong>：消息只会存储在内存中，Broker重启后会丢失这些消息，适用于对消息丢失容忍度较高的场景。</li></ul><h4 id="7-消息队列中的”事务机制”是如何工作的？"><a href="#7-消息队列中的”事务机制”是如何工作的？" class="headerlink" title="7. 消息队列中的”事务机制”是如何工作的？"></a>7. 消息队列中的”事务机制”是如何工作的？</h4><p><strong>事务机制</strong>在消息队列中用于保证消息的<strong>原子性、一致性</strong>。在事务机制中，生产者将消息发送到队列中，直到确认消息已经成功存储，事务才会提交。</p><p><strong>如何工作</strong>：</p><ul><li>生产者在发送消息时开启一个<strong>事务</strong>，并向消息队列发送消息。</li><li>只有当消息队列确认消息已持久化时，事务才会提交。否则，消息会被回滚，保证消息未消费时不会被永久保存。</li><li>消费者也可以通过<strong>事务方式</strong>来消费消息，确保消息的处理是成功的。如果处理失败，事务会回滚，消息重新放回队列等待重试。</li></ul><p>这种机制确保了消息在传递过程中的<strong>可靠性</strong>和<strong>一致性</strong>，特别适合需要高可靠性的场景，如金融交易、库存管理等。</p><hr><h3 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h3><ol><li>消息队列的消费者如何实现消息的批量处理？</li><li>在消息队列中，如何处理消费者端的消息重复消费问题？</li><li>如何解决消息队列中的“消息丢失”问题？</li><li>消息队列中的“延迟消息”是如何实现的？有什么应用场景？</li><li>如何在消息队列中实现高可用性和容错机制？有哪些常见的解决方案？</li></ol><h4 id="1-消息队列的消费者如何实现消息的批量处理？"><a href="#1-消息队列的消费者如何实现消息的批量处理？" class="headerlink" title="1. 消息队列的消费者如何实现消息的批量处理？"></a>1. 消息队列的消费者如何实现消息的批量处理？</h4><p>消费者实现消息的批量处理，通常是为了提高消息消费的效率，减少网络请求次数，减少系统的开销。批量消费在大规模系统中尤为重要，因为它可以显著提高吞吐量。</p><p><strong>实现方法</strong>：</p><ul><li><strong>消费者配置批量消费</strong>：大多数消息队列系统，如RabbitMQ和Kafka，都支持消费者批量拉取消息。消费者可以配置每次从队列中拉取一定数量的消息。<ul><li><strong>RabbitMQ</strong>：可以通过<code>basicGet()</code>和<code>basicConsume()</code>接口，结合<code>prefetch</code>设置来控制消费者的消息拉取数量。</li><li><strong>Kafka</strong>：消费者可以设置<code>max.poll.records</code>，指定每次拉取的消息数。这将影响到消费者每次批量处理的消息数量。</li></ul></li><li><strong>手动确认机制</strong>：消费者在处理完一批消息后，手动发送消息确认（ACK），确保消息已经被成功消费。这个确认机制确保了批量消费中的消息不会因为消费失败而丢失。</li><li><strong>批量提交</strong>：消费者在处理完批量消息后，可以将结果一起提交，而不是一条一条地提交。通过批量提交，减少了提交操作的次数。</li></ul><p><strong>优点</strong>：</p><ul><li>减少了每条消息处理的开销，提升了系统吞吐量。</li><li>可以通过批量确认，确保消费的消息在处理过程中不会丢失。</li></ul><h4 id="2-在消息队列中，如何处理消费者端的消息重复消费问题？"><a href="#2-在消息队列中，如何处理消费者端的消息重复消费问题？" class="headerlink" title="2. 在消息队列中，如何处理消费者端的消息重复消费问题？"></a>2. 在消息队列中，如何处理消费者端的消息重复消费问题？</h4><p>在分布式系统中，消息重复消费问题是不可避免的，这通常发生在消费者消费消息时发生故障或消费者确认（ACK）消息时的延迟。为了解决这一问题，消息队列系统采用了不同的技术手段。</p><p><strong>常见的处理方法</strong>：</p><ul><li>消息幂等性：<ul><li>设计消费者处理逻辑时，要确保即使同一条消息被重复消费，也不会影响业务逻辑。例如，消费端可以设计成幂等操作，比如数据库操作时使用<strong>唯一标识符</strong>（如订单号、用户ID等）来避免重复插入。</li></ul></li><li>消息去重：<ul><li>消息队列可以通过<strong>消息ID</strong>或<strong>全局唯一标识符</strong>来对消息进行去重处理。消费者处理消息时，如果发现已经处理过该消息，则跳过该消息。</li></ul></li><li>事务机制：<ul><li>事务机制可以保证消息的可靠性，在消费者出现故障时，可以确保消息不会丢失或被重复消费。消费者在消费消息时，可以使用<strong>事务管理</strong>，确保操作的一致性。</li></ul></li><li>消息确认（ACK）：<ul><li>消费者在消费完消息后，通过发送确认消息（ACK）来告知消息队列该消息已被成功消费。如果消费失败，消费者可以选择不发送确认消息，消息队列会重新投递该消息。</li></ul></li></ul><h4 id="3-如何解决消息队列中的“消息丢失”问题？"><a href="#3-如何解决消息队列中的“消息丢失”问题？" class="headerlink" title="3. 如何解决消息队列中的“消息丢失”问题？"></a>3. 如何解决消息队列中的“消息丢失”问题？</h4><p>消息丢失问题通常发生在消费者未及时确认消息，或者在消息队列存储过程中发生故障。为了确保消息的可靠性，常见的解决方案包括：</p><p><strong>解决方法</strong>：</p><ul><li>消息持久化：<ul><li>消息持久化是确保消息不丢失的核心机制。通过将消息存储到磁盘上，即使消息队列崩溃或者重启，消息依然能够恢复。</li><li>例如，RabbitMQ支持<strong>持久化队列</strong>和<strong>持久化消息</strong>，Kafka则通过将消息写入磁盘日志文件来保证消息的持久化。</li></ul></li><li>消息确认机制：<ul><li>消费者处理完消息后，通过确认机制（如ACK）告知消息队列该消息已被成功处理。只有在收到ACK后，消息才会从队列中删除。如果ACK未收到，消息队列会重新投递该消息。</li></ul></li><li>事务机制：<ul><li>通过消息队列的事务机制，确保消息在消费过程中的可靠性。在消费者出现故障时，消息不会丢失，而是会重新投递或回滚，确保消息不会丢失。</li></ul></li><li>消息副本：<ul><li>消息队列通过维护消息副本来避免单点故障导致的消息丢失。例如，Kafka通过<strong>副本机制</strong>（Replication）确保每个分区有多个副本，从而避免单一节点故障时丢失消息。</li></ul></li></ul><h4 id="4-消息队列中的“延迟消息”是如何实现的？有什么应用场景？"><a href="#4-消息队列中的“延迟消息”是如何实现的？有什么应用场景？" class="headerlink" title="4. 消息队列中的“延迟消息”是如何实现的？有什么应用场景？"></a>4. 消息队列中的“延迟消息”是如何实现的？有什么应用场景？</h4><p><strong>延迟消息</strong>是指消息在发布到队列后，经过一定时间延迟才会被消费者消费。延迟消息广泛应用于需要在指定时间后执行某些操作的场景。</p><p><strong>实现方法</strong>：</p><ul><li>TTL（Time-to-Live）：<ul><li>许多消息队列系统支持TTL（消息生存时间）功能，即指定消息在队列中的存活时间，过期后会被自动丢弃。通过设置TTL，可以实现延迟消息的效果。RabbitMQ、Kafka都支持消息TTL。</li></ul></li><li>延迟队列：<ul><li>RabbitMQ支持使用<strong>延迟队列插件</strong>，可以指定消息在发送到队列后延迟一定的时间才被消费者消费。</li></ul></li><li>定时任务：<ul><li>消费者端可以根据业务需求定期检查是否有延迟消息到期，从而触发相应的操作。Kafka也可以通过定时器和任务调度来实现延迟消息的消费。</li></ul></li><li>Delayed Message Plugin：<ul><li>例如，在RabbitMQ中可以使用<code>rabbitmq-delayed-message-exchange</code>插件，该插件提供了延迟消息功能。消息在发送时指定延迟时间，到期后才会被消费。</li></ul></li></ul><p><strong>应用场景</strong>：</p><ul><li><strong>定时任务</strong>：如定时发送提醒消息、定时任务调度等。</li><li><strong>延迟处理</strong>：如延迟支付确认、延迟订单取消等。</li><li><strong>流量控制</strong>：通过延迟消息的方式控制系统的流量，避免系统过载。</li></ul><h4 id="5-如何在消息队列中实现高可用性和容错机制？有哪些常见的解决方案？"><a href="#5-如何在消息队列中实现高可用性和容错机制？有哪些常见的解决方案？" class="headerlink" title="5. 如何在消息队列中实现高可用性和容错机制？有哪些常见的解决方案？"></a>5. 如何在消息队列中实现高可用性和容错机制？有哪些常见的解决方案？</h4><p>消息队列的<strong>高可用性</strong>和<strong>容错性</strong>是保证系统稳定性和可靠性的重要措施。为了应对节点故障、网络分区等问题，消息队列系统通常采取以下技术手段：</p><p><strong>解决方案</strong>：</p><ul><li>消息队列的集群模式：<ul><li>消息队列系统通常采用集群架构来提供高可用性。集群可以将消息存储和处理负载分摊到不同的节点上，保证系统的高可用性。例如，Kafka的集群架构通过分区和副本机制保证了数据的高可用性和容错性。</li></ul></li><li>消息的副本机制：<ul><li>Kafka通过**分区副本（Replication）**确保每个分区有多个副本，即使一个节点故障，其他副本仍然可以提供服务，保证消息不丢失。</li><li>RabbitMQ通过配置**镜像队列（Mirrored Queues）**来确保消息在多个节点上备份，提高系统的容错能力。</li></ul></li><li>高可用的交换器和队列：<ul><li>在RabbitMQ中，通过镜像交换器和队列，可以确保即使某些节点故障，消息仍能被路由到其他节点处理，避免消息丢失。</li></ul></li><li>跨数据中心的复制：<ul><li>一些消息队列系统（如Kafka）支持跨数据中心的消息复制。通过在多个数据中心部署副本，可以实现数据的跨地域高可用性。</li></ul></li><li>自动故障切换：<ul><li>在消息队列系统中，当某个节点或某个队列发生故障时，系统应该能自动切换到可用节点或队列，保证系统的持续可用性。</li></ul></li></ul><p><strong>总结</strong>： 高可用性和容错机制的核心是通过<strong>冗余</strong>、<strong>副本</strong>、<strong>自动切换</strong>等技术手段，保证消息队列系统即使在部分节点或网络故障的情况下仍能保持正常运行。</p><hr><h3 id="性能与优化"><a href="#性能与优化" class="headerlink" title="性能与优化"></a>性能与优化</h3><ol><li>消息队列的消息积压和消费滞后会导致什么问题？如何优化处理？</li><li>消息队列的负载均衡是如何实现的？</li><li>在高并发的情况下，如何确保消息队列的性能不受到瓶颈影响？</li><li>如何进行消息队列的监控和日志管理？</li><li>如何设计消息队列的高吞吐量系统，尤其是对实时消息处理的要求？</li></ol><h4 id="1-消息队列的消息积压和消费滞后会导致什么问题？如何优化处理？"><a href="#1-消息队列的消息积压和消费滞后会导致什么问题？如何优化处理？" class="headerlink" title="1. 消息队列的消息积压和消费滞后会导致什么问题？如何优化处理？"></a>1. 消息队列的消息积压和消费滞后会导致什么问题？如何优化处理？</h4><p><strong>消息积压和消费滞后</strong>是指消费者处理消息的速度跟不上生产者发送消息的速度，导致消息在队列中堆积，延迟增加。</p><p><strong>问题</strong>：</p><ul><li><strong>系统延迟增加</strong>：消费者无法及时处理消息，会导致系统响应时间变长，甚至影响到最终用户体验。</li><li><strong>内存和存储压力</strong>：如果消息堆积过多，可能导致内存或磁盘占用过高，甚至出现存储空间不足的情况。</li><li><strong>消息丢失风险</strong>：消息堆积过久，可能因为队列的容量限制而导致消息丢失（尤其是在没有持久化的情况下）。</li><li><strong>资源浪费</strong>：队列中的消息没有及时消费，可能导致系统资源的浪费，进而影响其他任务的处理。</li></ul><p><strong>优化处理</strong>：</p><ul><li><strong>增加消费者数量</strong>：通过扩展消费者的数量来提升消息的消费速率，形成多消费者并行处理的模型。</li><li><strong>消费者负载均衡</strong>：将负载均衡策略应用到多个消费者之间，通过合理分配任务，避免某个消费者处理过多任务。</li><li><strong>异步处理和批量消费</strong>：优化消费者的处理方式，可以通过异步消费或批量消费来提升吞吐量，减少单个消息处理的时间。</li><li><strong>消息优先级和调度</strong>：对消息进行优先级排序，优先处理高优先级的消息，降低低优先级消息的延迟。</li><li><strong>队列的分区和分布式部署</strong>：将消息队列进行分区，分散到多个节点上，避免单个队列的负载过重。Kafka和RabbitMQ都支持这种分布式模式。</li></ul><h4 id="2-消息队列的负载均衡是如何实现的？"><a href="#2-消息队列的负载均衡是如何实现的？" class="headerlink" title="2. 消息队列的负载均衡是如何实现的？"></a>2. 消息队列的负载均衡是如何实现的？</h4><p><strong>负载均衡</strong>是通过合理分配消息给消费者来确保系统各个消费者的处理能力平衡，以避免某些消费者过载。</p><p><strong>实现方式</strong>：</p><ul><li><strong>轮询（Round Robin）</strong>：生产者按照顺序将消息依次发送到多个队列中，消费者从各个队列中拉取消息。适用于队列之间的负载均衡。</li><li><strong>消费者组（Consumer Group）</strong>：在Kafka中，通过消费者组的方式实现负载均衡。一个消费者组中的所有消费者共享消费同一个主题（Topic），Kafka会根据分区将消息均匀分配到消费者中，从而达到负载均衡。</li><li><strong>消息分区</strong>：消息队列系统（如Kafka）可以将消息分为多个分区，生产者将消息发送到不同的分区，消费者根据分区来处理消息。分区可以均匀地分配到消费者上，实现负载均衡。</li><li><strong>动态消费者调整</strong>：动态调整消费者的数量，按需增加或减少消费者来应对负载波动。例如，在消息量激增时，可以动态扩展消费者数量来保持系统稳定性。</li><li><strong>智能路由和调度</strong>：通过消息路由策略，合理地分配任务。例如，RabbitMQ的Exchange机制可以根据消息的特征（如路由键、类型）智能地将消息分配给合适的队列。</li></ul><h4 id="3-在高并发的情况下，如何确保消息队列的性能不受到瓶颈影响？"><a href="#3-在高并发的情况下，如何确保消息队列的性能不受到瓶颈影响？" class="headerlink" title="3. 在高并发的情况下，如何确保消息队列的性能不受到瓶颈影响？"></a>3. 在高并发的情况下，如何确保消息队列的性能不受到瓶颈影响？</h4><p>在高并发的情况下，消息队列的性能可能会受到多个因素的影响，如网络带宽、存储IO、消费者处理能力等。为了保证性能，可以采取以下优化措施：</p><p><strong>性能优化</strong>：</p><ul><li><strong>水平扩展</strong>：通过横向扩展消息队列的节点（如增加更多的Kafka代理节点或RabbitMQ节点），分担负载，避免单点瓶颈。</li><li><strong>分区策略</strong>：在Kafka中，使用分区将消息分散到多个代理节点上，增加并发处理能力。每个分区可以并行消费，从而提升整体吞吐量。</li><li><strong>异步消费</strong>：消费者采用异步处理的方式，将消息消费与业务处理解耦，避免阻塞操作。通过事件驱动或消息队列通知消费者进行处理，可以提高并发性能。</li><li><strong>批量消息处理</strong>：批量消费消息，可以减少每次消费的开销。消费者可以在一次拉取中获取多条消息，减少网络延迟，提升吞吐量。</li><li><strong>磁盘和网络IO优化</strong>：优化磁盘和网络带宽，确保消息队列系统能够高效地进行数据存取。例如，Kafka支持将消息存储在高效的日志文件中，而RabbitMQ则支持持久化队列和异步确认机制，减少IO瓶颈。</li><li><strong>消息压缩</strong>：采用消息压缩技术减少网络带宽消耗，特别是在消息量较大的情况下，压缩可以显著提升网络传输性能。</li><li><strong>消息批量提交</strong>：消费者在批量处理消息后，通过批量确认机制提交消息，这样可以减少每条消息的确认开销。</li></ul><h4 id="4-如何进行消息队列的监控和日志管理？"><a href="#4-如何进行消息队列的监控和日志管理？" class="headerlink" title="4. 如何进行消息队列的监控和日志管理？"></a>4. 如何进行消息队列的监控和日志管理？</h4><p><strong>消息队列监控</strong>是确保系统健康、及时发现并解决潜在问题的关键。可以通过以下几个方面进行监控：</p><p><strong>监控指标</strong>：</p><ul><li><strong>消息队列长度</strong>：监控队列中未消费的消息数量，避免消息积压导致的性能问题。</li><li><strong>消息消费速率</strong>：监控消费者的消息处理速率，确保消费端能及时处理消息，避免滞后。</li><li><strong>消息生产速率</strong>：监控生产者发送消息的速率，避免生产者过快地生产消息，导致队列积压。</li><li><strong>消息处理延迟</strong>：监控消息的延迟时间，尤其是对于实时性要求较高的场景，确保消息在合理时间内被处理。</li><li><strong>消费者健康状况</strong>：监控消费者是否正常工作，是否有消费者崩溃或停止消费的情况。</li></ul><p><strong>日志管理</strong>：</p><ul><li><strong>日志记录</strong>：记录消息队列的操作日志，特别是消息的发送、消费、确认等操作。</li><li><strong>异常日志</strong>：记录系统异常情况，如消息消费失败、队列满等问题。通过异常日志可以快速定位问题。</li><li><strong>性能日志</strong>：记录消息队列的性能数据，如吞吐量、延迟等，以便进行性能分析和优化。</li></ul><p><strong>工具支持</strong>：</p><ul><li><strong>Prometheus &amp; Grafana</strong>：可以通过Prometheus采集消息队列的性能指标，使用Grafana进行可视化展示。</li><li><strong>Elasticsearch &amp; Kibana</strong>：通过Elasticsearch进行日志存储和索引，使用Kibana进行日志的查询和分析。</li><li><strong>Kafka Manager</strong>：对于Kafka来说，可以使用Kafka Manager来监控Kafka集群的状态、分区分配、消费情况等。</li><li><strong>RabbitMQ Management Plugin</strong>：RabbitMQ自带的管理插件提供了队列、交换器、消费者等的详细监控信息。</li></ul><h4 id="5-如何设计消息队列的高吞吐量系统，尤其是对实时消息处理的要求？"><a href="#5-如何设计消息队列的高吞吐量系统，尤其是对实时消息处理的要求？" class="headerlink" title="5. 如何设计消息队列的高吞吐量系统，尤其是对实时消息处理的要求？"></a>5. 如何设计消息队列的高吞吐量系统，尤其是对实时消息处理的要求？</h4><p>为了设计一个高吞吐量的消息队列系统，尤其是对于实时消息处理，系统需要具备以下几个方面的优化：</p><p><strong>设计思路</strong>：</p><ul><li><strong>高效的消息存储和检索</strong>：<ul><li>使用日志存储（如Kafka）来保证快速的消息写入和检索。Kafka通过顺序写入和零拷贝技术优化了存储性能。</li></ul></li><li><strong>分区与并行消费</strong>：<ul><li>将消息分布到多个分区上，并使用多个消费者并行消费，以提高系统的吞吐量。消费者在处理多个分区的消息时，能够平衡负载并提升整体性能。</li></ul></li><li><strong>异步和批量处理</strong>：<ul><li>消费者采用异步方式处理消息，避免阻塞操作。同时，批量处理能够减少网络延迟和磁盘IO，从而提高消息处理的效率。</li></ul></li><li><strong>消息压缩与解压</strong>：<ul><li>使用消息压缩技术减少网络带宽消耗，尤其在消息量很大的时候，压缩可以显著提升性能。</li></ul></li><li><strong>消息预处理与调度</strong>：<ul><li>在高吞吐量的系统中，需要对消息进行优先级调度。根据业务需要对消息进行排序、分组，并决定其消费优先级。</li></ul></li><li><strong>低延迟存储与缓存</strong>：<ul><li>对于实时消息处理，可以将热点消息存储在内存中，避免频繁的磁盘访问，提高消息的处理速度。</li></ul></li><li><strong>容错和高可用性设计</strong>：<ul><li>通过复制和分区机制保障消息队列的高可用性。Kafka通过副本机制，保证即使出现节点故障，消息也不会丢失。</li></ul></li></ul><p><strong>关键技术</strong>：</p><ul><li><strong>高效的消息路由</strong>：根据消息内容和消费者的需求，智能路由消息，避免不必要的消息传输。</li><li><strong>负载均衡和动态扩展</strong>：确保系统在高并发情况下不会出现瓶颈，并且可以根据负载情况动态扩展消费者的数量。</li></ul><hr><h3 id="进阶问题"><a href="#进阶问题" class="headerlink" title="进阶问题"></a>进阶问题</h3><ol><li>消息队列中如何避免“消息的丢失”与“重复消费”问题？</li><li>什么是消息队列的“顺序消费”与“并发消费”？</li><li>如何通过消息队列实现流量削峰和削谷？</li><li>消息队列中的“消费端确认”与“自动确认”有什么区别？它们各自的应用场景是什么？</li><li>请解释消息队列中的“消息事务”和“消息事务回滚”。</li></ol><h4 id="1-消息队列中如何避免“消息的丢失”与“重复消费”问题？"><a href="#1-消息队列中如何避免“消息的丢失”与“重复消费”问题？" class="headerlink" title="1. 消息队列中如何避免“消息的丢失”与“重复消费”问题？"></a>1. 消息队列中如何避免“消息的丢失”与“重复消费”问题？</h4><p><strong>避免消息丢失</strong>： 消息丢失通常发生在消息传输过程中出现故障，或者消费者没有及时确认消息的情况下。为了避免这个问题，我们可以采用以下方式：</p><ul><li><strong>持久化</strong>：消息队列系统一般提供持久化机制。消息会被存储到磁盘中，即使在系统崩溃后也能恢复。比如Kafka就将消息存储在日志文件中，RabbitMQ也可以将消息持久化到磁盘。</li><li><strong>ACK机制（确认机制）</strong>：生产者在发送消息后，消费者在处理完消息后必须返回ACK（确认消息），表示消息被成功消费。如果消费者没有正确消费，消息会重新被发送。</li><li><strong>消息副本</strong>：很多消息队列系统（比如Kafka）支持消息副本机制。当消息被生产者发布到队列后，它会有多个副本存储在不同的节点上，避免单点故障导致消息丢失。</li></ul><p><strong>避免重复消费</strong>： 重复消费的问题通常出现在消息队列中，由于网络或系统故障，消息会被消费者重复消费。我们可以通过以下几种方式来避免：</p><ul><li><strong>消息去重</strong>：生产者在发送消息时，可以给每条消息加一个唯一的ID，消费者在消费消息时可以根据消息ID判断是否已经处理过该消息。</li><li><strong>幂等性设计</strong>：确保消费者对同一条消息的多次处理不会产生副作用。比如，如果是一个支付系统，消费者收到支付请求后，系统应该能够确保即使请求重复，也不会重复扣款。</li><li><strong>消息事务机制</strong>：通过事务机制来保证消息的可靠性。消费者可以在消费前和消费后进行事务处理，如果处理失败，消息会被重新发送，避免重复消费。</li></ul><h4 id="2-什么是消息队列的“顺序消费”与“并发消费”？"><a href="#2-什么是消息队列的“顺序消费”与“并发消费”？" class="headerlink" title="2. 什么是消息队列的“顺序消费”与“并发消费”？"></a>2. 什么是消息队列的“顺序消费”与“并发消费”？</h4><p><strong>顺序消费</strong>：指的是消费者按照消息生产的顺序进行消费，每次只能消费队列中的一条消息，消息的顺序是严格保证的。比如，某个用户的订单处理，必须保证订单的创建、支付、发货等步骤按照顺序执行，不能乱序。</p><p><strong>并发消费</strong>：指的是多个消费者可以并行消费队列中的消息，提升消息的处理效率。并发消费通常适用于那些不需要严格保证顺序的场景，多个消费者同时处理不同的消息，提高吞吐量。</p><p>例如，Kafka的分区机制就能实现并发消费。每个分区只能被一个消费者消费，但可以有多个分区，多个消费者并行消费不同分区的数据。</p><h4 id="3-如何通过消息队列实现流量削峰和削谷？"><a href="#3-如何通过消息队列实现流量削峰和削谷？" class="headerlink" title="3. 如何通过消息队列实现流量削峰和削谷？"></a>3. 如何通过消息队列实现流量削峰和削谷？</h4><p><strong>流量削峰和削谷</strong>的目的是通过消息队列将突发的高流量平滑化，避免系统在流量高峰时崩溃或出现性能瓶颈。</p><ul><li><strong>流量削峰</strong>：当系统流量突增时，可以通过消息队列缓冲请求，让请求按顺序被消费者逐步处理。例如，当电商平台的秒杀活动开始时，可以通过消息队列接收用户请求，缓解高并发压力。消费者可以按照一定速率消费这些消息，从而平滑流量。</li><li><strong>流量削谷</strong>：当系统流量较少时，可以增加消费者的并发数量，以处理积压的消息。消息队列支持按需消费，当流量低时，消费者可以增加处理速度，及时消化队列中的积压消息。</li></ul><h4 id="4-消息队列中的“消费端确认”与“自动确认”有什么区别？它们各自的应用场景是什么？"><a href="#4-消息队列中的“消费端确认”与“自动确认”有什么区别？它们各自的应用场景是什么？" class="headerlink" title="4. 消息队列中的“消费端确认”与“自动确认”有什么区别？它们各自的应用场景是什么？"></a>4. 消息队列中的“消费端确认”与“自动确认”有什么区别？它们各自的应用场景是什么？</h4><p><strong>消费端确认（Manual Ack）</strong>：消费者手动确认消息已经被处理，只有在消费者显式发送确认信号（ACK）时，消息才会被从队列中移除。这种方式适用于需要保证消息被成功处理的场景，例如金融交易系统、订单处理系统等，确保只有处理成功的消息才会被删除。</p><ul><li><strong>应用场景</strong>：例如支付系统中的消息处理，确保只有支付成功后才删除消息。</li></ul><p><strong>自动确认（Auto Ack）</strong>：消费者在接收到消息后，消息自动被确认，无需手动确认。消费者一旦接收到消息，消息就被认为已成功处理。这种方式适用于对消息丢失不敏感、对消费速度要求较高的场景。</p><ul><li><strong>应用场景</strong>：例如日志收集系统，消息一旦发送到消费者，消费者就直接消费并确认，不需要再做额外的业务确认。</li></ul><h4 id="5-请解释消息队列中的“消息事务”和“消息事务回滚”。"><a href="#5-请解释消息队列中的“消息事务”和“消息事务回滚”。" class="headerlink" title="5. 请解释消息队列中的“消息事务”和“消息事务回滚”。"></a>5. 请解释消息队列中的“消息事务”和“消息事务回滚”。</h4><p><strong>消息事务</strong>：消息事务是指在消息消费和生产过程中，保证一系列操作要么全部成功，要么全部失败的机制。常见的应用场景是分布式事务，确保消息的发送、数据库操作等多个步骤保持一致性。如果消息消费失败，系统会回滚消息操作，避免出现数据不一致的情况。</p><ul><li>在Kafka中，事务机制可以确保在消息生产过程中，即使发生异常，已经发送的消息也不会被写入到Kafka的日志中，确保消息的可靠性。</li><li>在ActiveMQ中，可以通过使用事务来保证消息的完整性。事务回滚可以避免未处理完的消息被消费或数据丢失。</li></ul><p><strong>消息事务回滚</strong>：如果消息处理失败（比如消息消费过程中出现异常），就会触发事务回滚。消息回滚意味着已发送的消息不会被删除或已消费的消息会重新进入队列，以确保消息的可靠性和一致性。例如，在支付系统中，如果在处理消息时出现错误，事务回滚机制会确保支付不会被重复处理或丢失。</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-18 STOMP</title>
      <link href="/2025/02/27/75-18%20STOMP/"/>
      <url>/2025/02/27/75-18%20STOMP/</url>
      
        <content type="html"><![CDATA[<h1 id="75-18-STOMP"><a href="#75-18-STOMP" class="headerlink" title="75-18 STOMP"></a>75-18 STOMP</h1><h2 id="STOMP-Simple-Text-Oriented-Messaging-Protocol-详解"><a href="#STOMP-Simple-Text-Oriented-Messaging-Protocol-详解" class="headerlink" title="STOMP (Simple Text Oriented Messaging Protocol) 详解"></a><strong>STOMP (Simple Text Oriented Messaging Protocol) 详解</strong></h2><p>STOMP（Simple&#x2F;Streaming Text Oriented Messaging Protocol）是一种简单的基于文本的消息协议，常用于 <strong>WebSocket 和消息代理（如 ActiveMQ, RabbitMQ）之间的通信</strong>。它提供了一种 <strong>标准化的消息格式和交互方式</strong>，使客户端和服务器可以使用 <strong>发布&#x2F;订阅</strong>（Pub&#x2F;Sub）模式进行通信。</p><p>你可以把 WebSocket 想象成一条<strong>电话线路</strong>，它可以让前后端保持连接并实时通信。但如果<strong>所有消息</strong>都直接在这条线路上传输，那管理起来就会变得<strong>非常混乱</strong>：</p><ul><li>谁该收到哪些消息？</li><li>消息格式怎么解析？</li><li>怎么确保消息是正确的？</li><li>用户如何身份认证？</li></ul><p>而 <strong>STOMP 就是一个“电话助理”</strong>，它提供了一套<strong>规范化的通信方式</strong>，让消息可以被<strong>高效地管理</strong>。</p><hr><h2 id="STOMP-到底做了什么？"><a href="#STOMP-到底做了什么？" class="headerlink" title="STOMP 到底做了什么？"></a><strong>STOMP 到底做了什么？</strong></h2><p>STOMP 主要做了 3 件事情：</p><ol><li><strong>定义了一套标准消息格式</strong><ul><li>WebSocket 只能发送<strong>原始数据</strong>，STOMP 定义了<strong>统一的消息格式</strong>（就像 HTTP 头部一样）。</li><li>它的消息格式包括：<ul><li><strong>命令（Command）</strong>：比如 <code>SEND</code>（发送消息）、<code>SUBSCRIBE</code>（订阅频道）。</li><li><strong>头部（Headers）</strong>：存储元数据，比如 <code>destination:/topic/chat</code>（表示发给哪个频道）。</li><li><strong>消息体（Body）</strong>：真正的消息内容。</li></ul></li><li>这样，每个消息的<strong>结构都是清晰的</strong>，前后端都能轻松解析，而不需要自己设计一套协议。</li></ul></li><li><strong>支持“发布&#x2F;订阅”模型</strong><ul><li>传统 WebSocket 只能在<strong>客户端和服务器</strong>之间一对一传输数据。</li><li>但 STOMP <strong>允许多个客户端订阅同一个“频道”</strong>（就像聊天室里的所有人）。</li><li>服务器只需要把消息发送到某个频道，所有订阅这个频道的用户<strong>都会自动收到</strong>。</li><li>这解决了<strong>多人通信的问题</strong>，比如聊天室、股票推送等。</li></ul></li><li><strong>提供身份认证和扩展性</strong><ul><li>由于 STOMP 的消息头部可以携带<strong>额外的信息</strong>，比如 <code>Authorization</code> 头部，后端可以用它进行身份验证。</li><li>STOMP 也可以与**消息代理（Message Broker）**配合，比如 RabbitMQ、Kafka，让消息更稳定和可扩展。</li></ul></li></ol><hr><h2 id="1-为什么需要-STOMP？"><a href="#1-为什么需要-STOMP？" class="headerlink" title="1. 为什么需要 STOMP？"></a><strong>1. 为什么需要 STOMP？</strong></h2><p><strong>WebSocket 本身只是一个全双工通信协议</strong>，它允许客户端和服务器直接发送和接收数据。但是：</p><ul><li><strong>WebSocket 没有内置的消息格式</strong> → 需要自己设计数据结构。</li><li><strong>WebSocket 没有提供订阅功能</strong> → 需要手动管理谁订阅了哪些消息。</li><li><strong>WebSocket 没有身份认证</strong> → 需要自己实现 Token 或其他安全机制。</li></ul><p>STOMP 解决了这些问题，使得 WebSocket 更加易用和功能强大。</p><hr><h2 id="2-STOMP-的核心概念"><a href="#2-STOMP-的核心概念" class="headerlink" title="2. STOMP 的核心概念"></a><strong>2. STOMP 的核心概念</strong></h2><p>STOMP 是一种基于 <strong>帧（Frame）</strong> 的协议，每个请求或响应都是一个 <strong>帧</strong>，类似于 HTTP 报文，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COMMAND</span><br><span class="line">header1:value1</span><br><span class="line">header2:value2</span><br><span class="line"></span><br><span class="line">message-body</span><br><span class="line">^@</span><br></pre></td></tr></table></figure><ul><li><code>COMMAND</code>：操作类型，如 <code>SEND</code>、<code>SUBSCRIBE</code>、<code>CONNECT</code> 等。</li><li><code>header</code>：键值对的消息头，提供额外的消息信息。</li><li><code>message-body</code>：实际传输的数据内容（可以是 JSON、XML、文本等）。</li><li><code>^@</code>（<code>\0</code>）：STOMP 消息的结束标志。</li></ul><h3 id="常见的-STOMP-命令"><a href="#常见的-STOMP-命令" class="headerlink" title="常见的 STOMP 命令"></a><strong>常见的 STOMP 命令</strong></h3><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>CONNECT</code></td><td>客户端连接到服务器</td></tr><tr><td><code>SUBSCRIBE</code></td><td>订阅一个目的地（类似 RabbitMQ 主题）</td></tr><tr><td><code>UNSUBSCRIBE</code></td><td>取消订阅</td></tr><tr><td><code>SEND</code></td><td>发送消息到指定目的地</td></tr><tr><td><code>MESSAGE</code></td><td>服务器向客户端发送的消息</td></tr><tr><td><code>DISCONNECT</code></td><td>断开连接</td></tr></tbody></table><hr><h2 id="3-STOMP-与-WebSocket-的结合"><a href="#3-STOMP-与-WebSocket-的结合" class="headerlink" title="3. STOMP 与 WebSocket 的结合"></a><strong>3. STOMP 与 WebSocket 的结合</strong></h2><p>在 Spring Boot 中，WebSocket <strong>原生支持</strong> STOMP。STOMP 主要用于 <strong>WebSocket 的消息管理</strong>，常见的架构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WebSocket 客户端] ---&gt; [STOMP 消息代理] ---&gt; [WebSocket 服务器]</span><br></pre></td></tr></table></figure><blockquote><p><strong>消息代理（Broker）</strong> 可以是内存中的简单代理（Spring 提供）或者 <strong>RabbitMQ、ActiveMQ</strong> 等消息中间件。</p></blockquote><hr><h2 id="4-Spring-Boot-STOMP-实战"><a href="#4-Spring-Boot-STOMP-实战" class="headerlink" title="4. Spring Boot + STOMP 实战"></a><strong>4. Spring Boot + STOMP 实战</strong></h2><p>我们通过代码示例，演示如何 <strong>使用 STOMP 实现一个聊天系统</strong>。</p><h3 id="（1）Spring-Boot-WebSocket-STOMP-配置"><a href="#（1）Spring-Boot-WebSocket-STOMP-配置" class="headerlink" title="（1）Spring Boot WebSocket STOMP 配置"></a><strong>（1）Spring Boot WebSocket STOMP 配置</strong></h3><p>在 Spring Boot 中，我们需要 <strong>创建一个 WebSocket 服务器</strong> 并 <strong>开启 STOMP 支持</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 客户端通过 ws://localhost:8080/ws 连接 WebSocket</span></span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/ws&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 启用内存消息代理，前缀为 /topic 用于广播消息</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 应用前缀，客户端向服务器发送的消息需要加 &quot;/app&quot;</span></span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）Spring-Boot-STOMP-服务器端"><a href="#（2）Spring-Boot-STOMP-服务器端" class="headerlink" title="（2）Spring Boot STOMP 服务器端"></a><strong>（2）Spring Boot STOMP 服务器端</strong></h3><p>创建一个 <strong>控制器</strong>，用于处理 WebSocket 消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 &quot;/app/chat&quot; 发送来的消息，并广播给 &quot;/topic/messages&quot;</span></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/chat&quot;)</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;/topic/messages&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务器收到消息：&quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-STOMP-客户端（前端）"><a href="#5-STOMP-客户端（前端）" class="headerlink" title="5. STOMP 客户端（前端）"></a><strong>5. STOMP 客户端（前端）</strong></h2><p>客户端使用 <strong>SockJS 和 STOMP.js</strong> 连接服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 SockJS 连接</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">SockJS</span>(<span class="string">&#x27;/ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stompClient = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(socket);</span><br><span class="line"></span><br><span class="line">stompClient.<span class="title function_">connect</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅服务器的消息</span></span><br><span class="line">    stompClient.<span class="title function_">subscribe</span>(<span class="string">&#x27;/topic/messages&#x27;</span>, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息：&quot;</span> + response.<span class="property">body</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    stompClient.<span class="title function_">send</span>(<span class="string">&quot;/app/chat&quot;</span>, &#123;&#125;, <span class="string">&quot;Hello, STOMP!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="6-如何实现用户认证？"><a href="#6-如何实现用户认证？" class="headerlink" title="6. 如何实现用户认证？"></a><strong>6. 如何实现用户认证？</strong></h2><p>WebSocket <strong>没有内置认证机制</strong>，但 STOMP <strong>支持携带 Token</strong> 进行身份认证。</p><h3 id="（1）前端连接时附带-Token"><a href="#（1）前端连接时附带-Token" class="headerlink" title="（1）前端连接时附带 Token"></a><strong>（1）前端连接时附带 Token</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stompClient.<span class="title function_">connect</span>(&#123; <span class="title class_">Authorization</span>: <span class="string">&quot;Bearer my-token&quot;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已连接&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="（2）后端拦截-Token-并认证"><a href="#（2）后端拦截-Token-并认证" class="headerlink" title="（2）后端拦截 Token 并认证"></a><strong>（2）后端拦截 Token 并认证</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.stomp.StompHeaderAccessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.stomp.StompCommand;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.stomp.StompHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.messaging.AbstractSubProtocolEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.messaging.SessionConnectEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.messaging.SessionDisconnectEvent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketAuthHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleWebSocketConnectListener</span><span class="params">(SessionConnectEvent event)</span> &#123;</span><br><span class="line">        <span class="type">StompHeaderAccessor</span> <span class="variable">accessor</span> <span class="operator">=</span> StompHeaderAccessor.wrap(event.getMessage());</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> accessor.getFirstNativeHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!validateToken(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法 Token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bearer my-token&quot;</span>.equals(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-STOMP-的优势"><a href="#7-STOMP-的优势" class="headerlink" title="7. STOMP 的优势"></a><strong>7. STOMP 的优势</strong></h2><ul><li><strong>简单易用</strong>：基于文本格式，类似 HTTP，非常容易解析。</li><li><strong>支持消息订阅</strong>：内置 <strong>订阅&#x2F;广播</strong> 机制（WebSocket 本身不支持）。</li><li><strong>支持消息队列</strong>：可以 <strong>结合 RabbitMQ、ActiveMQ 进行分布式通信</strong>。</li><li><strong>支持身份认证</strong>：可以 <strong>携带 Token 进行认证</strong>。</li></ul><hr><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a><strong>8. 总结</strong></h2><table><thead><tr><th><strong>问题</strong></th><th><strong>WebSocket</strong></th><th><strong>STOMP</strong></th></tr></thead><tbody><tr><td><strong>数据格式</strong></td><td>纯文本&#x2F;二进制</td><td>结构化的消息帧</td></tr><tr><td><strong>订阅机制</strong></td><td>需要手动管理</td><td>内置 <code>SUBSCRIBE</code> 机制</td></tr><tr><td><strong>身份认证</strong></td><td>需要自定义</td><td>可以携带 Token</td></tr><tr><td><strong>扩展性</strong></td><td>适合点对点通信</td><td>适合广播、群聊、分布式系统</td></tr></tbody></table><h3 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a><strong>学习重点</strong></h3><ol><li><strong>STOMP 是 WebSocket 的增强协议</strong>，解决了 WebSocket <strong>没有消息格式、订阅功能、认证机制</strong>的问题。</li><li><strong>Spring Boot 原生支持 STOMP</strong>，可以结合 WebSocket <strong>实现实时聊天、消息推送</strong>。</li><li><strong>结合 STOMP 可以使用 RabbitMQ、ActiveMQ</strong>，实现 <strong>更强大的分布式消息系统</strong>。</li></ol><p>🚀 <strong>理解了 STOMP，你就可以实现一个功能完善的 WebSocket 通信系统！</strong></p>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebSocket </tag>
            
            <tag> STOMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 Nexus</title>
      <link href="/2025/02/26/02%20Nexus/"/>
      <url>/2025/02/26/02%20Nexus/</url>
      
        <content type="html"><![CDATA[<h1 id="02-Nexus"><a href="#02-Nexus" class="headerlink" title="02 Nexus"></a>02 Nexus</h1><p>要介绍Nexus前，我们得先了解一下什么是Maven私服。</p><h2 id="1-Maven私服"><a href="#1-Maven私服" class="headerlink" title="1 Maven私服"></a>1 Maven私服</h2><p>Maven私服是一种特殊的Maven仓库，它是架设在局域网内的仓库服务，用来代理位于外部的远程仓库（中央仓库、其他远程公共仓库）。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261917995.png" alt="img"></p><p>从上面的图中可以看出，当需要某个组件时。会优先从maven私服中获取，如果Maven私服中不存在则会请求外部的远程仓库。</p><h2 id="2-Maven私服-Maven私服搭建"><a href="#2-Maven私服-Maven私服搭建" class="headerlink" title="2 Maven私服&amp;Maven私服搭建"></a>2 Maven私服&amp;Maven私服搭建</h2><p>我们从maven用户请求某个构件入手，可以初步得到其具有的优势。</p><ol><li>因为是私服，用户会优先请求私服然后去请求远程仓库，所以这会<strong>节省外网带宽</strong>；</li><li>因为位于局域网，用户请求<strong>下载速度更快</strong>；</li><li>有些第三方构件无法从远程仓库中拉去，这时候可以下载到私服然后请求，<strong>便于部署第三方构件</strong>；</li><li>可以把maven私服看作一个中间层，这样很明显的可以看出私服会<strong>降低中央仓库得负荷压力</strong>；</li><li>当我们需要一个构件时，如果没有私服，就需要去远程的中央仓库获得。但是如果一旦网络不稳定，或者直接中断了，这会严重影响项目的稳定性和控制性。所以maven私服<strong>提高了项目的稳定性和增强了对项目的控制</strong>。</li></ol><p>能够帮助我们建立maven私服的软件被称为maven仓库管理器，主要有以下三种：</p><ol><li>Apache Archiva</li><li>JFrog Artifactory</li><li><strong>Sonatype Nexus</strong></li></ol><h2 id="3-Windows环境下Nexus下载"><a href="#3-Windows环境下Nexus下载" class="headerlink" title="3 Windows环境下Nexus下载"></a>3 Windows环境下Nexus下载</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/weixin_43888891/article/details/130675829">Nexus下载与安装详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Nexus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nexus </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 使用docker-compose安装ElasticSearch和kibana</title>
      <link href="/2025/02/26/01-%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85ElasticSearch%E5%92%8Ckibana/"/>
      <url>/2025/02/26/01-%E4%BD%BF%E7%94%A8docker-compose%E5%AE%89%E8%A3%85ElasticSearch%E5%92%8Ckibana/</url>
      
        <content type="html"><![CDATA[<h1 id="01-使用docker-compose安装ElasticSearch和kibana"><a href="#01-使用docker-compose安装ElasticSearch和kibana" class="headerlink" title="01 使用docker-compose安装ElasticSearch和kibana"></a>01 使用docker-compose安装ElasticSearch和kibana</h1><h1 id="ES安装"><a href="#ES安装" class="headerlink" title="ES安装"></a>ES安装</h1><p>首先我们需要创建一个docker-compose.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.7.0</span>  <span class="comment">#镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elk_elasticsearch</span>  <span class="comment">#定义容器名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>  <span class="comment">#开机启动，失败也会一直重启</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;cluster.name=elasticsearch&quot;</span> <span class="comment">#设置集群名称为elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span> <span class="comment">#以单一节点模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx1024m&quot;</span> <span class="comment">#设置使用jvm内存大小</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./plugins:/usr/share/elasticsearch/plugins</span> <span class="comment">#插件文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/usr/share/elasticsearch/data</span> <span class="comment">#数据文件挂载</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span> </span><br></pre></td></tr></table></figure><p>然后我们需要在命令行中输入该命令启动：</p><p>-f yml文件存放的地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker-compose</span> <span class="string">-f</span> <span class="string">D:config\elasticsearch\docker-compose.yml</span> <span class="string">up</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261906061.png" alt="img"></p><p>网页输入<a href="http://localhost:9200,即可得到如下信息：">http://localhost:9200,即可得到如下信息：</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261906058.png" alt="img"></p><h1 id="安装分词器"><a href="#安装分词器" class="headerlink" title="安装分词器"></a>安装分词器</h1><p>进入容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">ps</span>  <span class="comment"># 查看容器 获取需要启动容器的id</span></span><br><span class="line"><span class="string">docker</span> <span class="string">exec</span> <span class="string">-it</span> <span class="string">查询到的id</span> <span class="string">bash</span></span><br><span class="line"><span class="string">cd</span> <span class="string">bin</span> </span><br><span class="line"><span class="string">./elasticsearch-plugin</span> <span class="string">install</span> <span class="string">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip</span> </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261906115.png" alt="img"></p><p>表示安装成功。</p><h1 id="kibana安装"><a href="#kibana安装" class="headerlink" title="kibana安装"></a>kibana安装</h1><p>同理我们也需要编写一个配置文件名为：kibana.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="comment"># kibana的主机地址 0.0.0.0可表示监听所有IP</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这边设置自己es的地址，</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://localhost:9200&quot;</span> ]</span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">&#x27;kibana&#x27;</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="comment"># # 显示登陆页面</span></span><br><span class="line"><span class="attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 开启中文模式</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>同时也需要编写一个docker-compose.yml文件，注意image的版本需要和es版本保持一致：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.7.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elk_kibana</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">D:/config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span>    <span class="comment">#环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意在volumes中D:/config/kibana/kibana.yml表示你的kibana.yml文件存放的地址</span></span><br><span class="line"><span class="comment"># ：后面保持不变</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261906454.png" alt="img"></p><p>然后输入<a href="http://localhost:5601/">http://localhost:5601</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261907666.png" alt="img"></p><p>至此在本地使用docker-compose配置elasticsearch和kibana就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 基于Prometheus和Grafana对 CPU内存以及加油站微服务进行JVM监控</title>
      <link href="/2025/02/26/05%20%E5%9F%BA%E4%BA%8EPrometheus%E5%92%8CGrafana%E5%AF%B9%20CPU%E5%86%85%E5%AD%98%E4%BB%A5%E5%8F%8A%E5%8A%A0%E6%B2%B9%E7%AB%99%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8CJVM%E7%9B%91%E6%8E%A7/"/>
      <url>/2025/02/26/05%20%E5%9F%BA%E4%BA%8EPrometheus%E5%92%8CGrafana%E5%AF%B9%20CPU%E5%86%85%E5%AD%98%E4%BB%A5%E5%8F%8A%E5%8A%A0%E6%B2%B9%E7%AB%99%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8CJVM%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="05-基于Prometheus和Grafana对-CPU内存以及加油站微服务进行JVM监控"><a href="#05-基于Prometheus和Grafana对-CPU内存以及加油站微服务进行JVM监控" class="headerlink" title="05 基于Prometheus和Grafana对 CPU内存以及加油站微服务进行JVM监控"></a>05 基于Prometheus和Grafana对 CPU内存以及加油站微服务进行JVM监控</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>关于这个任务，我进行了很多天，断断续续的也算基本完成。在这里记录一下关于这个任务遇到的一些问题以。先看一下效果图：</p><ol><li>Windows环境下对CPU、内存等信息进行监控</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261920022.jpeg" alt="img"></p><ol><li>加油站微服务JVM监控</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261920696.jpeg" alt="img"></p><ol><li>Windows本地环境下对MySQL进行监控</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261920589.jpeg" alt="img"></p><ol><li>Windows本地环境下对Redis进行监控</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261921018.jpeg" alt="img"></p><p>grafana图表模板号：</p><ol><li>JVM模板号：4701</li><li>CPU硬件模板号：10467</li><li>MySQL模板号：7362</li><li>Redis模板号：763</li></ol><h2 id="Windows环境下对CPU等信息进行监控"><a href="#Windows环境下对CPU等信息进行监控" class="headerlink" title="Windows环境下对CPU等信息进行监控"></a>Windows环境下对CPU等信息进行监控</h2><p>在之前进行配置时，我并没有添加node-exporter这个，docker-compose.yml文件中时如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--storage.tsdb.retention.time=7d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--config.file=/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources</span></span><br></pre></td></tr></table></figure><p>这样就没有进程去收集本机的相关信息，如CPU运行信息、内存使用信息等等。查询相关资料后，了解到需要映入node-exporter来收集本地的硬件信息。</p><p>所以在docker-compose.yml文件中变成如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--storage.tsdb.retention.time=7d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--config.file=/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources</span></span><br><span class="line">  <span class="attr">node_exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter:v1.6.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node_exporter</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">    <span class="attr">pid:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9101</span><span class="string">:9100</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./:/host:ro,rslave&#x27;</span></span><br></pre></td></tr></table></figure><p>但是加入之后重启依旧无法找到本地的硬件信息，引入CPU 等硬件信息的grafana图表后依然没有任何数据显示。在grafana图表中，它使用了PQL查询，对收集到的相关信息进行查询筛查。在对grafana图表的查询语句进行分析后，发现其很多指标在Prometheus中并不存在，这时候开始怀疑是否是node-exporter配置错误。</p><p>在查了一些资料后，发现node-exporter是收集Linux的硬件信息的，但是我怀疑其是否正确，所以我用测试服务器进行了测试也并没有；（现在知道可能在Prometheus.yml文件中没有配置node-exporter的端口信息来收集）。</p><p>尽管验证失败，但是还是就这个方向去寻找原因。最后在一个帖子上找到了相关信息。</p><ol><li><a href="https://blog.csdn.net/qq_34052481/article/details/134800332">Prometheus的exporter安装</a>；</li><li><a href="https://blog.csdn.net/qq_41538097/article/details/125624222">Grafana+Prometheus+Windows_exporter+Mysql_exporter</a>；</li><li>[Windows下搭建Redis可视化监控（redis_exporter+prometheus+grafana）](<a href="https://blog.csdn.net/u012069313/article/details/125008321?ops_request_misc=%7B%22request_id%22:%22171411660616800227423210%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=171411660616800227423210&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-125008321-null-null.nonecase&utm_term=redis_exporter">https://blog.csdn.net/u012069313/article/details/125008321?ops_request_misc=%7B%22request%5Fid%22%3A%22171411660616800227423210%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=171411660616800227423210&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-125008321-null-null.nonecase&amp;utm_term=redis_exporter</a> Grafana Prometheus windows&amp;spm&#x3D;1018.2226.3001.4450)；</li></ol><p>这些帖子会解决接下来的问题。</p><p>按照帖子的步骤安装Windows-exporter运行，在prometheus.yml文件中配置Windows-exporter的端口信息即可；</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261921367.png" alt="img"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;node-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9090&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;winnode-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9182&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;mysql_exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9104&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;redis_exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9121&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">space-intell-gas-register</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:8848&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-upms&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:54000&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-bff&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:52910&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-auth&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:53000&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-gateway&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:53999&#x27;</span>]</span><br></pre></td></tr></table></figure><p>上面是全部的，这里添加了这一段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;winnode-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9182&#x27;</span>]</span><br></pre></td></tr></table></figure><p>ip地址要更换成自己的；</p><p>在grafana中引入图表编号：</p><h2 id="Windows环境下对加油站微服务JVM进行监控"><a href="#Windows环境下对加油站微服务JVM进行监控" class="headerlink" title="Windows环境下对加油站微服务JVM进行监控"></a>Windows环境下对加油站微服务JVM进行监控</h2><p>加油站五个微服务之成功抓取了两个微服务的JVM信息，为什么？暂时未解决。</p><blockquote><p>目前已经解决，这是因为其它三个服务没有引入羡慕的这个依赖，从而导致没有获取五个微服务的JVM相关信息；</p><p>但是就算引入了相关依赖，Nacos服务还是没有，这是因为其数据存放地址为&#x2F;nacos&#x2F;actuator&#x2F;prometheus中，需要在配置文件中进行修改即可；</p></blockquote><p>这里只要微服务引入了依赖：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;io.micrometer&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>在spring boot微服务application.yml文件中进行如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">$&#123;spring.profiles.active&#125;</span></span><br><span class="line">      <span class="attr">project:</span> <span class="string">infra</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/actuator</span></span><br><span class="line">  <span class="attr">health:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>就会自动的完成数据采集；</p><p>将需要监控的微服务的端口号配置到prometheus.yml文件中，Prometheus就会定期的去抓取这些数据。</p><p>全部的配置信息上文给出了，请详细查看。</p><p>在grafana中配置相关信息即可，引入模板号查看即可。</p><h2 id="Windows环境下对MySQL进行监控"><a href="#Windows环境下对MySQL进行监控" class="headerlink" title="Windows环境下对MySQL进行监控"></a>Windows环境下对MySQL进行监控</h2><p>详细步骤查看上文中的的博客文档进行解决。</p><p>特别注意这里可能出现这个问题，请按照这个文档进行解决：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">‘host.docker.internal‘</span> <span class="string">is</span> <span class="string">not</span> <span class="string">allowed</span> <span class="string">to</span> <span class="string">connect</span> <span class="string">to</span> <span class="string">this</span> <span class="string">...</span></span><br></pre></td></tr></table></figure><p>解决文档：<a href="https://blog.51cto.com/lanzao/5061987">MySQL 数据库修改访问权限，不能使用ip连接mysql问题处理：Host ‘host.docker.internal‘ is not allowed to connect to this …</a></p><h2 id="Windows环境下对Redis进行监控配置"><a href="#Windows环境下对Redis进行监控配置" class="headerlink" title="Windows环境下对Redis进行监控配置"></a>Windows环境下对Redis进行监控配置</h2><p>同样先安装上面的文档步骤进行操作即可；</p><p>特别注意这里可能会出现这个问题：redis-exporter无法连接redis；</p><ol><li>注意redis-exporter的版本和redis版本契合，尽量使用发布时间差不多的版本；</li><li>如果redis没有设置密码，请使用如下的命令</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">redis_exporter.exe</span> <span class="string">-redis.addr</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.29</span><span class="string">:6379</span> <span class="string">-web.listen-address</span> <span class="string">:9121</span></span><br></pre></td></tr></table></figure><p>需要更换自己的ip地址；</p><p>然后在grafana中引入redis图表即可；</p><h2 id="Linux环境下配置文件"><a href="#Linux环境下配置文件" class="headerlink" title="Linux环境下配置文件"></a>Linux环境下配置文件</h2><h3 id="Prometheus-yml"><a href="#Prometheus-yml" class="headerlink" title="Prometheus.yml"></a>Prometheus.yml</h3><p>需要把IP地址更改成需要监控主机IP</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;node-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9090&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;winnode-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9182&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;mysql_exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9104&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;redis_exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:9121&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">space-intell-gas-register</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/nacos/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:8848&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-upms&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:54000&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-bff&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:52910&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-auth&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:53000&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;space-intell-gas-gateway&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.0.29:59999&#x27;</span>]</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--storage.tsdb.retention.time=7d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--config.file=/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources</span></span><br><span class="line">  <span class="attr">node_exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter:v1.6.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node_exporter</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">    <span class="attr">pid:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9101</span><span class="string">:9100</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./:/host:ro,rslave&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Linux环境下对CPU等信息进行监控配置"><a href="#Linux环境下对CPU等信息进行监控配置" class="headerlink" title="Linux环境下对CPU等信息进行监控配置"></a>Linux环境下对CPU等信息进行监控配置</h2><p>步骤和上文中Windows的一致，但是要特别注意几个问题：</p><ol><li>这里选取的是Linux下的，所以grafana图表版本号为<strong>16098</strong>；</li><li>如果服务起来后，观察到Linux-node-exporter为down，查看是否关闭了防火墙； 使用该命令关闭防火墙：sudo ufw disable</li><li>如果关闭防火墙还是down，请注意端口号是否正确，这里配置的端口号是9101特别注意；</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">node_exporter:</span><br><span class="line">    image: prom/node-exporter:v1.6.0</span><br><span class="line">    container_name: node_exporter</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">    pid: host</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - 9101:9100</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&#x27;./:/host:ro,rslave&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261921696.png" alt="img"></p><h2 id="Linux环境下对MYSQL进行监控"><a href="#Linux环境下对MYSQL进行监控" class="headerlink" title="Linux环境下对MYSQL进行监控"></a>Linux环境下对MYSQL进行监控</h2><p>参考资料：</p><ol><li>[Promethus+Grafana方案-实现MYSQl+LINUX+Windows监控](<a href="https://blog.csdn.net/kai172142xiang/article/details/104493980?ops_request_misc=&request_id=&biz_id=102&utm_term=Grafana+Prometheus+Linux">https://blog.csdn.net/kai172142xiang/article/details/104493980?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Grafana+Prometheus+Linux</a> + Mys&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-2-104493980.142^v100^pc_search_result_base2&amp;spm&#x3D;1018.2226.3001.4187)；</li><li>[Linux安装prometheus+grafana监控mysql数据库](<a href="https://blog.csdn.net/krb___/article/details/132402047?ops_request_misc=&request_id=&biz_id=102&utm_term=Grafana+Prometheus+Linux">https://blog.csdn.net/krb___/article/details/132402047?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Grafana+Prometheus+Linux</a> + Mys&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-132402047.142^v100^pc_search_result_base2&amp;spm&#x3D;1018.2226.3001.4187)；</li><li><a href="https://prometheus.io/download/%EF%BC%9B">https://prometheus.io/download/；</a></li><li><a href="https://blog.csdn.net/Monarchess_1234/article/details/130360665">mysql_exporter在Linux上的安装与配置.</a></li></ol><p>在测试服务器上运行如下命令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter</span> <span class="string">--web.listen-address=:9104</span> <span class="string">--config.my-cnf=./mysqld_exporter-0.14.0.linux-amd64/my.cnf</span> <span class="string">&amp;</span></span><br></pre></td></tr></table></figure><p>即可；</p><p>这个不要在sudo下运行；</p><h2 id="Linux环境下对Redis进行监控"><a href="#Linux环境下对Redis进行监控" class="headerlink" title="Linux环境下对Redis进行监控"></a>Linux环境下对Redis进行监控</h2><ol><li><a href="https://github.com/oliver006/redis_exporter">https://github.com/oliver006/redis_exporter</a></li><li>[grafana+prometheus+redis_exporter监控redis数据库性能](<a href="https://blog.csdn.net/weixin_43442452/article/details/129858916?ops_request_misc=%7B%22request_id%22:%22171420402116800197016778%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=171420402116800197016778&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129858916-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=Grafana+Prometheus+Linux">https://blog.csdn.net/weixin_43442452/article/details/129858916?ops_request_misc=%7B%22request%5Fid%22%3A%22171420402116800197016778%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=171420402116800197016778&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129858916-null-null.142^v100^pc_search_result_base2&amp;utm_term=Grafana%2BPrometheus%2BLinux</a> %2B Redis&amp;spm&#x3D;1018.2226.3001.4187)；</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">在redis的目录下执行命令</span></span><br><span class="line"><span class="string">./redis_exporter</span> <span class="string">-redis.addr</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.125</span><span class="string">:6379</span> <span class="string">-web.listen-address</span> <span class="string">:9121</span></span><br></pre></td></tr></table></figure><p>即可；</p><h2 id="Linux环境下对加油站五个项目进行JVM监控"><a href="#Linux环境下对加油站五个项目进行JVM监控" class="headerlink" title="Linux环境下对加油站五个项目进行JVM监控"></a>Linux环境下对加油站五个项目进行JVM监控</h2><p>无，参考Windows环境下对JVM的监控。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06 局域网</title>
      <link href="/2025/02/26/06%20%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
      <url>/2025/02/26/06%20%E5%B1%80%E5%9F%9F%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="06-局域网"><a href="#06-局域网" class="headerlink" title="06 局域网"></a>06 局域网</h1><p>背景是：那天陆哥通过访问我的ip:端口号就可以访问我本地运行的网页信息。因为学过计算机网络，我想这可能跟局域网有关，但是我已经记不太清了，所以我想借此去了解一下公司内部的局域网是如何搭建的，其原理是什么？简单了解一下，不涉及具体的搭建步骤。</p><h2 id="广域网-局域网"><a href="#广域网-局域网" class="headerlink" title="广域网&amp;局域网"></a>广域网&amp;局域网</h2><p>这就是我们常说的网络，遍及全世界的网络。相对于广域网，其范围更小，即在一定范围内的计算机互联网络；</p><blockquote><p>公网、外网即广域网</p><p>私网、内网即局域网</p></blockquote><p>广域网上的每一台机器都有一个或多个IP地址，但是局域网上的每一台电脑都有一个或多个局域网IP地址，不同的局域网的IP地址可以重复，但是同一个局域网的IP地址不能重复。</p><p>广域网（WAN、公网、外网）与局域网（LAN、私网、内网）电脑交换数据要通过路由器或网关的NAT（网络地址转换）进行。一般说来，局域网（LAN、私网、内网）内电脑发起的对外连接请求，路由器或网关都不会加以阻拦，但来自广域网对局域网内电脑电脑连接的请求，路由器或网关在绝大多数情况下都会进行拦截。</p><p>通常情况下，网关或路由器对内部向外发出的信息不会进行拦截，但对来自外部想进入内部网络的信息则会进行识别、筛选，认为是安全的、有效的，才会转发给内网电脑。正是这种情况的存在，才导致了很多内网用户没有“远程”，速度也不尽如人意。</p><p>这是一个简单的例子：</p><p>让我们以一个名为ABC科技的公司为例，介绍如何从零开始搭建一个公司内部局域网。</p><h3 id="1-规划网络拓扑："><a href="#1-规划网络拓扑：" class="headerlink" title="1. 规划网络拓扑："></a>1. 规划网络拓扑：</h3><p>ABC科技是一家中小型科技公司，拥有30名员工，分布在两个办公室。他们的网络需求包括：</p><ul><li>在两个办公室之间共享文件和资源。</li><li>提供无线网络覆盖，以便员工能够在办公室内自由移动并连接网络。</li><li>连接到互联网，以便员工能够访问外部资源和服务。</li></ul><h3 id="2-获取网络设备："><a href="#2-获取网络设备：" class="headerlink" title="2. 获取网络设备："></a>2. 获取网络设备：</h3><p>ABC科技决定购买以下网络设备：</p><ul><li>2台企业级路由器：用于连接到互联网并实现两个办公室之间的通信。</li><li>2个交换机：用于在每个办公室内连接计算机、打印机等有线设备。</li><li>4个无线接入点（AP）：在每个办公室内提供无线网络覆盖。</li></ul><h3 id="3-连接网络设备："><a href="#3-连接网络设备：" class="headerlink" title="3. 连接网络设备："></a>3. 连接网络设备：</h3><ul><li>在每个办公室内，安装一个交换机，并将所有有线设备连接到交换机上。</li><li>在每个办公室内，安装两个无线接入点，以覆盖整个办公室。</li></ul><h3 id="4-配置网络设备："><a href="#4-配置网络设备：" class="headerlink" title="4. 配置网络设备："></a>4. 配置网络设备：</h3><ul><li>配置两台路由器，将它们连接到互联网，并设置防火墙规则以保护公司网络安全。</li><li>在交换机上配置 VLAN，将不同部门的设备隔离开来，提高网络安全性和性能。</li><li>配置无线接入点，设置无线网络名称（SSID）、安全密钥等，并配置访客网络以供访客使用。</li></ul><h3 id="5-分配-IP-地址："><a href="#5-分配-IP-地址：" class="headerlink" title="5. 分配 IP 地址："></a>5. 分配 IP 地址：</h3><ul><li>设计并分配局域网中的 IP 地址范围，使用 DHCP 来自动分配 IP 地址。</li><li>确保每个设备都能够正确获取 IP 地址，并能够与其他设备进行通信。</li></ul><h3 id="6-配置网络服务："><a href="#6-配置网络服务：" class="headerlink" title="6. 配置网络服务："></a>6. 配置网络服务：</h3><ul><li>部署文件共享服务器，使员工可以在办公室内共享文件和资源。</li><li>部署邮件服务器，使员工可以收发电子邮件。</li><li>部署Web服务器，用于公司网站和内部应用程序。</li></ul><h3 id="7-测试和维护："><a href="#7-测试和维护：" class="headerlink" title="7. 测试和维护："></a>7. 测试和维护：</h3><ul><li>对新建的局域网进行测试，确保各项功能正常运行，并且网络安全性得到有效保护。</li><li>定期检查和维护局域网设备，确保其稳定性和性能。</li><li>随着公司规模和需求的变化，及时更新和升级网络设备和服务。</li></ul><p>通过以上步骤，ABC科技成功搭建了一个公司内部局域网，满足了员工的日常工作需求，并保障了网络安全和性能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>04 Prometheus+Grafana监控SpringBoot项目JVM信息</title>
      <link href="/2025/02/26/04%20Prometheus+Grafana%E7%9B%91%E6%8E%A7SpringBoot%E9%A1%B9%E7%9B%AEJVM%E4%BF%A1%E6%81%AF/"/>
      <url>/2025/02/26/04%20Prometheus+Grafana%E7%9B%91%E6%8E%A7SpringBoot%E9%A1%B9%E7%9B%AEJVM%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="04-Prometheus-Grafana监控SpringBoot项目JVM信息"><a href="#04-Prometheus-Grafana监控SpringBoot项目JVM信息" class="headerlink" title="04 Prometheus+Grafana监控SpringBoot项目JVM信息"></a>04 Prometheus+Grafana监控SpringBoot项目JVM信息</h1><h1 id="1-使用docker-compose配置Prometheus-Grafana"><a href="#1-使用docker-compose配置Prometheus-Grafana" class="headerlink" title="1 使用docker-compose配置Prometheus&amp;Grafana"></a>1 使用docker-compose配置Prometheus&amp;Grafana</h1><ol><li>确保本地安装了dockers&amp;docker-compose;</li><li>在本机创建一个文件夹，自行命名。</li><li>在该文件夹下创建如下：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261919323.png" alt="img"></p><ol><li>prometheus.yml文件内容如下：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;node-exporter&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure><ol><li>docker-compose.yml文件内容如下：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">monitor:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">prometheus</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/data/prometheus/reload:/etc/prometheus/reload</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">monitor</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">grafana:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">monitor</span></span><br></pre></td></tr></table></figure><ol><li>打开cmd，跳转到刚刚创建的文件夹下：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261919453.png" alt="img"></p><p>如上即表示启动成功；</p><ol><li>本地浏览器打开<a href="http://localhost:9090/">http://localhost:9090</a></li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261919491.png" alt="img"></p><p>启动成功</p><ol><li>本地浏览器打开<a href="http://localhost:3000/">http://localhost:3000</a></li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261919992.png" alt="img"></p><p>添加Data sources；配置prometheus url；</p><p>如果出现下面这个问题：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261919387.png" alt="img"></p><p>请把prometheus的url配置成你本地IP，如何查看本地ip自行百度；</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261919921.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261920576.png" alt="img"></p><ol><li>导入模板</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261920872.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261920881.png" alt="img"></p><p>结果如上，导入成功；</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07 Docker</title>
      <link href="/2025/02/26/07%20Docker/"/>
      <url>/2025/02/26/07%20Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="07-Docker"><a href="#07-Docker" class="headerlink" title="07 Docker"></a>07 Docker</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>当我们谈论 Docker 时，你可以把它想象成一个巨大的、现代化的海运集装箱。这些集装箱可以装载各种各样的货物，从家具到电子设备再到食品，都可以放进去。而 Docker 则是一种类似于这样的集装箱，但是它装载的不是实物货物，而是软件应用程序及其所有必要的组件。</p><p>现在，让我们进一步解释一下这个类比。想象一下，你正在开发一个新的软件应用程序，它需要依赖于特定的操作系统、程序库和其他软件组件。在以前，为了确保你的应用程序在不同的计算机环境中能够正常运行，你可能需要手动安装和配置所有这些组件，这就像是把家具逐个放进货舱里，需要大量的时间和精力。</p><p>但是，有了 Docker，情况就完全不同了。你可以把你的应用程序和所有它需要的组件都放进一个 Docker 集装箱中。这个集装箱包括了你的应用程序、操作系统、程序库、配置文件等等，就像是把所有的货物都装进了一个标准化的集装箱里面一样。</p><p>更棒的是，Docker 集装箱是标准化的，这意味着它们可以在任何支持 Docker 的计算机上运行，就像海运集装箱可以在任何支持海上运输的港口中被卸载和运输一样。这让你的应用程序在不同的环境中更加可移植和可部署。</p><p>此外，Docker 还提供了一种称为 Docker 容器的技术，这些容器实际上就是运行着 Docker 集装箱中应用程序的实例。这就好比是在集装箱中放置了货物后，需要有人来处理货物的分拣、装卸等工作一样。</p><p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可抑制的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器完全使用沙盒机制，相互之间不会存在任何接口。几乎没有性能开销，可以很容易的在机器和数据中心运行。最重要的是，他们不依赖于任何语言、框架或者包装系统。</p><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">version</span> <span class="comment"># 查看docker版本号</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">info</span>  <span class="comment">#查看docker基本信息</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">search</span> <span class="string">centos</span> <span class="comment">#从docker hub中搜索docker名为centos的镜像</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">centos</span> <span class="comment"># 默认是拉去docker hub上搜索到的最新版本（第一个）</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">images</span>  <span class="comment">#查看已下载镜像。</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">--help</span>     <span class="comment">#docker帮助命令手册</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> [<span class="string">可选参数</span>] <span class="string">image</span> <span class="string">命令</span> <span class="comment">#启动容器（无镜像会先下载镜像）</span></span><br><span class="line"><span class="comment">#参数说明</span></span><br><span class="line"><span class="string">--name</span> <span class="string">=</span> <span class="string">&quot;Name&quot;</span>   <span class="string">容器名字</span></span><br><span class="line"><span class="string">-c</span>   <span class="string">后面跟待完成的命令</span></span><br><span class="line"><span class="string">-d</span>   <span class="string">以后台方式运行并且返回ID，启动守护进程式容器</span></span><br><span class="line"><span class="string">-i</span>   <span class="string">使用交互方式运行容器，通常与t同时使用</span></span><br><span class="line"><span class="string">-t</span>   <span class="string">为容器重新分配一个伪输入终端。也即启动交互式容器</span></span><br><span class="line"><span class="string">-p</span>   <span class="string">指定容器端口</span>    <span class="string">-p</span> <span class="string">容器端口:物理机端口</span>  <span class="string">映射端口</span></span><br><span class="line"><span class="string">-P</span>   <span class="string">随机指定端口</span></span><br><span class="line"><span class="string">-v</span>   <span class="string">给容器挂载存储卷</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">build</span>  <span class="comment">#创建镜像        -f：指定dockerfile文件路径   -t：镜像名字以及标签</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">logs</span> <span class="string">容器实例的ID</span>          <span class="comment">#查看容器日志</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">rename</span> <span class="string">旧名字</span>  <span class="string">新名字</span>      <span class="comment"># 给容器重新命名</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">top</span>    <span class="string">容器实例的ID</span>                  <span class="comment">#查看容器内进程</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">ps</span> <span class="string">-a</span>                    <span class="comment">#列出所有容器（不加-a就是在运行的）</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">rm</span>      <span class="string">容器实例的ID</span>                 <span class="comment">#删除容器（正在运行容器不能删除，除非加-f选项）</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">kill</span>  <span class="string">容器实例的ID</span>        <span class="comment">#杀掉容器</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">history</span>   <span class="string">容器实例的ID</span>    <span class="comment">#查看docker镜像的变更历史</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">start</span> <span class="string">容器实例的ID</span>        <span class="comment">#启动容器</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">restart</span> <span class="string">容器实例的ID</span>       <span class="comment">#重启容器</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">stop</span> <span class="string">容器实例的ID</span>         <span class="comment">#停止正在运行的容器</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">attach</span> <span class="string">/docker</span> <span class="string">exec</span>  <span class="string">容器实例的ID</span>   <span class="comment">#同为进入容器命令，不同的是attach连接终止会让容器退出后台运行，而exec不会。并且，docker attach是进入正在执行的终端，不会情动新的进程，而docker exec则会开启一个新的终端，可以在里面操作。</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">image</span> <span class="string">inspect</span>  <span class="string">容器名称：容器标签</span>       <span class="comment">#查看容器内源数据</span></span><br><span class="line"></span><br><span class="line"><span class="string">docker</span> <span class="string">cp</span>  <span class="string">容器id：容器内路径</span>   <span class="string">目的主机路径</span>           <span class="comment">#从容器内拷贝文件到主机（常用）或者从主机拷贝到容器（一般用挂载）</span></span><br><span class="line"></span><br><span class="line"><span class="string">exit</span>                           <span class="comment">#直接退出容器 </span></span><br><span class="line"></span><br><span class="line"><span class="string">crlt</span> <span class="string">+</span> <span class="string">P</span> <span class="string">+</span> <span class="string">Q</span>                   <span class="comment">#退出容器但是不终止运行</span></span><br></pre></td></tr></table></figure><h2 id="镜像原理"><a href="#镜像原理" class="headerlink" title="镜像原理"></a>镜像原理</h2><p>上面我们把docker比喻成许多的集装箱，那么镜像就是某一个具体的集装箱，每一个镜像里面都装了我们需要的应用程序、运行的环境、依赖项、配置文件以及启动脚本的命令。如果某人需要用到某个东西，直接把这个集装箱给他就好了，就可以直接使用，不需要去配置什么环境之类的东西，很方便。</p><p>上面是便于理解的解释，那么什么是镜像呢？镜像是一种轻量级的、可执行的独立软件包。用来打包软件运行环境和基于运行环境的开发软件，它包含运行某个软件所需要的内容，包括代码、运行时、库、环境变量和配置文件。</p><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922603.png" alt="img"></p><p>所以和虚拟机相比，为什么docker运行速度更快以及占用的内存较少呢？从上面的图中也可以发现，在docker镜像可以共享底层的基础层。这意味着如果多个容器都使用相同的基础镜像，它们可以共享这些不变的层，减少了磁盘空间的占用，并且在容器启动时也不需要重新加载这些共享的层，从而提高了启动速度。这只是其中的一个原因。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922034.png" alt="img"></p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器是一种轻量级、独立、可移植的软件运行时环境，用于在其中运行应用程序和服务。它们通过将应用程序及其所有依赖项（例如库、环境变量、配置文件等）打包在一起，创建一个隔离的环境，使应用程序能够在不同的计算机环境中以一致的方式运行。</p><p>不明白？那换种说法。</p><ul><li><strong>镜像就像是三明治的配方</strong>：它告诉你需要什么原料，以及如何将它们组合在一起。比如，三明治的配方可能包括面包、火腿、生菜和番茄等原料，以及如何将它们叠放在一起。这就是镜像，它定义了应用程序及其依赖的静态文件和配置信息，但没有实际运行状态。</li><li><strong>容器就像是制作好的三明治</strong>：一旦你根据配方将原料组合在一起，你就得到了一份真正的三明治。这个三明治是你可以拿在手里吃的，就像容器中运行的应用程序一样。容器包含了镜像中定义的一切，同时还有运行时状态，比如应用程序的内存使用情况、网络连接等。</li></ul><p>这样是不是很容易理解了，所以容器是什么？容器是具体的集装箱，镜像是什么？是写好集装箱要装什么的指南。</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile是一个创建镜像所有命令的文本文件，包含了一条条指令和说明, 每条指令构建一层,，通过docker build命令，根据Dockerfile的内容构建镜像，因此每一条指令的内容, 就是描述该层如何构建。有了Dockefile,，就可以制定自己的docker镜像规则,只需要在Dockerfile上添加或者修改指令,，就可生成docker 镜像。</p><p>在这里我们来整理一下docker容器、dockerfile、docker镜像的关系：</p><ol><li>dockerfile是面向开发的，发布项目做镜像的时候就要编写dockerfile文件。</li><li>dockerfile：构建文件，定义了一切的步骤，源代码。</li><li>dockerImanges：通过dockerfile构建生成的镜像，最终发布和运行的产品。</li><li>docker容器：容器就是镜像运行起来提供服务的。</li></ol><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>我们使用ifconfig可以看到三组网络。 首先是docker0，这是我们本节的重点，docker的网络。之后是eth0，本机的外网地址。lo口，本地环回地址，可以代表localhost。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922714.png" alt="img"></p><p>为什么Docker需要分配虚拟的IP呢？</p><ol><li><strong>隔离性和独立性</strong>：每个容器都被设计为一个独立的运行环境，与宿主主机和其他容器隔离开来。使用虚拟的 IP 地址可以确保每个容器有自己的网络标识，不会与宿主主机或其他容器的网络资源发生冲突。</li><li><strong>便于扩展和迁移</strong>：使用虚拟的 IP 地址可以使容器更容易地进行扩展和迁移。当容器需要迁移到不同的主机或者加入到不同的网络中时，只需要调整 IP 地址即可，而不会影响容器内部的配置和程序逻辑。</li><li><strong>方便的服务发现</strong>：使用虚拟 IP 地址可以方便地进行服务发现和管理。容器可以通过 DNS 或者其他服务发现机制来自动发现彼此，而不需要硬编码特定的 IP 地址和端口号。</li><li><strong>避免端口冲突</strong>：如果每个容器都使用宿主主机的 IP 地址加端口号来进行通信，可能会导致端口冲突和管理上的混乱。而使用虚拟 IP 地址可以避免这种情况，每个容器都可以拥有自己独立的端口空间。</li></ol><p>所以最主要的与原因是为了不同的容器之间可以通信以及容器可以和宿主机器保持隔离性，这就是为什么要为docker设置虚拟的ip地址，那样我们之前配置的docker端口号和宿主的端口号一致，却不会冲突这就解释的通了，这是因为宿主的IP和docker容器的IP不是同一个。</p><h3 id="Docker网络模式"><a href="#Docker网络模式" class="headerlink" title="Docker网络模式"></a>Docker网络模式</h3><p>Docker默认提供了3种网络模式，生成容器时不指定网络模式下默认使用bridge桥接模式。 使用命令查看当前Docker所有的网络模式。</p><h4 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h4><p>如果容器启用host模式，那么容器就不会分配一个虚拟的IP，而是和宿主机器使用同一个IP地址。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。只是IP不隔离了。</p><p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，<strong>host最大的优势就是网络性能比较好</strong>，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p><h4 id="container模式"><a href="#container模式" class="headerlink" title="container模式"></a>container模式</h4><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><h4 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h4><p>使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network&#x3D;none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p><h4 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h4><p>bridge模式是docker的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。bridge模式如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922658.png" alt="img"></p><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器都会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922913.png" alt="img"></p><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><p>之前我们学习了解了Docker，那么Docker容器可以类比成现实世界的集装箱。既然是集装箱，我们可以很明显想到不同容器之间是高度隔离的，那么如果两个容器之间需要通信该怎么办呢？这里就需要容器互联了。</p><p>容器互联，顾名思义就是指容器之间的通信联系。但是如何操作呢？</p><p>如果你想创建两个容器，让它们在同一个自定义网络中互相通信，你可以按以下步骤操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的自定义网络</span></span><br><span class="line">docker network create my-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这个网络中启动两个容器</span></span><br><span class="line">docker run -d --name container1 --network my-network alpine <span class="built_in">sleep</span> infinity</span><br><span class="line">docker run -d --name container2 --network my-network alpine <span class="built_in">sleep</span> infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入一个容器并尝试ping另一个容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it container1 ping container2</span><br></pre></td></tr></table></figure><h2 id="制作镜像并且发布外网"><a href="#制作镜像并且发布外网" class="headerlink" title="制作镜像并且发布外网"></a>制作镜像并且发布外网</h2><p>注册docker hub账号：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922281.png" alt="img"></p><p>服务器上使用命令行登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login -u [账号名字]   <span class="comment">#登陆命令</span></span><br><span class="line">docker out                  <span class="comment">#退出命令</span></span><br><span class="line">docker push 账号/容器名字：版本号</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922537.png" alt="img"></p><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dockerfile</span><br><span class="line"><span class="built_in">cd</span> dockerfile</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261922774.png" alt="img"></p><p>编写dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FORM centos</span><br><span class="line">MAINTAINER ydk&lt;123@qq.com&gt;</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line">RUN yum -y install vim-enhanced</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD <span class="built_in">echo</span> <span class="comment">#MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;------------END-------------&quot;</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p>构件dockerfile</p><p>Docker build命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/m0_61503020/article/details/125456520?ops_request_misc=%7B%22request_id%22:%22171428436516800182123314%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171428436516800182123314&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125456520-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=docker&spm=1018.2226.3001.4187">docker入门，这一篇就够了</a>；</li><li><a href="https://blog.csdn.net/CSDN1csdn1/article/details/123961079?ops_request_misc=&request_id=&biz_id=102&utm_term=docker%E7%BD%91%E7%BB%9C&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-123961079.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">Docker网络详解</a>；</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 IDEA</title>
      <link href="/2025/02/26/10%20IDEA/"/>
      <url>/2025/02/26/10%20IDEA/</url>
      
        <content type="html"><![CDATA[<h1 id="10-IDEA"><a href="#10-IDEA" class="headerlink" title="10 IDEA"></a>10 IDEA</h1><ol><li>自动生成试卷系统</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08 Maven</title>
      <link href="/2025/02/26/08%20Maven/"/>
      <url>/2025/02/26/08%20Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="08-Maven"><a href="#08-Maven" class="headerlink" title="08 Maven"></a>08 Maven</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/weixin_43477531/article/details/125164271?ops_request_misc=%7B%22request_id%22:%22171444811716800188590781%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171444811716800188590781&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-125164271-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=maven&spm=1018.2226.3001.4187">超级详细的 Maven 教程（基础+高级）</a>；</li><li><a href="https://blog.csdn.net/weixin_43740223/article/details/114253461">Maven 最详细的settings.xml 配置文件解释</a>；</li><li></li></ol><h2 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h2><p>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供构建和依赖管理支持的工具。</p><p>一个 Maven 工程有约定的目录结构，约定的目录结构对于 Maven 实现自动化构建而言是必不可少的一环，就拿自动编译来说，Maven 必须 能找到 Java 源文件，下一步才能编译，而编译之后也必须有一个准确的位置保持编译得到的字节码文件。 </p><p>如果在开发中如果需要让第三方的工具或者框架知道我们自己创建的资源在哪，那么基本上就是两种方式：</p><ol><li>通过配置的形式明确告诉它</li><li>基于第三方工具或框架的约定 Maven 对工程目录结构的要求</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261923997.png" alt="img"></p><h3 id="构建环节"><a href="#构建环节" class="headerlink" title="构建环节"></a>构建环节</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261923907.png" alt="img"></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>在Maven中，依赖（Dependencies）是指项目所依赖的外部库、模块或者其他项目。简单来说，当你的项目需要引用其他代码库或者模块提供的功能时，你可以将这些外部资源声明为你项目的依赖。依赖管理是Maven的一个核心功能，它帮助你轻松地管理项目所需的各种外部资源。</p><p>Maven使用一种叫做坐标（Coordinates）的方式来唯一标识每个依赖项。这个坐标通常包括组织（Group）、名称（Artifact）和版本（Version）三个部分。组织标识了库的所属组织或者项目，名称则标识了具体的库或者项目名称，版本则指明了库或者项目的具体版本号。</p><p>就好比食谱，上面记录着你这菜需要的所有原材料，材料是什么，来自哪里的，需要什么时期的，都会记录在上面。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261923377.png" alt="img"></p><p>在有些时候A依赖B，B依赖C，而且C可以传递到A的时候，但是A不想要C，这时候就想把C排除在外面。</p><p>一般使用excludes标签配置依赖的排除：</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.javatv.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 使用excludes标签配置依赖的排除        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>下载好Maven后，我们需要在本地创建一个文件夹，用来存放我们下载到本地的所有菜单。然后我们需要在setting文件中指定本地仓库的位置，以便让Mavne可以找到本地仓库。这样Maven就会将下载好的依赖存放在本地仓库中同时需要依赖的时候也会从本地仓库中寻找。</p><p>这里我们需要重点介绍一下刚刚提到的maven的setting文件，如果我们找到setting文件，可以发现其文件类型是xml，即为配置文件。那么该配置文件会为maven配置一些参数，比如本地仓库的地址。</p><h2 id="Maven的使用"><a href="#Maven的使用" class="headerlink" title="Maven的使用"></a>Maven的使用</h2><p>之前我们介绍了到了，maven会根据菜单（pom）文件去菜市场（中央仓库）找到需要的东西。但是中央仓库很多，东西很多，我们该如何找到我们最需要的那个物品呢？</p><p>这里就引入了坐标的概念，世界是三维的，那么我们就可以根据三个坐标点来确定一个具体位置。那么对于maven来说也是一样的，只不过在maven世界里不是xyz而是groupId、artfactId和version。</p><ol><li>groupId：公司或组织的id，例如：com.javatv.maven；</li><li>artfactId：一个项目或者是项目中的一个模块的 id，即模块的名称，将来作为 Maven 工程的工程名；</li><li><strong>version</strong>：版本号。</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Maven工程直接存在继承的关系，比如A工程继承B工程，那么B工程就是父工程，A工程就是子工程。但是这样有什么用？</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261923436.png" alt="img"></p><h3 id="dependencies-与-dependencyManagement-的区别"><a href="#dependencies-与-dependencyManagement-的区别" class="headerlink" title="dependencies 与 dependencyManagement 的区别"></a>dependencies 与 dependencyManagement 的区别</h3><ol><li>父模块 <dependencies></dependencies> 中定义的所有依赖，在子项目中都会直接继承；</li><li>在父模块 <dependencyManagement></dependencyManagement> 中定义的所有依赖，子项目并不会继承，我们还要在子项目中引入我们需要的依赖，才能进行使用。此时我们在子项目中不用设置版本。</li></ol><p>注意：</p><p>（1）子模块继承的父模块的依赖&#x2F;子模块声明的依赖，如果在子模块中没有被使用，在子模块单独打包时，就不会被打入 jar ；</p><p>（2）maven 打包加入的依赖代码是被调用到的部分代码，没有被调用到的依赖代码不会被加入打包后的 jar 包中。</p><h3 id="父POM设置"><a href="#父POM设置" class="headerlink" title="父POM设置"></a>父POM设置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父POM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义父POM的基本信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> <span class="comment">&lt;!-- 使用pom打包类型 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义父POM的依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里可以定义通用的依赖版本 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 例如：Spring Boot版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 其他依赖版本管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子POM配置"><a href="#子POM配置" class="headerlink" title="子POM配置"></a>子POM配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子POM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入父POM --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义子POM的基本信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>child-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 子POM的具体配置和依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 例如：Spring Boot Starter Web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 其他依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-Setting-xml文件配置"><a href="#Maven-Setting-xml文件配置" class="headerlink" title="Maven Setting.xml文件配置"></a>Maven Setting.xml文件配置</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 Linux环境下搭建ELK（Elasticsearch+Logstash+Kibana）</title>
      <link href="/2025/02/26/09%20Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAELK%EF%BC%88Elasticsearch+Logstash+Kibana%EF%BC%89/"/>
      <url>/2025/02/26/09%20Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAELK%EF%BC%88Elasticsearch+Logstash+Kibana%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="09-Linux环境下搭建ELK（Elasticsearch-Logstash-Kibana）"><a href="#09-Linux环境下搭建ELK（Elasticsearch-Logstash-Kibana）" class="headerlink" title="09 Linux环境下搭建ELK（Elasticsearch+Logstash+Kibana）"></a>09 Linux环境下搭建ELK（Elasticsearch+Logstash+Kibana）</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在现代的软件开发和运维领域，监控和日志管理是至关重要的任务。随着应用程序规模的扩大和分布式系统的普及，有效地跟踪和分析日志数据成为了挑战。Elasticsearch、Logstash和Kibana（EFK）框架是一组流行的工具，可帮助您实现高效的日志收集、存储和分析。</p><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924889.png" alt="img"></p><p>如图所示：</p><ol><li>应用程序实时产生日志文件；</li><li>Logstash读取日志文件;</li><li>Logstash会将收集到的日志发送到Elasticsearch。Elasticsearch是一个高性能的搜索和分析引擎，用于存储和索引日志数据。一旦数据到达Elasticsearch，它将自动建立索引，以便稍后的查询和分析;</li><li>使用Kibana查看、搜索、分析日志。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Logstash部署至服务主机，对各个服务的日志进行采集、过滤、推送。</span></span><br><span class="line"><span class="string">Elasticsearch存储Logstash传送的结构化数据，提供给Kibana。</span></span><br><span class="line"><span class="string">Kibana提供用户UIweb页面进行，数据展示和分析形成图表等。</span></span><br></pre></td></tr></table></figure><h2 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h2><p>docker-compose.yml文件中的内容如下：</p><p>注意把192.168.0.125IP地址更换成自己本机的IP地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="comment">#服务配置</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment">#es服务</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.14.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ES_JAVA_OPTS:</span> <span class="string">-Xms1g</span> <span class="string">-Xmx1g</span></span><br><span class="line">      <span class="attr">node.name:</span> <span class="string">es-single</span></span><br><span class="line">      <span class="attr">cluster.name:</span> <span class="string">es-cluster</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">      <span class="comment"># 开启es跨域</span></span><br><span class="line">      <span class="attr">http.cors.enabled:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">      <span class="attr">http.cors.allow-headers:</span> <span class="string">Authorization</span></span><br><span class="line">      <span class="comment"># 安全控制（根据个人需要选择打开或关闭）</span></span><br><span class="line">      <span class="attr">xpack.security.enabled:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">ELASTIC_PASSWORD:</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">  <span class="comment">#kibana</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.14.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">&#x27;[&quot;http://192.168.0.125:9200&quot;]&#x27;</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_USERNAME:</span> <span class="string">&#x27;elastic&#x27;</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_PASSWORD:</span> <span class="string">&#x27;B6P0hW7x&#x27;</span></span><br></pre></td></tr></table></figure><p>在docker-compose.yml文件夹下打开命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker-compose up -d </span><br></pre></td></tr></table></figure><p>启动这个docker-compose。</p><p>在docker-compose.yml文件目录下创建一个logstash的文件夹，然后在该文件夹下安装logstash。</p><p>参考教程：[Linux下安装Logstash](<a href="https://blog.csdn.net/Amber_1/article/details/124315986?ops_request_misc=%7B%22request_id%22:%22171444816816800215071428%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171444816816800215071428&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-124315986-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=Linux">https://blog.csdn.net/Amber_1/article/details/124315986?ops_request_misc=%7B%22request%5Fid%22%3A%22171444816816800215071428%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171444816816800215071428&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-124315986-null-null.142^v100^pc_search_result_base1&amp;utm_term=Linux</a> 下载 Logstash&amp;spm&#x3D;1018.2226.3001.4187)</p><p>在测试服务器上，注意我将logstash下载到了&#x2F;home&#x2F;space&#x2F;Docker-compose&#x2F;ELK&#x2F;logstash中。</p><p>对logstash进行配置，我将配置文件放在了目录&#x2F;home&#x2F;space&#x2F;Docker-compose&#x2F;ELK&#x2F;logstash&#x2F;logstash-7.3.1&#x2F;config&#x2F;logstash.conf中</p><p>logstash.conf的内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input&#123;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Docker-compose/logs/debug.txt&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;systemlog&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/auth/logs/space-intell-gas-auth/debug.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;auth-debug&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/auth/logs/space-intell-gas-auth/error.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;auth-error&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/bff/logs/space-intell-gas-bff/debug.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;bff-debug&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/bff/logs/space-intell-gas-bff/error.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;bff-error&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/gateway/logs/space-intell-gas-gateway/debug.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;gateway-debug&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/gateway/logs/space-intell-gas-gateway/error.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;gateway-error&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/upms/logs/space-intell-gas-upms-biz/error.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;upms-error&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/upms/logs/space-intell-gas-upms-biz/debug.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;upms-debug&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/nacos/logs/config-client-request.log&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;registe-config&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">        <span class="string">stat_interval</span> <span class="string">=&gt;</span> <span class="string">&quot;3 second&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/auth/logs/space-intell-gas-auth/*/*.log.gz&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;auth-debug&quot;</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">=&gt;</span> <span class="string">&quot;read&quot;</span></span><br><span class="line">        <span class="string">file_completed_action</span> <span class="string">=&gt;</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">file_completed_log_path</span> <span class="string">=&gt;</span> <span class="string">&quot;/home/space/Docker-compose/ELK/logstash/read/space-intell-gas-auth-debug-read.log&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/bff/logs/space-intell-gas-bff/*/*.log.gz&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;bff-debug&quot;</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">=&gt;</span> <span class="string">&quot;read&quot;</span></span><br><span class="line">        <span class="string">file_completed_action</span> <span class="string">=&gt;</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">file_completed_log_path</span> <span class="string">=&gt;</span> <span class="string">&quot;/home/space/Docker-compose/ELK/logstash/read/space-intell-gas-bff-debug-read.log&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/gateway/logs/space-intell-gas-gateway/*/*.log.gz&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;gateway-debug&quot;</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">=&gt;</span> <span class="string">&quot;read&quot;</span></span><br><span class="line">        <span class="string">file_completed_action</span> <span class="string">=&gt;</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">file_completed_log_path</span> <span class="string">=&gt;</span> <span class="string">&quot;/home/space/Docker-compose/ELK/logstash/read/space-intell-gas-gateway-debug-read.log&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/upms/logs/space-intell-gas-upms-biz/*/*.log.gz&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;upms-debug&quot;</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">=&gt;</span> <span class="string">&quot;read&quot;</span></span><br><span class="line">        <span class="string">file_completed_action</span> <span class="string">=&gt;</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">file_completed_log_path</span> <span class="string">=&gt;</span> <span class="string">&quot;/home/space/Docker-compose/ELK/logstash/read/space-intell-gas-upms-debug-read.log&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">output&#123;</span></span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;systemlog&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;test-gateway-debug&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;auth-debug&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-auth-debug&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;auth-error&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-auth-error&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;bff-debug&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-bff-debug&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;bff-error&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-bff-error&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;gateway-debug&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-gateway-debug&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;gateway-error&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-gateway-error&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;upms-debug&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-upms-debug&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;upms-error&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-upms-error&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;registe-config&quot;</span> &#123;</span><br><span class="line">      <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.0.125:9200&quot;</span>] </span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;space-intell-gas-registe-config&quot;</span></span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;B6P0hW7x&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>logstash.conf配置文件对logstash进行了配置，将程序运行保存的日志文件通过指定path告知logstash读取，注意这配置文件还对压缩包内的配置文件进行了读取，读取配置在上面配置中存在，这里截取一段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">file&#123;</span></span><br><span class="line">            <span class="string">path=&gt;&quot;/home/space/Documents/deployment/backend/java/upms/logs/space-intell-gas-upms-biz/*/*.log.gz&quot;</span></span><br><span class="line">            <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;upms-debug&quot;</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">=&gt;</span> <span class="string">&quot;read&quot;</span></span><br><span class="line">        <span class="string">file_completed_action</span> <span class="string">=&gt;</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">file_completed_log_path</span> <span class="string">=&gt;</span> <span class="string">&quot;/home/space/Docker-compose/ELK/logstash/read/space-intell-gas-upms-debug-read.log&quot;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>特别注意：在对压缩包进行读取时，需要配置file_completed_action指定为log，即上面所示。</p><ul><li>如果只配置file_completed_action而不配置file_completed_log_path，会运行失败报错。</li><li>如果file_completed_action和file_completed_log_path都不配置的话，那么path指定的日志压缩包会被读取后删除。</li></ul><p>如果要运行logstash，请在目录&#x2F;home&#x2F;space&#x2F;Docker-compose&#x2F;ELK&#x2F;logstash&#x2F;logstash-7.3.1下打开命令行输入如下命令</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">nohup</span> <span class="string">./bin/logstash</span> <span class="string">-f</span> <span class="string">config/logstash.conf</span> <span class="string">&amp;</span> <span class="comment"># 该命令是无框模式</span></span><br><span class="line"><span class="string">./bin/logstash</span> <span class="string">-f</span> <span class="string">config/logstash.conf</span> <span class="comment"># 该命令会显示这个logstash的运行</span></span><br></pre></td></tr></table></figure><p>查看Logstash是否启动成功：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ps</span> <span class="string">-ef</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">logstash</span></span><br></pre></td></tr></table></figure><p>使用命令杀死Logstash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">kill</span> -9 logstashid</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:5601即可，登录Kibana查看是否成功，输入之前配置中配置的账号和密码；">http://localhost:5601即可，登录Kibana查看是否成功，输入之前配置中配置的账号和密码；</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924380.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924861.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924649.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924835.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924088.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924791.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924263.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924241.png" alt="img"></p><p>即可查看日志内容，Kibana具体如何使用请参考博客：<a href="https://blog.csdn.net/UbuntuTouch/article/details/122805096?ops_request_misc=&request_id=&biz_id=102&utm_term=Kibana%E4%BD%BF%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-122805096.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">Kibana：Kibana 入门 （一）</a>；</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261924908.png" alt="img"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/qq_25416531/article/details/133961415">（实战）docker-compose部署分布式日志方案EFK(Elasticsearch+Fluentd+Kibana)</a>；</li><li><a href="https://blog.csdn.net/UbuntuTouch/article/details/122805096?ops_request_misc=&request_id=&biz_id=102&utm_term=Kibana%E4%BD%BF%E7%94%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-122805096.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">Kibana：Kibana 入门 （一）</a>；</li><li>[logstash 输入压缩文件 gzip类型](<a href="https://blog.csdn.net/kirrin/article/details/90478315?ops_request_misc=&request_id=&biz_id=102&utm_term=logstash">https://blog.csdn.net/kirrin/article/details/90478315?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=logstash</a> 读取压缩日志文件&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-4-90478315.142^v100^pc_search_result_base1&amp;spm&#x3D;1018.2226.3001.4187)；</li><li><a href="https://blog.csdn.net/sunchaos/article/details/112475405?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-112475405-blog-90478315.235%5Ev43%5Econtrol&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-112475405-blog-90478315.235%5Ev43%5Econtrol&utm_relevant_index=10">Logstash 7.9 从gzip文件读取json乱码问题的解决</a>；</li><li>[Linux下安装Logstash](<a href="https://blog.csdn.net/Amber_1/article/details/124315986?ops_request_misc=%7B%22request_id%22:%22171444816816800215071428%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171444816816800215071428&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-124315986-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=Linux">https://blog.csdn.net/Amber_1/article/details/124315986?ops_request_misc=%7B%22request%5Fid%22%3A%22171444816816800215071428%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171444816816800215071428&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-124315986-null-null.142^v100^pc_search_result_base1&amp;utm_term=Linux</a> 下载 Logstash&amp;spm&#x3D;1018.2226.3001.4187)；</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16 XSS跨站脚本攻击</title>
      <link href="/2025/02/26/16%20XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
      <url>/2025/02/26/16%20XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="16-XSS跨站脚本攻击"><a href="#16-XSS跨站脚本攻击" class="headerlink" title="16 XSS跨站脚本攻击"></a>16 XSS跨站脚本攻击</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/weixin_62707591/article/details/131269479?ops_request_misc=%7B%22request_id%22:%22171523971716800184171198%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171523971716800184171198&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131269479-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=xss%E6%94%BB%E5%87%BB&spm=1018.2226.3001.4187">XSS跨站脚本攻击及防护</a></li><li><a href="https://blog.csdn.net/weixin_43263566/article/details/128703356">跨站脚本攻击漏洞（XSS）：基础知识和防御策略</a></li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>XSS也叫CSS，因为和前端CSS样式重名，故称其为XSS。XSS为跨站脚本攻击，是web应用最常见的程序安全漏洞之一。XSS通过窃取用户的Cookie来变相的盗取用户的账号和密码。然后通过账号和密码对用户账户进行非法操作。</p><h1 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h1><p>XSS攻击的本质是利用了浏览器对于用户输入数据的信任，黑客通过在网页程序中注入非法脚本，用户通过点击执行这些脚本，从而达到非法窃取用户cookie的目的。</p><p>可以非常简单的理解为，XSS攻击即通过仿造一个ATM机，骗取用户的银行卡和密码。</p><h1 id="XSS攻击过程-原理"><a href="#XSS攻击过程-原理" class="headerlink" title="XSS攻击过程&#x2F;原理"></a>XSS攻击过程&#x2F;原理</h1><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261928520.png" alt="img"></p><h1 id="XSS攻击类型"><a href="#XSS攻击类型" class="headerlink" title="XSS攻击类型"></a>XSS攻击类型</h1><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p><strong>持久性</strong>：攻击者通过<strong>发表带有恶意跨域脚本的帖子或文章</strong>，从而把恶意脚本存储在<strong>服务器</strong>中，每个访问该帖子或文章的人都会触发该恶意脚本执行，这种XSS非常危险，<strong>容易造成蠕虫</strong>，<strong>大量盗窃cookie</strong>。</p><p>可以发现存储型XSS攻击，是通过将恶意脚本存储到目标服务器的数据库中来进行攻击。当用户访问该文章或者帖子，浏览器接收到数据就会自动执行该恶意脚本，从而达到攻击的目的。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261928319.png" alt="img"></p><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p><strong>非持久性</strong>：攻击者事先制作好攻击链接，将攻击脚本嵌入到某个 <strong>URL 链接</strong>中，诱骗用户自己去点击链接，从而触发攻击代码执行，完成该次攻击。</p><p>一个简单的例子：</p><p>假设攻击者构造了如下恶意URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/search?query=&lt;script&gt;alert(&#x27;XSS攻击成功！&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当用户点击这个URL时，浏览器会向服务器发送搜索请求，并将<code>query</code>参数的值设置为<code>&lt;script&gt;alert(&#39;XSS攻击成功！&#39;);&lt;/script&gt;</code>。服务器将搜索结果与这个恶意脚本拼接到响应页面中返回给浏览器。浏览器在解析响应页面时会执行这段脚本，弹出一个对话框，显示”XSS攻击成功！”。这就是一个简单的反射型XSS攻击类型。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261928258.png" alt="img"></p><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p><strong>DOM型XSS：基于DOM文档对象模型的操作，通过前端脚本修改页面的DOM节点形成的xss，该操作不与服务器端进行交互，且代码是可见的，从前端获取到DOM中的数据在本地执行。只在客户端进行解析，不需要服务器的解析响应，是前端JavaScript自身安全漏洞。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261928867.png" alt="img"></p><h1 id="避免XSS攻击"><a href="#避免XSS攻击" class="headerlink" title="避免XSS攻击"></a>避免XSS攻击</h1><p>为了防止跨站脚本攻击（Cross-site scripting, XSS）对系统带来的安全威胁，以下是一些常见的防御策略：</p><ol><li>对用户输入做好过滤和转义处理，避免被直接执行作为脚本代码。开发者可以使用一些现成的库和框架来实现数据过滤和转义，例如OWASP ESAPI、JQuery等。</li><li>在请求中包含HTTPOnly标记的cookie，避免JavaScript脚本获取Cookie值。</li><li>配置CSP（Content-Security-Policy）头部，限制页面资源的加载和执行，减少XSS攻击的可能性。</li><li>使用低特权账号和权限分离策略，避免敏感操作的恶意执行和篡改页面内容。</li><li>及时更新补丁和升级软件版本，以消除可能存在的安全漏洞。</li><li>对于发生XSS攻击的网站，及时清除和恢复受影响的数据，同时加强监控和日志审计，快速发现异常情况并进行处理。</li></ol><h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><p>在智慧加油站项目中，设定了一个Xss过滤器。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XSS filter.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> chao.lu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONTENT_SECURITY_POLICY_HEADER</span> <span class="operator">=</span> <span class="string">&quot;Content-Security-Policy&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONTENT_SECURITY_POLICY</span> <span class="operator">=</span> <span class="string">&quot;script-src &#x27;self&#x27;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        response.setHeader(CONTENT_SECURITY_POLICY_HEADER, CONTENT_SECURITY_POLICY);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分代码通过添加了CSP头部来预防XSS攻击。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15 Nacos</title>
      <link href="/2025/02/26/15%20Nacos/"/>
      <url>/2025/02/26/15%20Nacos/</url>
      
        <content type="html"><![CDATA[<h1 id="15-Nacos"><a href="#15-Nacos" class="headerlink" title="15 Nacos"></a>15 Nacos</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://blog.csdn.net/apple_69693064/article/details/127168147?ops_request_misc=%7B%22request_id%22:%22171507830316800213063783%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171507830316800213063783&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-127168147-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86&spm=1018.2226.3001.4187">【Nacos】一文到底 配置管理详解</a></li><li></li></ol><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Nacos是阿里巴巴开源的服务注册中心以及配置中心，致力于给开发者提供一款便捷、简单上手的开源框架。</p><p>Nacos包含了SpringCloud的注册中心Eureka、服务配置Config、服务总线Bus。</p><p>Nacos提供四大功能，分别是服务发现和服务健康监测、动态配置服务、动态DNS服务、服务及其元数据管理。</p><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261927834.png" alt="img"></p><p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p><p>配置存在优先级；</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261927242.png" alt="img"></p><p>修改nacos中的配置后，微服务中<code>无需重启即</code>可让配置生效，也就是<strong>配置热更新</strong>。</p><p>一般在nacos中配置的是可能会变更的，而在本地的配置中一般书写不会变更的配置。</p><h1 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h1><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261927887.png" alt="img"></p><p>创建命名空间</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261927854.png" alt="img"></p><p>创建配置信息</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261927182.png" alt="img"></p><p>读取配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line"><span class="comment">#  profiles:</span></span><br><span class="line"><span class="comment">#    active: test # 指定环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos 配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>  <span class="comment"># 文件扩展名</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">f81a11fe-73f4-4dff-b70d-04009fa36710</span> <span class="comment"># 指定namespace的id</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 指定组名</span></span><br></pre></td></tr></table></figure><h1 id="Nacos集群"><a href="#Nacos集群" class="headerlink" title="Nacos集群"></a>Nacos集群</h1><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261927399.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13 RPC</title>
      <link href="/2025/02/26/13%20RPC/"/>
      <url>/2025/02/26/13%20RPC/</url>
      
        <content type="html"><![CDATA[<h1 id="13-RPC"><a href="#13-RPC" class="headerlink" title="13 RPC"></a>13 RPC</h1><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.cnblogs.com/junjiang3/p/9096895.html">Java 开发 gRPC 服务和客户端</a></li><li><a href="https://zhuanlan.zhihu.com/p/363672930#GeneratedCaptionsTabForHeroSec">聊聊什么是gRPC</a></li><li><a href="https://blog.csdn.net/qq_42046105/article/details/126396944?ops_request_misc=%7B%22request_id%22:%22171505794416800215041301%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171505794416800215041301&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-126396944-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=gRPC&spm=1018.2226.3001.4187">gRPC：一个性能强到爆的RPC框架</a></li><li><strong><a href="https://www.cnblogs.com/zhongyuanzhao000/p/13783165.html">gRPC之java语言的简单Demo</a></strong></li><li><strong><a href="https://www.cnblogs.com/songgj/p/13463717.html">gRPC框架详解 </a></strong></li><li><a href="https://blog.csdn.net/weixin_45404884/article/details/137697450">Dubbo（从入门到掌握）看完这一篇就够了</a></li><li></li></ul><p>要想了解什么是gRPC，那么我们可以先了解一下什么是RPC。</p><h3 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h3><p>RPC（Remote Procedure Call Protocol）<strong>远程过程调用协议</strong>，目标就是让远程服务调用更加简单、透明。</p><p>RPC可以理解成为了实现两个进程之间的通信。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261925013.png" alt="img"></p><h3 id="为什么需要用RPC"><a href="#为什么需要用RPC" class="headerlink" title="为什么需要用RPC"></a>为什么需要用RPC</h3><p>当业务越来越多，应用也会越来越多，这时候需要将公共的业务逻辑抽离出来，形成一个独立的service服务，所以这时候需要一种能够在不同微服务进行通信或者说不同进程之间进行通信的方式，这就是RPC。</p><h3 id="RPC和HTTP区别"><a href="#RPC和HTTP区别" class="headerlink" title="RPC和HTTP区别"></a><strong>RPC和HTTP区别</strong></h3><p>　　　　RPC 和 HTTP都是微服务间通信较为常用的方案之一，其实RPC 和 HTTP 并不完全是同一个层次的概念，它们之间还是有所区别的。</p><p>　　　　 1. RPC 是远程过程调用，其调用协议通常包括<strong>序列化协议</strong>和<strong>传输协议</strong>。序列化协议有基于纯文本的 XML 和 JSON、二进制编码的Protobuf和Hessian。传输协议是指其底层网络传输所使用的协议，比如 TCP、HTTP。</p><p>　　　　 2. 可以看出HTTP是RPC的传输协议的一个可选方案，比如说 gRPC 的网络传输协议就是 HTTP。HTTP 既可以和 RPC 一样作为服务间通信的解决方案，也可以作为 RPC 中通信层的传输协议（此时与之对比的是 TCP 协议）。</p><h3 id="RPC常用框架"><a href="#RPC常用框架" class="headerlink" title="RPC常用框架"></a>RPC常用框架</h3><ol><li><strong>gRPC：</strong> 由Google开发的高性能、跨语言的RPC框架，基于HTTP&#x2F;2和Protocol Buffers，支持多种编程语言，包括C、C++、Java、Go、Python等。</li><li><strong>Apache Thrift：</strong> 由Facebook开发的跨语言的RPC框架，支持多种编程语言，包括C++、Java、Python、PHP等，提供了丰富的数据类型和序列化协议支持。</li><li><strong>Apache Dubbo：</strong> 由阿里巴巴开发的分布式服务框架，支持高性能的RPC调用和服务治理，提供了灵活的配置和扩展机制，主要用于Java应用。</li><li><strong>Thrift RPC：</strong> 是Apache Thrift框架的一部分，专注于提供跨语言的RPC支持，支持多种编程语言和多种传输协议。</li><li><strong>RESTful API：</strong> 虽然不是传统意义上的RPC框架，但RESTful API也是一种常用的远程调用方式，通过HTTP协议进行通信，使用标准的HTTP方法（如GET、POST、PUT、DELETE）来操作资源。</li><li><strong>Spring Cloud：</strong> 是一个基于Spring Boot的分布式系统开发工具，提供了丰富的微服务组件和通信框架，包括RPC调用、服务注册与发现、负载均衡等功能。</li><li><strong>ZeroMQ：</strong> 是一个高性能的消息传递库，支持多种消息传输模式，包括请求-应答模式，可以用于构建简单的RPC系统。</li><li><strong>RPyC（Remote Python Call）：</strong> 是一个轻量级的Python RPC框架，支持在Python中实现远程过程调用。</li></ol><p>像这种远程服务调用，之前了解学习过Feign，那么Feign是RPC框架吗？</p><blockquote><p>Feign 是一个声明式的 HTTP 客户端框架，通常与 Spring Cloud 等微服务框架一起使用。虽然 Feign 本身并不是严格意义上的 RPC 框架，但它可以被用于实现远程服务调用，因此在某种程度上也可以被视为一种 RPC 的实现方式。</p><p>Feign 的主要作用是简化服务间的 HTTP 调用，通过定义接口和注解的方式，让开发者可以像调用本地方法一样调用远程服务，而无需手动编写 HTTP 请求和处理代码。Feign 还支持负载均衡、服务发现等功能，使得服务调用更加方便和灵活。</p><p>虽然 Feign 在实现上更倾向于基于 HTTP 的服务调用，而不是传统的 RPC 调用，但在微服务架构中，它经常被用来实现服务间的远程调用，因此可以被看作是一种轻量级的 RPC 框架。</p></blockquote><h3 id="RPC的调用流程"><a href="#RPC的调用流程" class="headerlink" title="RPC的调用流程"></a>RPC的调用流程</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261925268.png" alt="img"></p><ol><li>客户端也就是服务消费方以本地方式调用服务；</li><li>Client Stub（服务端本地的）接受到调用后负责把方法和参数组装成能够进行网络传输的消息体；</li><li>接下来Client Stub需要在其找到该服务的地址，然后将刚刚组装的消息体发送给这个服务；</li><li>同步的Server Stub收到刚刚发送来的这个消息，然后进行解码；</li><li>Server Stub根据编码结果安排其本地的服务调用；</li><li>本地的Server开始执行，得到结果后将这个结果返回给Server Stub；</li><li>同样的这时候的Server Stub也跟Client Stub一样，将这个结果消息组装然后发送给刚刚发来的消费端；</li><li>Client Stub进行解码；</li><li>服务端得到最后的结果。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261925862.png" alt="img"></p><p>RPC就是将这些内部的操作进行封装，让用户无需关注这些细节。</p><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>当然，让我们通过一个简单的示例来介绍Feign的使用。在这个示例中，我们将创建一个微服务应用，其中一个服务将使用Feign客户端来调用另一个服务的RESTful API。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>确保你的开发环境中安装了以下工具：</p><ul><li>Java 8或更高版本</li><li>Maven</li><li>Spring Boot</li></ul><h3 id="步骤1：创建服务提供者"><a href="#步骤1：创建服务提供者" class="headerlink" title="步骤1：创建服务提供者"></a>步骤1：创建服务提供者</h3><p>首先，我们创建一个简单的服务提供者，它将提供一个RESTful API。</p><ol><li>创建一个新的Spring Boot项目，例如命名为<code>service-provider</code>。</li><li>添加必要的依赖，如<code>Spring Boot Web</code>。</li><li>创建一个简单的REST控制器，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-provider/src/main/java/com/example/ServiceProviderApplication.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProviderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// service-provider/src/main/java/com/example/controller/HelloController.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from Service Provider!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤2：创建服务消费者"><a href="#步骤2：创建服务消费者" class="headerlink" title="步骤2：创建服务消费者"></a>步骤2：创建服务消费者</h3><p>接下来，我们创建一个服务消费者，它将使用Feign客户端来调用服务提供者的API。</p><ol><li>创建另一个Spring Boot项目，例如命名为<code>service-consumer</code>。</li><li>添加必要的依赖，包括<code>Spring Boot Web</code>和<code>Spring Cloud OpenFeign</code>。</li></ol><p>在<code>pom.xml</code>中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>启用Feign客户端，在主应用类上添加<code>@EnableFeignClients</code>注解：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-consumer/src/main/java/com/example/ServiceConsumerApplication.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个Feign客户端接口，用于定义要调用的服务提供者的API：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-consumer/src/main/java/com/example/client/HelloClient.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;service-provider&quot;, url = &quot;http://localhost:8080&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在服务消费者中使用Feign客户端：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-consumer/src/main/java/com/example/controller/ConsumerController.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloClient helloClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consume&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">consumeHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helloClient.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><ol><li>启动<code>service-provider</code>服务。</li><li>启动<code>service-consumer</code>服务。</li><li>访问<code>http://localhost:8081/consume</code>（假设<code>service-consumer</code>运行在8081端口），你应该能看到从<code>service-provider</code>返回的问候信息。</li></ol><p>这个示例展示了如何使用Feign客户端来简化服务间的HTTP通信。Feign通过注解定义了服务接口，使得服务消费者可以像调用本地方法一样调用远程服务。</p><h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>gRPC 是一个高性能、通用的开源 RPC 框架，其由 Google 2015 年主要面向移动应用开发并基于 HTTP&#x2F;2 协议标准而设计，基于 ProtoBuf 序列化协议开发，且支持众多开发语言。</p><p>gRPC支持跨语言使用、基于IDL文件定义服务、通信协议基于标准的HTTP&#x2F;2设计、序列化支持PB</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261925561.png" alt="img"></p><p>GRPC是<a href="https://so.csdn.net/so/search?q=RPC%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">RPC框架</a>中的一种，是一个高性能，开源和通用的RPC框架，基于Protobuf序列化协议开发，且支持众多开发语言。</p><p>面向服务端和协议端，基于http&#x2F;2设计，带来诸如双向流，流控，头部压缩，单TCP连接上的多路复用请求等特性。这些特性使得其在移动设备上表现的更好，更省电和节省空间。</p><p>在GRPC里客户端可以向调用本地对象一样直接调用另一台不同机器上服务端医用的方法，使得您能够更容易地创建分布式应用和服务。</p><p>与许多RPC系统类似，GRPC也是基于以下理念：定义一个服务，指定其能够被远程调用的方法。在服务端实现这个接口。并运行一个GRPC服务器来处理客户端调用。在客户端拥有一个存根能够向服务端一样的方法。</p><h3 id="GRPC特性以及应用场景"><a href="#GRPC特性以及应用场景" class="headerlink" title="GRPC特性以及应用场景"></a>GRPC特性以及应用场景</h3><p><strong>（1）特性：</strong></p><p>grpc可以跨语言使用。支持多种语言 支持C++、Java、Go、Python、Ruby、C#、Node.js、Android Java、Objective-C、PHP等编程语言。</p><p>基于 IDL ( 接口定义语言)文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub。</p><p>通信协议基于标准的 HTTP&#x2F;2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量。</p><p>序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，基于 HTTP&#x2F;2 + PB, 保障了 RPC 调用的高性能。</p><ul><li>安装简单，扩展方便（用该框架每秒可达到百万个RPC）</li></ul><p><strong>（2）使用场景：</strong></p><ul><li><p>微服务：gRPC 设计用于低延迟和高吞吐量通信。 gRPC 对于效率至关重要的轻量级微服务非常有用。</p></li><li><p>点对点实时通信：gRPC 对双向流式传输提供出色的支持。 gRPC 服务可以实时推送消息而无需轮询。</p></li><li><p>多语言环境：gRPC 工具支持所有常用的开发语言，因此，gRPC 是多语言环境的理想选择。</p></li><li><p>网络受限环境：gRPC 消息使用 Protobuf（一种轻量级消息格式）进行序列化。 gRPC 消息始终小于等效的 JSON 消息。</p></li></ul><h3 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a>Protocol Buffers</h3><p>Protocol Buffers（protobuf）是一种轻量级、高效的数据交换格式和编程接口，由 Google 开发。它可以用于结构化数据的序列化，使得<strong>数据在网络上传输和存储时更加高效</strong>。同时<strong>ProtoBuf 是一种更加灵活、高效的数据格式</strong>，与 XML、JSON 类似，在一些高性能且对响应速度有要求的数据传输场景非常适用。</p><p>ProtoBuf 在 gRPC 的框架中主要有三个作用：定义数据结构、定义服务接口，通过序列化和反序列化方式提升传输效率。</p><blockquote><p>那为什么会提高传输效率呢？这是因为他会将这个ProtoBuf先进行序列化，然后再进行传输，即传输的是二进制数据。</p></blockquote><p>其传输的性能比JSON会快很多，即传输效率会高很多。这也就是为什么gRPC比Feign调用快的原因</p><h4 id="Java作为服务端gRPC-demo"><a href="#Java作为服务端gRPC-demo" class="headerlink" title="Java作为服务端gRPC demo"></a>Java作为服务端gRPC demo</h4><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>创建一个maven项目，创建<code>src/main/proto</code>目录，在其中添加定义好的远程API接口<code>hello.proto</code>文件；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用该proto文件可以定义交互的服务接口，基于该文件编译成的源文件可以分别复制到 client端和server端，便于两者使用</span></span><br><span class="line"></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义语法类型，通常proto3好于proto2，proto2好于proto1，如果不指定，默认使用proto2，必须位于第一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> hello; <span class="comment">// 定义作用域</span></span><br><span class="line"><span class="type">option</span> <span class="variable">java_multiple_files</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 表示下面的message不需要编译成多个java文件</span></span><br><span class="line"><span class="type">option</span> <span class="variable">java_outer_classname</span> <span class="operator">=</span> <span class="string">&quot;HelloMessage&quot;</span>; <span class="comment">// 表示下面的message编译成的java类文件的名字</span></span><br><span class="line"><span class="type">option</span> <span class="variable">java_package</span> <span class="operator">=</span> <span class="string">&quot;grpc&quot;</span>; <span class="comment">//指定该proto文件编译成的java源文件的包名</span></span><br><span class="line"></span><br><span class="line">service Hello &#123;  <span class="comment">// 定义服务</span></span><br><span class="line">  rpc <span class="title function_">sayHello</span><span class="params">(HelloRequest)</span> returns(HelloResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloRequest &#123; <span class="comment">// 定义请求的消息体</span></span><br><span class="line">  <span class="type">string</span> <span class="variable">name</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloResponse &#123; <span class="comment">// 定义回复的消息体</span></span><br><span class="line">  <span class="type">string</span> <span class="variable">message</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个fang.proto文件，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">option</span> <span class="variable">java_multiple_files</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">option</span> <span class="variable">java_package</span> <span class="operator">=</span> <span class="string">&quot;io.grpc.examples.helloworld&quot;</span>;</span><br><span class="line"><span class="type">option</span> <span class="variable">java_outer_classname</span> <span class="operator">=</span> <span class="string">&quot;HelloWorldProto&quot;</span>;</span><br><span class="line"><span class="type">option</span> <span class="variable">objc_class_prefix</span> <span class="operator">=</span> <span class="string">&quot;HLW&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> helloworld;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  rpc <span class="title function_">SayHello</span> <span class="params">(HelloRequest)</span> returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  <span class="type">string</span> <span class="variable">name</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  <span class="type">string</span> <span class="variable">message</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>pom.xml文件内容如下</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zzy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gRPC-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-netty-shaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.31.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-protobuf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.31.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-stub<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.31.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>annotations-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.53<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:3.12.0:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginId</span>&gt;</span>grpc-java<span class="tag">&lt;/<span class="name">pluginId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginArtifact</span>&gt;</span>io.grpc:protoc-gen-grpc-java:1.31.1:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile-custom<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>点击maven中的protobuf插件中的compile和custom</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926472.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926087.png" alt="img"></p><ol><li>最后的结果如下</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926115.png" alt="img"></p><h4 id="Java-server端"><a href="#Java-server端" class="headerlink" title="Java server端"></a>Java server端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc.HelloGrpc;</span><br><span class="line"><span class="keyword">import</span> grpc.HelloMessage;</span><br><span class="line"><span class="keyword">import</span> io.grpc.Server;</span><br><span class="line"><span class="keyword">import</span> io.grpc.ServerBuilder;</span><br><span class="line"><span class="keyword">import</span> io.grpc.stub.StreamObserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Server对象，监听端口来获取rpc请求，以进行下面的处理</span></span><br><span class="line">    <span class="keyword">private</span> Server server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用main方法来测试server端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ServerDemo</span> <span class="variable">serverDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动server</span></span><br><span class="line">        serverDemo.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//block 一直到退出程序</span></span><br><span class="line">        serverDemo.blockUntilShutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动一个Server实例，监听client端的请求并处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//server运行在的端口号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">50051</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给server添加监听端口号，添加 包含业务处理逻辑的类，然后启动</span></span><br><span class="line">        server = ServerBuilder.forPort(port)</span><br><span class="line">                .addService(<span class="keyword">new</span> <span class="title class_">HelloImpl</span>())</span><br><span class="line">                .build()</span><br><span class="line">                .start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞server直到关闭程序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">blockUntilShutdown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server != <span class="literal">null</span>) &#123;</span><br><span class="line">            server.awaitTermination();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * proto文件被编译后，在生成的HelloGrpc的抽象内部类HelloImplBase中包含了 proto中定义的服务接口的简单实现</span></span><br><span class="line"><span class="comment">     * 该HelloImpl类需要重写这些方法，添加需要的处理逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">extends</span> <span class="title class_">HelloGrpc</span>.HelloImplBase &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// proto文件中的sayHello服务接口被编译后，在生成的HelloGrpc的抽象内部类HelloImplBase中有一个简单的实现</span></span><br><span class="line">        <span class="comment">// 因此，在server端需要重写这个方法，添加上相应的逻辑</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(HelloMessage.HelloRequest req, StreamObserver&lt;HelloMessage.HelloResponse&gt; responseObserver)</span> &#123;</span><br><span class="line"></span><br><span class="line">            HelloMessage.<span class="type">HelloResponse</span> <span class="variable">reply</span> <span class="operator">=</span> HelloMessage.HelloResponse.newBuilder().setMessage(<span class="string">&quot;(server端的sayHello()方法处理结果) Hello,&quot;</span> + req.getName()).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用onNext()方法来通知gRPC框架把reply 从server端 发送回 client端</span></span><br><span class="line">            responseObserver.onNext(reply);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 表示完成调用</span></span><br><span class="line">            responseObserver.onCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java-Client端"><a href="#Java-Client端" class="headerlink" title="Java Client端"></a>Java Client端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc.HelloGrpc;</span><br><span class="line"><span class="keyword">import</span> grpc.HelloMessage;</span><br><span class="line"><span class="keyword">import</span> io.grpc.Channel;</span><br><span class="line"><span class="keyword">import</span> io.grpc.ManagedChannelBuilder;</span><br><span class="line"><span class="keyword">import</span> io.grpc.StatusRuntimeException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用main方法来测试client端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClientDemo</span> <span class="variable">clientDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//基于gRPC远程调用对应的方法</span></span><br><span class="line">            clientDemo.remoteCall(<span class="string">&quot;【fangyaohui】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于gRPC框架的使用步骤，进行远程调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remoteCall</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        HelloMessage.<span class="type">HelloRequest</span> <span class="variable">request</span> <span class="operator">=</span> HelloMessage.HelloRequest.newBuilder().setName(name).build();</span><br><span class="line">        HelloMessage.HelloResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 基于访问地址 创建通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span>  ManagedChannelBuilder.forAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">50051</span>).usePlaintext().build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用通道 创建一个桩（Stub）对象</span></span><br><span class="line">            HelloGrpc.<span class="type">HelloBlockingStub</span> <span class="variable">blockingStub</span> <span class="operator">=</span> HelloGrpc.newBlockingStub(channel);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过桩对象来调用远程方法</span></span><br><span class="line">            response = blockingStub.sayHello(request);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (StatusRuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;client端远程调用sayHello()的结果为：\n\n&quot;</span> + response.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>先运行server，再运行client，最后在控制台上打印如下信息。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926855.png" alt="img"></p><h3 id="gRPC项目初步理解"><a href="#gRPC项目初步理解" class="headerlink" title="gRPC项目初步理解"></a>gRPC项目初步理解</h3><p>这里以一个AgvStatus.proto来进行初步理解gRPC项目。</p><h4 id="AgvStatus-proto"><a href="#AgvStatus-proto" class="headerlink" title="AgvStatus.proto"></a>AgvStatus.proto</h4><p>使用该proto文件可以定义交互的服务接口，基于该文件编译成的源文件可以分别复制到client端和server端，便于两者使用。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926873.png" alt="img"></p><p>proto文件定义服务的接口，定义服务返回类型，类似一种标准，设计图纸。</p><ol><li>定义服务接口方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">service AgvStatusUpdateService &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    上报更新AGV状态信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  rpc <span class="title function_">updateAgvStatus</span><span class="params">(UpdateAgvStatusRequest)</span> returns (UpdateAgvStatusResponse) &#123;&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    获取单个AGV状态信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  rpc <span class="title function_">getAgvStatus</span><span class="params">(GetAgvStatusRequest)</span> returns (GetAgvStatusResponse) &#123;&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    批量查询AGV状态信息列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  rpc <span class="title function_">batchQueryAgvStatusInfoList</span><span class="params">(BatchQueryAgvStatusInfoListRequest)</span> returns (BatchQueryAgvStatusInfoListResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义消息格式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">message AgvStatus &#123;</span><br><span class="line">  <span class="type">string</span> <span class="variable">agvCode</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">pointCode</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">agvState</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">power</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">sleeping</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">speed</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">mileage</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">liftupTime</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">onlineState</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">exceptionCode</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">  <span class="type">bool</span> <span class="variable">agvLock</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message UpdateAgvStatusRequest &#123;</span><br><span class="line">    <span class="type">AgvStatus</span> <span class="variable">agvStatusInfo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="type">option</span> <span class="variable">java_multiple_files</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">option</span> <span class="variable">java_package</span> <span class="operator">=</span> <span class="string">&quot;com.kc.evo.domain.rpc&quot;</span>;</span><br><span class="line"><span class="type">option</span> <span class="variable">java_outer_classname</span> <span class="operator">=</span> <span class="string">&quot;AgvStatusInfo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;Common.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line">message AgvStatus &#123;</span><br><span class="line">  <span class="type">string</span> <span class="variable">agvCode</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">pointCode</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">agvState</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">power</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">sleeping</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">speed</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">mileage</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">liftupTime</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">onlineState</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">exceptionCode</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">  <span class="type">bool</span> <span class="variable">agvLock</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message UpdateAgvStatusRequest &#123;</span><br><span class="line">    <span class="type">AgvStatus</span> <span class="variable">agvStatusInfo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message UpdateAgvStatusResponse &#123;</span><br><span class="line">  <span class="type">bool</span> <span class="variable">success</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  option (success) = true;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetAgvStatusRequest &#123;</span><br><span class="line">  <span class="type">string</span> <span class="variable">agvCode</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetAgvStatusResponse &#123;</span><br><span class="line">  <span class="type">bool</span> <span class="variable">success</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  <span class="type">AgvStatus</span> <span class="variable">agvStatusInfo</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message BatchQueryAgvStatusInfoListRequest &#123;</span><br><span class="line">  repeated <span class="type">string</span> <span class="variable">agvCode</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message BatchQueryAgvStatusInfoListResponse &#123;</span><br><span class="line">  <span class="type">bool</span> <span class="variable">success</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">int32</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  repeated <span class="type">AgvStatus</span> <span class="variable">agvStatusInfo</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service AgvStatusUpdateService &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    上报更新AGV状态信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  rpc <span class="title function_">updateAgvStatus</span><span class="params">(UpdateAgvStatusRequest)</span> returns (UpdateAgvStatusResponse) &#123;&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    获取单个AGV状态信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  rpc <span class="title function_">getAgvStatus</span><span class="params">(GetAgvStatusRequest)</span> returns (GetAgvStatusResponse) &#123;&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    批量查询AGV状态信息列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  rpc <span class="title function_">batchQueryAgvStatusInfoList</span><span class="params">(BatchQueryAgvStatusInfoListRequest)</span> returns (BatchQueryAgvStatusInfoListResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照之前的使用compile生成如下文件。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926097.png" alt="img"></p><p>proto定义的服务也会生成一个*Grpc文件。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926154.png" alt="img"></p><h4 id="AgvDataSyncManager-server端"><a href="#AgvDataSyncManager-server端" class="headerlink" title="AgvDataSyncManager server端"></a>AgvDataSyncManager server端</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926780.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新AGV状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> responseObserver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAgvStatus</span><span class="params">(AgvStatusInfo.UpdateAgvStatusRequest request,</span></span><br><span class="line"><span class="params">                            StreamObserver&lt;AgvStatusInfo.UpdateAgvStatusResponse&gt; responseObserver)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(request == <span class="literal">null</span> || request.getAgvStatusInfo() == <span class="literal">null</span></span><br><span class="line">            || StringUtils.isBlank(request.getAgvStatusInfo().getAgvState()))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;Receive AGV status data from RCS gRPC client:&#123;&#125;&quot;</span>, request);</span><br><span class="line">    AgvStatusInfo.UpdateAgvStatusResponse updateAgvStatusResponse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//存入本地缓存</span></span><br><span class="line">        AgvCacheManager.saveAgvStatusInfo(request.getAgvStatusInfo());</span><br><span class="line"></span><br><span class="line">        updateAgvStatusResponse = AgvStatusInfo.UpdateAgvStatusResponse.newBuilder().setSuccess(<span class="literal">true</span>)</span><br><span class="line">                        .setCode(SystemErrorCodeEnum.SUCCESS.getCode())</span><br><span class="line">                        .setMsg(SystemErrorCodeEnum.SUCCESS.getMsg())</span><br><span class="line">                        .build();</span><br><span class="line">        responseObserver.onNext(updateAgvStatusResponse);</span><br><span class="line">        responseObserver.onCompleted();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        updateAgvStatusResponse = AgvStatusInfo.UpdateAgvStatusResponse.newBuilder().setSuccess(<span class="literal">true</span>)</span><br><span class="line">                .setCode(RpcBizErrorEnum.UPDATE_AGV_REALTIME_STATUS_FAILED.getCode())</span><br><span class="line">                .setMsg(RpcBizErrorEnum.UPDATE_AGV_REALTIME_STATUS_FAILED.getMsg())</span><br><span class="line">                .build();</span><br><span class="line">        responseObserver.onNext(updateAgvStatusResponse);</span><br><span class="line">        responseObserver.onError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端继承上面配置生成的AgvStatusUpdateServiceGrpc.AgvStatusUpdateServiceImplBase。在这里需要对之前proto的配置文件中定义的方法进行实现。</p><p>上面的配置文件定义了三种方法，那么这里也需要实现三种方法，这里只对第一种方法进行了解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新AGV状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> responseObserver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAgvStatus</span><span class="params">(AgvStatusInfo.UpdateAgvStatusRequest request,</span></span><br><span class="line"><span class="params">                            StreamObserver&lt;AgvStatusInfo.UpdateAgvStatusResponse&gt; responseObserver)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(request == <span class="literal">null</span> || request.getAgvStatusInfo() == <span class="literal">null</span></span><br><span class="line">            || StringUtils.isBlank(request.getAgvStatusInfo().getAgvState()))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;Receive AGV status data from RCS gRPC client:&#123;&#125;&quot;</span>, request);</span><br><span class="line">    AgvStatusInfo.UpdateAgvStatusResponse updateAgvStatusResponse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//存入本地缓存</span></span><br><span class="line">        AgvCacheManager.saveAgvStatusInfo(request.getAgvStatusInfo());</span><br><span class="line"></span><br><span class="line">        updateAgvStatusResponse = AgvStatusInfo.UpdateAgvStatusResponse.newBuilder().setSuccess(<span class="literal">true</span>)</span><br><span class="line">                        .setCode(SystemErrorCodeEnum.SUCCESS.getCode())</span><br><span class="line">                        .setMsg(SystemErrorCodeEnum.SUCCESS.getMsg())</span><br><span class="line">                        .build();</span><br><span class="line">        responseObserver.onNext(updateAgvStatusResponse);</span><br><span class="line">        responseObserver.onCompleted();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        updateAgvStatusResponse = AgvStatusInfo.UpdateAgvStatusResponse.newBuilder().setSuccess(<span class="literal">true</span>)</span><br><span class="line">                .setCode(RpcBizErrorEnum.UPDATE_AGV_REALTIME_STATUS_FAILED.getCode())</span><br><span class="line">                .setMsg(RpcBizErrorEnum.UPDATE_AGV_REALTIME_STATUS_FAILED.getMsg())</span><br><span class="line">                .build();</span><br><span class="line">        responseObserver.onNext(updateAgvStatusResponse);</span><br><span class="line">        responseObserver.onError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>public void updateAgvStatus(AgvStatusInfo.UpdateAgvStatusRequest request,</code>: 这是一个公共方法的声明，方法名为 <code>updateAgvStatus</code>。该方法接受两个参数：第一个参数是类型为 <code>AgvStatusInfo.UpdateAgvStatusRequest</code> 的 <code>request</code>，用于接收更新 AGV 状态的请求信息；第二个参数是类型为 <code>StreamObserver&lt;AgvStatusInfo.UpdateAgvStatusResponse&gt;</code> 的 <code>responseObserver</code>，用于接收更新 AGV 状态的响应信息。</li><li><code>StreamObserver&lt;AgvStatusInfo.UpdateAgvStatusResponse&gt;</code>：这是一个 gRPC 中用于处理异步流的接口。在这里，<code>responseObserver</code> 参数用于接收从服务器返回的异步流数据，该数据的类型是 <code>AgvStatusInfo.UpdateAgvStatusResponse</code>。</li></ol><h4 id="Client-Stub"><a href="#Client-Stub" class="headerlink" title="Client Stub"></a>Client Stub</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926934.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926420.png" alt="image-20240628144221050"></p><p>之前我们介绍了stub的作用，让我们来回顾一下。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926464.png" alt="image-20240628144307052"></p><p>那么客户端的stub需要绑定这个消息需要发送的服务地址以及如何把方法和参数包装成网络传输的消息体。在这里通过代码</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926426.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DataSyncBaseClient</span><span class="params">(RpcProperties rpcProperties)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.rpcProperties = rpcProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(rpcProperties == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(rpcProperties.getInterceptorEnabled())&#123;</span><br><span class="line">        <span class="built_in">this</span>.managedChannel = ManagedChannelBuilder.forTarget(rpcProperties.getServerAddr())</span><br><span class="line">                .usePlaintext().intercept(<span class="keyword">new</span> <span class="title class_">EvoDataSyncClientInterceptor</span>()).build();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.managedChannel = ManagedChannelBuilder.forTarget(rpcProperties.getServerAddr()).usePlaintext().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来配置服务端的地址。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926899.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926306.png" alt="img"></p><h4 id="Client发送请求"><a href="#Client发送请求" class="headerlink" title="Client发送请求"></a>Client发送请求</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926132.png" alt="image-20240628144332666"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">AgvStatusSyncClient agvStatusSyncClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询AGV实时状态信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> agvCode AGV编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AgvStatusInfoDTO <span class="title function_">getAgvStatusInfo</span><span class="params">(String agvCode)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isBlank(agvCode))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AgvStatusInfo.<span class="type">GetAgvStatusRequest</span> <span class="variable">request</span> <span class="operator">=</span> AgvStatusInfo.GetAgvStatusRequest.newBuilder()</span><br><span class="line">            .setAgvCode(agvCode).build();</span><br><span class="line">    AgvStatusInfo.<span class="type">GetAgvStatusResponse</span> <span class="variable">response</span> <span class="operator">=</span> agvStatusSyncClient.getAgvStatusInfo(request);</span><br><span class="line">    <span class="keyword">if</span>(response == <span class="literal">null</span> || response.getAgvStatusInfo() == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DozerBeanUtil.map(response.getAgvStatusInfo(), AgvStatusInfoDTO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AgvStatusInfo.<span class="type">GetAgvStatusResponse</span> <span class="variable">response</span> <span class="operator">=</span> agvStatusSyncClient.getAgvStatusInfo(request);</span><br></pre></td></tr></table></figure><p>来对server端方法进行调用，同时得到服务端传来的response。</p><h3 id="Feign和gRPC的区别"><a href="#Feign和gRPC的区别" class="headerlink" title="Feign和gRPC的区别"></a>Feign和gRPC的区别</h3><p>Feign就像是一个简单直观的便签系统，适合快速交流和适应性强，但可能在效率和精确性上不如gRPC。而gRPC则像是高效的无线电通讯系统，适合需要快速、准确和跨部门协作的场景。选择哪种沟通方式，取决于餐厅的具体需求和环境。如果你的餐厅需要快速响应顾客需求，并且注重沟通的效率和准确性，gRPC可能是更好的选择。如果你的餐厅更注重简单易用和快速上手，Feign可能更适合你。</p><ul><li><strong>gRPC</strong>：适合<strong>高性能、低延迟、跨语言</strong>的服务调用，但可能需要额外的配置和集成。</li><li><strong>Feign</strong>：适合Java生态系统，简化了HTTP客户端的开发，易于集成服务发现和容错机制。</li></ul><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/kenkao/article/details/129611552?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171955633116800197019886%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171955633116800197019886&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-129611552-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=Dubbo%20Feign&spm=1018.2226.3001.4187">【优质推荐】深入探讨Dubbo与Feign的区别</a></li><li><a href="https://blog.csdn.net/weixin_42039228/article/details/123678364?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171955590416800211576717%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171955590416800211576717&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123678364-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=dubbo&spm=1018.2226.3001.4187">Dubbo详解，用心看这一篇文章就够了【重点】</a></li><li><a href="https://cn.dubbo.apache.org/zh-cn/overview/home/">Dubbo 文档</a></li><li><a href="https://nacos.io/zh-cn/docs/use-nacos-with-dubbo.html">Dubbo 融合 Nacos 成为注册中心</a></li><li></li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Dubbo是阿里巴巴开源的基于 <strong>Java 的高性能</strong> <strong>RPC</strong>（一种远程调用） 分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。</p><p>每天为2千多个服务提供大于30亿次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点以及别的公司的业务中。</p><p>简单的说，<strong>Dubbo就是个服务框架</strong>，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有Dubbo这样的分布式服务框架的需求。</p><p>并且本质上是个远程服务调用的分布式框架（告别Web Service模式中的WSdl，以服务者与消费者的方式在Dubbo上注册）</p><ul><li>Dubbo是<strong>阿里巴巴</strong>公司开源的一个高性能、<strong>轻量级的 Java RPC 框架</strong>。</li><li>致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。</li><li>官网：<a href="http://dubbo.apache.org/">http://dubbo.apache.org</a></li></ul><h3 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926040.png" alt="img"></p><p>上图中，蓝色的表示与业务有交互，绿色的表示只对Dubbo内部交互。上述图所描述的调用流程如下：</p><ol><li>服务提供方发布服务到服务注册中心；</li><li>服务消费方从服务注册中心订阅服务；</li><li>服务消费方调用已经注册的可用服务</li></ol><h3 id="Dubbo快速入门"><a href="#Dubbo快速入门" class="headerlink" title="Dubbo快速入门"></a>Dubbo快速入门</h3><ul><li>创建服务提供者Provider模块</li><li>创建服务消费者Consumer模块</li><li>在服务提供者模块编写 UserServiceImpl 提供服务</li><li>在服务消费者中的 UserController 远程调用UserServiceImpl 提供的服务</li><li>分别启动两个服务，测试。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261926409.png" alt="image-20240723164207399"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17 Spring Cloud Gateway</title>
      <link href="/2025/02/26/17%20Spring%20Cloud%20Gateway/"/>
      <url>/2025/02/26/17%20Spring%20Cloud%20Gateway/</url>
      
        <content type="html"><![CDATA[<h1 id="17-Spring-Cloud-Gateway"><a href="#17-Spring-Cloud-Gateway" class="headerlink" title="17 Spring Cloud Gateway"></a>17 Spring Cloud Gateway</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>[Spring Cloud Gateway 服务网关的部署与使用详细介绍_gateway网关-CSDN博客](<a href="https://blog.csdn.net/a745233700/article/details/122917167?ops_request_misc=%7B%22request_id%22:%22171524649116800180640296%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171524649116800180640296&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122917167-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=spring">https://blog.csdn.net/a745233700/article/details/122917167?ops_request_misc=%7B%22request%5Fid%22%3A%22171524649116800180640296%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171524649116800180640296&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122917167-null-null.142^v100^pc_search_result_base1&amp;utm_term=spring</a> gateway&amp;spm&#x3D;1018.2226.3001.4187)</li><li><a href="https://www.cnblogs.com/tellerfuliye/articles/14302596.html">https://www.cnblogs.com/tellerfuliye/articles/14302596.html</a></li></ol><h2 id="什么是服务网关"><a href="#什么是服务网关" class="headerlink" title="什么是服务网关"></a>什么是服务网关</h2><p>在服务网关出现之前，我们的业务还是基于传统的单体架构，即我们的业务都放在一个微服务中。随着计算机的发展，我们的业务也越来越多，这时候如果把所有业务都放在一个微服务中，很难去维护，那么就提出了微服务架构，即把一个系统划分成多个微服务。</p><p>但是把系统划分多个微服务后会出现一个比较麻烦的问题。前端调用一个后端接口时就需要知道这个接口在哪个微服务，这个微服务的地址是什么？我们可以这样理解，客户端的请求就是一个人带着消息来到了我们的小区，但是这个消息该给谁呢？这个人得去自己寻找地址，这个工作量很大。</p><p>这时候人们就提出了网关的概念，那么什么是网关呢？我们简单的理解，网关就是我们小区门口的门卫。当客户端的请求，即这个请求人带着消息来到了我们小区，询问门卫这个消息该给谁，门卫一看消息头，就直接把地址告知了这个请求人。这样是不是简单了些。</p><p>那么这样前端的所有请求都可以直接给这个网关（门卫），简化了客户端的工作。</p><h2 id="服务网关的基本功能"><a href="#服务网关的基本功能" class="headerlink" title="服务网关的基本功能"></a>服务网关的基本功能</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929869.png" alt="img"></p><h2 id="流量网关-服务网关"><a href="#流量网关-服务网关" class="headerlink" title="流量网关&amp;服务网关"></a>流量网关&amp;服务网关</h2><p>我们先来看一张图</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929405.png" alt="img"></p><p>从这个图中可以看出来什么吗？很明显流量网关先于服务网关，那么流量网关的作用什么呢？</p><p>来看个比喻：</p><blockquote><p>服务网关就像是酒店大堂的门童，负责引导客人到正确的服务区域；而流量网关则是大堂外的检查站，负责过滤和处理不同来源的流量，确保只有合法的流量能够进入到服务网关之后的服务区域。</p></blockquote><p>即流量网关需要过滤掉所有非法的流量，确保只有正确的请求消息进入我们的服务器。</p><h2 id="服务网关类型对比"><a href="#服务网关类型对比" class="headerlink" title="服务网关类型对比"></a>服务网关类型对比</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929445.png" alt="img"></p><h2 id="Spring-Cloud-Gateway网关搭建"><a href="#Spring-Cloud-Gateway网关搭建" class="headerlink" title="Spring Cloud Gateway网关搭建"></a>Spring Cloud Gateway网关搭建</h2><p>我们以智慧加油站项目中的网关微服务为例，来介绍一下Gateway网关搭建的过程。</p><h3 id="添加Gateway网关依赖"><a href="#添加Gateway网关依赖" class="headerlink" title="添加Gateway网关依赖"></a>添加Gateway网关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>记得知名版本号。</p><blockquote><p>可能需要在这个依赖里排除spring-boot-starter-web依赖，不然可能出现启动错误</p><!-- 引入gateway网关 --><dependency><p>​        <groupId>org.springframework.cloud</groupId></p><p>​        <artifactId>spring-cloud-starter-gateway</artifactId></p><p>​        <exclusions></p><p>​        <exclusion></p><p>​                        <groupId>org.springframework.boot</groupId></p><p>​                <artifactId>spring-boot-starter-web</artifactId></p><p>​        </exclusion></p><p>​    </exclusions></p></dependency></blockquote><h3 id="Spring-Cloud-Gateway配置项"><a href="#Spring-Cloud-Gateway配置项" class="headerlink" title="Spring Cloud Gateway配置项"></a>Spring Cloud Gateway配置项</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      # 路由数组：指当请求满足什么样的断言时，转发到哪个服务上</span><br><span class="line">      routes:</span><br><span class="line">        # 路由标识，要求唯一，名称任意</span><br><span class="line">        - id: gateway-provider_1</span><br><span class="line">                  # 请求最终被转发到的目标地址</span><br><span class="line">          uri: http://localhost:9024</span><br><span class="line">          # 设置断言</span><br><span class="line">          predicates:</span><br><span class="line">            # Path Route Predicate Factory 断言，满足 /gateway/provider/** 路径的请求都会被路由到 http://localhost:9024 这个uri中</span><br><span class="line">            - Path=/gateway/provider/**</span><br><span class="line">            # Weight Route Predicate Factory 断言，同一分组按照权重进行分配流量，这里分配了80%</span><br><span class="line">            # 第一个group1是分组名，第二个参数是权重</span><br><span class="line">            - Weight=group1, 8</span><br><span class="line">          # 配置过滤器（局部）</span><br><span class="line">          filters:</span><br><span class="line">            # StripPrefix：去除原始请求路径中的前1级路径，即/gateway</span><br><span class="line">            - StripPrefix=1            </span><br><span class="line">            </span><br><span class="line">        - id: gateway-provider_2</span><br><span class="line">          uri: http://localhost:9025</span><br><span class="line">          # 设置断言</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/gateway/provider/**</span><br><span class="line">            # Weight Route Predicate Factory，同一分组按照权重进行分配流量，这里分配了20%</span><br><span class="line">            - Weight=group1, 2</span><br><span class="line">                  # 配置过滤器（局部）</span><br><span class="line">          filters:</span><br><span class="line">            # StripPrefix：去除原始请求路径中的前1级路径，即/gateway</span><br><span class="line">            - StripPrefix=1            </span><br></pre></td></tr></table></figure><h2 id="Spring-Security-Spring-Gateway"><a href="#Spring-Security-Spring-Gateway" class="headerlink" title="Spring Security&amp;Spring Gateway"></a>Spring Security&amp;Spring Gateway</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>分布式开发时，微服务会有很多，但是网关是请求的第一入口，所以一般会把客户端请求的权限验证统一放在网关进行认证与鉴权。SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，为了提升网关的性能，<strong>SpringCloud Gateway是基于WebFlux框架实现的</strong>，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929908.webp" alt="img"></p><p>在SpringGateway中已经依赖了Web Flux，所以才会有gateway中不能依赖Web，否则会有两个Web从而造成冲突。</p><p>如果需要在gateway中引入Security，那么Security就需要使用Web Flux来实现。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929890.png" alt="image-20240718103823906"></p><p>首先需要配置@EnableWebFluxSecurity注解，开启Spring WebFlux Security的支持</p><h3 id="Security配置"><a href="#Security配置" class="headerlink" title="Security配置"></a>Security配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.demo.comfangdemogateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fang.demo.comfangdemogateway.filter.ScFilter;</span><br><span class="line"><span class="keyword">import</span> com.fang.demo.comfangdemogateway.handler.ScAccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> com.fang.demo.comfangdemogateway.handler.ScAuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> com.fang.demo.comfangdemogateway.manager.ScAuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> com.fang.demo.comfangdemogateway.manager.ScAuthorizationManager;</span><br><span class="line"><span class="keyword">import</span> com.fang.demo.comfangdemogateway.repository.ScSecurityContextRepository;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.web.server.SecurityWebFiltersOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.web.server.ServerHttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.server.SecurityWebFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fangyaohui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> WebSecurityConfig SpringSecurity核心配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/7/17 22:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Resource</span></span><br><span class="line"><span class="comment">//    PasswordEncoder passwordEncoder;</span></span><br><span class="line"></span><br><span class="line">    ScSecurityContextRepository scSecurityContextRepository;</span><br><span class="line"></span><br><span class="line">    ScAuthenticationManager scAuthenticationManager;</span><br><span class="line"></span><br><span class="line">    ScAuthorizationManager scAuthorizationManager;</span><br><span class="line"></span><br><span class="line">    ScAccessDeniedHandler scAccessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    ScAuthenticationEntryPoint scAuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问权限授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .securityContextRepository(scSecurityContextRepository) <span class="comment">//存储认证信息</span></span><br><span class="line">                .authenticationManager(scAuthenticationManager) <span class="comment">//认证管理</span></span><br><span class="line">                .authorizeExchange(exchange -&gt; exchange <span class="comment">// 请求拦截处理</span></span><br><span class="line">                        .pathMatchers(<span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;/userw/**&quot;</span>).permitAll()</span><br><span class="line">                        .pathMatchers(HttpMethod.OPTIONS).permitAll()</span><br><span class="line">                        .anyExchange().access(scAuthorizationManager) <span class="comment">//权限</span></span><br><span class="line">                )</span><br><span class="line">                .addFilterAfter(<span class="keyword">new</span> <span class="title class_">ScFilter</span>(), SecurityWebFiltersOrder.AUTHORIZATION) <span class="comment">//拦截处理</span></span><br><span class="line">                .exceptionHandling().accessDeniedHandler(scAccessDeniedHandler) <span class="comment">//权限认证失败</span></span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(scAuthenticationEntryPoint); <span class="comment">//认证失败</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置是为了告知这个服务需要支持Security，</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929619.png" alt="image-20240718112834137"></p><h3 id="认证处理逻辑"><a href="#认证处理逻辑" class="headerlink" title="认证处理逻辑"></a>认证处理逻辑</h3><p>在AuthenticationManager中负责从请求头中读取Token，并验证当前Token是否正确和是否在有效期中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.demo.comfangdemogateway.manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.ReactiveAuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> po.UserInfoPO;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fangyaohui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ScAuthenticationManager 从AuthenticationToken中读取Token并做用户数据分析</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/7/17 22:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScAuthenticationManager</span> <span class="keyword">implements</span> <span class="title class_">ReactiveAuthenticationManager</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Authentication&gt; <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenString</span> <span class="operator">=</span> (String) authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验Token是否合法</span></span><br><span class="line">        <span class="type">UserInfoPO</span> <span class="variable">user</span> <span class="operator">=</span> parseToken(tokenString);</span><br><span class="line">        log.info(<span class="string">&quot;ScAuthenticationManager scUser = &#123;&#125;&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Mono.just(authentication).map(auth -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoPO <span class="title function_">parseToken</span><span class="params">(String tokenString)</span> &#123;</span><br><span class="line">        <span class="comment">//读取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> getJwtToken(tokenString);</span><br><span class="line">        log.info(<span class="string">&quot;ScAuthenticationManager jwtToken = &#123;&#125;&quot;</span>, jwtToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟认证成功</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(jwtToken) &amp;&amp; jwtToken.startsWith(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">UserInfoPO</span> <span class="variable">userInfoPO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfoPO</span>();</span><br><span class="line">            userInfoPO.setId(<span class="number">2L</span>);</span><br><span class="line">            userInfoPO.setUserName(<span class="string">&quot;fangyaohui&quot;</span>);</span><br><span class="line">            userInfoPO.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            userInfoPO.setRoleId(<span class="number">1L</span>);</span><br><span class="line">            <span class="keyword">return</span> userInfoPO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取Jwt Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authorization</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getJwtToken</span><span class="params">(String authorization)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(authorization)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">valid</span> <span class="operator">=</span> authorization.startsWith(<span class="string">&quot;Bearer &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authorization.replace(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鉴权处理逻辑"><a href="#鉴权处理逻辑" class="headerlink" title="鉴权处理逻辑"></a>鉴权处理逻辑</h3><p> ScAuthorizationManager 权限验证 是否通过，在下面的代码中没有实现具体的鉴权逻辑，在后续的开发中可以根据具体的情况来进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.demo.comfangdemogateway.manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authorization.AuthorizationDecision;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authorization.ReactiveAuthorizationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.server.authorization.AuthorizationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> po.UserInfoPO;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fangyaohui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ScAuthorizationManager 权限验证 是否通过</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/7/17 22:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScAuthorizationManager</span> <span class="keyword">implements</span> <span class="title class_">ReactiveAuthorizationManager</span>&lt;AuthorizationContext&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;AuthorizationDecision&gt; <span class="title function_">check</span><span class="params">(Mono&lt;Authentication&gt; authentication, AuthorizationContext object)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authentication.map(auth -&gt; &#123;</span><br><span class="line">            <span class="type">UserInfoPO</span> <span class="variable">userInfoPO</span> <span class="operator">=</span> (UserInfoPO) auth.getPrincipal();</span><br><span class="line">            log.info(<span class="string">&quot;ScAuthorizationManager scUser = &#123;&#125;&quot;</span>, userInfoPO);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(userInfoPO)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;).defaultIfEmpty(<span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ScSecurityContextRepository"><a href="#ScSecurityContextRepository" class="headerlink" title="ScSecurityContextRepository"></a>ScSecurityContextRepository</h3><p>读取请求头中的Token放入AuthenticationToken中，方便后续的认证和鉴权服务直接获取到Token。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.demo.comfangdemogateway.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fang.demo.comfangdemogateway.manager.ScAuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.server.context.ServerSecurityContextRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fangyaohui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ScSecurityContextRepository 把header拿到的token放入AuthenticationToken</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/7/17 22:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScSecurityContextRepository</span> <span class="keyword">implements</span> <span class="title class_">ServerSecurityContextRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScAuthenticationManager scAuthenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">save</span><span class="params">(ServerWebExchange exchange, SecurityContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;SecurityContext&gt; <span class="title function_">load</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeaders().getFirst(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;ScSecurityContextRepository authorization = &#123;&#125;&quot;</span>, authorization);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scAuthenticationManager</span><br><span class="line">                .authenticate(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(authorization, <span class="literal">null</span>))</span><br><span class="line">                .map(SecurityContextImpl::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证失败-鉴权失败"><a href="#认证失败-鉴权失败" class="headerlink" title="认证失败&amp;鉴权失败"></a>认证失败&amp;鉴权失败</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.demo.comfangdemogateway.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.server.authorization.ServerAccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fangyaohui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ScAccessDeniedHandler 权限认证失败执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/7/17 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">ServerAccessDeniedHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange exchange, AccessDeniedException denied)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">        response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;000000&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;未授权禁止访问&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;access forbidden path=&#123;&#125;&quot;</span>, exchange.getRequest().getPath());</span><br><span class="line"></span><br><span class="line">        <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> response.bufferFactory().wrap(JSON.toJSONBytes(map));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(dataBuffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.demo.comfangdemogateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fangyaohui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ScFilter 请求通过后的额外操作处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/7/17 22:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;UserFilter doing.... path=&#123;&#125;&quot;</span>, exchange.getRequest().getPath());</span><br><span class="line"></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">if</span>(!Objects.isNull(authentication))&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authentication.getPrincipal();</span><br><span class="line">            log.info(<span class="string">&quot;UserFilter doing principal=&#123;&#125;&quot;</span>, principal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>执行的先后顺序：</p><ol><li>ScSecurityContextRepository 从请求头中读取Token放入AuthenticationToken中；</li><li>ScAuthenticationManager 读取Token验证当前Token是否有效正确；</li><li>ScAuthorizationManager 验证当前用户是否有权限访问该资源；</li><li>如果第2和第3没有权限访问，则会执行对应的失败处理逻辑；</li><li>ScFilter Security 过滤器；</li><li>gateway自定义的过滤器；</li><li>转发请求。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在SpringGateway引入SpringSecurity的整个流程中，我们需要定义Security服务，也就是定义一个Security配置类，接着定义从请求头中读取Token并放入AuthenticationToken中的服务，然后定义认证和授权处理逻辑，接着定义认证和授权失败处理逻辑，最后定义拦截器，整个流程就很清晰了。</p><h2 id="Spring-Cloud-Gateway遇到的问题"><a href="#Spring-Cloud-Gateway遇到的问题" class="headerlink" title="Spring Cloud Gateway遇到的问题"></a>Spring Cloud Gateway遇到的问题</h2><h3 id="reactor-netty-http-client-PrematureCloseException-Connection-prematurely-closed-BEFORE-response解决方案"><a href="#reactor-netty-http-client-PrematureCloseException-Connection-prematurely-closed-BEFORE-response解决方案" class="headerlink" title="reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response解决方案"></a>reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response解决方案</h3><p>在项目开发中，遇到了一个问题，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929572.png" alt="image-20240927231313622"></p><p>在请求网关获取图片的时候，有时可以成功，有时失败，看图中最下面同样的一个请求却又请求成功了。</p><p>到网关去查看原因，网关报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response</span><br><span class="line"></span><br><span class="line">2024-09-27 23:01:49.100 ERROR 19536 --- [ctor-http-nio-4] a.w.r.e.AbstractErrorWebExceptionHandler : [bd934039-327]  500 Server Error for HTTP GET &quot;/api/blog/resource/getImage/61e8acd8-d6d4-40d0-b77d-c841cb57e861_1727081923177.png&quot;</span><br><span class="line"></span><br><span class="line">reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response</span><br><span class="line">Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: </span><br><span class="line">Error has been observed at the following site(s):</span><br><span class="line">*__checkpoint ⇢ org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ com.fang.screw.gateway.filter.ScFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ com.fang.screw.gateway.filter.DecryptFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]</span><br><span class="line">*__checkpoint ⇢ HTTP GET &quot;/api/blog/resource/getImage/61e8acd8-d6d4-40d0-b77d-c841cb57e861_1727081923177.png&quot; [ExceptionHandlingWebHandler]</span><br><span class="line">Original Stack Trace:</span><br></pre></td></tr></table></figure><p>开始以为是前端设置的过期时间太短了，就重新设置，无果，故开始查询相关资料来找到该原因。</p><p>搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response</span><br></pre></td></tr></table></figure><p>一篇博客：<a href="https://blog.csdn.net/rickiyeat/article/details/107900585">reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response解决方案</a></p><p>问题不在于SpringCloudGateway，而是在于Reactor-Netty：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929527.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261929204.png" alt="image-20240927232117438"></p><p>这里使用一个Spring Boot内置Tomcat作为服务提供方，用户通过SCG访问，SCG代理请求。</p><p>默认情况下，SCG内部创建的连接是不会被回收的，一直存在于内存中，而Spring Boot内置的Tomcat不一样，默认在20s之后没有数据交互，便会回收掉这个连接，在回收的时候恰巧碰到又来了请求，刚好又在SCG拿到这个连接来尝试请求Tomcat，就会出现这个异常。</p><p>所以，不要指望在Reactor-Netty或是SCG中解决这个问题，这需要网关和后端服务配合解决，最大限度不出现这个异常。</p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">第1步、加入JVM参数：</span><br><span class="line">-Dreactor.netty.pool.leasingStrategy=lifo</span><br><span class="line"></span><br><span class="line">第2步、SCG新增配置：</span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      httpclient:</span><br><span class="line">        pool:</span><br><span class="line">          max-idle-time: 1</span><br><span class="line">          max-life-time: 1000</span><br><span class="line">          max-connections: 10</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18 Nginx</title>
      <link href="/2025/02/26/18%20Nginx/"/>
      <url>/2025/02/26/18%20Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="18-Nginx"><a href="#18-Nginx" class="headerlink" title="18 Nginx"></a>18 Nginx</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/weixin_43412762/article/details/135441281?ops_request_misc=%7B%22request_id%22:%22171524931716800178532041%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171524931716800178532041&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-135441281-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=nignx&spm=1018.2226.3001.4187">一文快速搞懂Nginx —— Nginx 详解</a></li><li><a href="https://blog.csdn.net/fanjufei123456/article/details/128685801?ops_request_misc=%7B%22request_id%22:%22171524931716800178532041%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171524931716800178532041&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-128685801-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=nignx&spm=1018.2226.3001.4187">【Nginx】入门看这一篇就够啦，nginx 简介、安装、工作原理、工作方式、详解配置文件</a></li><li><a href="https://blog.csdn.net/qq_42402854/article/details/132843413?ops_request_misc=%7B%22request_id%22:%22171524972116800178511332%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171524972116800178511332&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-132843413-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=nignx%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&spm=1018.2226.3001.4187">Nginx配置文件详解</a></li><li></li></ul><h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><blockquote><p>Nginx 同 Apache 一样都是一种 Web 服务器。基于 REST 架构风格，以统一资源描述符（Uniform Resources Identifier）URI 或者 统一资源定位符（Uniform Resources Locator）URL 作为沟通依据，通过 HTTP 协议 提供各种网络服务。</p><p>Nginx是一款 轻量级 的 Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p></blockquote><p><strong>Nginx</strong>是一个高性能、灵活和可扩展的<a href="https://so.csdn.net/so/search?q=Web&spm=1001.2101.3001.7020">Web</a>服务器和代理服务器，适用于各种场景，包括静态文件服务、反向代理、负载均衡和动态内容处理等。</p><h2 id="正向代理-反向代理"><a href="#正向代理-反向代理" class="headerlink" title="正向代理&amp;反向代理"></a>正向代理&amp;反向代理</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261930286.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261930877.png" alt="img"></p><p>通过图可以明显的看出他们两者的区别。</p><p>正向代理就是代理的用户，而且用户是知道访问目标是哪个的。</p><p>反向代理代理的是服务端，这就是反向的意思。同时用户的请求会被哪个处理是不清楚的，这部分对于客户端来说是透明的。</p><p>在智慧加油站项目中使用了反向代理，为什么需要进行反向代理呢？</p><blockquote><p><strong>隐藏真实服务器</strong>：通过反向代理，可以隐藏真实的服务器架构和拓扑结构，使得客户端无法直接访问到后端服务器。这提高了服务器的安全性，防止了直接暴露服务器的 IP 地址和内部结构。</p><p><strong>缓存静态内容</strong>：反向代理可以缓存静态内容，例如图片、CSS、JavaScript 等，从而减轻后端服务器的负担，并提高网站的访问速度和性能。</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p><strong>负载均衡</strong>（Load Balance）其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><blockquote><p>简单来说就是：现有的请求使服务器压力太大无法承受，所有我们需要搭建一个服务器集群，去分担原先一个服务器所承受的压力，那现在我们有ABCD等等多台服务器，我们需要把请求分给这些服务器，但是服务器可能大小也有自己的不同，所以怎么分？如何分配更好？又是一个问题。</p></blockquote><p>Nginx关于负载均衡的方式有三种实现方式</p><ol><li>轮询法</li></ol><p>顾名思义，按照时间顺序，轮到谁了就把这个请求交给谁去处理</p><ol><li>加权轮询</li></ol><p>每个服务器接收不同数量的请求，即分配权重。但是这样会出现请求访问其他服务器时，没有该用户登录信息的问题。</p><ol><li>ip_hash</li></ol><p>我们可以采用 <code>ip_hash</code> 指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过<strong>哈希算法</strong>，自动定位到该服务器。每个请求按访问 <code>ip</code> 的 <code>hash</code> 结果分配，这样每个访客<strong>固定访问</strong>一个后端服务器，可以解决 <code>session</code> 的问题。</p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p> 动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、 js 等文件），这些不需要经过后台处理的文件称为 静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开，动态资源做好了拆分以后，我们就可以根据 静态资源 的特点将其做缓存操作，以提高资源的响应速度。</p><blockquote><p>当用户请求目标是静态数据时，这时候就不需要让后端对这个请求处理了，因为静态数据是不变的，所以就可以让Nginx直接处理，减低服务端的压力。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261930115.png" alt="img"></p><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><p>Nginx配置文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx]# tree</span><br><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   ├── fastcgi.conf</span><br><span class="line">│   ├── fastcgi.conf.default</span><br><span class="line">│   ├── fastcgi_params</span><br><span class="line">│   ├── fastcgi_params.default</span><br><span class="line">│   ├── koi-utf</span><br><span class="line">│   ├── koi-win</span><br><span class="line">│   ├── mime.types</span><br><span class="line">│   ├── mime.types.default</span><br><span class="line">│   ├── nginx.conf</span><br><span class="line">│   ├── nginx.conf.default</span><br><span class="line">│   ├── nginx.conf.old</span><br><span class="line">│   ├── scgi_params</span><br><span class="line">│   ├── scgi_params.default</span><br><span class="line">│   ├── uwsgi_params</span><br><span class="line">│   ├── uwsgi_params.default</span><br><span class="line">│   └── win-utf</span><br><span class="line">├── html</span><br><span class="line">│   ├── 50x.html</span><br><span class="line">│   └── index.html</span><br><span class="line">└── sbin</span><br><span class="line">    └── nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261930155.png" alt="img"></p><h3 id="Nginx主配置文件"><a href="#Nginx主配置文件" class="headerlink" title="Nginx主配置文件"></a>Nginx主配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx]# cat ./conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 1、main全局块（全局设置）， 作用域是全局</span><br><span class="line"></span><br><span class="line">#Nginx用户及组：用户 组。window下不指定</span><br><span class="line">#user  nobody;</span><br><span class="line">#工作进程：数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#错误日志：存放路径。</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid（进程标识符）：存放路径。</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 2、events块（nginx工作模式）</span><br><span class="line">events &#123;</span><br><span class="line">    #每个工作进程的最大连接数量。根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。</span><br><span class="line">    #每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。worker_processes*worker_connections</span><br><span class="line">    worker_connections  1024;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 3、http块（http设置）</span><br><span class="line">http &#123;</span><br><span class="line">          #设定支持的mime类型,类型查看./conf/mime.types文件定义</span><br><span class="line">    include       mime.types;</span><br><span class="line">    # 默认的类型</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 日志的格式</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">          # 访问日志记录</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # 开启 发送文件</span><br><span class="line">    sendfile        on;</span><br><span class="line">    # 开启 TCP 推送</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">          #连接超时时间。</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">          # 开启压缩文件</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">        ## ====sever块（主机设置）</span><br><span class="line">    server &#123;</span><br><span class="line">            # 提供服务的端口，默认80</span><br><span class="line">        listen       80;</span><br><span class="line">        # 提供服务的域名主机名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">                # 访问日志记录 以及位置</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">                # location块（URL匹配）：支持正则表达式</span><br><span class="line">            # 对 &quot;/&quot; 启用反向代理,第一个location区块开始                           </span><br><span class="line">        location / &#123;</span><br><span class="line">            #服务启动目录 默认在nginx安装目录下html目录</span><br><span class="line">            root   html;</span><br><span class="line">            # 默认的首页文件，多个用空格分开</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">                # 错误页面路由</span><br><span class="line">        # 出现对应的http状态码时，使用50x.html回应客户</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # 将服务器错误页重定向到静态页/50x.html</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;        </span><br><span class="line">        # location区块开始，访问50x.html</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">                # 指定对应的站点目录为html</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 实例 入 将访问尾缀为 \.php 跳转到 127.0.0.1</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">                # 将PHP脚本传递给正在侦听127.0.0.1:9000的FastCGI服务器</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">                # 拒绝访问.htaccess文件，如果Apache的文档根</span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以对比看智慧加油站项目中的Nginx的主配置文件。这里截取了一段，关键的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8090;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root   html/dashboard;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;                                                </span><br><span class="line">                    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">                        <span class="comment"># 允许跨域的请求，可以自定义变量$http_origin，*表示所有</span></span><br><span class="line">                    add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;</span><br><span class="line">                    <span class="comment"># 允许携带cookie请求</span></span><br><span class="line">                    add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">                    <span class="comment"># 允许跨域请求的方法：GET,POST,OPTIONS,PUT</span></span><br><span class="line">                    add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,POST,OPTIONS,PUT&#x27;</span>;</span><br><span class="line">                    <span class="comment"># 允许请求时携带的头部信息，*表示所有</span></span><br><span class="line">                    add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> *;</span><br><span class="line">                    <span class="comment"># 允许发送按段获取资源的请求</span></span><br><span class="line">                    add_header <span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span> <span class="string">&#x27;Content-Length,Content-Range&#x27;</span>;</span><br><span class="line">                    <span class="comment"># 一定要有！！！否则Post请求无法进行跨域！</span></span><br><span class="line">                    <span class="comment"># 在发送Post跨域请求前，会以Options方式发送预检请求，服务器接受时才会正式请求</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">                        add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> 1728000;</span><br><span class="line">                        add_header <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">                        add_header <span class="string">&#x27;Content-Length&#x27;</span> 0;</span><br><span class="line">                        <span class="comment"># 对于Options方式的请求返回204，表示接受跨域请求</span></span><br><span class="line">                        <span class="built_in">return</span> 204;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">                        location /gas &#123;</span><br><span class="line">                        rewrite /gas/(.+)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">                        proxy_pass http://192.168.0.29:59999;</span><br><span class="line">                        proxy_set_header Host <span class="variable">$proxy_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>proxy_pass <a href="http://192.168.0.29:59999;这里将动态请求交给ip为192.168.0.25端口号59999的服务进行处理。">http://192.168.0.29:59999;这里将动态请求交给ip为192.168.0.25端口号59999的服务进行处理。</a></p><p>IP是我本机的ip地址，如果需要在自己的电脑上运行，需要在这里把ip地址改成你自己的ip地址。端口号是智慧加油站网关微服务的端口号，所有的动态请求一律交给网关进行处理。</p></blockquote><p>如果把网站看成一个公司，现在你招了一个Nginx的员工，当他入职的那天，他会给你几张纸条（配置文件）。请你在上面写上他的工作内容。即他需要监听哪些请求（IP：端口号），这些端口号分配给哪些服务（IP：端口号）。我们只需要在配置文件中进行指定即可。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20 BUG记录</title>
      <link href="/2025/02/26/20%20BUG%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/02/26/20%20BUG%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="20-BUG记录"><a href="#20-BUG记录" class="headerlink" title="20 BUG记录"></a>20 BUG记录</h1><h2 id="1、SpringBoot、Spring-Cloud-Alibaba和Spring-Cloud版本对应"><a href="#1、SpringBoot、Spring-Cloud-Alibaba和Spring-Cloud版本对应" class="headerlink" title="1、SpringBoot、Spring Cloud Alibaba和Spring Cloud版本对应"></a>1、SpringBoot、Spring Cloud Alibaba和Spring Cloud版本对应</h2><p>这三个版本具有对应关系，注意不同版本之间的兼容性。详细对应关系请查看：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">版本说明</a></p><h2 id="2、Nacos服务未注册"><a href="#2、Nacos服务未注册" class="headerlink" title="2、Nacos服务未注册"></a>2、Nacos服务未注册</h2><p>在SpringBoot中引入Nacos依赖后，需要同样引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不然会出现nacos服务未注册的情况。</p><h2 id="3、机场后端Nacos无法正常启动"><a href="#3、机场后端Nacos无法正常启动" class="headerlink" title="3、机场后端Nacos无法正常启动"></a>3、机场后端Nacos无法正常启动</h2><p>问题描述：</p><p>found character ‘@’ that cannot start any token. (Do not use @ for indentation)</p><p> in ‘reader’, line 49, column 18:</p><p>​          namespace: @profiles.active@</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261934224.png" alt="img"></p><p>解决方案：</p><p>更改这部分：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261934127.png" alt="img"></p><p>把这部分更改为如下图，重新刷新Maven，还是不行就重启IDEA。</p><p>直接把上图标记的删除，重启启动也可以。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261934742.png" alt="img"></p><p>来源：<a href="https://www.cnblogs.com/lxl57610/p/16599947.html">found character ‘@‘ that cannot start any token. 解决方案 - 李慕白520 - 博客园</a></p><h2 id="4、SpringBoot项目端口号异常"><a href="#4、SpringBoot项目端口号异常" class="headerlink" title="4、SpringBoot项目端口号异常"></a>4、SpringBoot项目端口号异常</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261934383.png" alt="img"></p><p>在这个服务中，我在yml文件中设置了端口号，但是服务启动时端口号未生效，依旧还是8080，主要原因入上图片所示。</p><p>解释如下：</p><blockquote><p>在 Maven 的 <code>pom.xml</code> 文件中，<code>&lt;packaging&gt;</code> 元素指定了项目的打包方式。不同的 <code>&lt;packaging&gt;</code> 值定义了不同的项目类型和构建生命周期，以及最终生成的制品（artifact）的类型。常见的 <code>&lt;packaging&gt;</code> 类型包括 <code>jar</code>、<code>war</code>、<code>ear</code> 等，分别对应 Java 应用程序、Web 应用程序和企业应用程序等。</p><ul><li><strong><code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></strong>：当 <code>&lt;packaging&gt;</code> 设置为 <code>pom</code> 时，这通常意味着该项目是一个多模块项目的父项目（也称为聚合项目）。这种类型的项目本身不生成可分发的制品，而是用于组织和管理子模块的构建和依赖。<code>pom</code> 打包类型的项目通常不包含实际的代码实现，而是用来定义构建逻辑和依赖管理。</li></ul></blockquote><p>那么这样就会导致配置文件未生效。</p><h2 id="5、SpringBoot使用-ComponentScan的Controller失效原因分析"><a href="#5、SpringBoot使用-ComponentScan的Controller失效原因分析" class="headerlink" title="5、SpringBoot使用@ComponentScan的Controller失效原因分析"></a>5、SpringBoot使用@ComponentScan的Controller失效原因分析</h2><p>参考资料：<a href="https://fyzn12.github.io/post/spring-boot/componentscan%E6%B3%A8%E8%A7%A3%E5%AF%BC%E8%87%B4controller%E5%A4%B1%E6%95%88/">https://fyzn12.github.io/post/spring-boot/componentscan%E6%B3%A8%E8%A7%A3%E5%AF%BC%E8%87%B4controller%E5%A4%B1%E6%95%88/</a></p><h2 id="6、解决Git连接失败：Failed-to-connect-to-github-com-port-443-after-21090-ms-Couldn‘t-connect-to-server-‍"><a href="#6、解决Git连接失败：Failed-to-connect-to-github-com-port-443-after-21090-ms-Couldn‘t-connect-to-server-‍" class="headerlink" title="6、解决Git连接失败：Failed to connect to github.com port 443 after 21090 ms: Couldn‘t connect to server ‍"></a>6、解决Git连接失败：Failed to connect to github.com port 443 after 21090 ms: Couldn‘t connect to server ‍</h2><p><a href="https://cloud.tencent.com/developer/article/2405656">https://cloud.tencent.com/developer/article/2405656</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:&lt;你的端口号&gt;</span><br><span class="line">git config --global https.proxy 127.0.0.1:&lt;你的端口号&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-1 老年健康图谱</title>
      <link href="/2025/02/26/21-1%20%E8%80%81%E5%B9%B4%E5%81%A5%E5%BA%B7%E5%9B%BE%E8%B0%B1/"/>
      <url>/2025/02/26/21-1%20%E8%80%81%E5%B9%B4%E5%81%A5%E5%BA%B7%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="21-1-老年健康图谱"><a href="#21-1-老年健康图谱" class="headerlink" title="21-1 老年健康图谱"></a>21-1 老年健康图谱</h1><p>老年健康数据指标：</p><ul><li><a href="https://opendata.pku.edu.cn/dataverse/CHADS">https://opendata.pku.edu.cn/dataverse/CHADS</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261935670.png" alt="image-20240628094306969"></p><ul><li><p><a href="http://health.ruc.edu.cn/zwwz/sjzy_x/dcsj/5168445c40b941cf9b7eeed850e86c76.htm">中国老年健康调查（Chinese Longitudinal Healthy Longevity Survey, CLHLS）</a></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261935626.png" alt="image-20240628101604274"></p></li><li><p><a href="https://cloud.tencent.com/developer/article/2326023">复旦大学团队发布中文医疗健康个人助手，同时开源47万高质量数据集</a></p><ul><li>Github 地址：<a href="https://github.com/FudanDISC/DISC-MedLLM">https://github.com/FudanDISC/DISC-MedLLM</a><br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261935316.png" alt="image-20240628102024025"></li></ul></li><li><p><a href="https://www.idea.edu.cn/news/1652.html">BIOS重磅更新！千万级医学知识图谱正式发布</a></p><ul><li>BIOS 2022V2版数据集下载地址：<a href="https://bios.www.idea.edu.cn/Download">https://bios.www.idea.edu.cn/Download</a></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261935324.png" alt="image-20240628102212226"></p><ul><li><a href="https://kns-cnki-net-s.sslvpn.ecust.edu.cn:8118/kcms2/article/abstract?v=RkYMyaebi8VFtxJ5bUbY3hhdDyI1X_yLEML3olMG3QZhhE79wkSnhuTmJ-PQ3QLZrqsB76S40ujsOaMgXybd4oLMAMqPJJNTWN0-s28995MS4jsSSLldmU6b08uJLRaYVfUfUGAHwOCA7NWi_T80QQ==&uniplatform=NZKPT&language=CHS">老年人医疗体检数据的分析及评价</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261935601.png" alt="image-20240628175022622"></p><ul><li><a href="https://kns-cnki-net-s.sslvpn.ecust.edu.cn:8118/kcms2/article/abstract?v=RkYMyaebi8XDW41FBzDTBxzBfXsIWcko-6F_XxbbQ_WopjfgJswS5rRF2cbTZ2CIqzFnJpei9BHgy-tR_DS3keNzhYN2uyhXL-N12RkA6bDKwRuxvBPPuE8VS8G6xxSaruREBS85UJ4KcEFGTNdmBw==&uniplatform=NZKPT&language=CHS">中国老年人健康状况及影响因素分析——基于第8轮CLHLS数据</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261935452.png" alt="image-20240628175555716"></p><p><a href="https://gitee.com/jason921121/Chinese_medical_NLP#https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhangsheng93%2FcMedQA2">医疗NLP领域（主要关注中文） 评测数据集 与 论文等相关资源。</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261936575.png" alt="image-20240702102316697"></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-2 行人重识别</title>
      <link href="/2025/02/26/21-2%20%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB/"/>
      <url>/2025/02/26/21-2%20%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="21-2-行人重识别"><a href="#21-2-行人重识别" class="headerlink" title="21-2 行人重识别"></a>21-2 行人重识别</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="2022-IVC-行人再识别综述"><a href="#2022-IVC-行人再识别综述" class="headerlink" title="2022 IVC 行人再识别综述"></a>2022 IVC 行人再识别综述</h3><p>原文地址：<a href="https://www.cnblogs.com/wangchangshuo/p/16148992.html">https://www.cnblogs.com/wangchangshuo/p/16148992.html</a></p><h3 id="SpikingResformer：ResNet-Transformer-结合创新"><a href="#SpikingResformer：ResNet-Transformer-结合创新" class="headerlink" title="SpikingResformer：ResNet + Transformer 结合创新"></a>SpikingResformer：ResNet + Transformer 结合创新</h3><p>原文地址：<a href="https://developer.volcengine.com/articles/7382255559967244298">https://developer.volcengine.com/articles/7382255559967244298</a></p><p>代码地址：<a href="https://github.com/xyshi2000/SpikingResformer">https://github.com/xyshi2000/SpikingResformer</a></p><h4 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h4><p><strong>ResNet因其深层结构和残差连接，能够有效地从图像中提取出丰富的局部特征。同时，Transformer的自注意力机制能够捕捉图像中的长</strong> <strong>距离依赖关系，为模型提供全局上下文信息。</strong></p><p>高性能低参数的SpikingResformer采用了ResNet + Transformer结合的策略。</p><p>这种策略结合了两者分别在处理空间、序列数据上的优势，强化了模型特征提取和全局理解方面的能力,让模型在保持强大的局部分析能力的同时,也能够利用全局信息来进一步提升性能。</p><p>SpikingResformer：ResNet + Vision Transformer</p><h4 id="模型思路"><a href="#模型思路" class="headerlink" title="模型思路"></a>模型思路</h4><p>脉冲自注意力机制 的局限：</p><p><strong>尽管现有方法提出了与SNN兼容的脉冲自注意力机制，但它们缺乏合理的缩放方法，且这些方法所提出的整体架构在有效提取局部特征方面存在瓶颈。</strong></p><ul><li><strong>原因一：缺乏合理的缩放方法。</strong></li><li><strong>原因二：未能有效提取局部特征。</strong></li></ul><p>双脉冲自注意力（DSSA）：</p><p>总之，双脉冲自注意力通过引入脉冲信号的概念，优化了传统自注意力机制的计算过程，使其在处理时间序列数据时更加高效和准确。</p><p>为了应对这些挑战，提出了一种名为双脉冲自注意力（DSSA）的新型脉冲自注意力机制，并附带一种合理的缩放方法。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261937011.png" alt="image-20240904142155444"></p><h4 id="个人看法"><a href="#个人看法" class="headerlink" title="个人看法"></a>个人看法</h4><p>该模型通过融合了ResNet和Transformer得到了一个新的模型，那么是不是可以将这个得到的模型用于在行人重识别上，从而得到一个比较好的效果呢？</p><p>如果是这样的话，写出来的论文是否可以发表呢？是否可以在原来的模型基础上进行修改呢？</p><p>实验是否可以跑出来呢？接下来的重点实验就是把这个模型跑在行人重识别的数据集上。</p><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><h3 id="Swin-Transformer"><a href="#Swin-Transformer" class="headerlink" title="Swin Transformer"></a>Swin Transformer</h3><p>参考资料：<a href="https://blog.csdn.net/weixin_45508265/article/details/134773753">https://blog.csdn.net/weixin_45508265/article/details/134773753</a></p><h4 id="案例1——使用Swin-Transformer-训练CIFAR-10"><a href="#案例1——使用Swin-Transformer-训练CIFAR-10" class="headerlink" title="案例1——使用Swin Transformer 训练CIFAR 10"></a>案例1——使用Swin Transformer 训练CIFAR 10</h4><p>参考资料：</p><ol><li><a href="https://blog.csdn.net/weixin_45508265/article/details/134773753">https://blog.csdn.net/weixin_45508265/article/details/134773753</a></li><li><a href="https://blog.csdn.net/blockshowtouse/article/details/128706276?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Ctr-1-128706276-blog-134773753.235%5Ev43%5Epc_blog_bottom_relevance_base8&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Ctr-1-128706276-blog-134773753.235%5Ev43%5Epc_blog_bottom_relevance_base8&utm_relevant_index=2">使用Swin-Transformer进行CIFAR10数据集的训练</a></li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261937072.png" alt="image-20240905152507351"></p><h2 id="Reid"><a href="#Reid" class="headerlink" title="Reid"></a>Reid</h2><p><a href="https://github.com/layumi/Person_reID_baseline_pytorch?tab=readme-ov-file">https://github.com/layumi/Person_reID_baseline_pytorch?tab=readme-ov-file</a></p><h3 id="换装Reid"><a href="#换装Reid" class="headerlink" title="换装Reid"></a>换装Reid</h3><p>参考资料：</p><ol><li><a href="https://blog.csdn.net/z240626191s/article/details/139841361?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-139841361-blog-106785977.235%5Ev43%5Epc_blog_bottom_relevance_base8&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-139841361-blog-106785977.235%5Ev43%5Epc_blog_bottom_relevance_base8&utm_relevant_index=5">Reid系列论文学习——换装Reid</a></li><li>论文链接：<a href="https://opus.lib.uts.edu.au/bitstream/10453/137156/4/Binder1.pdf">https://opus.lib.uts.edu.au/bitstream/10453/137156/4/Binder1.pdf</a></li><li>Code链接：<a href="https://github.com/Huang-3/Celeb-reID">https://github.com/Huang-3/Celeb-reID</a></li></ol><p>大多数Reid的研究都聚集在人员几乎不会更换衣服的场景，也就是说针对人员来说，数据分布相似度是比较大的。但在一些场景中人员是有可能换衣服的，这里举个例子，比如在追寻一个嫌疑人，该嫌疑人在A场景穿的红色衣服，当他进入B场景后换了一件黑衣服，那么用传统的方法可能就不太行了。</p><p>因此这篇文章主要解决的问题就是如何针对这种换装场景下也能实现行人重识别。</p><p>文章将传统的研究任务(同一个人不同角度但不会更换衣服)称为short-term ReID。将自己的研究称为long-term ReID。</p><p>文章的贡献有两点：</p><pre><code>    1.制作了“换装”数据集(Celeb-reid)用于行人重识别；    2.提出了vector-neuron(VN)capsules来代替传统的传统的标量神经元（SN);</code></pre><p>注：文章指出，VN与SN相比只是多一个维度用来提取同一个人不同衣服的特征提取。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25 Web容器</title>
      <link href="/2025/02/26/25%20Web%E5%AE%B9%E5%99%A8/"/>
      <url>/2025/02/26/25%20Web%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="25-Web容器"><a href="#25-Web容器" class="headerlink" title="25 Web容器"></a>25 Web容器</h1><h2 id="Web技术发展史"><a href="#Web技术发展史" class="headerlink" title="Web技术发展史"></a>Web技术发展史</h2><p>在Web技术发展的早期阶段，我们客户端的web应用只能浏览一些静态的页面。例如静态的HTML，这里使用的HTTP服务器有（Apache、Nginx）等静态服务器。这时候的Web页面不能和用户进行交互，也不能动态获取数据。</p><p>随着Web技术的发展，我们需要客户端能和服务端进行交互的技术。</p><p>这时候Sun公司推出了Servlet技术，那么什么是Servlet技术呢？</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet简单的说就是运行在服务端的Java程序，但是这些Servlet并没有main方法，所以并不能自己直接运行。如果不能独立运行，那么如何让Servlet和客户端进行交互呢？所以我们需要一个东西来统一调动这些Servlet，这就是Servlet容器。当客户端需要哪个Servlet来进行交互操作时，Servlet容器就会调用运行这个Servlet来获取需要交互的数据。</p><p>那么常见的一些Servlet容器有哪些呢？</p><ol><li>Tomcat容器</li><li>Jetty容器</li><li>等等</li></ol><p>而Tomcat和Jetty就是一个Servlet容器。为了方便使用，它们也具有HTTP服务器的功能，因此Tomcat或者Jetty就是一个“<strong>HTTP服务器 + Servlet容器</strong>”，我们也叫它们<strong>Web容器</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938735.png" alt="img"></p><h2 id="Web容器作用"><a href="#Web容器作用" class="headerlink" title="Web容器作用"></a>Web容器作用</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938248.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938359.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938694.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938184.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938566.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938892.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261938437.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27 RBAC &amp; SSO</title>
      <link href="/2025/02/26/27%20RBAC%20&amp;%20SSO/"/>
      <url>/2025/02/26/27%20RBAC%20&amp;%20SSO/</url>
      
        <content type="html"><![CDATA[<h1 id="27-RBAC-SSO"><a href="#27-RBAC-SSO" class="headerlink" title="27 RBAC &amp; SSO"></a>27 RBAC &amp; SSO</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://blog.csdn.net/m0_62006803/article/details/133962328">RBAC——基于角色权限的模型</a>；</li><li><a href="https://blog.csdn.net/weixin_58403235/article/details/129928096?ops_request_misc=%7B%22request_id%22:%22171636862116800222818286%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171636862116800222818286&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-129928096-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=sso&spm=1018.2226.3001.4187">单点登录(SSO)详解</a>；</li><li><a href="https://blog.csdn.net/qq_38334677/article/details/128637268?ops_request_misc=%7B%22request_id%22:%22171705384616800184145334%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171705384616800184145334&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-128637268-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=Token%E6%96%B9%E6%A1%88&spm=1018.2226.3001.4187">深入浅出Cookie、Session、Token：背后的技术原理</a></li></ol><h1 id="RBAC？"><a href="#RBAC？" class="headerlink" title="RBAC？"></a>RBAC？</h1><p>Role-Based Access Control，中文意思是：基于角色（Role）的访问控制。这是一种广泛应用于计算机系统和网络安全领域的访问控制模型。</p><p>简单的理解就是：通过将<strong>权限</strong>分配给➡<strong>角色</strong>，再将<strong>角色</strong>分配给➡<strong>用户</strong>，来实现对系统资源的访问控制。</p><p>特别注意，在这种模型中，<strong>用户与角色之间，角色与权限之间，一般者是多对多的关系</strong>。</p><blockquote><ol><li>角色（Role）：角色是指在系统中具有一组相关权限的抽象概念，代表了用户在特定上下文中的身份或职能，例如管理员、普通用户等。</li><li>权限（Permission）：权限是指对系统资源进行操作的许可，如读取、写入、修改等。权限可以被分配给角色。</li><li>用户（User）：用户是指系统的实际使用者，每个用户可以被分配一个或多个角色。</li><li>分配（Assignment）：分配是指将角色与用户关联起来，以赋予用户相应的权限。</li></ol></blockquote><h1 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h1><p>很简单：方便开发。</p><p>因为当用户的数量非常大时，要给系统每个用户逐一授权，是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261939246.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261939670.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261939460.png" alt="img"></p><h1 id="SSO？"><a href="#SSO？" class="headerlink" title="SSO？"></a>SSO？</h1><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统（例如淘宝、天猫之间的关系）。简而言之，多个系统，统一登陆。</p><h1 id="单点登录实现方式"><a href="#单点登录实现方式" class="headerlink" title="单点登录实现方式"></a>单点登录实现方式</h1><p>一般有三种实现方式：</p><ol><li>Cookie</li><li>Session</li><li>Token</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>在用户登录成功之后，后端生成一个随机字符串，将这个随机字符串存放在Cookie中返回给前端页面，前端页面每次访问时，需要携带这个Cookie给后端。同时后端将这个随机字符串作为Key，用户ID作为Value存放在Redis中，然后后端每次根据前端传来的Cookie来获取这个随机字符串，然后从Redis中获取当前用户ID。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261939342.png" alt="img"></p><p>缺点：</p><p>（1）Cookie不安全：攻击者可以通过伪造Cookie伪造成特定用户身份，可以用加密规避（前提是加密算法不被泄露）；由于 Cookie 数据存储在客户端，因此存在被用户或第三方篡改的风险。虽然可以通过加密和签名等手段提高安全性，但仍然存在一定的风险；</p><p>（2）不能跨域实现免登：Cookie一般是以域名为分割的。如：baidu.com 无法读到 cnblogs.com 写的 cookie。域名是可以访问上级域名的Cookie的。 即a.baidu.com是可以访问baidu.com下的Cookie的。（一级域名相同，只是二级或更高级域名不同的站点，如：a.baidu.com、b.baidu.com可以通过设置 domain 参数共享 cookie 读写。）</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session是保存在服务端的，所以如果是分布式系统的话，那么就会出现服务器不共享Session的问题。如果是分布式系统，session属于有状态，实现分布式session有四种方案（session复制、客户端存储、HASH一致性、统一存储）。详情请看：<a href="https://blog.csdn.net/hxxzbgkf/article/details/122727176">分布式session解决方案_半格咖啡的博客-CSDN博客</a>。</p><p>缺点：</p><p> （1）服务器压力增大：通常session是存储在内存中的，每个用户通过认证之后都会将session数据保存在服务器的内存中，而当用户量增大时，服务器的压力增大。（可以将数据保存在磁盘中）</p><p>（2）扩展性不强：如果将来搭建了多个服务器，虽然每个服务器都执行的是同样的业务逻辑，但是session数据是保存在内存中的（不是共享的），用户第一次访问的是服务器1，当用户再次请求时可能访问的是另外一台服务器2，服务器2获取不到session信息，就判定用户没有登陆过。（可以使用分布式session将session在各个集群中保持一致）</p><p>（3）CSRF跨站伪造请求攻击：session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p><blockquote><p>CSRF（Cross-Site Request Forgery，跨站请求伪造）攻击是一种针对Web应用程序的攻击方式，它利用用户在已登录的Web应用程序上的有效会话（Session）来发送恶意请求。</p></blockquote><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>Token 是令牌的意思，由服务端生成并发放给客户端，是一种具有时效性的验证身份的手段。</p><p>Token 避免了 Session 机制带来的海量信息存储问题，也避免了 Cookie 机制的一些安全性问题，在现代移动互联网场景、跨域访问等场景有广泛的用途。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261939701.png" alt="img"></p><h1 id="机场项目后台管理系统登录流程"><a href="#机场项目后台管理系统登录流程" class="headerlink" title="机场项目后台管理系统登录流程"></a>机场项目后台管理系统登录流程</h1><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261939282.jpeg" alt="img"></p><p>通过设置一个中央登录注册中心，该中心负责生成Token并保存到cookie中返回给浏览器。该浏览器得到这个cookie后跳转到子应用，同步检测本地、本应用服务端是否有该Token保持的登录信息，如果都没有则会访问登录注册服务中心，该服务中心会解析这个Token并同时判断该Token是否有效，有效后返回用户的登录具体信息，前端页面将会保存一份到本地，之后每次请求也会将该信息保存到本地后端服务器中。</p><h1 id="单点登录Demo分析"><a href="#单点登录Demo分析" class="headerlink" title="单点登录Demo分析"></a>单点登录Demo分析</h1><p>**&#x2F;**<strong>board-gov-sso-service&#x2F;config&#x2F;PublicDataCache.java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化数据缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// @Component 注解表明这个类是一个Spring的组件，将由Spring容器进行管理和实例化。</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 实例化所有的参数</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicDataCache</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Long, SysApplicationDTO&gt; APP_MAP_CACHE = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Long, SysApplicationDTO&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 远程调用接口 获取所有的App列表信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RemoteAppService appService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// PostConstruct注解为该类实例化后马上执行该方法</span></span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//系统启动中。。。加载codeMap</span></span><br><span class="line">      R&lt;List&lt;SysApplicationDTO&gt;&gt; appListR = appService.getAppList();</span><br><span class="line">      <span class="keyword">if</span>(appListR == <span class="literal">null</span> || appListR.getData() == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      List&lt;SysApplicationDTO&gt; appList = appListR.getData();</span><br><span class="line">      <span class="keyword">for</span> (SysApplicationDTO app : appList) &#123;</span><br><span class="line">         APP_MAP_CACHE.put(app.getAppId(), app);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// PreDestroy注解为在类被销毁前执行的方法</span></span><br><span class="line">   <span class="meta">@PreDestroy</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//系统运行结束</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该注解根据cron的配置来定时执行某项方法---定时任务 年 月 日 时 分 秒 </span></span><br><span class="line">   <span class="meta">@Scheduled(cron = &quot;0 0 0/2 * * ?&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOne</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//每2小时执行一次缓存</span></span><br><span class="line">      <span class="comment">//todo 后面用xxl job实现</span></span><br><span class="line">      init();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SsoLoginController.java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@Tag(description = &quot;loginManagement&quot;, name = &quot;登录管理&quot;)</span></span><br><span class="line"><span class="meta">@Inner(value = false)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SsoLoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RemoteAppService appService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SsoProperties ssoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;登录跳转接口&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Model model,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(name = &quot;appSign&quot;, required = false)</span> String appSign,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(name = &quot;redirectUrl&quot;, required = false)</span> String redirectUrl)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(appSign))&#123;</span><br><span class="line">            appSign = appSign.replaceAll(SsoServiceConstants.SIGN_SPACE, SsoServiceConstants.SIGN_ADD);</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(SsoServiceConstants.URL_PARAM_APPSIGN, appSign);</span><br><span class="line">        model.addAttribute(SsoServiceConstants.REDIRECT_URL_STRING, redirectUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断cookie中是否存在数据</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies == <span class="literal">null</span> || cookies.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//response.sendRedirect(&quot;http://localhost:8082/login&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/login2&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.getName().contains(SsoServiceConstants.SSO_USE_SPACE)) &#123;</span><br><span class="line">                token = c.getValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断redis是否存在数据</span></span><br><span class="line">        <span class="type">UserLogInInfoDTO</span> <span class="variable">userInfo</span> <span class="operator">=</span> loginService.checkToken(token);</span><br><span class="line">        <span class="keyword">if</span>(userInfo == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//response.sendRedirect(&quot;http://localhost:8082/login&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/login2&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        userInfo.setToken(token);</span><br><span class="line">        model.addAttribute(SsoServiceConstants.USER_INFO_STRING, userInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验app合法性</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">appId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appSecret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(appSign))&#123;</span><br><span class="line">            <span class="keyword">if</span>(appSign.indexOf(SsoServiceConstants.SIGN_COLON_STRING) == <span class="number">0</span>)&#123;</span><br><span class="line">                appSign = appSign.substring(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(appSign.indexOf(SsoServiceConstants.SIGN_COLON_STRING) == appSign.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                appSign = appSign.substring(<span class="number">0</span>, appSign.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> MD5Util.getMD5(ssoProperties.getMd5Key());</span><br><span class="line">            <span class="type">String</span> <span class="variable">publicPass</span> <span class="operator">=</span> AESUtil.decrypt(appSign, md5);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isBlank(publicPass) || !publicPass.contains(SsoServiceConstants.SIGN_COLON_STRING))&#123;</span><br><span class="line">                log.info(<span class="string">&quot;appSign校验不通过&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login error: appSign校验不通过&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] split = publicPass.split(SsoServiceConstants.SIGN_COLON_STRING);</span><br><span class="line">            appId = Long.valueOf(split[<span class="number">0</span>]);</span><br><span class="line">            appSecret = split[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(SsoServiceConstants.APP_ID_STRING, appId);</span><br><span class="line">        model.addAttribute(SsoServiceConstants.APP_SECRET_STRING, appSecret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(appId == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 跳转总控页面带上参数 token 或者userInfo(可能是从大屏直接请求过来的)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">AppLoginInfoDTO</span> <span class="variable">curAppInfo</span> <span class="operator">=</span> loginService.getAppInfo(userInfo, appId, appSecret);</span><br><span class="line">        <span class="keyword">if</span>(curAppInfo != <span class="literal">null</span> &amp;&amp; curAppInfo.getExpFlag())&#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前请求应用存在异常 清理登录信息返回登录页面&quot;</span>);</span><br><span class="line">            <span class="comment">//response.sendRedirect(&quot;http://localhost:8082/login&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/login2&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curAppInfo == <span class="literal">null</span> || StringUtils.isBlank(curAppInfo.getCallbackUrl()))&#123;</span><br><span class="line">            <span class="comment">//跳转总控页面 带上参数 token 或者userInfo   因为没有该应用权限/或着该应用没有配置回调地址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有传重定向url就默认取应用配置的首页url</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(redirectUrl))&#123;</span><br><span class="line">            userInfo.setRedirectUrl(redirectUrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userInfo.setRedirectUrl(curAppInfo.getIndexUrl());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//约定的32位密钥</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">encrypt</span> <span class="operator">=</span> AESUtil.encrypt(JSONObject.toJSONString(userInfo), ssoProperties.getCallbackPass());</span><br><span class="line">            <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> MD5Util.getMD5(<span class="string">&quot;sso&quot;</span> + curAppInfo.getAppKey()</span><br><span class="line">                    + <span class="string">&quot;salt2&quot;</span> + DateUtil.thisHour(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">finalUrl</span> <span class="operator">=</span> curAppInfo.getCallbackUrl() + <span class="string">&quot;?data=&quot;</span> + encrypt + <span class="string">&quot;&amp;sign=&quot;</span> + sign;</span><br><span class="line">            response.sendRedirect(finalUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;重定向应用回调地址失败!&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/saveToken&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;保存token接口&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveToken</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Model model,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestBody</span> SaveTokenReqVO saveTokenReqVO)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isEmpty(saveTokenReqVO) || StringUtils.isBlank(saveTokenReqVO.getToken()))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;token不能为空, 请重新登录!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login2&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> saveTokenReqVO.getToken();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.valueOf(saveTokenReqVO.getUserId());</span><br><span class="line">        <span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> saveTokenReqVO.getRedirectUrl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过username查询用户信息</span></span><br><span class="line">        R&lt;QuerySysUserAppRespDTO&gt; userAppTableR = appService.getUserAppList(userId);</span><br><span class="line">        <span class="type">QuerySysUserAppRespDTO</span> <span class="variable">data</span> <span class="operator">=</span> userAppTableR.getData();</span><br><span class="line">        <span class="type">UserLogInInfoDTO</span> <span class="variable">userInfo</span> <span class="operator">=</span> loginService.toUserInfo(data);</span><br><span class="line">        userInfo.setToken(token);</span><br><span class="line">        userInfo.setRedirectUrl(redirectUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户登录时 未传入app信息 直接跳转主控页</span></span><br><span class="line">        <span class="keyword">if</span>(saveTokenReqVO.getAppId() == <span class="literal">null</span> &amp;&amp; StringUtils.isBlank(saveTokenReqVO.getAppSign()))&#123;</span><br><span class="line">            model.addAttribute(SsoServiceConstants.USER_INFO_STRING, userInfo);</span><br><span class="line">            loginService.saveUserLoginInfo(response, userInfo);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验应用合法性</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">appId</span> <span class="operator">=</span> saveTokenReqVO.getAppId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">appSecret</span> <span class="operator">=</span> saveTokenReqVO.getAppSecret();</span><br><span class="line">        <span class="type">String</span> <span class="variable">appSign</span> <span class="operator">=</span> saveTokenReqVO.getAppSign();</span><br><span class="line">        <span class="keyword">if</span>(appId == <span class="literal">null</span> || StringUtils.isBlank(appSecret))&#123;</span><br><span class="line">            appSign = appSign.replaceAll(SsoServiceConstants.SIGN_SPACE, SsoServiceConstants.SIGN_ADD);</span><br><span class="line">            <span class="keyword">if</span>(appSign.indexOf(SsoServiceConstants.SIGN_COLON_STRING) == <span class="number">0</span>)&#123;</span><br><span class="line">                appSign = appSign.substring(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(appSign.indexOf(SsoServiceConstants.SIGN_COLON_STRING) == appSign.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                appSign = appSign.substring(<span class="number">0</span>, appSign.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> MD5Util.getMD5(ssoProperties.getMd5Key());</span><br><span class="line">            <span class="type">String</span> <span class="variable">publicPass</span> <span class="operator">=</span> AESUtil.decrypt(appSign, md5);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isBlank(publicPass) || !publicPass.contains(SsoServiceConstants.SIGN_COLON_STRING))&#123;</span><br><span class="line">                log.info(<span class="string">&quot;appSign 校验不通过&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] split = publicPass.split(SsoServiceConstants.SIGN_COLON_STRING);</span><br><span class="line">            appId = Long.valueOf(split[<span class="number">0</span>]);</span><br><span class="line">            appSecret = split[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验应用密钥正确性</span></span><br><span class="line">        <span class="type">AppLoginInfoDTO</span> <span class="variable">curAppInfo</span> <span class="operator">=</span> loginService.getAppInfo(userInfo, appId, appSecret);</span><br><span class="line">        <span class="keyword">if</span>(curAppInfo != <span class="literal">null</span> &amp;&amp; curAppInfo.getExpFlag())&#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前请求应用存在异常 清理登录信息返回登录页面&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/login2&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(curAppInfo == <span class="literal">null</span>)&#123;</span><br><span class="line">            model.addAttribute(SsoServiceConstants.USER_INFO_STRING, userInfo);</span><br><span class="line">            loginService.saveUserLoginInfo(response, userInfo);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(redirectUrl))&#123;</span><br><span class="line">            userInfo.setRedirectUrl(redirectUrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userInfo.setRedirectUrl(curAppInfo.getIndexUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        loginService.saveUserLoginInfo(response, userInfo);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">finalUrl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//约定的32位密钥</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">encrypt</span> <span class="operator">=</span> AESUtil.encrypt(JSONObject.toJSONString(userInfo), ssoProperties.getCallbackPass());</span><br><span class="line">            <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> MD5Util.getMD5(ssoProperties.getSsoKey() + curAppInfo.getAppKey() + ssoProperties.getAppSalt() + DateUtil.thisHour(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            finalUrl = curAppInfo.getCallbackUrl() + SsoServiceConstants.SIGN_QUESTION_MARK + SsoServiceConstants.DATA_STRING + SsoServiceConstants.SIGN_EQUAL_TO + encrypt</span><br><span class="line">                    + SsoServiceConstants.SIGN_AND + SsoServiceConstants.SIGN_STRING + SsoServiceConstants.SIGN_EQUAL_TO + sign;</span><br><span class="line">            response.sendRedirect(finalUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;重定向应用回调地址失败：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> finalUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/check&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;校验是否已登录接口&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;UserLogInInfoDTO&gt; <span class="title function_">checkIsLogin</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//判断cookie中是否存在数据</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies == <span class="literal">null</span> || cookies.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.failed(<span class="string">&quot;cookie不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.getName().contains(SsoServiceConstants.SSO_USE_SPACE)) &#123;</span><br><span class="line">                token = c.getValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断redis是否存在数据</span></span><br><span class="line">        <span class="type">UserLogInInfoDTO</span> <span class="variable">userInfo</span> <span class="operator">=</span> loginService.checkToken(token);</span><br><span class="line">        <span class="keyword">if</span>(userInfo == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.failed(<span class="string">&quot;缓存数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        userInfo.setToken(token);</span><br><span class="line">        <span class="keyword">return</span> R.ok(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/saveTokenInfo&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;保存token接口&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;UserLogInInfoDTO&gt; <span class="title function_">saveTokenInfo</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestBody</span> SaveTokenReqVO saveTokenReqVO)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后续跳转均交由Vue前端完成 且均为内部页面跳转 故不再需要做安全性校验</span></span><br><span class="line">        <span class="comment">//此接口仅作为token数据的存储以及 后续跳转地址的指向</span></span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isEmpty(saveTokenReqVO) || StringUtils.isBlank(saveTokenReqVO.getToken()))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;token不能为空, 请重新登录!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> R.failed(<span class="string">&quot;token不能为空, 请重新登录!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> saveTokenReqVO.getToken();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.valueOf(saveTokenReqVO.getUserId());</span><br><span class="line">        <span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> saveTokenReqVO.getRedirectUrl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过用户ID查询用户及其所拥有权限的应用列表信息</span></span><br><span class="line">        R&lt;QuerySysUserAppRespDTO&gt; userAppListRespInfo = appService.getUserAppList(userId);</span><br><span class="line">        <span class="type">QuerySysUserAppRespDTO</span> <span class="variable">querySysUserAppRespDTO</span> <span class="operator">=</span> userAppListRespInfo.getData();</span><br><span class="line">        <span class="type">UserLogInInfoDTO</span> <span class="variable">userInfo</span> <span class="operator">=</span> loginService.toUserInfo(querySysUserAppRespDTO);</span><br><span class="line">        userInfo.setToken(token);</span><br><span class="line">        userInfo.setRedirectUrl(redirectUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户登录时 未传入app信息 直接跳转主控页</span></span><br><span class="line">        <span class="keyword">if</span>(saveTokenReqVO.getAppId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//userInfo.setRedirectUrl(&quot;/Index.vue&quot;);</span></span><br><span class="line">            loginService.saveUserLoginInfo(response, userInfo);</span><br><span class="line">            <span class="keyword">return</span> R.ok(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验应用合法性</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">appId</span> <span class="operator">=</span> saveTokenReqVO.getAppId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">appSecret</span> <span class="operator">=</span> saveTokenReqVO.getAppSecret();</span><br><span class="line">        <span class="type">String</span> <span class="variable">appSign</span> <span class="operator">=</span> saveTokenReqVO.getAppSign();</span><br><span class="line">        <span class="keyword">if</span>(appId == <span class="literal">null</span> || StringUtils.isBlank(appSecret))&#123;</span><br><span class="line">            appSign = appSign.replaceAll(SsoServiceConstants.SIGN_SPACE, SsoServiceConstants.SIGN_ADD);</span><br><span class="line">            <span class="keyword">if</span>(appSign.indexOf(SsoServiceConstants.SIGN_COLON_STRING) == <span class="number">0</span>)&#123;</span><br><span class="line">                appSign = appSign.substring(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(appSign.indexOf(SsoServiceConstants.SIGN_COLON_STRING) == appSign.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                appSign = appSign.substring(<span class="number">0</span>, appSign.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">saltKey</span> <span class="operator">=</span> MD5Util.getMD5(ssoProperties.getMd5Key());</span><br><span class="line">            <span class="type">String</span> <span class="variable">publicPass</span> <span class="operator">=</span> AESUtil.decrypt(appSign, saltKey);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isBlank(publicPass) || !publicPass.contains(SsoServiceConstants.SIGN_COLON_STRING))&#123;</span><br><span class="line">                log.info(<span class="string">&quot;appSign 校验不通过&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> R.failed(<span class="string">&quot;appSign 校验不通过&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] split = publicPass.split(SsoServiceConstants.SIGN_COLON_STRING);</span><br><span class="line">            appId = Long.valueOf(split[<span class="number">0</span>]);</span><br><span class="line">            appSecret = split[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验应用密钥正确性</span></span><br><span class="line">        <span class="type">AppLoginInfoDTO</span> <span class="variable">curAppInfo</span> <span class="operator">=</span> loginService.getAppInfo(userInfo, appId, appSecret);</span><br><span class="line">        <span class="keyword">if</span>(curAppInfo != <span class="literal">null</span> &amp;&amp; curAppInfo.getExpFlag())&#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前请求应用存在异常 清理登录信息返回登录页面&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> R.failed(<span class="string">&quot;当前请求应用存在异常 清理登录信息返回登录页面&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(curAppInfo == <span class="literal">null</span>)&#123;</span><br><span class="line">            loginService.saveUserLoginInfo(response, userInfo);</span><br><span class="line">            <span class="keyword">return</span> R.ok(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(redirectUrl))&#123;</span><br><span class="line">            userInfo.setRedirectUrl(redirectUrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userInfo.setRedirectUrl(curAppInfo.getIndexUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        loginService.saveUserLoginInfo(response, userInfo);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">finalUrl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//约定的32位密钥</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">encrypt</span> <span class="operator">=</span> AESUtil.encrypt(JSONObject.toJSONString(userInfo), ssoProperties.getCallbackPass());</span><br><span class="line">            <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> MD5Util.getMD5(ssoProperties.getSsoKey() + curAppInfo.getAppKey() + ssoProperties.getAppSalt() + DateUtil.thisHour(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义Callback地址</span></span><br><span class="line">            finalUrl = curAppInfo.getCallbackUrl() + SsoServiceConstants.SIGN_QUESTION_MARK</span><br><span class="line">                    + SsoServiceConstants.DATA_STRING + SsoServiceConstants.SIGN_EQUAL_TO + encrypt</span><br><span class="line">                    + SsoServiceConstants.SIGN_AND + SsoServiceConstants.SIGN_STRING + SsoServiceConstants.SIGN_EQUAL_TO + sign;</span><br><span class="line">            response.sendRedirect(finalUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;重定向应用回调地址失败：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(userInfo.getRedirectUrl()))&#123;</span><br><span class="line">            userInfo.setRedirectUrl(<span class="string">&quot;/Index.vue&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.ok(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAppSign&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;获取appSign&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">getAppSign</span><span class="params">(<span class="meta">@RequestParam(value = &quot;appId&quot;)</span> Long appId,</span></span><br><span class="line"><span class="params">                                          <span class="meta">@RequestParam(value = &quot;secret&quot;)</span> String secret)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appSign</span> <span class="operator">=</span> loginService.getAppSign(appId, secret);</span><br><span class="line">        <span class="keyword">return</span> R.ok(appSign);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/checkAppSign&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;校验appSign&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Boolean&gt; <span class="title function_">checkAppSign</span><span class="params">(<span class="meta">@RequestParam(value = &quot;appId&quot;)</span> Long appId,</span></span><br><span class="line"><span class="params">                                            <span class="meta">@RequestParam(value = &quot;appSign&quot;)</span> String appSign)</span>&#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> loginService.checkAppSign(appId, appSign);</span><br><span class="line">        <span class="keyword">return</span> R.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 Linux环境下搭建ELK（Elasticsearch+Logstash+Kibana）</title>
      <link href="/2025/02/26/31%20SDK%20&amp;%20API/"/>
      <url>/2025/02/26/31%20SDK%20&amp;%20API/</url>
      
        <content type="html"><![CDATA[<h1 id="31-SDK-API"><a href="#31-SDK-API" class="headerlink" title="31 SDK &amp; API"></a>31 SDK &amp; API</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>API 的全称为 Application Programming Interface，翻译过来的意思就是应用程序编程接口。实际上，API 是一些预先定义的函数，目的是提供应用程序与开发人员基于某个软件或硬件，得以访问一组进程的能力。不需要直接去访问源码，或去深刻理解内部工作机制的细节。</p><p>知道该接口的请求地址就可以之间访问。</p><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><p>SDK的全称为 Software Development Kit，翻译过来的意思就是软件开发工具包。这是一个覆盖面相当广泛的名词，简单来说就是：辅助开发某一类软件的相关文档、演示举例和一些工具的集合，这些都可以称为 SDK。</p><p>SDK 被开发出来的意义是为了减少开发者的工作量。例如：某公司开发出某种软件的某一功能，将其封装成 SDK（例如数据分析 SDK，就是能够实现数据分析功能的SDK），出售给其他需要的公司使用。这样就可以大大减少开发应用程序的工作量。</p><p>本质上是具有很强关联性的两个存在。我们可以将 SDK 解释为封装好功能的一个软件包，而这个软件包几乎是封闭的状态，只有一个接口可以进行访问，那这个接口就是我们所了解的 API。</p><h2 id="引入自定义的SDK"><a href="#引入自定义的SDK" class="headerlink" title="引入自定义的SDK"></a>引入自定义的SDK</h2><p><strong>SDK****包</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261942998.png" alt="img"></p><p><strong>引用处</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261942661.png" alt="img"></p><p>引用处pom文件：引入SDK的包</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261942612.png" alt="img"></p><p><strong>SDK打包</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261942192.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28 ElasticSearch</title>
      <link href="/2025/02/26/28%20ElasticSearch/"/>
      <url>/2025/02/26/28%20ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h1 id="28-ElasticSearch"><a href="#28-ElasticSearch" class="headerlink" title="28 ElasticSearch"></a>28 ElasticSearch</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/u011863024/article/details/115721328?ops_request_misc=%7B%22request_id%22:%22171680192916800188595883%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171680192916800188595883&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115721328-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=ES&spm=1018.2226.3001.4187">Elasticsearch学习笔记</a>；</li><li>[ES创建索引](<a href="https://blog.csdn.net/qq_43720551/article/details/131160035?ops_request_misc=%7B%22request_id%22:%22171686695816800225539998%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171686695816800225539998&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131160035-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=ES">https://blog.csdn.net/qq_43720551/article/details/131160035?ops_request_misc=%7B%22request%5Fid%22%3A%22171686695816800225539998%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171686695816800225539998&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-131160035-null-null.142^v100^pc_search_result_base1&amp;utm_term=ES</a> 索引创建&amp;spm&#x3D;1018.2226.3001.4187)；</li><li>[Java集成elasticsearch；](<a href="https://blog.csdn.net/weixin_45410882/article/details/127030381?ops_request_misc=%7B%22request_id%22:%22171694858216800197071724%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171694858216800197071724&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-127030381-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=ES">https://blog.csdn.net/weixin_45410882/article/details/127030381?ops_request_misc=%7B%22request%5Fid%22%3A%22171694858216800197071724%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171694858216800197071724&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-127030381-null-null.142^v100^pc_search_result_base1&amp;utm_term=ES</a> Java&amp;spm&#x3D;1018.2226.3001.4187)</li><li></li></ol><h2 id="Elasticsearch概述"><a href="#Elasticsearch概述" class="headerlink" title="Elasticsearch概述"></a>Elasticsearch概述</h2><p>Elasticsearch（简称ES）是一个开源的分布式搜索和分析引擎，属于Lucene库的一个扩展。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。ES是用Java编写的，并且作为Apache许可条款下的开放源代码发布，是当前最流行的企业级搜索引擎之一。</p><p>ES的主要特点包括：分布式的实时文档存储，每个字段都被索引并可被搜索；支持全文搜索、结构化搜索、地理位置搜索和复杂的数据聚合；可以扩展到数百台服务器，处理PB级别的数据；通过HTTP使用JSON进行通信等。ES通常用于构建实时的搜索、日志分析、监控系统等。</p><p>The Elastic Stack, 包括 Elasticsearch、 Kibana、 Beats 和 Logstash（也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p><p>它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置。ES对于全文检索具有比较好的效果。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261941598.png" alt="img"></p><h2 id="Linux环境下ES安装"><a href="#Linux环境下ES安装" class="headerlink" title="Linux环境下ES安装"></a>Linux环境下ES安装</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/smilehappiness/article/details/118466378">Linux环境下安装Elasticsearch，史上最详细的教程来啦~</a></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新用户fang</span></span><br><span class="line"><span class="comment"># 密码：fang</span></span><br><span class="line"></span><br><span class="line">su - fang</span><br><span class="line"><span class="built_in">cd</span> /home/fang/software/elasticsearch-7.8.0/bin/</span><br><span class="line">./elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、然后使用命令绑定bash即可。</span></span><br><span class="line">usermod -s /bin/bash name</span><br></pre></td></tr></table></figure><h2 id="ElasticSearch介绍"><a href="#ElasticSearch介绍" class="headerlink" title="ElasticSearch介绍"></a>ElasticSearch介绍</h2><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261941569.png" alt="img"></p><p>从图中可以看出，传统的正排索引是通过ID来查找对应的内容。那么如果我们需要查询关键词name出现在哪些ID中，就需要我们遍历整个库，对比每个ID中的Content中是否存在那么。这样导致查询效果非常的差。</p><p>所以就提出了一种倒排索引，通过将内容与ID进行绑定，一个关键词出现在哪些ID中，都会一一列出。这样如果我们查询name关键词的话，我们就可以直接获得其name关联的所有ID列表。查询效果显著上升。</p><h3 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261941263.png" alt="img"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;flowCode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flowNodeIdList&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flowDeviceIdList&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flowVideoIdList&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;visitorId&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">public class FlowEventPO <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    private Long flowCode;</span><br><span class="line"></span><br><span class="line">    private List&lt;Long&gt; flowNodeIdList;</span><br><span class="line"></span><br><span class="line">    private List&lt;Long&gt; flowDeviceIdList;</span><br><span class="line"></span><br><span class="line">    private List&lt;Long&gt; flowVideoIdList;</span><br><span class="line"></span><br><span class="line">    private LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    private Long visitorId;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>在postman中，向ES发送请求：<a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0">http://127.0.0.1:9200/索引名称</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;flow_events&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;flowCode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;flowDeviceIdList&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;flowNodeIdList&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;flowVideoIdList&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;visitorId&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;creation_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1716805408945&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1AMQGj_GQZG7V3IDf8VODg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7080099&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;provided_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;flow_events&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>在 Postman 中，向 ES 服务器发 DELETE 请求 ： <a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0">http://127.0.0.1:9200/索引名称</a></p><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>假设已经创建好了索引，现在我们需要在索引中添加数据（文档，对应MySQL中的一行数据，元组）。</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0/_doc%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E7%B1%BB%E4%BC%BC%E4%B8%BA%E5%A6%82%E4%B8%8B%E8%BF%99%E7%A7%8D%EF%BC%8C%E4%BD%86%E6%98%AF%E5%85%B6%E5%B1%9E%E6%80%A7%E7%B1%BB%E5%9E%8B%E5%90%8D%E7%A7%B0%E9%83%BD%E9%9C%80%E8%A6%81%E8%B7%9F%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E6%97%B6%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E3%80%82">http://127.0.0.1:9200/索引名称/_doc，请求体JSON内容类似为如下这种，但是其属性类型名称都需要跟建立索引时保持一致。</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span><span class="string">&quot;小米&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3999.00</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意，此处发送请求的方式必须为 POST，不能是 PUT，否则会发生错误 。</p><p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下， ES 服务器会随机生成一个。</p><p>如果想要自定义唯一性标识，需要在创建时指定： <a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0/_doc/1%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BD%93JSON%E5%86%85%E5%AE%B9%E4%B8%BA%E5%92%8C%E4%B8%8A%E9%9D%A2%E4%BE%9D%E6%97%A7%E4%B8%80%E6%A0%B7%E5%8D%B3%E5%8F%AF%E3%80%82">http://127.0.0.1:9200/索引名称/_doc/1，请求体JSON内容为和上面依旧一样即可。</a></p><h3 id="查询-主键查询-全查询"><a href="#查询-主键查询-全查询" class="headerlink" title="查询-主键查询 &amp; 全查询"></a>查询-主键查询 &amp; 全查询</h3><p>根据主键查询，在 Postman 中，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0/_doc/1">http://127.0.0.1:9200/索引名称/_doc/1</a></p><p>查看索引下所有数据，向 ES 服务器发 GET 请求 ： <a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0/_search%E3%80%82">http://127.0.0.1:9200/索引名称/_search。</a></p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="全修改"><a href="#全修改" class="headerlink" title="全修改"></a>全修改</h4><p>和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖。</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0/_doc/1">http://127.0.0.1:9200/索引名称/_doc/1</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;华为手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span><span class="string">&quot;华为&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://www.gulixueyuan.com/hw.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">1999.00</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h4><p>修改数据时，也可以只修改某一给条数据的局部信息</p><p>在 Postman 中，向 ES 服务器发 POST 请求 ： <a href="http://127.0.0.1:9200/%E7%B4%A2%E5%BC%95%E5%90%8D%E7%A7%B0/_update/1%E3%80%82">http://127.0.0.1:9200/索引名称/_update/1。</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span><span class="string">&quot;小米&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="条件查询-分页查询-查询排序"><a href="#条件查询-分页查询-查询排序" class="headerlink" title="条件查询 &amp; 分页查询 &amp; 查询排序"></a>条件查询 &amp; 分页查询 &amp; 查询排序</h3><h2 id="SpringBoot集成ElasticSearch"><a href="#SpringBoot集成ElasticSearch" class="headerlink" title="SpringBoot集成ElasticSearch"></a>SpringBoot集成ElasticSearch</h2><h3 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/m0_64210833/article/details/135274603">【Java】SpringBoot快速整合ElasticSearch</a></li><li><a href="https://blog.csdn.net/qq_42397932/article/details/139603575">12-Springboot集成Elasticsearch</a></li></ol><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">uris:</span> <span class="string">http://localhost:9200</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 Linux环境下搭建ELK（Elasticsearch+Logstash+Kibana）</title>
      <link href="/2025/02/26/30%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/02/26/30%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="30-分布式环境"><a href="#30-分布式环境" class="headerlink" title="30 分布式环境"></a>30 分布式环境</h1><h2 id="分布式Session"><a href="#分布式Session" class="headerlink" title="分布式Session"></a>分布式Session</h2><p>用户登录之后，负载均衡会将这个请求按照一定的规则分发到各个主机中，这时候就会存在分布式环境下一个经典问题——信息不对等。因为用户A登录的主机可能是主机A，其登录信息就会保存在主机A中，但是之后的请求如果分发到了主机B中，那么主机B就没有用户A的登录信息，就需要重新登录，很是麻烦。那么这里的分布式Session试着解决这个问题。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261941570.png" alt="img"></p><h3 id="方案一-Session复制"><a href="#方案一-Session复制" class="headerlink" title="方案一 Session复制"></a>方案一 Session复制</h3><p> 方案一顾名思义就是通过复制Session到各个不同主机下的Tomcat中，很显然这样会导致一个很严重的问题就是内存问题。我们大胆的假设我们有100台主机，有100个Tomcat，每一个Tomcat都存有近1G的信息。按照这种方案来说，每个Tomcat都需要存储其他99个Tomcat的信息，这样每个主机需要超过100G的内存。</p><p>而且不同的Tomcat之间传输Session复制都是通过网络进行数据传输，这样会占用大量的带宽，还存在延迟，十分影响我们的业务处理速度。</p><p>很显然这种方案很不理想，成本太高。</p><h3 id="方案二-客户端保存Session"><a href="#方案二-客户端保存Session" class="headerlink" title="方案二 客户端保存Session"></a>方案二 客户端保存Session</h3><p>该方案通过将Session保存至客户端，这样每次请求都会携带对应的Session信息来进行访问。</p><p>我们用登录来进行介绍。用户A在主机A中登录，获得了Token信息，并返回。用户A此时对主机B进行请求，携带Token过去，但是主机B中无该Token记录的信息。</p><p>那么此时主机A可以直接返回用户信息，之后请求携带该用户信息直接进行访问，但是这样就会保存用户信息非常不安全。</p><h3 id="方案三-Hash一致"><a href="#方案三-Hash一致" class="headerlink" title="方案三 Hash一致"></a>方案三 Hash一致</h3><p>该方案通过对用户的IP地址进行hash运算，根据结果来分配其接受的服务器。</p><p>比如我们现在有两台服务器，用户A的请求过来后，对该IP地址对2取余，余数1就是A服务器，反之为B服务器。这样通过固定用户请求服务器来达到信息对等。</p><p>但是如果我们的服务需要水平扩展，比如添加两台服务器，现在我们就有了四台服务器，我们就需要重新为用户IP进行运算得到其服务器的地址，但是这样之前某些用户的登录信息可能丢失。</p><p>以上缺点问题不大，而且后来呢，我们ip 哈希的这种也用的比较多，因为基于session本来就是具有有效期的，就算这次因为水平扩展原因或者服务器闪断原因没有了，那就相当于浏览器关掉了呗，那我们让用户重新再做一次登录即可</p><h3 id="方案四-统一存储"><a href="#方案四-统一存储" class="headerlink" title="方案四 统一存储"></a>方案四 统一存储</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261941545.png" alt="img"></p><p>所有服务器生成的Token和用户信息都保存到统一的Redis中，完美解决该问题。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32 JVM</title>
      <link href="/2025/02/26/32%20JVM/"/>
      <url>/2025/02/26/32%20JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="32-JVM"><a href="#32-JVM" class="headerlink" title="32 JVM"></a>32 JVM</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/weixin_43122090/article/details/105093777?ops_request_misc=%7B%22request_id%22:%22171774851216800185892837%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171774851216800185892837&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105093777-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=JVM&spm=1018.2226.3001.4187">一篇文章掌握整个JVM，JVM超详细解析！！！</a></li></ol><h2 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h2><h3 id="JDK-VS-JRE-VS-JVM"><a href="#JDK-VS-JRE-VS-JVM" class="headerlink" title="JDK VS JRE VS JVM"></a>JDK VS JRE VS JVM</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943455.png" alt="img"></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JVM（Java虚拟机），或称为JDK（Java开发工具包）的一部分，实际上是操作系统上的一个软件，充当着操作系统和Java程序之间的桥梁。JVM是JDK的重要组成部分——其核心模块。Java之所以能够具备跨平台运行的能力，主要得益于JVM。JVM为每一种操作系统都进行了特定的适配，负责将Java字节码转换为该操作系统所特定的二进制代码，从而实现跨平台运行。</p><p>接下来，我们主要探讨一下JVM所实现的功能。从上述内容可以看出，JVM的主要职责是处理字节码，将字节码转换为相应的机器码并执行。此外，它还负责运行Java程序，而程序运行离不开特定的运行机制。程序运行时也需要数据支持，因此需要对这些数据进行存储和管理。基于这些需求，JVM的功能可以分为三个重要模块：类加载器、执行引擎和运行时数据区。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943404.png" alt="image-20240923114242866"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943719.png" alt="image-20240923114402591"></p><p>整个JVM就是一个厨房，字节码就是食材，JVM需要把字节码加工运行成所需要的样子。谁来处理食材呢——类加载器，它负责处理字节码文件，并把该字节码文件加载到运行时数据区（存放在厨房内，准备做菜）。</p><p>接下来厨师上场——执行引擎，负责运行该字节码，但是因为每个厨房工具不一样，所以执行引擎会把字节码翻译成对应的机器码文件从而成功运行。</p><h2 id="JVM运行数据区"><a href="#JVM运行数据区" class="headerlink" title="JVM运行数据区"></a>JVM运行数据区</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>JVM会划定这个厨房的大小，所有数据都会存放在这个厨房内，也会有保洁阿姨（垃圾回收机制）来清理不需要用的食材（过期无用数据），如果这个厨房保存不了食材了，厨师都无法操作运行了，就会报（OutOfMemoryError 异常）很显然内存泄漏啦。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943697.png" alt="image-20240923203754763"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943596.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503052301817.png" alt="image-20250305230101760"></p><h3 id="2-1-方法区（Method-Area）"><a href="#2-1-方法区（Method-Area）" class="headerlink" title="2.1 方法区（Method Area）"></a>2.1 方法区（Method Area）</h3><p>方法区是所有线程共享的内存区域，它用于存储已被Java虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。</p><p>它有个别为叫Non-Heap（非堆）。当方法区无法满足内存分配需求时，抛出OutOfMemoryError异常。</p><h3 id="2-2-Java堆（Java-Heap）"><a href="#2-2-Java堆（Java-Heap）" class="headerlink" title="2.2 Java堆（Java Heap）"></a>2.2 Java堆（Java Heap）</h3><p>java堆是java虚拟机所管理的内存中最大的一块，是被所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例。</strong></p><p>在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p><p>java堆是垃圾收集器管理的主要区域，因此也被称为“GC堆”。</p><p>从内存回收角度来看java堆可分为：新生代和老生代。</p><p>从内存分配的角度看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区。</p><p>无论怎么划分，都与存放内容无关，无论哪个区域，存储的都是对象实例，进一步的划分都是为了更好的回收内存，或者更快的分配内存。</p><p>根据Java虚拟机规范的规定，java堆可以处于物理上不连续的内存空间中。当前主流的虚拟机都是可扩展的（通过 -Xmx 和 -Xms 控制）。如果堆中没有内存可以完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h3 id="2-3-程序计数器（Program-Counter-Register）"><a href="#2-3-程序计数器（Program-Counter-Register）" class="headerlink" title="2.3 程序计数器（Program Counter Register）"></a>2.3 程序计数器（Program Counter Register）</h3><p>程序计数器是一块较小的内存空间，它可以看作是：<strong>保存当前线程所正在执行的字节码指令的地址(行号)</strong></p><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都有一个独立的程序计数器，各个线程之间计数器互不影响，独立存储。称之为“线程私有”的内存。程序计数器内存区域是虚拟机中唯一没有规定OutOfMemoryError情况的区域。</p><h3 id="2-4-Java虚拟机栈（Java-Virtual-Machine-Stacks）"><a href="#2-4-Java虚拟机栈（Java-Virtual-Machine-Stacks）" class="headerlink" title="2.4 Java虚拟机栈（Java Virtual Machine Stacks）"></a>2.4 Java虚拟机栈（Java Virtual Machine Stacks）</h3><p>java虚拟机是线程私有的，它的生命周期和线程相同。</p><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p><p>解释：每虚拟机栈中是有单位的，单位就是栈帧，一个方法一个栈帧。一个栈帧中他又要存储，局部变量，操作数栈，动态链接，出口等。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943063.png" alt="img"></p><h3 id="2-5-本地方法栈（Native-Method-Stack）"><a href="#2-5-本地方法栈（Native-Method-Stack）" class="headerlink" title="2.5 本地方法栈（Native Method Stack）"></a>2.5 本地方法栈（Native Method Stack）</h3><p>本地方法栈很好理解，他很栈很像，只不过方法上带了 native 关键字的栈字</p><p>它是虚拟机栈为虚拟机执行Java方法（也就是字节码）的服务</p><p>native关键字的方法是看不到的，必须要去oracle官网去下载才可以看的到，而且native关键字修饰的大部分源码都是C和C++的代码。</p><p>同理可得，本地方法栈中就是C和C++的代码</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943516.png" alt="img"></p><h2 id="类的加载过程详解"><a href="#类的加载过程详解" class="headerlink" title="类的加载过程详解"></a>类的加载过程详解</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/weixin_42638946/article/details/113698017?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171946924916800182126457%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171946924916800182126457&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-113698017-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=Java%E7%B1%BB%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&spm=1018.2226.3001.4187">第20章 类的加载过程详解</a></li><li></li></ol><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>从上面的概述中我们了解到，对于JVM虚拟机来说，字节码文件就是这个厨房所需要加工的各种食材以及加工说明书，JVM需要按照要求完成说明书上的内容后得到对应的菜品。</p><p>那么这里我们先来看看接收食材的这位负责人（类加载器）是如何把这些食材接收到厨房内的。</p><p>下面是该负责人的工作流程：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943059.png" alt="image-20240923190314725"></p><p>类加载器如上图所示：类被类加载器接收后，到成为无效数据被清理一共会经历类加载器的七个阶段，也是类的七个阶段：加载、验证、准备、解析、初始化、使用和卸载。其中验证、准备和解析被称为连接。</p><p>接下来我们跟随食材（类）和类加载器的视角来看看它们是如何工作的。</p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>你可以把自己想象成一个包裹（类），其中包含了各种食材（数据）和食材操作说明（方法）。某一天，你被一个陌生人（应用）丢给了面前这个守门人（类加载器）。这个守门人负责管理进入这个神奇厨房（JVM）的所有包裹。</p><p>它打开了你，发现你内部的数据形式五花八门，有些是 <code>.class</code> 文件，有些是 <code>.jar</code> 包，甚至可能是通过网络获取的数据。然而，这些数据不能以原始的形式直接进入厨房。于是，它会将这些数据转换为统一的格式（即二进制字节流），以确保它们符合厨房的标准。</p><p>接着，类加载器允许你进入厨房，但它并没有就此离开，还会一直跟着你，因为你在进入厨房后需要进一步的处理和验证。</p><p>与此同时，你发现一个与你几乎一模一样的影子（<code>java.lang.Class</code> 对象）伴随着你出现。这个影子是为了后续的反射操作准备的，它会在厨房的工作过程中起到重要作用。</p><p>经过层层检查，你终于被允许进入厨房，实际上就是进入了操作系统分配给 JVM 的内存区域，等待着进一步的处理和执行。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>接下来，你被分配到了厨房中的一个房间。你稍作等待，类加载器（JVM 的守门人）推门而入，开始对你进行详细检查。它仔细审视你的每一个包裹，核查其中被加工过的字节码文件是否符合厨房的规定，确保没有混乱无序的“食材”（数据）进入下一步操作。</p><p>接着，类加载器会检查你的操作说明书（方法）。首先，它会核对访问控制关键字，确保你只能访问你有权访问的字段和方法。然后，它会仔细检查你是否按规定操作，确保方法调用时参数的个数和类型正确无误。</p><p>类加载器还会进一步检查你在说明书中使用的“食材”（变量）是否存在，即是否已经正确初始化。此外，它会确保你使用的每一项食材都是正确的类型，保证变量被赋予了合适的值。</p><p>总的来说，类加载器会对你的数据和方法进行全面的验证，确保一切都符合规范，才能允许你进入厨房的下一阶段。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>你刚刚送走了类加载器，接下来的日子里，房间里一片寂静，时间似乎停滞了一般，不分昼夜地流逝着。等待仿佛无止境。某一天，你实在忍不住困意，倒头便睡。突然，门被一脚踹开，震得墙壁嗡嗡作响，类加载器带着一群小弟（类加载器的内部机制）气势汹汹地挤进了你的房间。</p><p>他们二话不说就开始翻找你的包裹，像是在急切地寻找什么重要的食材（这里代表类中的静态变量）。你还没来得及反应，屋里已经热闹非凡，各种翻找声此起彼伏。突然，一个小弟大喊：“找到了！”你吓了一跳，睁眼一看，他手里正拿着一个标记了 <code>static</code> 的类变量。随后，陆陆续续其他小弟也纷纷找到了类似的标记。</p><p>类加载器谨慎地登记下这些变量，接着他打开了房间一角的冰箱（JVM 的方法区或内存区域），你看到他们把这些静态变量一一放了进去，并为它们分配了地址（此过程对应 JVM 中的静态变量内存分配）。不过，这些变量还都是未经处理的原材料，没有经过任何的加工和初始化（此时 <code>static</code> 变量只是分配了空间，未初始化）。</p><p>你望着冰箱，突然注意到，里面竟然已经有了一些食材，而且这些食材已经根据说明书（程序中的字节码）被提前加工好了。你非常好奇：这些食材是何时被处理的？</p><p>一边忙碌的小弟正好经过，你赶紧凑上去打听情况。他看了看你，轻声解释道：“那些已经加工好的食材，是被 <code>static final</code> 修饰的常量。在类加载时，它们就已经完成了加工（此过程是 <code>static final</code> 变量的初始化，在类加载的准备阶段完成），所以你现在看到的是它们的最终状态。而那些只是 <code>static</code> 的变量，刚才只是分配了空间，还需要在后续被初始化。”</p><p>你似懂非懂地点了点头，虽然不完全理解，但你知道这些食材确实很重要。类加载器和他的小弟们忙活了一阵子后，带着一丝匆忙离开了房间，显然他们要去处理下一个包裹了（这代表类加载器完成了一个类的加载，接下来处理其他类的加载）。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943407.png" alt="image-20240923194750824"></p><table><thead><tr><th align="center">类型</th><th>默认初始值</th></tr></thead><tbody><tr><td align="center">byte</td><td>(byte)0</td></tr><tr><td align="center">short</td><td>(short)0</td></tr><tr><td align="center">int</td><td>0</td></tr><tr><td align="center">long</td><td>0L</td></tr><tr><td align="center">float</td><td>0.0f</td></tr><tr><td align="center">double</td><td>0.0</td></tr><tr><td align="center">char</td><td>\u0000</td></tr><tr><td align="center">boolean</td><td>false</td></tr><tr><td align="center">reference</td><td>null</td></tr></tbody></table><p>注意：</p><ol><li>这里不包含基本数据类型的字段用static final修饰的情况，因为final在编译的时候就会分配了，准备阶段会显式赋值。</li><li>注意这里不会为实例变量初始化，类变量会分配在方法区中，而实例变量会随着对象一起分配到Java堆中。</li><li>在这个阶段并不会像初始化阶段中那样会有初始化或者代码执行。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过程二：链接阶段（以下都是针对static修饰的变量）</span></span><br><span class="line"><span class="comment"> * 基本数据类型：非 final 修饰的变量，在准备环节进行默认初始化赋值。</span></span><br><span class="line"><span class="comment"> *             final修饰以后，在准备环节直接进行显示赋值。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 拓展：如果使用字面量的方式定义一个字符串的常量的话，也是在准备环节直接进行显示赋值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkingTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> id;  <span class="comment">// 默认初始化赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 显示赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">constStr</span> <span class="operator">=</span> <span class="string">&quot;CONST&quot;</span>;  <span class="comment">// 显示赋值</span></span><br><span class="line"><span class="comment">//    public static final String constStr1 = new String(&quot;CONST&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>在加载的过程中会将那些static final修饰的常量加载到常量池中，但是在类中表示的还是其直接的符号，没有对应到该常量对应的地址，所以这步需要将类中的那些常量把符号应用一律改成直接引用。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943225.png" alt="image-20240923201009650"></p><p>虚拟机常量池的符号引用替换为字节引用过程。</p><p>符号引用就是一些字面量的引用，和虚拟机的内部数据结构和内存布局无关。比较容易理解的就是在Class类文件中，通过常量池进行大量的符号引用。但是在程序实际运行时，只有符号引用时不够的。比如当如下println()方法被调用时，系统需要明确知道该方法的位置。</p><blockquote><p>从准备阶段可以看出，类的静态变量在类加载、验证符合JVM规范后就会开始分配内存并设定变量初始值，这些值都会保存在方法区中。</p></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化就是要为那些在之前没有被初始化的static类变量进行初始化，什么时候会进行初始化呢：</p><p><strong>总结就是</strong>：初始化是为类的静态变量赋予正确的初始值。使用static + final修饰，且显示赋值中不涉及到方法或构造器调用的基本数据类型或String类型的显式赋值，是在链接阶段的准备环节进行。对于类变量来说，如果加了 final，才有可能在链接的准备阶段 被显式赋值；但是如果没加final，一定不可能在链接的准备阶段 被显式赋值，而是在链接的准备阶段 默认赋值，然后在初始化阶段显式赋值。</p><p><strong>说明：</strong></p><p>在加载一个类之前，虚拟机总会试图加载该类的父类，因此父类的<clinit> 总是在子类 <clinit> 之前被调用。也就是说，父类的static块优先级高于子类。</p><p><strong>口诀：由父及子，静态先行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        number = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;father static&#123;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubInitialization</span> <span class="keyword">extends</span> <span class="title class_">InitializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        number = <span class="number">4</span>;  <span class="comment">// number属性必须提前已经加载：一定会先加载父类。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;son static&#123;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p><strong>作用</strong>：负责将.class文件（存储的物理文件）加载在到内存中。通过加载<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E7%A0%81&spm=1001.2101.3001.7020">字节码</a>数据放入内存转换成byte[]，接下来调用虚拟机底层方法将byte[]转换成方法区和堆中的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943658.png" alt="image-20240923202615805"></p><p>简单来说就是加载类的字节码文件到内存中，并转换成字节流。</p><p>类加载器分为下面：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261943573.png" alt="image-20240923202728419"></p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261944161.png" alt="image-20240923203004469"></p><p>因为类加载器存在多个，所以一个类需要加载的时候，如何选择哪个类加载器进行加载呢？这里的策略就是双亲委派机制，就是子类不先自己加载，请子类的父类加载器进行加载，然后一直递归知道最上层，如果父类无法加载该类，则由子类自行加载。</p><p>那么为什么需要使用这种策略呢？如果直接让子类自己加载会出现什么问题呢？如果直接从子类进行加载，那么就会出现同一个类就可能会出现使用的不同的类加载器加载，这样就导致同一个类却不想等。但是双亲委派机制可以避免这个问题，无论你使用哪个类加载器，其最后都会优先向上层的类加载器加载，可以有效的避免这个问题。</p><h2 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h2><h3 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_35246620/article/details/80522720?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171947954116800184145363%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171947954116800184145363&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80522720-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&spm=1018.2226.3001.4187">深入理解 JVM 垃圾回收机制及其实现原理</a></li><li><a href="https://mp.weixin.qq.com/s/ISIOd8bD0b3ZzpHGqXCe2g">【不做标题党】Java虚拟机何谓垃圾及垃圾回收算法</a></li><li></li></ol><h3 id="垃圾"><a href="#垃圾" class="headerlink" title="垃圾"></a>垃圾</h3><h4 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h4><p>在 JVM 进行垃圾回收之前，首先就是判断哪些对象是垃圾，也就是说，要判断哪些对象是可以被销毁的，其占有的空间是可以被回收的。根据 JVM 的架构划分，我们知道， 在 Java 世界中，几乎所有的对象实例都在堆中存放，所以垃圾回收也主要是针对堆来进行的。</p><p>在 JVM 的眼中，垃圾就是指那些在堆中存在的，已经“死亡”的对象。而对于“死亡”的定义，我们可以简单的将其理解为“<strong>不可能再被任何途径使用的对象</strong>”。那怎样才能确定一个对象是存活还是死亡呢？这就涉及到了垃圾判断算法，其主要包括引用计数法和可达性分析法。</p><h4 id="垃圾判断算法"><a href="#垃圾判断算法" class="headerlink" title="垃圾判断算法"></a>垃圾判断算法</h4><h5 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h5><p>在这种算法中，假设堆中每个对象（不是引用）都有一个<strong>引用计数器</strong>。当一个对象被创建并且初始化赋值后，该对象的计数器的值就设置为 1，每当有一个地方引用它时，计数器的值就加 1，例如将对象 b 赋值给对象 a，那么 b 被引用，则将 b 引用对象的计数器累加 1。</p><p>反之，当引用失效时，例如一个对象的某个引用超过了生命周期（出作用域后）或者被设置为一个新值时，则之前被引用的对象的计数器的值就减 1。而那些引用计数为 0 的对象，就可以称之为垃圾，可以被收集。</p><p>特别地，当一个对象被当做垃圾收集时，它引用的任何对象的计数器的值都减 1。</p><ol><li>优点：引用计数法实现起来比较简单，对程序不被长时间打断的实时环境比较有利。</li><li>缺点：需要额外的空间来存储计数器，难以检测出对象之间的循环引用。</li></ol><h5 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h5><p>可达性分析法也被称之为根搜索法，可达性是指，<strong>如果一个对象会被至少一个在程序中的变量通过直接或间接的方式被其他可达的对象引用，则称该对象就是可达的</strong>。更准确的说，一个对象只有满足下述两个条件之一，就会被判断为可达的：</p><ul><li>对象是属于根集中的对象</li><li>对象被一个可达的对象引用</li></ul><p>在这里，我们引出了一个专有名词，即根集，其是指正在执行的 Java 程序可以访问的引用变量（注意，不是对象）的集合，程序可以使用引用变量访问对象的属性和调用对象的方法。<strong>在 JVM 中，会将以下对象标记为根集中的对象</strong>，具体包括：</p><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中的常量引用的对象</li><li>方法区中的类静态属性引用的对象</li><li>本地方法栈中 JNI（Native 方法）的引用对象</li><li>活跃线程（已启动且未停止的 Java 线程）</li></ol><p>根集中的对象称之为<code>GC Roots</code>，也就是根对象。可达性分析法的基本思路是：将一系列的根对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，如果一个对象到根对象没有任何引用链相连，那么这个对象就不是可达的，也称之为不可达对象。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261944033.png" alt="img"></p><p>开始进行标记前，需要先暂停应用线程，否则如果对象图一直在变化的话是无法真正去遍历它的。暂停应用线程以便 <strong>JVM 可以尽情地收拾家务的这种情况又被称之为安全点（Safe Point）</strong>，这会触发一次 Stop The World（STW）暂停。触发安全点的原因有许多，但最常见的应该就是垃圾回收了。</p><p>安全点的选定基本上是以程序“<strong>是否具有让程序长时间执行的特征</strong>”为标准进行选定的。“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生安全点。对于安全点，另一个需要考虑的问题就是如何在 GC 发生时让所有线程（这里不包括执行 JNI 调用的线程）都“跑”到最近的安全点上再停顿下来。两种解决方案：</p><ol><li>抢先式中断（Preemptive Suspension）：抢先式中断不需要线程的执行代码主动去配合，在 GC 发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机采用这种方式来暂停线程从而响应 GC 事件。</li><li><strong>主动式中断</strong>（Voluntary Suspension）：主动式中断的思想是当 GC 需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。<strong>轮询标志地地方和安全点是重合的，另外再加上创建对象需要分配内存的地方</strong>。</li></ol><p>**暂停时间的长短并不取决于堆内对象的多少也不是堆的大小，而是存活对象的多少。**因此，调高堆的大小并不会影响到标记阶段的时间长短。</p><p>在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：</p><ol><li><strong>如果对象在进行根搜索后发现没有与根对象相连接的引用链，那它会被第一次标记并且进行一次筛选</strong>。筛选的条件是此对象是否有必要执行 finalize()方法（可看作析构函数，类似于 OC 中的dealloc，Swift 中的deinit）。当对象没有覆盖finalize()方法，或finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。</li><li>**如果该对象被判定为有必要执行finalize()方法，那么这个对象将会被放置在一个名为F-Queue的队列中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行finalize()方法。**finalize()方法是对象逃脱死亡命运的最后一次机会（因为一个对象的finalize()方法最多只会被系统自动调用一次），稍后 GC 将对F-Queue中的对象进行第二次小规模的标记，如果要在finalize()方法中成功拯救自己，只要在finalize()方法中让该对象重新引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉。</li></ol><p>GC 判断对象是否可达看的是强引用。</p><p>当标记阶段完成后，GC 开始进入下一阶段，删除不可达对象。当然，可达性分析法有优点也有缺点，</p><ul><li><strong>优点</strong>：可以解决循环引用的问题，不需要占用额外的空间</li><li><strong>缺点</strong>：多线程场景下，其他线程可能会更新已经访问过的对象的引用</li></ul><p>在上面的介绍中，我们多次提到了“引用”这个概念，在此我们不妨多了解一些引用的知识，在 Java 中有四种引用类型，分别为：</p><ol><li>强引用（Strong Reference）：如Object obj &#x3D; new Object()，这类引用是 Java 程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。</li><li>软引用（Soft Reference）：它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2 之后提供了SoftReference类来实现软引用。</li><li>弱引用（Weak Reference）：它也是用来描述非必须对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK1.2 之后，提供了WeakReference类来实现弱引用。</li><li>虚引用（Phantom Reference）：也称为幻引用，最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2 之后提供了PhantomReference类来实现虚引用。</li></ol><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>主机的内存空间是有限的，如果不能及时的清理掉内存中无用的信息，那么内存很快就会爆满，导致服务出现严重的问题。对于其他的语言来说，例如C、C++等都需要程序员自己进行垃圾回收。Java使用JVM来替程序员来管理主机的内存空间，那么既然JVM已经替我们管理内存空间了，那为什么还需要去学习JVM是如何回收垃圾的呢？</p><blockquote><p>在我看来，这是因为我们在实际的业务开发中，可能会遇到JVM报内存不够的错误，当我们了解了JVM是如何进行垃圾回收时，对于我们去分析问题有很大的帮助，也能够让我们在实际的开发中快速排查和解决问题。</p><p>同时另一方面，去了解一款好的产品是如何设计的，中间使用的哪些算法，那些算法对于解决特定的问题有什么样的效果，对于程序员的我们来说，这些都是非常宝贵的学习机会。</p></blockquote><p>通过上面的介绍，我们已经知道了什么是垃圾以及如何判断一个对象是否是垃圾。那么接下来，我们就来了解如何回收垃圾，这就是垃圾回收算法和垃圾回收器需要做的事情了。</p><p>PS：如果我们把内存看成一块大的四边形区域，区域中画了很多大小相同的小方格，在每个小方格中会存放一些物品（数据），现在有一个管理员负责管理这片区域（管理员JVM）。那么如果你是这个管理员你会如何管理这片区域不至于被物品塞满呢？</p><p>这片区域随时都会有物品放进来，那么你作为管理员管理这片区域时就很困难去进行管理。这时候你向领导要求当你对这片区域清理时不允许任何物品放进来，这就是JVM中的安全点的概念。</p><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>管理员想到了一种方法，他想如果我找到一个无用的物品就跑到很远的地方把这个丢了再回来中间的耗时太大了（在JVM中切换消耗较大），那么他就想如果我先把所有无效的物品标记出来，然后让车一把全部拉走且不快速。这就是标记-清楚算法，分为两步，先标记出无效的物品，然后统一清除。</p><p>标记-清除（Mark-Sweep）算法可以分为两个阶段：</p><ul><li>标记阶段：<strong>标记出所有可以回收的对象</strong>。</li><li>清除阶段：回收所有已被标记的对象，释放这部分空间。</li></ul><p>该算法存在如下不足：</p><ol><li><strong>内存碎片</strong>。由于Java虚拟机的堆中对象必须是连续分布的，因此可能出现总空闲内存足够，但是无法分配的极端情况。无法找到足够的连续内存，而不得不提前触发一次垃圾收集动作。</li><li><strong>分配效率较低</strong>。如果是一块连续的内存空间，那么我们可以通过指针加法（pointer bumping）来做分配。而对于空闲列表，Java虚拟机则需要逐个访问列表中的项，来查询能够放入新建对象的空闲内存。</li></ol><p>PS：因为在内存区域中每一个小方格的大小是固定的，如果现在有一个很大的物品，需要几十个小方格才能装下，而且我们不能把这个物品给分割（Java虚拟机的堆中对象必须是连续分布的），这时候我们没有十几个连续的小方格怎么办？</p><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>为了解决标记-清楚算法导致无较大的内存区域保存数据，即导致大量的内存碎片问题，你提出来一个新的算法——复制算法。你创造性的提出，把现在的区域再分成两个大的区域，任何时候只有一个区域工作，等你需要整理时，你会进入当前工作的那个区域，标记出当前有用的物品，复制到另外一个区域中，然后把当前区域所有物品全部清楚，让另外一个区域运行。注意你复制过去的数据会依次排放，所以不会造成内存碎片。</p><p>这样虽然解决了内存碎片问题，但很显然消耗也大，效率会降低。</p><ul><li>划分区域：将内存区域按比例划分为1个Eden区作为分配对象的“主战场”和2个幸存区（即Survivor空间，划分为2个等比例的from区和to区）。</li><li>复制：收集时，打扫“战场”，将Eden区中仍存活的对象复制到某一块幸存区中。</li><li>清除：由于上一阶段已确保仍存活的对象已被妥善安置，现在可以“清理战场”了，释放Eden区和另一块幸存区。</li><li>晋升：如在“复制”阶段，一块幸存区接纳不了所有的“幸存”对象。则直接晋升到老年代。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261944999.webp" alt="图片"></p><p><strong>该算法解决了内存碎片化问题，但堆空间的使用效率极其低下</strong>。在对象存活率较高时，需要进行较多的复制操作，效率会变得很低。</p><h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p>为了解决内存碎片化和堆利用率低的问题，你又提出了一个新的算法，该算法在安全点时，你会标记所有的需要回收丢弃的物品，同时会让那些重要的物品去替代废弃物品的位置，目的是为了让存活的物品按顺序排放，这样内存碎片就会大幅度减少。但是由于内存变动频繁，你需要消耗的时间变多了，你需要把原位置的物品搬运到新的位置，中间的消耗的时间比复制算法还要多。</p><p>该算法分为两个阶段：</p><ul><li><strong>标记阶段</strong>：<strong>标记出所有可以回收的对象</strong>。</li><li><strong>压缩阶段</strong>：将标记阶段的对象移动到<strong>空间的一端</strong>，释放剩余的空间。</li></ul><p>该算法的标记过程与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p><strong>解决了内存碎片的问题</strong>，<strong>也规避了复制算法只能利用一半内存区域的弊端</strong>。看起来很美好，<strong>但它对内存变动更频繁，需要整理所有存活对象的引用地址，在效率上比复制算法要差很多</strong>。</p><p>标记-整理算法的示意图如下： </p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261944227.png" alt="图片"></p><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>上面的几个算法存在一些让你无法接受的缺点，现在你想想一个好的办法解决这个问题。你认真的思考了前面的几种算法，复制算法导致堆的利用率降低，标记整理算法导致处理的效率降低，那么你想可不可以把这两个结合起来，形成一个新的算法来解决这个问题呢？所以你提出了分代收集算法。</p><p>想这种结合几个算法的优点形成一个新的算法的思想在计算机世界中很常用，在之后的学习以及实际工作中要学会使用。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261944507.webp" alt="图片"></p><p>分代收集算法通过把内存区域划分成几块大小不等的区域，我们称为新生代和老年代。</p><h5 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h5><p>新生代占整个内存区域的三分之一，在新生代中的对象来的快消失的也快，大量的对象创建然后死亡，很少有对象能够一直存活。</p><p>在这一片区域我们就可以选择复制算法来复制存活的对象，这样就有效的降低了复制消耗的时间，**但是复制不是会降低这片区域的使用率吗？**或者说这个损失在我们可接受的范围之内？</p><h5 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h5><p>如果对象在新生代区域中存活了几轮安全点，那么这个对象就会进入老年代，在老年代中大部分都是持久性对象，少部分对象会进入死亡。像这个需要清除对象较少的区域，我们就可以选择使用标记-清除算法或者标记-整理算法来对死亡对象进行回收。</p><h3 id="GC分类"><a href="#GC分类" class="headerlink" title="GC分类"></a>GC分类</h3><p><strong>Minor GC：</strong></p><ul><li>针对新生代。</li><li>指发生在新生代的垃圾收集动作，因为java对象大多都具备<strong>朝生夕死</strong>的特性，所以<strong>Minor GC非常频繁</strong>，一般回收速度也比较快。</li><li>触发条件：Eden空间满时。</li></ul><p><strong>Major GC：</strong></p><ul><li>针对老年代。</li><li>指发生在老年代的GC，出现了Major GC，<strong>经常会伴随至少一次的Minor GC</strong>（但非绝对的，在Parallel Scavenge 收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li><li>触发条件：Minor GC 会将对象移到老年代中，如果此时老年代空间不够，那么触发 Major GC。</li></ul><p><strong>Full GC：</strong></p><ul><li>清理整个堆空间。一定意义上Full GC 可以说是 Minor GC 和 Major GC 的结合。</li><li>触发条件：调用System.gc()；老年代空间不足；空间分配担保失败。</li></ul><h2 id="ChatGPT面试题"><a href="#ChatGPT面试题" class="headerlink" title="ChatGPT面试题"></a>ChatGPT面试题</h2><h3 id="Java内存区域和内存溢出异常面试题"><a href="#Java内存区域和内存溢出异常面试题" class="headerlink" title="Java内存区域和内存溢出异常面试题"></a>Java内存区域和内存溢出异常面试题</h3><h3 id="Promote"><a href="#Promote" class="headerlink" title="Promote"></a>Promote</h3><blockquote><p>现在假设你是一个经验丰富的JVM面试官，现在你需要针对JVM中内存区域和与内存溢出异常这一主题出一套面试题目，请你不要涉及到其它主题部分，比如垃圾回收等其他现在不需要进行考察的部分，该面试题目难度正常，简单2道，中等5道，困难3道，请你直接给出这个面试题目，要求该这套面试题目可以很好的涵盖JVM这内存管理这一主题，并且符合Java程序员需要掌握的知识点，请你避免出无意义的题目，所有的题目都具有一定的考察价值。注意：请你直接给出面试题目，无需给出答案，我后面会进行回答。</p></blockquote><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><blockquote><h3 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h3><ol><li>请简述 JVM 的内存区域划分，并说明每个区域的主要作用。  </li><li>什么是堆内存和栈内存？两者在使用上的主要区别是什么？</li></ol><h3 id="中等题"><a href="#中等题" class="headerlink" title="中等题"></a>中等题</h3><ol start="3"><li>JVM 中方法区的作用是什么？在 JDK 8 中方法区的实现有什么变化？  </li><li>什么是直接内存（Direct Memory）？它的分配受什么限制？  </li><li>当 JVM 抛出 <code>OutOfMemoryError</code> 时，可能会在哪些内存区域发生？请列举并说明可能的原因。  </li><li>在多线程环境下，本地变量存储在哪个内存区域？线程安全性如何保证？  </li><li>在 JVM 中如何通过配置调整堆内存大小？分别说明初始堆大小和最大堆大小的配置参数。</li></ol><h3 id="困难题"><a href="#困难题" class="headerlink" title="困难题"></a>困难题</h3><ol start="8"><li>当程序中频繁创建大量短生命周期的对象时，可能导致什么问题？如果程序出现了 <code>OutOfMemoryError: Java heap space</code>，该如何进行诊断和优化？  </li><li>请描述虚拟机栈溢出（<code>StackOverflowError</code>）的成因，并列举两个常见的引发场景。  </li><li>如果程序中需要频繁加载大量类，导致 <code>OutOfMemoryError: Metaspace</code>，你会如何分析和解决这个问题？</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33 Java设计模式</title>
      <link href="/2025/02/26/33%20Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/02/26/33%20Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="33-Java设计模式"><a href="#33-Java设计模式" class="headerlink" title="33 Java设计模式"></a>33 Java设计模式</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/zhangerqing/article/details/8194653">Java之美[从菜鸟到高手演变]之设计模式</a></li><li></li></ol><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>总体来说设计模式分为三大类：</p><p>创建型模式，共五种：<strong>工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</strong></p><p>结构型模式，共七种：<strong>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</strong>。</p><p>行为型模式，共十一种：<strong>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</strong>。</p><p>其实还有两类：并发型模式和线程池模式。用一个图片来整体描述一下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261946024.jpeg" alt="img"></p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="普通工厂模式"><a href="#普通工厂模式" class="headerlink" title="普通工厂模式"></a>普通工厂模式</h3><p>建立一个工厂类，该类会对实现了某一接口的类进行实例化。用户使用这个工具类时，传入需要创建类的类型，然后工厂类创建进行返回。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261946614.png" alt="img"></p><p>以这个为例，接口Sender的两个实现类Mail and Sms实现了接口定义的方法，那么在这个接口的工厂类中会这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">(String type)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;mail&quot;</span>.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;sms&quot;</span>.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入正确的类型!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SendFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendFactory</span>();</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> factory.produce(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们认真思考一下这个工厂，如果传入的数据参数出现问题，则这个工厂就不能成功创建出正常的实现类。</strong></p><p>为了解决这个问题，<strong>多个工厂方法模式</strong>出现了。</p><h3 id="多个工厂方法模式"><a href="#多个工厂方法模式" class="headerlink" title="多个工厂方法模式"></a>多个工厂方法模式</h3><p>为了解决普通工厂出现的问题，多个工厂实现类的解决方法为：<strong>为原来的普通工厂实现类添加接口实现类的实例化方法</strong>，使用者只需要调用该工厂提供的某个类的实例化方法进行创建即可，这样就不可能出现传入参数出错等问题。</p><p>SendFactory类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produceMail</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produceSms</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂使用类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SendFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendFactory</span>();</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> factory.produceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a>静态工厂方法模式</h3><p>回顾一下上文的多个工厂方法模式，如果使用者需要使用这个工厂时，就需要创建一个工厂对象，如果使用的地方过多，就会存在大量重复的工厂对象，消耗了内存，所以把这个工厂方法定义成静态工厂方法。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261946444.jpg" alt="img_v3_02c8_ad246c57-4ec6-4d0a-9d25-05cabe9293cg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title function_">produceMail</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title function_">produceSms</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> SendFactory.produceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体来说，工厂模式适合：凡是出现了<strong>大量的产品需要创建</strong>，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，<strong>我们会选用第三种——静态工厂方法模式。</strong></p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>在上文中的静态工厂模式中，如果又要新增一个类来实现这个发送行为时，就需要在原来的代码上，这里也就是工厂类中添加一个方法创建这个新的行为类。但是这个在原来的代码上进行修改的操作我们应当尽量避免，这是因为修改时可能会出现一些问题，从而造成不必要的麻烦。</p><p>所以抽象工厂模式就是为了在需要新增时不需要在原有的代码上进行修改，而是直接新增一些东西来达到效果。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261946474.jpg" alt="img_v3_02c8_ad246c57-4ec6-4d0a-9d25-05cabe9293cg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailSender</span> <span class="keyword">implements</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Send</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;this is mailsender!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsSender</span> <span class="keyword">implements</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Send</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;this is sms sender!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailFactory</span> <span class="keyword">implements</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title class_">Provider</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Provider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendMailFactory</span>();</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> provider.produce();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，<strong>无需去改动现成的代码。这样做，拓展性较好！</strong></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，<strong>该对象只有一个实例存在</strong>。这样的模式有几个好处：</p><p>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</p><p>2、省去了new操作符，<strong>降低了系统内存的使用频率，减轻GC压力</strong>。</p><p>3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 私有构造方法，防止被实例化 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 静态工程方法，创建实例 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这个单例类虽然可以完成大部分需求，但是如果身处于多线程环境下，就会出现创建多个实例的情况，这就严重违背了单例模式的初衷。</p><blockquote><p><strong>竞态条件（Race Condition）</strong>：多个线程同时调用 <code>getInstance()</code> 方法并且 <code>instance</code> 变量当前为 <code>null</code> 时，会导致多个线程同时进入 <code>if (instance == null)</code> 代码块。</p><p><strong>多个实例创建</strong>：由于多个线程可以同时进入 <code>if</code> 块，它们都会尝试创建一个新的 <code>Singleton</code> 实例。这会导致创建多个 <code>Singleton</code> 实例，从而破坏单例模式的设计意图。</p></blockquote><h3 id="方法加锁"><a href="#方法加锁" class="headerlink" title="方法加锁"></a>方法加锁</h3><p>那么就可以给类的方法添加Synchronized关键字，给这个方法加上锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>synchronized加在方法上，则是给这个对象上锁，这里是静态方法，那就是给这个类上锁。实际情况是，只有在初始创建该单例类的时候需要上锁，其他时候不需要上锁，所以这里有可以改进的空间。</p><h3 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>a&gt;A、B线程同时进入了第一个if判断</p></li><li><p>b&gt;A首先进入synchronized块，由于instance为null，所以它执行instance &#x3D; new Singleton();</p></li><li><p>c&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。</p></li><li><p>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。</p></li><li><p>e&gt;此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。</p></li></ol><p>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化。</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，<strong>静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有static修饰的方法，所以即使实现了也是非静态的）</strong></p><p>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。</p><p>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。</p><p>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</p><h4 id="为什么这破坏了静态特性"><a href="#为什么这破坏了静态特性" class="headerlink" title="为什么这破坏了静态特性"></a>为什么这破坏了静态特性</h4><p>在Java中，”静态类”一般是指静态内部类（Static Nested Class），而不是顶级类，因为Java不支持顶级类使用<code>static</code>修饰。静态内部类是可以实现接口的，但它实现接口中的方法将是实例方法而不是静态方法。</p><p>这个观点的核心是：接口中的方法不能是静态方法，所有接口中的方法都是实例方法。因此，即使静态内部类实现了接口，它实现的方法也是非静态的，这就破坏了静态类的纯粹静态特性。</p><p>如果希望所有方法都能通过类名直接调用（即静态方法），那么实现接口会破坏这一点，因为接口的方法不能是静态的。静态内部类在实现接口时，必须实现接口的实例方法，这意味着需要创建类的实例来调用这些方法</p><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：</p><p>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Sender&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Sender&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceMailSender</span><span class="params">(<span class="type">int</span> count)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">MailSender</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceSmsSender</span><span class="params">(<span class="type">int</span> count)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">SmsSender</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">builder.produceMailSender(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p><h2 id="原型模式（Prototype）"><a href="#原型模式（Prototype）" class="headerlink" title="原型模式（Prototype）"></a>原型模式（Prototype）</h2><p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prototype</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"><span class="type">Prototype</span> <span class="variable">proto</span> <span class="operator">=</span> (Prototype) <span class="built_in">super</span>.clone();</span><br><span class="line"><span class="keyword">return</span> proto;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：</p><p>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</p><p>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34-03 Tong Web安装</title>
      <link href="/2025/02/26/34-03%20TongWeb%E5%AE%89%E8%A3%9D/"/>
      <url>/2025/02/26/34-03%20TongWeb%E5%AE%89%E8%A3%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="34-03-Tong-Web安装"><a href="#34-03-Tong-Web安装" class="headerlink" title="34-03 Tong Web安装"></a>34-03 Tong Web安装</h1><p>自行下载，</p><p><a href="https://blog.csdn.net/qq_38377190/article/details/127764475">TongWeb7本地部署（Windows）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">startserver.bat 启动项目</span><br><span class="line"></span><br><span class="line">stopserver.bat 停止项目</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9060/console</span><br><span class="line"></span><br><span class="line">默认账号：thanos</span><br><span class="line"></span><br><span class="line">默认密码：thanos123.com</span><br><span class="line"></span><br><span class="line">现在本地密码是!Fyh2380514719</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261950510.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tong Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34-04 Milvus</title>
      <link href="/2025/02/26/34-04%20Milvus/"/>
      <url>/2025/02/26/34-04%20Milvus/</url>
      
        <content type="html"><![CDATA[<h1 id="34-04-Milvus"><a href="#34-04-Milvus" class="headerlink" title="34-04 Milvus"></a>34-04 Milvus</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/lsb2002/article/details/132222947">为AI而生的数据库：Milvus详解及实战</a></li></ol><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="Python使用Demo"><a href="#Python使用Demo" class="headerlink" title="Python使用Demo"></a>Python使用Demo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装 Python 客户端</span><br><span class="line">pip install pymilvus</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 3. 初始化 Milvus 客户端</span><br><span class="line"></span><br><span class="line">from pymilvus import connections as milvus</span><br><span class="line"></span><br><span class="line"># 初始化一个 Milvus 客户端，默认连接到本地的 Milvus 服务</span><br><span class="line">client = milvus.connect(&#x27;default&#x27;, host=&#x27;localhost&#x27;, port=&#x27;19530&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 4. 创建集合</span><br><span class="line"></span><br><span class="line">collection_name = &quot;face_collection&quot;</span><br><span class="line"></span><br><span class="line"># 创建集合，确保集合不存在</span><br><span class="line">if not client.has_collection(collection_name):</span><br><span class="line">    client.create_collection(collection_name)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 5. 定义向量字段的类型</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 定义向量字段的类型，假设向量维度为 128</span><br><span class="line">fields = [</span><br><span class="line">    (&quot;face_vector&quot;, &quot;float_vector&quot;, 128),</span><br><span class="line">    (&quot;face_name&quot;, &quot;text&quot;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 6. 插入数据</span><br><span class="line"># 准备一些示例数据</span><br><span class="line">data_to_insert = [</span><br><span class="line">    &#123;&quot;face_vector&quot;: np.random.random(128).tolist(), &quot;face_name&quot;: &quot;Person1&quot;&#125;,</span><br><span class="line">    &#123;&quot;face_vector&quot;: np.random.random(128).tolist(), &quot;face_name&quot;: &quot;Person2&quot;&#125;,</span><br><span class="line">    # ... 更多数据</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">insert_result = client.insert(collection_name, fields, data_to_insert)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">7. 搜索相似向量</span><br><span class="line"># 准备一个查询向量</span><br><span class="line">query_vector = np.random.random(128).tolist()</span><br><span class="line"></span><br><span class="line"># 定义搜索参数</span><br><span class="line">search_params = &#123;</span><br><span class="line">    &quot;nprobe&quot;: 10,</span><br><span class="line">    &quot;metric_type&quot;: &quot;L2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 执行搜索</span><br><span class="line">top_k = 1  # 返回最相似的一个结果</span><br><span class="line">results = client.search(collection_name, &quot;face_vector&quot;, query_vector, top_k, search_params)</span><br><span class="line"></span><br><span class="line"># 打印结果</span><br><span class="line">for result in results:</span><br><span class="line">    for item in result:</span><br><span class="line">        print(f&quot;相似度: &#123;item.distance&#125;, 对应字符串: &#123;item.entity.get(&#x27;face_name&#x27;)[0]&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> connections <span class="keyword">as</span> milvus</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Milvus 客户端</span></span><br><span class="line">client = milvus.connect(<span class="string">&#x27;default&#x27;</span>, host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="string">&#x27;19530&#x27;</span>)</span><br><span class="line"></span><br><span class="line">collection_name = <span class="string">&quot;face_collection&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> client.has_collection(collection_name):</span><br><span class="line">    client.create_collection(collection_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义向量字段的类型</span></span><br><span class="line">fields = [</span><br><span class="line">    (<span class="string">&quot;face_vector&quot;</span>, <span class="string">&quot;float_vector&quot;</span>, <span class="number">128</span>),</span><br><span class="line">    (<span class="string">&quot;face_name&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">data_to_insert = [</span><br><span class="line">    &#123;<span class="string">&quot;face_vector&quot;</span>: np.random.random(<span class="number">128</span>).tolist(), <span class="string">&quot;face_name&quot;</span>: <span class="string">&quot;Person1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;face_vector&quot;</span>: np.random.random(<span class="number">128</span>).tolist(), <span class="string">&quot;face_name&quot;</span>: <span class="string">&quot;Person2&quot;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">insert_result = client.insert(collection_name, fields, data_to_insert)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备一个查询向量</span></span><br><span class="line">query_vector = np.random.random(<span class="number">128</span>).tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义搜索参数</span></span><br><span class="line">search_params = &#123;</span><br><span class="line">    <span class="string">&quot;nprobe&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;L2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行搜索</span></span><br><span class="line">top_k = <span class="number">1</span>  <span class="comment"># 返回最相似的一个结果</span></span><br><span class="line">results = client.search(collection_name, <span class="string">&quot;face_vector&quot;</span>, query_vector, top_k, search_params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;相似度: <span class="subst">&#123;item.distance&#125;</span>, 对应字符串: <span class="subst">&#123;item.entity.get(<span class="string">&#x27;face_name&#x27;</span>)[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理资源</span></span><br><span class="line">client.drop_collection(collection_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Milvus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Milvus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34-02 TongSearch安装教程</title>
      <link href="/2025/02/26/34-02%20TongSearch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2025/02/26/34-02%20TongSearch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="34-02-TongSearch安装教程"><a href="#34-02-TongSearch安装教程" class="headerlink" title="34-02 TongSearch安装教程"></a>34-02 TongSearch安装教程</h1><h2 id="Ubuntu环境下TongSearch安装"><a href="#Ubuntu环境下TongSearch安装" class="headerlink" title="Ubuntu环境下TongSearch安装"></a>Ubuntu环境下TongSearch安装</h2><p>下载安装包到任意目录</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949715.png" alt="image-20240716100748373"></p><p>解压至当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip TongSearch.zip</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949155.png" alt="image-20240716100924229"></p><p>开放端口9200和9300</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 9200/tcp</span><br><span class="line">sudo ufw allow 9300/tcp</span><br></pre></td></tr></table></figure><p>JDK配置，确保本地配置了JDK如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/java/jdk-11.0.19</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_PATH&#125;</span><br></pre></td></tr></table></figure><p>系统配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><p>系统运行</p><p>进入TongSearch安装的目录</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949098.png" alt="image-20240716104246574"></p><h3 id="TongSearch启动"><a href="#TongSearch启动" class="headerlink" title="TongSearch启动"></a>TongSearch启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br><span class="line"></span><br><span class="line">./bin/tongsearch -d -p pid</span><br></pre></td></tr></table></figure><p>关闭程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill pid</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合TongSearch"><a href="#SpringBoot整合TongSearch" class="headerlink" title="SpringBoot整合TongSearch"></a>SpringBoot整合TongSearch</h2><p>与SpringBoot整合elasticSearch一致。</p><p>添加elasticSearch依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--   ElasticSearch依赖     --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>yml配置</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949546.png" alt="image-20240716114845583"></p><p>定义实体类</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949608.png" alt="image-20240716174450151"></p><p>创建索引user</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949441.png" alt="image-20240716174539000"></p><p>控制层</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949772.png" alt="image-20240716174606561"></p><p>mapper</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949577.png" alt="image-20240716174629442"></p><p>Service</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261949197.png" alt="image-20240716174651105"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TongSearch </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36 Java注解 &amp; 切面 &amp; 反射</title>
      <link href="/2025/02/26/36%20Java%E6%B3%A8%E8%A7%A3%20&amp;%20%E5%88%87%E9%9D%A2%20&amp;%20%E5%8F%8D%E5%B0%84/"/>
      <url>/2025/02/26/36%20Java%E6%B3%A8%E8%A7%A3%20&amp;%20%E5%88%87%E9%9D%A2%20&amp;%20%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="36-Java注解-切面-反射"><a href="#36-Java注解-切面-反射" class="headerlink" title="36 Java注解 &amp; 切面 &amp; 反射"></a>36 Java注解 &amp; 切面 &amp; 反射</h1><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="1-注解的概念"><a href="#1-注解的概念" class="headerlink" title="1.注解的概念"></a>1.注解的概念</h3><ol><li>注解是一种元数据形式。即注解是属于Java的一种数据类型，和类、接口、数组、枚举类似。</li><li>注解用来修饰，类、方法、变量、参数、包。</li><li><strong>注解不会对所修饰的代码产生直接的影响。</strong></li></ol><h3 id="2-注解的使用范围"><a href="#2-注解的使用范围" class="headerlink" title="2.注解的使用范围"></a>2.注解的使用范围</h3><blockquote><p>注解又许多用法，其中有：<strong>为编译器提供信息</strong> - 注解能被编译器检测到错误或抑制警告。<strong>编译时和部署时的处理</strong> - 软件工具能处理注解信息从而生成代码，XML文件等等。<strong>运行时的处理</strong> - 有些注解在运行时能被检测到。 </p></blockquote><h3 id="3-如何自定义注解"><a href="#3-如何自定义注解" class="headerlink" title="3.如何自定义注解"></a>3.如何自定义注解</h3><p>注解其实就是一种标记，可以在程序代码中的关键节点（类、方法、变量、参数、包）上打上这些标记，然后程序在<strong>编译时或运行时</strong>可以检测到这些标记从而执行一些特殊操作。因此可以得出自定义注解使用的基本流程：</p><p>第一步，定义注解——相当于定义标记；<br>第二步，配置注解——把标记打在需要用到的程序代码中；<br>第三步，解析注解——在编译期或运行时检测到标记，并进行特殊操作。</p><h3 id="4-自定义注解Demo"><a href="#4-自定义注解Demo" class="headerlink" title="4.自定义注解Demo"></a>4.自定义注解Demo</h3><p>根据我们日常定义类或接口的经验，在类中无非是要定义构造方法、属性或一般方法。但是，在自定义注解中，其实现部分<strong>只能定义</strong>一个东西：<strong>注解类型元素（annotation type element）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MetaDsConfig &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">appCode</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源操作编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">actionCode</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;actionCode&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义注解类型元素时需要注意如下几点：<br>1.访问修饰符必须为public，不写默认为public；</p><p>2.该元素的类型只能是基本数据类型、String、Class、枚举类型、注解类型（体现了注解的嵌套效果）以及上述类型的一位数组；</p><p>3.该元素的名称一般定义为名词，如果注解中只有一个元素，请把名字起为value（后面使用会带来便利操作）；</p><p>4.()不是定义方法参数的地方，也不能在括号中定义任何参数，仅仅只是一个特殊的语法；</p><p>5.default代表默认值，值必须和第2点定义的类型一致；</p><p>6.如果没有默认值，代表后续使用注解时必须给该类型元素赋值。</p></blockquote><h3 id="5-元注解"><a href="#5-元注解" class="headerlink" title="5.元注解"></a>5.元注解</h3><p>元注解的作用就是负责注解其他注解。JAVA5定义的元注解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target,</span><br><span class="line">@Retention,</span><br><span class="line">@Documented,</span><br><span class="line">@Inherited</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261952086.png" alt="image-20240625174231388"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261952779.png" alt="image-20240625174405304"></p><h2 id="Java注解处理器"><a href="#Java注解处理器" class="headerlink" title="Java注解处理器"></a>Java注解处理器</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/github_35180164/article/details/52055994#:~:text=%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%88Annotation,Processor%EF%BC%89%E6%98%AFjavac%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%AE%83%E7%94%A8%E6%9D%A5%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E6%89%AB%E6%8F%8F%E5%92%8C%E5%A4%84%E7%90%86%E6%B3%A8%E8%A7%A3%EF%BC%88Annotation%EF%BC%89%E3%80%82">Java注解处理器使用详解</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在开始之前，我们首先申明一个非常重要的问题：我们并不讨论那些在运行时（Runtime）通过反射机制运行处理的注解，而是讨论在编译时（Compile time）处理的注解。</p><p>注解处理器（Annotation Processor）是<strong>javac</strong>的一个工具，它用来在编译时扫描和处理注解（Annotation）。你可以对自定义注解，并注册相应的注解处理器。到这里，我假设你已经知道什么是注解，并且知道怎么申明的一个注解。如果你不熟悉注解，你可以在这<a href="http://docs.oracle.com/javase/tutorial/java/annotations/index.html">官方文档</a>中得到更多信息。注解处理器在Java 5开始就有了，但是从Java 6（2006年12月发布）开始才有可用的API。过了一些时间，Java世界才意识到注解处理器的强大作用，所以它到最近几年才流行起来。</p><p>一个注解的注解处理器，以Java代码（或者编译过的字节码）作为输入，生成文件（通常是.java文件）作为输出。这具体的含义什么呢？你可以生成Java代码！这些生成的Java代码是在生成的.java文件中，所以你不能修改已经存在的Java类，例如向已有的类中添加方法。这些生成的Java文件，会同其他普通的手动编写的Java源代码一样被<strong>javac</strong>编译。</p><h3 id="虚处理器AbstractProcessor"><a href="#虚处理器AbstractProcessor" class="headerlink" title="虚处理器AbstractProcessor"></a>虚处理器AbstractProcessor</h3><p>每一个注解处理器都继承这个抽象类，所以我们有必要看看这个抽象类是什么样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessor</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ProcessingEnvironment env)</span>&#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annoations, RoundEnvironment env)</span> &#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getSupportedAnnotationTypes</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SourceVersion <span class="title function_">getSupportedSourceVersion</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>init(ProcessingEnvironment env): **每一个注解处理器类都必须有一个空的构造函数。**然而，这里有一个特殊的init()方法，它会被注解处理工具调用，并输入ProcessingEnviroment参数。ProcessingEnviroment提供很多有用的工具类Elements, Types和Filer。后面我们将看到详细的内容。</li><li><strong>process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env) : 这相当于每个处理器的主函数main()。你在这里写你的扫描、评估和处理注解的代码，以及生成Java文件。输入参数RoundEnviroment，可以让你查询出包含特定注解的被注解元素。后面我们将看到详细的内容。</strong></li><li><strong>getSupportedAnnotationTypes():</strong> 这里你必须指定，这个注解处理器是注册给哪个注解的。注意，它的返回值是一个字符串的集合，包含本处理器想要处理的注解类型的合法全称。换句话说，你在这里定义你的注解处理器注册到哪些注解上。</li><li><strong>getSupportedSourceVersion():</strong> 用来指定你使用的Java版本。通常这里返回SourceVersion.latestSupported()。然而，如果你有足够的理由只支持Java 6的话，你也可以返回SourceVersion.RELEASE_6。我推荐你使用前者。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>37 MinIO</title>
      <link href="/2025/02/26/37%20MinIO/"/>
      <url>/2025/02/26/37%20MinIO/</url>
      
        <content type="html"><![CDATA[<h1 id="37-MinIO"><a href="#37-MinIO" class="headerlink" title="37 MinIO"></a>37 MinIO</h1><p>参考资料</p><p>1. </p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，<strong>例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等</strong>，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p><p>MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><h3 id="纠删玛"><a href="#纠删玛" class="headerlink" title="纠删玛"></a>纠删玛</h3><p>Minio使用纠删码erasure code和校验和checksum来保护数据免受硬件故障和无声数据损坏。 即便您丢失一半数量（N&#x2F;2）的硬盘，您仍然可以恢复数据。</p><p> <strong>纠删码是一种恢复丢失和损坏数据的数学算法</strong>， Minio采用Reed-Solomon code将对象拆分成N&#x2F;2数据和N&#x2F;2 奇偶校验块。 这就意味着如果是12块盘，一个对象会被分成6个数据块、6个奇偶校验块，你可以丢失任意6块盘（不管其是存放的数据块还是奇偶校验块），你仍可以从剩下的盘中的数据进行恢复 纠删码的工作原理和RAID或者复制不同，像RAID6可以在损失两块盘的情况下不丢数据，而Minio纠删码可以在丢失一半的盘的情况下，仍可以保证数据安全。 而且Minio纠删码是作用在对象级别，可以一次恢复一个对象，而RAID是作用在卷级别，数据恢复时间很长。 Minio对每个对象单独编码，存储服务一经部署，通常情况下是不需要更换硬盘或者修复。Minio纠删码的设计目标是为了性能和尽可能的使用硬件加速。</p><h2 id="MinIO安装"><a href="#MinIO安装" class="headerlink" title="MinIO安装"></a>MinIO安装</h2><h3 id="Windows环境MinIO安装"><a href="#Windows环境MinIO安装" class="headerlink" title="Windows环境MinIO安装"></a>Windows环境MinIO安装</h3><h4 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h4><p>官网地址：<a href="https://min.io/">MinIO | S3 &amp; Kubernetes Native Object Storage for AI</a></p><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><p>下载好不需要点击exe文件，创建好文件夹后，把下载好的文件移动到你创建好的目录下。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261952601.png" alt="image-20240627152606796"></p><h4 id="管理员命令行运行"><a href="#管理员命令行运行" class="headerlink" title="管理员命令行运行"></a>管理员命令行运行</h4><p>以管理员的身份打开CMD，CD到你刚刚创建的minio.exe文件所在的文件夹下。运行命令：</p><p>这是在设置你MinIO的用户名和密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setx MINIO_ROOT_USER admin</span><br><span class="line">setx MINIO_ROOT_PASSWORD admin1234</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261952634.png" alt="image-20240627152627594"></p><h4 id="创建MinIO存储文件目录"><a href="#创建MinIO存储文件目录" class="headerlink" title="创建MinIO存储文件目录"></a>创建MinIO存储文件目录</h4><p>在本地创建MinIO存储文件的目录，例如：d:\assets\OB-Storage；</p><h4 id="MinIO启动"><a href="#MinIO启动" class="headerlink" title="MinIO启动"></a>MinIO启动</h4><p>继续在该CMD中运行命令启动MinIO：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.\minio.exe server d:\assets\OB-Storage  --console-address &quot;:9001&quot; --address &quot;:9000&quot; </span><br><span class="line"></span><br><span class="line">.\minio.exe server D:\CodeFolder\ToolFolder\MinIO\data  --console-address &quot;:9001&quot; --address &quot;:9000&quot; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261952858.png" alt="image-20240627152800403"></p><h4 id="MinIO使用"><a href="#MinIO使用" class="headerlink" title="MinIO使用"></a>MinIO使用</h4><p>控制台：<a href="http://localhost:9001/">http://localhost:9001</a></p><p>创建Bucket：【项目名】-[模块名]-buck</p><p>创建AcessKey和secret</p><h4 id="MinIO登录"><a href="#MinIO登录" class="headerlink" title="MinIO登录"></a>MinIO登录</h4><p>Minio的默认账号密码进行登录，对应的账号密码都是minioadmin</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261952924.png" alt="image-20240627161303822"></p><h2 id="SpringBoot集成MinIO"><a href="#SpringBoot集成MinIO" class="headerlink" title="SpringBoot集成MinIO"></a>SpringBoot集成MinIO</h2><h3 id="Nacos配置"><a href="#Nacos配置" class="headerlink" title="Nacos配置"></a>Nacos配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">baas:</span><br><span class="line">  client:</span><br><span class="line">    enabled: true</span><br><span class="line">  storage:</span><br><span class="line">    enabled: true</span><br><span class="line">    endpoint: http://192.168.0.120:9000</span><br><span class="line">    access-key: M2vezlAtUmtcNIqc58MD</span><br><span class="line">    secret-key: g0CzJtIpEpKZ8UoRKUBszQfcHSpQfXhvNF39Suiv</span><br><span class="line">    bucket-name: space-intell-gas-bff-buck</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">space:</span><br><span class="line">  board:</span><br><span class="line">    gov:</span><br><span class="line">      biz:</span><br><span class="line">        resourceUrlPrefix: http://192.168.0.120:9000</span><br><span class="line">        resourceBucket: space-intell-gas-bff-buck</span><br></pre></td></tr></table></figure><p>上面的配置是实习项目中的配置。</p><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MinIO --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.minio&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;minio&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Hutool --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.8.18&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>38 Spring</title>
      <link href="/2025/02/26/38%20Spring/"/>
      <url>/2025/02/26/38%20Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="38-Spring"><a href="#38-Spring" class="headerlink" title="38 Spring"></a>38 Spring</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/weixin_44207403/article/details/106736102?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171955750516800182772377%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171955750516800182772377&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-106736102-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=Spring&spm=1018.2226.3001.4187">Spring-全面详解（学习总结）</a></li></ol><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术。</p><p><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p>IOC全称：控制反转**(Inversion of Control)**，<strong>是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p>举例来说，现在有一个接口UserDao和一个实现类UserDaoImpl，有一个UserServiceImpl接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoMySqlImpl</span>();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在如果private UserDao userDao &#x3D; new UserDaoMySqlImpl();需要更改成其他的对象时，我们就需要在这个类中进行更改，如果我们这样更改就会降低耦合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">   <span class="comment">// 利用set实现</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传统开发中，需要调用对象的时候，需要调用者手动来创建被调用者的实例，即对象是由调用者new出来的。但是在Spring框架中，创建对象的工作不再由调用者来完成，而是交给IOC容器来创建，再推送给调用者，整个流程完成反转，所以是控制反转。</p><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><p>这个概念在面试中经常被面试官询问，也就是说明这个Bean在Spring中的生生死死非常重要，而且了解Bean是如何创建和如何销毁的，对于我们理解Spring来说也是非常有益。那么接下来我们进入Spring的世界来看看这个世界最重要的Bean的一生。</p><p>先看一张图，这就是Bean的一生。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261953130.png" alt="image-20241013185647984"></p><p>我们初看不明觉厉，我们接着往下走。</p><p>我们在了解一个人的一生时，会从他什么时候出生，什么时候接收了教育，什么时候去世来大致了解他的一生。对于Bean来说也是一样，我们只需要关注整体，不需要过多纠结细节，纠结过多的细节会让我们对Bean的了解模糊。</p><h4 id="实例化（出生啦）"><a href="#实例化（出生啦）" class="headerlink" title="实例化（出生啦）"></a>实例化（出生啦）</h4><p>在Spring容器也就是IoC容器启动之后，就会到处寻找需要出生的Bean。这时候的Bean就是一个刚刚降临这个世界的婴儿，它在这个世界有了它的位置，但是它的身份和它长大工作需要的还没有准备就绪。</p><p>分配地址内存空间。</p><h4 id="设置对象属性（出生证明）"><a href="#设置对象属性（出生证明）" class="headerlink" title="设置对象属性（出生证明）"></a>设置对象属性（出生证明）</h4><p>一个人出生之后，需要给他起名字、赋予身份（身份证号码），以及其他重要信息（比如家庭背景）。这个阶段就像人的<strong>基础身份信息的建立</strong>。</p><p>在实例化之后，Spring会对Bean进行属性赋值。这一步包括依赖注入，把Bean需要的资源和依赖（比如其他Bean、数据库连接等）赋值给它。</p><p>对属性进行赋值。</p><h4 id="初始化（接收教育，准备工作）"><a href="#初始化（接收教育，准备工作）" class="headerlink" title="初始化（接收教育，准备工作）"></a>初始化（接收教育，准备工作）</h4><p>这一步在正式步入职场之前，需要准备一些技能，这一步也就是初始化。初始化分很多步，这也正常，我们还得读小学、中学、大学呢。</p><p>我们来一步步看看其中的流程。</p><h5 id="检查Aware相关接口并设置相关依赖"><a href="#检查Aware相关接口并设置相关依赖" class="headerlink" title="检查Aware相关接口并设置相关依赖"></a>检查Aware相关接口并设置相关依赖</h5><p><code>Aware</code>接口的作用是让Bean感知Spring容器的某些特性，并在必要时获取Spring底层组件的引用。这种机制非常灵活，可以帮助开发者在需要时更好地与Spring环境交互，但要注意过度使用这些接口可能会增加代码的耦合性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MyBeanApplicationContextAware</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanApplicationContextAware</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">        log.error(<span class="string">&quot;ApplicationContextAware is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayUserServiceBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br><span class="line">        userService.testApplicationContextAware();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BeanPostProcessor前置处理"><a href="#BeanPostProcessor前置处理" class="headerlink" title="BeanPostProcessor前置处理"></a>BeanPostProcessor前置处理</h5><p><strong><code>BeanPostProcessor</code></strong> 允许我们在Spring管理的Bean的生命周期中，插入自定义逻辑，这种机制使得我们可以非常灵活地管理和扩展Bean的行为。</p><p>常见的应用场景包括日志记录、动态代理、以及某些Bean的特殊处理。</p><p>在我们SSIC项目中，其中自定义的HuiMQ中，消费者会需要请求HuiMQ得到消息，需要得到消息的方法会被@HuiListener注解标注。而我们需要知道当前所有Bean中哪些方法是被该注解标记的，被该注解标记的需要加入一个带接受消息的方法集合中，后续将会通过反射来执行该方法。</p><p>这就是代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> HuiListenerAnnotationBeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuiListenerAnnotationBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HuiListenerRegistry</span> <span class="variable">huiListenerRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuiListenerRegistry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">huiListenerFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 在 bean 的初始化方法（如 <span class="doctag">@PostConstruct</span> 注解的方法或 init-method 指定的方法）之前调用。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessBeforeInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 在 bean 的初始化方法之后调用。查看当前的bean是否存在被HuiListener注解过的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">        Method[] methods = bean.getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(HuiListener.class))&#123;</span><br><span class="line">                processHuiListener(method,bean);</span><br><span class="line">                huiListenerFlag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessAfterInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processHuiListener</span><span class="params">(Method method,Object bean)</span>&#123;</span><br><span class="line">        <span class="type">HuiListener</span> <span class="variable">huiListener</span> <span class="operator">=</span> method.getAnnotation(HuiListener.class);</span><br><span class="line">        <span class="type">HuiListenerEndpoint</span> <span class="variable">huiListenerEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuiListenerEndpoint</span>();</span><br><span class="line">        huiListenerEndpoint.setBean(bean);</span><br><span class="line">        huiListenerEndpoint.setMethod(method);</span><br><span class="line">        huiListenerRegistry.registerListenerEndpoint(huiListener.queueName(),huiListenerEndpoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="是否实现InitializingBean接口"><a href="#是否实现InitializingBean接口" class="headerlink" title="是否实现InitializingBean接口"></a>是否实现InitializingBean接口</h5><p><code>InitializingBean</code>接口的<code>afterPropertiesSet()</code>方法只会在实现该接口的特定Bean类的实例中执行一次。对于其他没有实现<code>InitializingBean</code>接口的Bean，这个方法不会被调用。</p><p>其会在Bean初始化之后执行，在所有参数赋值之后实现了这个接口的类就会执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MyBeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span>, InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="comment">//        log.error(&quot;初始化之前执行：&quot; + bean.toString());</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="comment">//        log.error(&quot;初始化之后执行：&quot; + bean.toString());</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.error(<span class="string">&quot;afterPropertiesSet is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BeanPostProcessor后置处理"><a href="#BeanPostProcessor后置处理" class="headerlink" title="BeanPostProcessor后置处理"></a>BeanPostProcessor后置处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> HuiListenerAnnotationBeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuiListenerAnnotationBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HuiListenerRegistry</span> <span class="variable">huiListenerRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuiListenerRegistry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">huiListenerFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 在 bean 的初始化方法（如 <span class="doctag">@PostConstruct</span> 注解的方法或 init-method 指定的方法）之前调用。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessBeforeInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 在 bean 的初始化方法之后调用。查看当前的bean是否存在被HuiListener注解过的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2024/10/12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">        Method[] methods = bean.getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(HuiListener.class))&#123;</span><br><span class="line">                processHuiListener(method,bean);</span><br><span class="line">                huiListenerFlag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessAfterInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processHuiListener</span><span class="params">(Method method,Object bean)</span>&#123;</span><br><span class="line">        <span class="type">HuiListener</span> <span class="variable">huiListener</span> <span class="operator">=</span> method.getAnnotation(HuiListener.class);</span><br><span class="line">        <span class="type">HuiListenerEndpoint</span> <span class="variable">huiListenerEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuiListenerEndpoint</span>();</span><br><span class="line">        huiListenerEndpoint.setBean(bean);</span><br><span class="line">        huiListenerEndpoint.setMethod(method);</span><br><span class="line">        huiListenerRegistry.registerListenerEndpoint(huiListener.queueName(),huiListenerEndpoint);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="注册Destruction相关接口"><a href="#注册Destruction相关接口" class="headerlink" title="注册Destruction相关接口"></a>注册Destruction相关接口</h5><p><code>DisposableBean</code>接口提供了一个<code>destroy()</code>方法，当Bean被销毁时，Spring会调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 自定义的销毁逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyBean is being destroyed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里并不是真正的销毁，Bean还没开始使用呢，这只是定义了一个方法，方便之后进行销毁时进行调用该方法。</p><p><strong>使用<code>@PreDestroy</code>注解</strong></p><p>Spring还允许使用<code>@PreDestroy</code>注解来标记一个方法，在Bean被销毁之前调用。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java复制代码<span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnotherBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义的清理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;AnotherBean is being destroyed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>不必多说</p><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><h5 id="是否实现了DisposableBean接口"><a href="#是否实现了DisposableBean接口" class="headerlink" title="是否实现了DisposableBean接口"></a>是否实现了DisposableBean接口</h5><p><code>DisposableBean</code> 是 Spring 框架中的一个接口，专门用于处理 Bean 的销毁过程。通过实现该接口，开发者可以在 Bean 的生命周期结束时执行自定义的清理逻辑，以确保资源的正确释放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里可以定义一些需要的资源，比如数据库连接等</span></span><br><span class="line">    <span class="keyword">private</span> String resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟资源的初始化</span></span><br><span class="line">        <span class="built_in">this</span>.resource = <span class="string">&quot;Some Resource&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBean initialized with resource: &quot;</span> + resource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现 DisposableBean 接口的 destroy 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 自定义的清理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyBean is being destroyed! Releasing resource: &quot;</span> + resource);</span><br><span class="line">        <span class="comment">// 这里可以添加资源释放的代码，比如关闭数据库连接等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="是否配置自定义的destory-method"><a href="#是否配置自定义的destory-method" class="headerlink" title="是否配置自定义的destory-method"></a>是否配置自定义的destory-method</h5><p><code>destroy-method</code> 是 Spring 框架中用于定义 Bean 销毁方法的一个属性，主要用于在 Bean 被销毁时指定一个特定的方法来执行清理逻辑。这种方式通常用于 XML 配置文件中，允许开发者在 Spring 容器关闭或 Bean 被销毁时执行自定义的逻辑。</p><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>Bean的作用域是指Bean实例的生命周期及可见性范围，Spring框架定义了以下6种作用域：</p><ul><li>singleton：单例作用域，所有对该Bean的请求都返回同一个Bean实例。</li><li>prototype：原型作用域，每次请求时都创建一个新的Bean实例。</li><li>request：请求作用域，每个HTTP请求都会创建一个新的Bean实例，该Bean实例仅在当前请求内有效。</li><li>session：会话作用域，每个HTTP会话都会创建一个新的Bean实例，该Bean实例仅在当前会话内有效。</li><li>application：全局作用域,一个bean 定义对应于单个ServletContext 的生命周期。</li><li>websocket： HTTP WebSocket 作用域,一个bean 定义对应于单个websocket 的生命周期。</li></ul><p>singleton作用域是Spring中默认的作用域，</p><p>使⽤ @Scope 标签就可以⽤来声明 Bean 的作⽤域，⽐如设置 Bean 的作⽤域，如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="meta">@Scope(prototype)</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;u&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Hi user&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring依赖注入的方式"><a href="#Spring依赖注入的方式" class="headerlink" title="Spring依赖注入的方式"></a>Spring依赖注入的方式</h3><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserRepository userRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        userRepository.save(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User &quot;</span> + username + <span class="string">&quot; saved.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Setter-方法注入"><a href="#Setter-方法注入" class="headerlink" title="Setter 方法注入"></a>Setter 方法注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPaymentService</span><span class="params">(PaymentService paymentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paymentService = paymentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (paymentService != <span class="literal">null</span>) &#123;</span><br><span class="line">            paymentService.processPayment();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No payment service available.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Payment processed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendNotification</span><span class="params">()</span> &#123;</span><br><span class="line">        emailService.sendEmail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email sent.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注解配置方式"><a href="#注解配置方式" class="headerlink" title="注解配置方式"></a>注解配置方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAppName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Application Name: &quot;</span> + appName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="XML-配置"><a href="#XML-配置" class="headerlink" title="XML 配置"></a>XML 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userRepository&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.UserRepository&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userRepository&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BeanFactory和ApplicationContext有什么区别"><a href="#BeanFactory和ApplicationContext有什么区别" class="headerlink" title="BeanFactory和ApplicationContext有什么区别"></a>BeanFactory和ApplicationContext有什么区别</h3><p>是spring的核心接口，都可以作为容器，ApplicationContext是BeanFactory的子接口。<br>BeanFactory： 是spring最底层的接口，包含各种Bean的定义和Bean的管理。</p><p>区别：</p><ul><li><strong>BeanFactroy采用的是延迟加载形式来注入Bean的，使用到bean才会加载。ApplicationContext一次性加载所有bean。</strong></li><li>BeanFactory需要手动注册，而ApplicationContext则是自动注册。</li><li>BeanFactory不支持国际化，ApplicationContext支持国际化(实现MessageSource接口)。</li><li>BeanFactory不支持AOP，ApplicationContext支持AOP，可以与Spring的AOP框架集成，提供声明式事务管理。</li></ul><h3 id="Spring中的单例bean的线程安全问题"><a href="#Spring中的单例bean的线程安全问题" class="headerlink" title="Spring中的单例bean的线程安全问题"></a>Spring中的单例bean的线程安全问题</h3><p>虽然Spring中的Bean是singleton，但是在一些多线程环境下，会出现线程安全的问题。比如下面这种情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CounterService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CounterService counterService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                counterService.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                counterService.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Final count: &quot;</span> + counterService.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为count++;操作不是原子性的，所以会出现线程不安全的问题。一般的解决方法是：</p><ul><li>所定义的Bean是无状态的，即不涉及一些数据，但是这不现实；</li><li>在类中定义一个ThreadLocal成员变量，将需要的可变变量保存在ThreadLocal中；</li><li>把成员变量写在方法内。</li><li>修改bean的作用域，singleton改为prototype。（@Scope（“prototype”））</li><li>使用synchronized修饰。</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务的传播机制"><a href="#事务的传播机制" class="headerlink" title="事务的传播机制"></a>事务的传播机制</h3><h4 id="为什么需要事务的传播？"><a href="#为什么需要事务的传播？" class="headerlink" title="为什么需要事务的传播？"></a>为什么需要事务的传播？</h4><p>在复杂的业务逻辑中，方法间的调用可能跨越多个服务、组件或模块，每个方法可能都需要事务控制。如果没有合理的事务传播机制，可能会导致以下问题：</p><ul><li><strong>事务嵌套</strong>：多个方法彼此嵌套，如果没有统一管理，可能会导致事务混乱。</li><li><strong>事务隔离</strong>：不同的事务可能会影响彼此的执行，需要明确每个方法的事务作用域。</li><li><strong>事务传递</strong>：调用链中的某些方法可能需要复用调用者的事务，有些方法则需要开启自己的事务。</li></ul><p>事务的传播机制提供了统一的管理方式来解决这些问题，确保事务的正确传播和执行。</p><h3 id="事务传播类型"><a href="#事务传播类型" class="headerlink" title="事务传播类型"></a>事务传播类型</h3><h4 id="PROPAGATION-REQUIRED（默认传播机制，propagation-required）"><a href="#PROPAGATION-REQUIRED（默认传播机制，propagation-required）" class="headerlink" title="PROPAGATION_REQUIRED（默认传播机制，propagation_required）"></a><strong>PROPAGATION_REQUIRED</strong>（默认传播机制，propagation_required）</h4><p>当前存在事务，则加入该事务；如果没有事务，则新建一个事务。</p><p><strong>解决的问题</strong>：确保在大多数场景下，事务能够正常传递，并且默认开启事务管理。</p><h4 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a><strong>PROPAGATION_REQUIRES_NEW</strong></h4><ul><li>不管是否存在事务，总是创建一个新的事务。当前存在的事务会被挂起，等新的事务完成后再恢复。</li><li><strong>解决的问题</strong>：如果当前方法需要独立的事务处理，且不受调用方事务的影响，则可以使用该传播机制。</li></ul><h4 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a>PROPAGATION_SUPPORTS</h4><p>如果当前存在事务，则加入事务；如果没有事务，则以非事务方式执行。</p><p><strong>解决的问题</strong>：在不需要强制事务管理的场景中，可以选择是否在事务中执行。</p><h4 id="PROPAGATION-NOT-SUPPORTED"><a href="#PROPAGATION-NOT-SUPPORTED" class="headerlink" title="PROPAGATION_NOT_SUPPORTED"></a>PROPAGATION_NOT_SUPPORTED</h4><p>当前存在事务，则挂起该事务，并以非事务方式执行该方法。</p><p><strong>解决的问题</strong>：在某些操作不适合在事务中执行时，可以使用该传播机制。例如一些不需要事务的耗时操作。</p><h4 id="PROPAGATION-NEVER"><a href="#PROPAGATION-NEVER" class="headerlink" title="PROPAGATION_NEVER"></a><strong>PROPAGATION_NEVER</strong></h4><ul><li>以非事务方式执行，如果当前存在事务则抛出异常。</li><li><strong>解决的问题</strong>：强制规定某个方法不允许在事务环境中执行。</li></ul><h4 id="PROPAGATION-MANDATORY"><a href="#PROPAGATION-MANDATORY" class="headerlink" title="PROPAGATION_MANDATORY"></a><strong>PROPAGATION_MANDATORY</strong></h4><ul><li>如果当前存在事务，则加入事务；如果没有事务，则抛出异常。</li><li><strong>解决的问题</strong>：强制要求方法必须在事务上下文中执行，如果没有事务则抛出异常。</li></ul><h4 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a><strong>PROPAGATION_NESTED</strong></h4><ul><li>如果当前存在事务，则在当前事务内开启一个子事务（嵌套事务）；如果没有事务，则新建一个事务。</li><li><strong>解决的问题</strong>：提供嵌套事务的支持，当子事务失败时，父事务可以选择回滚子事务的操作，而不影响整个事务。</li></ul><h3 id="事务传播的实际案例"><a href="#事务传播的实际案例" class="headerlink" title="事务传播的实际案例"></a>事务传播的实际案例</h3><h4 id="场景：订单处理"><a href="#场景：订单处理" class="headerlink" title="场景：订单处理"></a>场景：订单处理</h4><p>假设你有一个订单处理系统，包含两个操作：生成订单和扣除用户余额。你希望这两个操作都在事务中执行，如果任何一个失败，都应该回滚。</p><p><strong>方法一</strong>：处理订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    createOrder(order);</span><br><span class="line">    deductUserBalance(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：创建订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建订单逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三</strong>：扣除用户余额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductUserBalance</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    <span class="comment">// 扣除用户余额逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种场景下，<code>processOrder</code> 和 <code>deductUserBalance</code> 共享同一个事务，而 <code>createOrder</code> 由于使用了 <code>REQUIRES_NEW</code>，即使 <code>processOrder</code> 中的事务失败，它的创建订单操作也会独立提交或回滚，不会受到影响。这就是事务传播机制帮助控制不同操作的事务行为，确保数据一致性。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40 IDEA</title>
      <link href="/2025/02/26/40%20IDEA/"/>
      <url>/2025/02/26/40%20IDEA/</url>
      
        <content type="html"><![CDATA[<h1 id="40-IDEA"><a href="#40-IDEA" class="headerlink" title="40 IDEA"></a>40 IDEA</h1><h2 id="JAVA注解"><a href="#JAVA注解" class="headerlink" title="JAVA注解"></a>JAVA注解</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261954064.png" alt="image-20240701100256718"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line">* @Description </span><br><span class="line">$Param$</span><br><span class="line">$returns$</span><br><span class="line">* @Author yaoHui</span><br><span class="line">* @Date $date$</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261954785.png" alt="image-20240701100340538"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(&quot;if(\&quot;$&#123;_1&#125;\&quot;.length() == 2) &#123;return &#x27;&#x27;;&#125; else &#123;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList();for(i = 0; i &lt; params.size(); i++) &#123;if(i==0)&#123;result+=&#x27;* @param &#x27; + params[i] + &#x27;  &#x27;&#125;else&#123;result+=&#x27;\\n&#x27; + &#x27; * @param &#x27; + params[i] + &#x27;  &#x27;&#125;&#125;; return result;&#125;&quot;, methodParameters()); </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(&quot;def returnType = \&quot;$&#123;_1&#125;\&quot;; def result = &#x27;* @return &#123;@link &#x27; + returnType + &#x27; &#125;&#x27;; return result;&quot;, methodReturnType()); </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261954353.png" alt="image-20240701100518078"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse(&quot;File Header.java&quot;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @FileName $&#123;NAME&#125;</span><br><span class="line">* @Description </span><br><span class="line">* @Author yaoHui</span><br><span class="line">* @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125;</span><br><span class="line">**/</span><br><span class="line">public class $&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261954625.png" alt="image-20240701100559862"></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>46 Spring Security</title>
      <link href="/2025/02/26/46%20Spring%20Security/"/>
      <url>/2025/02/26/46%20Spring%20Security/</url>
      
        <content type="html"><![CDATA[<h1 id="46-Spring-Security"><a href="#46-Spring-Security" class="headerlink" title="46 Spring Security"></a>46 Spring Security</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://blog.csdn.net/lht964249279/article/details/122757658">【SpringBoot】SpringBoot——Spring Security安全框架</a></p></li><li><p><a href="https://springdoc.cn/spring-security/">Spring Security 中文文档</a></p></li><li><p><a href="https://www.cnblogs.com/dw3306/p/12751373.html">Spring Security使用详解（基本用法 ） </a></p></li><li></li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Security是Spring框架中的一个安全框架，它致力于应用的两个方面：<strong>认证</strong>和<strong>授权</strong>。简而言之就是验证你是谁？和你是否有权限访问这个资源（角色）。</p><p>它是一个强大的、高度自定义的认证和访问控制框架。其核心就是一组过滤器链，项目启动后会自动配置。</p><p>在接触Spring Security之前我们会使用一组过滤器过滤掉无登录状态的请求和一些非法请求，而Spring Security就是将这些功能封装好了，无需再重复书写。</p><p><img src="/assets/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc2hlbuWtkOaAoQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center.png" alt="img"></p><p>其架构图如上所示，在这些过滤器中最关键的就是Basic Authentication Filter，该过滤器用来验证当前用户的身份也就是角色，当前用户具有什么权限。</p><h2 id="Spring-Security-Demo"><a href="#Spring-Security-Demo" class="headerlink" title="Spring Security Demo"></a>Spring Security Demo</h2><p>参考资料：<a href="https://github.com/echisan/springboot-jwt-demo/blob/master/blog_content.md">https://github.com/echisan/springboot-jwt-demo/blob/master/blog_content.md</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>创建一个新工程时，我们需要思考一下我们接下来需要的一些步骤，需要做什么，怎么做。</p><ul><li>搭建springboot工程</li><li>导入springSecurity跟jwt的依赖</li><li>用户的实体类</li><li>dao层</li><li>service层（真正开发时再写，这里就直接调用dao层操作数据库）</li><li>实现UserDetailsService接口</li><li>实现UserDetails接口</li><li>验证用户登录信息的拦截器</li><li>验证用户权限的拦截器</li><li>springSecurity配置</li><li>认证的Controller以及测试的controller</li><li>测试</li></ul><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>在spring-security中需要实现两个过滤器，一是用户验证，第二是鉴权。。使用<code>JWTAuthenticationFilter</code>去进行用户账号的验证，使用<code>JWTAuthorizationFilter</code>去进行用户权限的验证。</p><p><strong>参考17 Spring Cloud Gateway</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>47 Demo Repository</title>
      <link href="/2025/02/26/47%20Demo%20Repository/"/>
      <url>/2025/02/26/47%20Demo%20Repository/</url>
      
        <content type="html"><![CDATA[<h1 id="47-Demo-Repository"><a href="#47-Demo-Repository" class="headerlink" title="47 Demo Repository"></a>47 Demo Repository</h1><h2 id="SpringCloud-gateway-Spring-Security-JWT实现登录和用户权限校验"><a href="#SpringCloud-gateway-Spring-Security-JWT实现登录和用户权限校验" class="headerlink" title="SpringCloud gateway+Spring Security + JWT实现登录和用户权限校验"></a>SpringCloud gateway+Spring Security + JWT实现登录和用户权限校验</h2><p>参考资料：</p><ol><li><a href="https://blog.csdn.net/yuan__once/article/details/127022613">https://blog.csdn.net/yuan__once/article/details/127022613</a></li><li><a href="https://blog.csdn.net/qq_40758535/article/details/110291798">微服务 spring gateway+nacos +security+JWT 认证授权</a></li></ol><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>MySQL：8.0.22</p><p>Redis：3.0.503</p><h2 id="0722"><a href="#0722" class="headerlink" title="0722"></a>0722</h2><p>在执行所有的SQL语句之前打印日志，所有的日志持续化保存。</p><h3 id="MyBatis-MyBatis-plus打印日志"><a href="#MyBatis-MyBatis-plus打印日志" class="headerlink" title="MyBatis&amp;MyBatis-plus打印日志"></a>MyBatis&amp;MyBatis-plus打印日志</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#by zhengkai.blog.csdn.net</span></span><br><span class="line"><span class="comment">#mybatis-plus配置控制台打印完整带参数SQL语句</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis-MyBatis-Plus自定义SQL日志"><a href="#MyBatis-MyBatis-Plus自定义SQL日志" class="headerlink" title="MyBatis&amp;MyBatis-Plus自定义SQL日志"></a>MyBatis&amp;MyBatis-Plus自定义SQL日志</h2><p>参考资料：</p><ol><li><a href="https://blog.csdn.net/qq_38164123/article/details/131285599?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172180375316800225582158%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=172180375316800225582158&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~times_rank-6-131285599-null-null.nonecase&utm_term=MyBatis-Plus%E8%87%AA%E5%AE%9A%E4%B9%89SQL%E6%97%A5%E5%BF%97&spm=1018.2226.3001.4450">SpringBoot基于Mybatis或Mybatis-Plus自定义实现完整SQL打印和执行耗时</a></li><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">                method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;Statement.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">                type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">                method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;Statement.class&#125;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">        type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">        method = &quot;batch&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这段代码的作用是创建一个 MyBatis 拦截器，该拦截器将拦截以下三个数据库操作的方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//query: 执行查询操作的方法，接收 Statement 和 ResultHandler 作为参数。</span></span><br><span class="line"><span class="comment">//update: 执行更新操作的方法，只接收 Statement 作为参数。</span></span><br><span class="line"><span class="comment">//batch: 执行批量操作的方法，接收 Statement 作为参数。</span></span><br></pre></td></tr></table></figure><p>mybatis sql 日志拦截器, 用于打印SQL相关信息（例如：实际执行SQL语句，SQL执行时间，查询记录数等）</p><p>关于 @Intercepts注解说明：</p><p>为了让拦截器能够精确地拦截特定的方法，需要使用 @Intercepts 注解来声明拦截的方法和参数类型</p><p>该注解包含一个参数，即一个 @Signature 类型的数组，用于指定要拦截的方法。每个 @Signature 注解表示一个要拦截的方法签名，其中包括以下属性：</p><p>type：被拦截的目标类或接口。在这里，StatementHandler.class 表示拦截 MyBatis 中的 StatementHandler 类。</p><p>method：被拦截的方法名。可以通过字符串指定方法名或使用方法引用。</p><p>args：被拦截方法的参数类型数组。用于指定被拦截方法的参数类型及顺序。在以下代码中的注解示例中，拦截器指定了对 StatementHandler 类中的三个方法进行拦截，分别是：</p><p>query(Statement.class, ResultHandler.class)：拦截 StatementHandler 类中的 query 方法，该方法有两个参数，分别是 Statement 和 ResultHandler。</p><p>update(Statement.class)：拦截 StatementHandler 类中的 update 方法，该方法有一个参数，即 Statement。</p><p>batch(Statement.class)：拦截 StatementHandler 类中的 batch 方法，该方法也有一个参数，即 Statement。</p><p>通过使用 @Intercepts 注解和 @Signature 注解，可以精确地指定要拦截的方法和参数类型，从而实现对特定方法的拦截和处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.demo.comfangdemoupm.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.cloud.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.reflect.FieldUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.parameter.ParameterHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Intercepts;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Signature;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MybatisSqlInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Mybatis-Plus 自定义SQL拦截处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-07-24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">                method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;Statement.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">                type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">                method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;Statement.class&#125;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">        type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">        method = &quot;batch&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisSqlInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个包含需要添加单引号括起来的参数类型集合。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; NEED_BRACKETS =</span><br><span class="line">            Collections.unmodifiableSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;String&quot;</span>, <span class="string">&quot;Date&quot;</span>, <span class="string">&quot;Time&quot;</span>, <span class="string">&quot;LocalDate&quot;</span>, <span class="string">&quot;LocalTime&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;LocalDateTime&quot;</span>, <span class="string">&quot;BigDecimal&quot;</span>, <span class="string">&quot;Timestamp&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis的配置对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> invocation.getTarget();</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 初始化行数为 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lines</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 默认状态为 &quot;失败&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行原始方法，并获取返回结果</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">            <span class="comment">// 如果返回结果为集合，则统计行数</span></span><br><span class="line">            <span class="keyword">if</span> (proceed <span class="keyword">instanceof</span> Collection&lt;?&gt;) &#123;</span><br><span class="line">                lines = ((List&lt;?&gt;) proceed).size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行成功，将状态设置为 &quot;成功&quot;</span></span><br><span class="line">            status = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 计算 SQL 执行耗时</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">sqlCost</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            <span class="comment">// 获取 SQL 语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="built_in">this</span>.getSql(target);</span><br><span class="line">            <span class="comment">// 打印日志</span></span><br><span class="line">            log.info(<span class="string">&quot;\u001B[38;5;220mSQL 执行结果：&#123;&#125;. SQL 信息：&#123;&#125;\u001B[0m&quot;</span>, status, sql);</span><br><span class="line">            log.info(<span class="string">&quot;\u001B[38;5;220m耗时：&#123;&#125; mm. Total：&#123;&#125;\u001B[0m&quot;</span>, sqlCost, lines);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 获取即将会执行的SQL语句 并把参数插入到SQL语句中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/7/24</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getSql</span><span class="params">(Object target)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取 StatementHandler 对象</span></span><br><span class="line">            <span class="type">StatementHandler</span> <span class="variable">statementHandler</span> <span class="operator">=</span> (StatementHandler) target;</span><br><span class="line">            <span class="comment">// 获取 BoundSql 对象</span></span><br><span class="line">            <span class="comment">// BoundSql对象中带有即将执行的SQL语句和SQL参数</span></span><br><span class="line">            <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> statementHandler.getBoundSql();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ObjectUtils.isNull(configuration))&#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ParameterHandler</span> <span class="variable">parameterHandler</span> <span class="operator">=</span> statementHandler.getParameterHandler();</span><br><span class="line">                <span class="built_in">this</span>.configuration = (Configuration) FieldUtils.readField(parameterHandler, <span class="string">&quot;configuration&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> formatSql(boundSql,configuration);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.warn(<span class="string">&quot;获取 SQL 语句失败：&#123;&#125;&quot;</span>, target, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;无法解析的 SQL 语句&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">formatSql</span><span class="params">(BoundSql boundSql,Configuration configuration)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 获取参数映射列表</span></span><br><span class="line">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">        <span class="comment">// 获取参数对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(sql) || Objects.isNull(configuration)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 TypeHandlerRegistry 对象</span></span><br><span class="line">        <span class="type">TypeHandlerRegistry</span> <span class="variable">typeHandlerRegistry</span> <span class="operator">=</span> configuration.getTypeHandlerRegistry();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除 SQL 字符串中的空格、换行符等</span></span><br><span class="line">        sql = sql.replaceAll(<span class="string">&quot;[\n\r ]+&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤掉输出参数的参数映射</span></span><br><span class="line">        <span class="keyword">if</span> (parameterMappings == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sql;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parameterMappings = parameterMappings.stream()</span><br><span class="line">                .filter(it -&gt; it.getMode() != ParameterMode.OUT)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 StringBuilder 保存格式化后的 SQL</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析问号并替换参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> result.length(); i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.charAt(i - <span class="number">1</span>) != <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ParameterMapping</span> <span class="variable">parameterMapping</span> <span class="operator">=</span> parameterMappings.get(parameterMappings.size() - <span class="number">1</span>);</span><br><span class="line">            Object value;</span><br><span class="line">            <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> parameterMapping.getProperty();</span><br><span class="line">            <span class="comment">// 判断绑定的附加参数中是否有对应的属性名</span></span><br><span class="line">            <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">                value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                value = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">                value = parameterObject;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 使用 MetaObject 获取属性值</span></span><br><span class="line">                <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> configuration.newMetaObject(parameterObject);</span><br><span class="line">                value = metaObject.getValue(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 判断参数类型，如果是需要添加括号的类型，则添加单引号</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> value.getClass().getSimpleName();</span><br><span class="line">                <span class="keyword">if</span> (NEED_BRACKETS.contains(type)) &#123;</span><br><span class="line">                    result.replace(i - <span class="number">1</span>, i, <span class="string">&quot;&#x27;&quot;</span> + value + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.replace(i - <span class="number">1</span>, i, value.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 参数值为空时，替换为 &quot;null&quot;</span></span><br><span class="line">                result.replace(i - <span class="number">1</span>, i, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移除已处理的参数映射</span></span><br><span class="line">            parameterMappings.remove(parameterMappings.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;Mybatis-Plus 拦截SQL:&#123;&#125;&quot;</span>,result.toString());</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脚手架介绍"><a href="#脚手架介绍" class="headerlink" title="脚手架介绍"></a>脚手架介绍</h2><h3 id="com-fang-demo-maven"><a href="#com-fang-demo-maven" class="headerlink" title="com-fang-demo-maven"></a>com-fang-demo-maven</h3><p>是整个项目的父pom文件，所有的依赖和版本都会在这里进行维护</p><h3 id="com-fang-demo-nacos"><a href="#com-fang-demo-nacos" class="headerlink" title="com-fang-demo-nacos"></a>com-fang-demo-nacos</h3><p>源码运行Nacos，方便开发</p><h3 id="com-fang-demo-gateway"><a href="#com-fang-demo-gateway" class="headerlink" title="com-fang-demo-gateway"></a>com-fang-demo-gateway</h3><p>网关，其中集成了Spring Security，对无登陆状态&amp;无权限的请求进行拦截，无权限处理逻辑暂未写，后续可根据实际情况自定义</p><h3 id="com-fang-demo-upm"><a href="#com-fang-demo-upm" class="headerlink" title="com-fang-demo-upm"></a>com-fang-demo-upm</h3><p>用户管理 或者 后台管理 或者 具体的业务模块，但是最好放在com-fang-demo-platform中</p><h3 id="com-fang-demo-communal"><a href="#com-fang-demo-communal" class="headerlink" title="com-fang-demo-communal"></a>com-fang-demo-communal</h3><p>公共模块，一般放置公共接口以供Dubbo调用，或者放置一些公共的工具类、配置类等等</p><h3 id="com-fang-demo-domin"><a href="#com-fang-demo-domin" class="headerlink" title="com-fang-demo-domin"></a>com-fang-demo-domin</h3><p>实体类存放位置，PO、DTO and VO 等</p><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><ol><li><a href="https://blog.csdn.net/nhb687096/article/details/136451264?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-136451264.nonecase&spm=1018.2226.3001.4187">什么是压力测试？如何进行Jmeter压力测试</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34-01 数据库-达梦数据库</title>
      <link href="/2025/02/26/34-01%20%E6%95%B0%E6%8D%AE%E5%BA%93-%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2025/02/26/34-01%20%E6%95%B0%E6%8D%AE%E5%BA%93-%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="34-01-数据库-达梦数据库"><a href="#34-01-数据库-达梦数据库" class="headerlink" title="34-01 数据库-达梦数据库"></a>34-01 数据库-达梦数据库</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在信息安全日益重要的今天，国内很多部门都要求使用国产化的数据库来替代原先国外的数据库，在这里介绍一款国内较知名的数据库——达梦。</p><p>达梦数据库管理系统是达梦公司推出的具有完全自主知识产权的高性能数据库管理系统，简称DM。达梦数据库管理系统7.0版本，简称DM7。</p><h2 id="达梦数据库安装"><a href="#达梦数据库安装" class="headerlink" title="达梦数据库安装"></a>达梦数据库安装</h2><p>这里介绍的是在Windows环境下安装DM数据库。</p><p>参考教程：<a href="https://blog.csdn.net/qq_37358909/article/details/108372770?login=from_csdn">Windows环境安装达梦数据库</a></p><p>按照过程一步一步的进行即可。</p><p>默认用户名：SYSDBA</p><p>默认密码：SYSDBA</p><h2 id="Ubuntu环境下安装达梦数据库"><a href="#Ubuntu环境下安装达梦数据库" class="headerlink" title="Ubuntu环境下安装达梦数据库"></a>Ubuntu环境下安装达梦数据库</h2><p>参考资料：<a href="https://blog.csdn.net/m0_46357847/article/details/125352435">Linux安装达梦数据库&#x2F;DM8（附带客户端工具安装完整版）</a></p><h3 id="创建安装与运行的Linux用户"><a href="#创建安装与运行的Linux用户" class="headerlink" title="创建安装与运行的Linux用户"></a>创建安装与运行的Linux用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 1.创建安装用户组 dmsys</span><br><span class="line">[root@laizhenghua /]# groupadd dmsys</span><br><span class="line"></span><br><span class="line"># 2.创建安装用户 dmdba</span><br><span class="line">[root@laizhenghua /]# sudo useradd -g dmsys -m -d /home/space/Documents/deployment/Softwares/Tong/DM -s /bin/bash dmdba</span><br><span class="line"></span><br><span class="line"># 3.初始化 dmdba 用户密码</span><br><span class="line">[root@laizhenghua /]# passwd dmdba</span><br><span class="line"># 按系统提示进行密码设置即可</span><br><span class="line"></span><br><span class="line"># 3.查看用户和用户组ID</span><br><span class="line">[root@laizhenghua /]# id dmdba</span><br><span class="line">uid=1000(dmdba) gid=1000(dmsys) groups=1000(dmsys)</span><br><span class="line"></span><br><span class="line"># 4.切换至 dmdba</span><br><span class="line">[root@laizhenghua home]# su dmdba</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>dmdba用户密码：123</strong></p><h3 id="操作系统资源限制检查"><a href="#操作系统资源限制检查" class="headerlink" title="操作系统资源限制检查"></a>操作系统资源限制检查</h3><p>这也是官方给出的提醒，在<code>Linux</code>系统中，因为<code>ulimit</code>命令的存在，会对程序使用操作系统资源进行限制，为了使达梦数据库服务端正常运行，要适当调整当前安装用户的<code>ulimit</code>参数。可以使用<code>ulimit -a</code>命令检查，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[dmdba@laizhenghua home]$ ulimit -a</span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 7699</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 65535</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 4096</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261947532.png" alt="image-20240717103808321"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261947578.png" alt="image-20240717103901348"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@laizhenghua /]# su - dmdba</span><br><span class="line">Last login: Sun Jun 19 13:26:42 CST 2022 on pts/0</span><br><span class="line"></span><br><span class="line">[dmdba@laizhenghua ~]$ cd /opt/soft</span><br><span class="line"># 可能会权限不够记得使用root用户给文件赋权 chmod 775 DMInstall.bin</span><br><span class="line">[dmdba@laizhenghua soft]$ ./DMInstall.bin -i</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1.安装语言选中文</span><br><span class="line"># 2.输入 key 文件路径选没有，不会对后续产生影响</span><br><span class="line"># 3.设置时区选东 8 区即可</span><br><span class="line"># 4.安装类型选服务器安装</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">典型安装包括：服务器、客户端、驱动、用户手册、数据库服务。</span><br><span class="line">服务器安装包括：服务器、驱动、用户手册、数据库服务。</span><br><span class="line">客户端安装包括：客户端、驱动、用户手册。</span><br><span class="line">自定义安装包括：根据用户需要勾选组件，可以是服务器、客户端、驱动、用户手册、数据库服务中的任意组合。</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"># 5.安装目录选择指定路径 /db/dmdbms</span><br><span class="line"># 6.是否确认安装选择y即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请以root系统用户执行命令:</span><br><span class="line">/home/dmdba/dmdbms/script/root/root_installer.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果存在找不到这个文件的情况，请你给这个文件权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">检查文件是否存在：</span><br><span class="line">ls -l /home/dmdba/dmdbms/script/root/root_installer.sh</span><br><span class="line"></span><br><span class="line">检查文件权限：</span><br><span class="line">如果文件没有执行权限，使用以下命令添加执行权限：</span><br><span class="line">chmod +x /home/dmdba/dmdbms/script/root/root_installer.sh</span><br><span class="line"></span><br><span class="line">使用完整路径执行脚本：</span><br><span class="line">使用脚本的完整路径来执行它，确保当前工作目录正确：</span><br><span class="line">sudo /home/dmdba/dmdbms/script/root/root_installer.sh</span><br></pre></td></tr></table></figure><h3 id="初始化数据库实例"><a href="#初始化数据库实例" class="headerlink" title="初始化数据库实例"></a>初始化数据库实例</h3><p>达梦数据库的逻辑架构和<code>Oracle</code>一样，数据库的概念与其他数据库不一样，只有实例、用户、表、表空间等这些概念。以上过程我们只完成了数据库的安装，还需要初始化达梦数据库实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[dmdba@laizhenghua ~]$ cd /db/dmdbms/bin</span><br><span class="line">[dmdba@laizhenghua bin]$ ./dminit path=/dbdata db_name=test BLANK_PAD_MODE=1</span><br><span class="line">initdb V8</span><br><span class="line">db version: 0x7000c</span><br><span class="line">file dm.key not found, use default license!</span><br><span class="line">License will expire on 2023-05-25</span><br><span class="line">Normal of FAST</span><br><span class="line">Normal of DEFAULT</span><br><span class="line">Normal of RECYCLE</span><br><span class="line">Normal of KEEP</span><br><span class="line">Normal of ROLL</span><br><span class="line"></span><br><span class="line"> log file path: /dbdata/test/test01.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> log file path: /dbdata/test/test02.log</span><br><span class="line"></span><br><span class="line">write to dir [/dbdata/test].</span><br><span class="line">create dm database success. 2022-06-19 20:13:34</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动数据库实例"><a href="#启动数据库实例" class="headerlink" title="启动数据库实例"></a>启动数据库实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 1.命令行方式启动数据库实例</span><br><span class="line"># su - dmdba</span><br><span class="line"># 密码123</span><br><span class="line">[dmdba@laizhenghua /]$ cd dmdbms/bin</span><br><span class="line">[dmdba@laizhenghua bin]$ ./dmserver /dbdata/test/dm.ini</span><br><span class="line"></span><br><span class="line"># 2.注册操作系统服务</span><br><span class="line"># su root</span><br><span class="line">[root@laizhenghua root]# pwd</span><br><span class="line">/db/dmdbms/script/root</span><br><span class="line">[root@laizhenghua root]# ls</span><br><span class="line">dm_service_installer.sh  dm_service_uninstaller.sh  root_installer.sh</span><br><span class="line"></span><br><span class="line">[root@laizhenghua root]# ./dm_service_installer.sh -t dmserver -dm_ini /dbdata/test/dm.ini -p DMSERVER</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/DmServiceDMSERVER.service to /usr/lib/systemd/system/DmServiceDMSERVER.service.</span><br><span class="line">创建服务(DmServiceDMSERVER)完成</span><br><span class="line"></span><br><span class="line"># 3.启动数据库实例</span><br><span class="line">[root@laizhenghua root]# systemctl start DmServiceDMSERVER.service </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MYSQL数据库迁移至达梦数据库"><a href="#MYSQL数据库迁移至达梦数据库" class="headerlink" title="MYSQL数据库迁移至达梦数据库"></a>MYSQL数据库迁移至达梦数据库</h2><p>在很多项目中可能需要更改数据库，把原先使用的MySQL数据库改成使用达梦数据库。达梦数据库支持从MySQL中直接把表迁移过来。</p><p>参考资料：<a href="https://blog.csdn.net/m0_71845127/article/details/130347623?login=from_csdn">MySQL数据迁移至达梦数据库</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261947657.png" alt="img"></p><h2 id="Spring项目整合达梦数据库"><a href="#Spring项目整合达梦数据库" class="headerlink" title="Spring项目整合达梦数据库"></a>Spring项目整合达梦数据库</h2><p>参考资料：<strong><a href="https://gitcode.csdn.net/662b562575c93e11c8024a29.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MTY2ODE0NCwiZXhwIjoxNzE4ODU0NzI1LCJpYXQiOjE3MTgyNDk5MjUsInVzZXJuYW1lIjoiZnloMjk0NDE2MzI0MCJ9.ictijIg7ZveNMWrEA13IzxFGGnsDFQgCZDQzv28anEA">SpringBoot项目整合达梦数据库（MYSQL 转换 达梦数据库）</a></strong></p><h3 id="Maven导入达梦数据库驱动包"><a href="#Maven导入达梦数据库驱动包" class="headerlink" title="Maven导入达梦数据库驱动包"></a>Maven导入达梦数据库驱动包</h3><p>该JAR包提供在下载好的DM安装包中：\drivers\jdbc</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261948804.png" alt="img"></p><p>在这里我使用的JDK是1.8则对应的使用DmJdbcDriver18，详细对应请看文件夹中的readme.txt文件。</p><p>我们需要将该JAR包手动添加到仓库中，远程仓库无该JAR包，所以只能手动。</p><p>找到本地下载的Maven文件夹下，然后进入bin目录打开cmd，输入如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.dm -DartifactId=DmJdbcDriver -Dversion=1.8.0 -Dpackaging=jar -Dfile=D:\develop\dm8\drivers\jdbc\DmJdbcDriver18.jar</span><br><span class="line"></span><br><span class="line">其中-Dfile=指向该JAR包的路径。</span><br></pre></td></tr></table></figure><p>或者在IDEA中使用IDEA自带的mvn进行下载，输入的命令如上。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261948645.png" alt="img"></p><p>在Maven中导入达梦数据库驱动包，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DmJdbcDriver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring项目配置数据库"><a href="#Spring项目配置数据库" class="headerlink" title="Spring项目配置数据库"></a>Spring项目配置数据库</h3><p>在机场项目中，需要在配置中心也就是Nacos中使用如下内容来替换原先MySQL的配置信息。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261948284.png" alt="img"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">dm.jdbc.driver.DmDriver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:dm://localhost:5236/SYSDBA?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">SYSDBA</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">SYSDBA</span></span><br></pre></td></tr></table></figure><h3 id="表的实体映射"><a href="#表的实体映射" class="headerlink" title="表的实体映射"></a>表的实体映射</h3><p>在机场项目中，我们以应用信息表为例。应用配置如下信息表：</p><p>值得注意的是，我们需要将@TableName中Value中的值进行修改，原来使用MySQL内容为：@TableName(value&#x3D;”sys_application”)现在要替换成@TableName(value &#x3D; “SYSDBA.SYS_APPLICATION”)</p><p>在达梦数据库中需要使用模型.表名的结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.board.gov.domain.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.board.gov.domain.po.meta.MetaDataBasePO;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chao.lu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 航班基本信息PO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/8 10:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;SYSDBA.SYS_APPLICATION&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DmTestPO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;应用ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long appId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;乐观锁标识&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;租户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long tenantId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;应用名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;应用Key&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;应用密钥&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appSecret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;应用加密密码(32位)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appEncryptPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;回调URL&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String callbackUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;主页URL&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String indexUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;IP白名单&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ipWhiteList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;logo url&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String logoUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;Token过期时长(天)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tokenExpireDuration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;应用状态(1-启用,2-禁用)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;删除标记,1:已删除,0:正常&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;修改人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;修改时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis-Mapper层"><a href="#Mybatis-Mapper层" class="headerlink" title="Mybatis Mapper层"></a>Mybatis Mapper层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.board.gov.biz.ports.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.board.gov.domain.po.DmTestPO;</span><br><span class="line"><span class="keyword">import</span> com.space.common.data.datascope.SpaceBaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DmTestMapper</span> <span class="keyword">extends</span> <span class="title class_">SpaceBaseMapper</span>&lt;DmTestPO&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.board.gov.biz.ports.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.board.gov.domain.po.DmTestPO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DmTestService</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;DmTestPO&gt; <span class="title function_">getDmTestPoList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.board.gov.biz.ports.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.board.gov.biz.ports.mapper.DmTestMapper;</span><br><span class="line"><span class="keyword">import</span> com.board.gov.biz.ports.service.DmTestService;</span><br><span class="line"><span class="keyword">import</span> com.board.gov.domain.po.DmTestPO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DmTestServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DmTestMapper, DmTestPO&gt; <span class="keyword">implements</span> <span class="title class_">DmTestService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;DmTestPO&gt; <span class="title function_">getDmTestPoList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.board.gov.biz.ports.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.board.gov.biz.ports.service.DmTestService;</span><br><span class="line"><span class="keyword">import</span> com.board.gov.domain.po.DmTestPO;</span><br><span class="line"><span class="keyword">import</span> com.space.common.security.annotation.Inner;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Inner(value = false)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DmTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DmTestService dmTestService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getDmTestPoList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;DmTestPO&gt; <span class="title function_">getDmTestPoList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dmTestService.getDmTestPoList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261948954.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261948511.png" alt="img"></p><h2 id="达梦数据库SQL查询报错不是-GROUP-BY-表达式解决方法"><a href="#达梦数据库SQL查询报错不是-GROUP-BY-表达式解决方法" class="headerlink" title="达梦数据库SQL查询报错不是 GROUP BY 表达式解决方法"></a>达梦数据库SQL查询报错不是 GROUP BY 表达式解决方法</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_37898570/article/details/126951104">https://blog.csdn.net/qq_37898570/article/details/126951104</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 达梦数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>48 Redis</title>
      <link href="/2025/02/26/48%20Redis/"/>
      <url>/2025/02/26/48%20Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="48-Redis"><a href="#48-Redis" class="headerlink" title="48 Redis"></a>48 Redis</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis（Remote Dictionary Server )，即远程字典服务。是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可<strong>持久化</strong>的日志型、Key-Value数据库，并提供多种语言的API。</p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为<strong>结构化数据库</strong>！</p><ul><li>Redis能干嘛？<br>1、内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof） 2、效率高，可以用于高速缓存<br>3、发布订阅系统<br>4、地图信息分析<br>5、计时器、计数器（浏览量！）<br>6、…</li></ul><h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h2><h3 id="技术选型方案"><a href="#技术选型方案" class="headerlink" title="技术选型方案"></a>技术选型方案</h3><ul><li>Memcached</li><li>Redis</li></ul><p>比较常用的是Redis，分布式缓存主要解决的是单机缓存的容量受服务器限制并且无法保存通用信息的问题，因为本地缓存只在当前服务里有效，比如你部署了两个相同的服务在两个不同的物理机上，那么这两个缓存数据是无法共同的。</p><p>它们两个的区别主要就是在Redis支持持久化，可以将内存中的数据保存到磁盘中，重启的时候可以再次加载进行使用，而Memcached并不支持持久化，一旦重启，内存中的数据会丢失。</p><p>而且Redis的功能更加丰富，比如Redis就具有更多的数据类型（kv，list，set，hash等） </p><p>那么为什么需要再项目中使用缓存呢？我们从高并发和高性能的角度来分析这一个问题，我们都清楚内存中的数据读取和写入是明显快于硬盘的，那么如果对于一个项目来说，它对某个数据具有大量的访问，那么每一次都需要从硬盘也就是数据库中读取，那么其效率会很低，而现在有一个数据库是运行在内存中的，每次读取都直接在内存中操作，其速度肯定是优于外存的，这就是高性能；那对于高并发呢？也哼明显，内存的并发量QPS肯定是高于外存，Redis的QPS可以达到30W+，而MySQL之类的数据库的QPS大概在10W+左右。</p><h2 id="Redis用途"><a href="#Redis用途" class="headerlink" title="Redis用途"></a>Redis用途</h2><ul><li>用于缓存</li><li>用于分布式锁</li><li>限流</li><li>消息队列</li><li>复杂业务场景</li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>参考资料：<a href="https://blog.csdn.net/fuzhongmin05/article/details/119251590?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522D3B5136A-DFFF-4ADD-826B-4D77DB204146%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=D3B5136A-DFFF-4ADD-826B-4D77DB204146&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-119251590-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=Redis%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81&spm=1018.2226.3001.4187">如何用Redis实现分布式锁</a></p><h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>假设我们在一个电商平台上遇到一个“秒杀”活动，用户在同一时间段内抢购限量商品。这时，我们需要保证同一时间只有一个用户能够购买到同一件商品，而不是多个用户同时购买导致超卖。这种场景下，Redis 分布式锁是一个非常有效的解决方案。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>Redis 提供了一个简单的<strong>SETNX</strong>（SET if Not Exists）命令，可以用于实现分布式锁。</p><ul><li><p><strong>步骤1</strong>：用户请求抢购商品时，首先使用 <code>SETNX</code>（SET if Not Exists）命令来加锁，表示该商品正在被处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETNX lock:product:1001 1</span><br></pre></td></tr></table></figure></li><li><p><strong>步骤2</strong>：如果 <code>SETNX</code> 返回 <code>1</code>，表示成功获得锁，可以继续处理订单逻辑。</p></li><li><p><strong>步骤3</strong>：在处理订单完成后，通过 <code>DEL</code> 命令释放锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEL lock:product:1001</span><br></pre></td></tr></table></figure></li><li><p><strong>防止死锁</strong>：可以为锁设置一个自动过期时间，防止由于服务异常导致锁未能释放的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock:product:1001 1 EX 10 NX</span><br></pre></td></tr></table></figure></li></ul><p>这样，Redis 的分布式锁确保了高并发场景下的资源独占，避免了超卖或库存不足的问题。</p><p>对于使用Redis作为分布式锁的话，可能会出现一些问题，下面就是对这些问题的一些简单的介绍。</p><p>在上面所介绍的如果直接加锁的话，那么如果在程序加锁之后，如果程序端出现了异常，导致锁没有来得及释放，那么就会导致死锁。</p><p>为了避免死锁，所以为为该锁添加了一个过期时间，那么程序崩溃之后，达到过期时间之后，该锁就会自动释放，这样死锁问题就解决了。</p><p>总之这两条命令如果不能保证是原子操作，就有潜在的风险导致过期时间设置失败，依旧有可能发生死锁问题。幸好在Redis 2.6.12之后，Redis扩展了SET命令的参数，可以在SET的同时指定EXPIRE时间，这条操作是原子的，例如以下命令是设置锁的过期时间为10秒。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key 1 EX 10 NX</span><br></pre></td></tr></table></figure><p>但是这样就会导致出现一些问题</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261956542.png" alt="image-20240910150402014"></p><p>这里存在两个严重的问题：</p><ul><li>锁过期</li><li>释放了别人的锁</li></ul><p><strong>为了避免释放了别人的锁</strong>，解决办法是，设置只有一个自己知道的唯一标识进去，比如自己的线程ID。</p><p>如果是redis实现，就是SET key unique_value EX 10 NX。之后在释放锁时，要先判断这把锁是否归自己持有，只有是自己的才能释放它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//释放锁 比较unique_value是否相等，避免误释放</span><br><span class="line">if redis.get(&quot;key&quot;) == unique_value then</span><br><span class="line">    return redis.del(&quot;key&quot;)</span><br></pre></td></tr></table></figure><p>可以看到这里有两个操作，一个是get和del，那么就又会出现原子性的问题。</p><blockquote><ol><li>客户端1执行GET，判断锁是自己的</li><li>客户端2执行了SET命令，强制获取到锁（虽然发生概念很低，但要严谨考虑锁的安全性）</li><li>客户端1执行DEL，却释放了客户端2的锁</li></ol></blockquote><p>那么如何解决呢？答案就是通过Lua脚本，可以把上面的逻辑写成Lua脚本，让Redis执行，因为Redis处理每个请求是单线程执行的，在执行一个Lua脚本其它必须等待，直到这个Lua脚本处理完成，这样一来get+del之间就只能用由一个进程来执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Lua脚本语言，释放锁 比较unique_value是否相等，避免误释放</span><br><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class="line">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是该如何确定锁的过期时间呢？</p><p>前面提到过，过期时间如果评估得不好，这个锁就会有提前过期的风险，一种妥协的解决方案是，尽量冗余过期时间，降低锁提前过期的概率，但这个方案并不能完美解决问题。是否可以设置这样的方案，加锁时，先设置一个预估的过期时间，然后开启一个守护线程，定时去检测这个锁的失效时间，如果锁快要过期了，操作共享资源还未完成，那么就自动对锁进行续期，重新设置过期时间。</p><p>这是一种比较好的方案，已经有一个库把这些工作都封装好了，它就是Redisson。Redisson是一个Java语言实现的Redis SDK客户端，在使用分布式锁时，它就采用了自动续期的方案来避免锁过期，这个守护线程我们一般叫它看门狗线程。这个SDK提供的API非常友好，它可以像操作本地锁一样操作分布式锁。客户端一旦加锁成功，就会启动一个watch dog看门狗线程，它是一个后台线程，会每隔一段时间（这段时间的长度与设置的锁的过期时间有关）检查一下，如果检查时客户端还持有锁key（也就是说还在操作共享资源），那么就会延长锁key的生存时间。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261956345.png" alt="img"></p><h4 id="Redis常见的部署方式对锁的影响"><a href="#Redis常见的部署方式对锁的影响" class="headerlink" title="Redis常见的部署方式对锁的影响"></a>Redis常见的部署方式对锁的影响</h4><ul><li>单机模式；</li><li>主从模式；</li><li>哨兵（sentinel）模式；</li><li>集群模式；</li></ul><p>我们使用Redis时，一般会采用主从集群+哨兵的模式部署，哨兵的作用就是监测redis节点的运行状态。普通的主从模式，当master崩溃时，需要手动切换让slave成为master，使用主从+哨兵结合的好处在于，当master异常宕机时，哨兵可以实现故障自动切换，把slave提升为新的master，继续提供服务，以此保证可用性。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261956331.png" alt="img"></p><ol><li><p>客户端1在master上执行SET命令，加锁成功</p></li><li><p>此时，master异常宕机，SET命令还未同步到slave上（主从复制是异步的）</p></li><li><p>哨兵将slave提升为新的master，但这个锁在新的master上丢失了，导致客户端2来加锁成功了，两个客户端共同操作共享资源</p></li></ol><h4 id="集群模式-Redlock实现高可靠的分布式锁"><a href="#集群模式-Redlock实现高可靠的分布式锁" class="headerlink" title="集群模式+Redlock实现高可靠的分布式锁"></a>集群模式+Redlock实现高可靠的分布式锁</h4><p>为了避免Redis实例故障而导致的锁无法工作的问题，Redis的开发者 Antirez提出了分布式锁算法Redlock。Redlock算法的基本思路，是让客户端和多个独立的Redis实例依次请求加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁了，否则加锁失败。这样一来，即使有单个Redis实例发生故障，因为锁变量在其它实例上也有保存，所以，客户端仍然可以正常地进行锁操作，锁变量并不会丢失。</p><p>来具体看下Redlock算法的执行步骤。Redlock算法的实现要求Redis采用集群部署模式，无哨兵节点，需要有N个独立的Redis实例（官方推荐至少5个实例）。接下来，我们可以分成3步来完成加锁操作。</p><ol><li><p>第一步是，客户端获取当前时间。</p></li><li><p>第二步是，客户端按顺序依次向N个Redis实例执行加锁操作。</p></li></ol><p>这里的加锁操作和在单实例上执行的加锁操作一样，使用SET命令，带上NX、EX&#x2F;PX选项，以及带上客户端的唯一标识。当然，如果某个Redis实例发生故障了，为了保证在这种情况下，Redlock算法能够继续运行，我们需要给加锁操作设置一个超时时间。如果客户端在和一个Redis实例请求加锁时，一直到超时都没有成功，那么此时，客户端会和下一个Redis实例继续请求加锁。加锁操作的超时时间需要远远地小于锁的有效时间，一般也就是设置为几十毫秒。</p><p>第三步是，一旦客户端完成了和所有Redis实例的加锁操作，客户端就要计算整个加锁过程的总耗时。</p><p>客户端只有在满足两个条件时，才能认为是加锁成功，条件一是客户端从超过半数（大于等于 N&#x2F;2+1）的Redis实例上成功获取到了锁；条件二是客户端获取锁的总耗时没有超过锁的有效时间。</p><p>为什么大多数实例加锁成功才能算成功呢？多个Redis实例一起来用，其实就组成了一个分布式系统。在分布式系统中总会出现异常节点，所以在谈论分布式系统时，需要考虑异常节点达到多少个，也依旧不影响整个系统的正确运行。这是一个分布式系统的容错问题，这个问题的结论是：如果只存在故障节点，只要大多数节点正常，那么整个系统依旧可以提供正确服务。</p><p>在满足了这两个条件后，我们需要重新计算这把锁的有效时间，计算的结果是锁的最初有效时间减去客户端为获取锁的总耗时。如果锁的有效时间已经来不及完成共享数据的操作了，我们可以释放锁，以免出现还没完成共享资源操作，锁就过期了的情况。</p><p>当然，如果客户端在和所有实例执行完加锁操作后，没能同时满足这两个条件，那么，客户端就要向所有Redis节点发起释放锁的操作。为什么释放锁，要操作所有的节点呢，不能只操作那些加锁成功的节点吗？因为在某一个Redis节点加锁时，可能因为网络原因导致加锁失败，例如一个客户端在一个Redis实例上加锁成功，但在读取响应结果时由于网络问题导致读取失败，那这把锁其实已经在Redis上加锁成功了。所以释放锁时，不管之前有没有加锁成功，需要释放所有节点上的锁以保证清理节点上的残留的锁。</p><p>在Redlock算法中，释放锁的操作和在单实例上释放锁的操作一样，只要执行释放锁的 Lua脚本就可以了。这样一来，只要N个Redis实例中的半数以上实例能正常工作，就能保证分布式锁的正常工作了。所以，在实际的业务应用中，如果你想要提升分布式锁的可靠性，就可以通过Redlock算法来实现。</p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>参考资料：<a href="https://mp.weixin.qq.com/s/kyFAWH3mVNJvurQDt4vchA">我司用了 6 年的 Redis 分布式限流器，可以说是非常厉害了！</a></p><p>一般是通过Redis和Lua脚本的方式来实现限流。</p><h4 id="限流方案"><a href="#限流方案" class="headerlink" title="限流方案"></a>限流方案</h4><h5 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h5><p>Java内部也可以通过原子类计数器<code>AtomicInteger</code>、<code>Semaphore</code>信号量来做简单的限流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限流的个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 指定的时间内</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="variable">interval</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line"><span class="comment">// 原子类计数器</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 起始时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">limit</span><span class="params">(<span class="type">int</span> maxCount, <span class="type">int</span> interval)</span> &#123;</span><br><span class="line">    atomicInteger.addAndGet(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (atomicInteger.get() == <span class="number">1</span>) &#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        atomicInteger.addAndGet(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 超过了间隔时间，直接重新开始计数</span></span><br><span class="line">    <span class="keyword">if</span> (System.currentTimeMillis() - startTime &gt; interval * <span class="number">1000</span>) &#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        atomicInteger.set(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 还在间隔时间内,check有没有超过限流的个数</span></span><br><span class="line">    <span class="keyword">if</span> (atomicInteger.get() &gt; maxCount) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h5><p>漏桶算法思路很简单，我们把水比作是<code>请求</code>，漏桶比作是<code>系统处理能力极限</code>，水先进入到漏桶里，漏桶里的水按一定速率流出，当流出的速率小于流入的速率时，由于漏桶容量有限，后续进入的水直接溢出（拒绝请求），以此实现限流。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261956880.png" alt="image-20240910153455239"></p><h5 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h5><p>令牌桶算法的原理也比较简单，我们可以理解成医院的挂号看病，只有拿到号以后才可以进行诊病。</p><p>系统会维护一个令牌（<code>token</code>）桶，以一个恒定的速度往桶里放入令牌（<code>token</code>），这时如果有请求进来想要被处理，则需要先从桶里获取一个令牌（<code>token</code>），当桶里没有令牌（<code>token</code>）可取时，则该请求将被拒绝服务。令牌桶算法通过控制桶的容量、发放令牌的速率，来达到对请求的限制。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261956127.png" alt="image-20240910153705064"></p><h5 id="Redis-Lua"><a href="#Redis-Lua" class="headerlink" title="Redis + Lua"></a>Redis + Lua</h5><p>很多同学不知道<code>Lua</code>是啥？个人理解，<code>Lua</code>脚本和 <code>MySQL</code>数据库的存储过程比较相似，他们执行一组命令，所有命令的执行要么全部成功或者失败，以此达到原子性。也可以把<code>Lua</code>脚本理解为，一段具有业务逻辑的代码块。</p><p>而<code>Lua</code>本身就是一种编程语言，虽然<code>redis</code> 官方没有直接提供限流相应的<code>API</code>，但却支持了 <code>Lua</code> 脚本的功能，可以使用它实现复杂的令牌桶或漏桶算法，也是分布式系统中实现限流的主要方式之一。</p><p>相比<code>Redis</code>事务，<code>Lua脚本</code>的优点：</p><ul><li>减少网络开销：使用<code>Lua</code>脚本，无需向<code>Redis</code> 发送多次请求，执行一次即可，减少网络传输</li><li>原子操作：<code>Redis</code> 将整个<code>Lua</code>脚本作为一个命令执行，原子，无需担心并发</li><li>复用：<code>Lua</code>脚本一旦执行，会永久保存 <code>Redis</code> 中,，其他客户端可复用</li></ul><p><code>Lua</code>脚本大致逻辑如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 获取调用脚本时传入的第一个key值（用作限流的 key）</span><br><span class="line">local key = KEYS[1]</span><br><span class="line">-- 获取调用脚本时传入的第一个参数值（限流大小）</span><br><span class="line">local limit = tonumber(ARGV[1])</span><br><span class="line"></span><br><span class="line">-- 获取当前流量大小</span><br><span class="line">local curentLimit = tonumber(redis.call(&#x27;get&#x27;, key) or &quot;0&quot;)</span><br><span class="line"></span><br><span class="line">-- 是否超出限流</span><br><span class="line">if curentLimit + 1 &gt; limit then</span><br><span class="line">    -- 返回(拒绝)</span><br><span class="line">    return 0</span><br><span class="line">else</span><br><span class="line">    -- 没有超出 value + 1</span><br><span class="line">    redis.call(&quot;INCRBY&quot;, key, 1)</span><br><span class="line">    -- 设置过期时间</span><br><span class="line">    redis.call(&quot;EXPIRE&quot;, key, 2)</span><br><span class="line">    -- 返回(放行)</span><br><span class="line">    return 1</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>通过<code>KEYS[1]</code> 获取传入的key参数</li><li>通过<code>ARGV[1]</code>获取传入的<code>limit</code>参数</li><li><code>redis.call</code>方法，从缓存中<code>get</code>和<code>key</code>相关的值，如果为<code>null</code>那么就返回0</li><li>接着判断缓存中记录的数值是否会大于限制大小，如果超出表示该被限流，返回0</li><li>如果未超过，那么该key的缓存值+1，并设置过期时间为1秒钟以后，并返回缓存值+1</li></ul><p>这种方式是本文推荐的方案，具体实现会在后边做细说。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>Redis ⾃带的 list 数据结构可以作为⼀个简单的队列使⽤。Redis 5.0 中增加的 Stream 类型的数据结构更加适合⽤来做消息队列。它⽐᫾类似于 Kafka，有主题和消费组的概 念，⽀持消息持久化以及 ACK 机制。</p><p>Redis可以做消息队列，Redis 5.0 新增加的⼀个数据结构 Stream 可以⽤来做消息队列， Stream ⽀持：</p><ul><li>发布 &#x2F; 订阅模式 </li><li>按照消费者组进⾏消费 </li><li>消息持久化（ RDB 和 AOF）</li></ul><p>不过，和专业的消息队列相⽐，还是有很多⽋缺的地⽅⽐如消息丢失和堆积问题不好解决。因此，我们通常建议是不使⽤ Redis 来做消息队列的，你完全可以选择市⾯上⽐成熟的⼀些消息队列⽐如 RocketMQ、Kafka。</p><h3 id="复杂业务场景"><a href="#复杂业务场景" class="headerlink" title="复杂业务场景"></a>复杂业务场景</h3><p>通过 Redis 以及 Redis 扩展（⽐如 Redisson）提供的数据结构，我们可以很⽅ 便地完成很多复杂的业务场景⽐如通过 bitmap 统计活跃⽤户、通过 sorted set 维护排⾏榜。</p><h2 id="Redis的五大数据类型"><a href="#Redis的五大数据类型" class="headerlink" title="Redis的五大数据类型"></a>Redis的五大数据类型</h2><p>Redis是key-value存储系统，key一般为string类型的字符串，value是redis对象(object)。Redis 共有 5 种基本数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261956596.png" alt="在这里插入图片描述"></p><h3 id="String-还是-Hash-存储对象数据更好呢？"><a href="#String-还是-Hash-存储对象数据更好呢？" class="headerlink" title="String 还是 Hash 存储对象数据更好呢？"></a>String 还是 Hash 存储对象数据更好呢？</h3><ul><li><p>String 存储的是序列化后的对象数据，存放的是整个对象。Hash 是对对象的每个字段单独存储，可以获取部分字段的信息，也可以修改或者添加部分字段，节省⽹络流量。如果对象中某些 字段需要经常变动或者经常需要单独查询对象中的个别字段信息，Hash 就⾮常适合。</p></li><li><p>String 存储相对来说更加节省内存，缓存相同数量的对象数据，String 消耗的内存约是 Hash 的 ⼀半。并且，存储具有多层嵌套的对象时也⽅便很多。如果系统对性能和资源消耗⾮常敏感的 话，String 就⾮常适合。</p></li></ul><p>在绝⼤部分情况，我们建议使⽤ String 来存储对象数据即可！ 那根据你的介绍，购物⻋信息⽤ String 还是 Hash 存储更好呢？</p><p>购物⻋信息建议使⽤ Hash 存储： ⽤户 id 为 key 商品 id 为 field，商品数量为 value 由于购物⻋中的商品频繁修改和变动，这个时候 Hash 就⾮常适合了！</p><h2 id="Redis线程模型"><a href="#Redis线程模型" class="headerlink" title="Redis线程模型"></a>Redis线程模型</h2><p>对于读写命令来说，Redis ⼀直是单线程模型。不过，在 Redis 4.0 版本之后引⼊了多线程来执⾏⼀ 些⼤键值对的异步删除操作， Redis 6.0 版本之后引⼊了多线程来处理⽹络请求（提⾼⽹络 IO 读写 性能）。</p><p>Redis单线程模型了解？</p><p>Redis基于单线程，那么是怎么监听大量的客户端连接呢？</p><blockquote><p>Redis通过IO多路复用程序来监听来自客户端的大量连接，或者说是监听多个socket，它会将感兴趣的事件即类型注册到内核中并监听每个事件是否发生。</p></blockquote><p>这样的好处非常明显：I&#x2F;O多路复用技术的使用让Redis不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗（和NIO中的Selector组件很像）。</p><p>另外，Redis服务器是一个事件驱动程序，服务器需要处理两类事件：</p><ul><li>⽂件事件(file event) ：⽤于处理 Redis 服务器和客户端之间的⽹络 IO。 </li><li>时间事件(time eveat) ：Redis 服务器中的⼀些操作（⽐如 serverCron 函数）需要在给定的时 间点执⾏，⽽时间事件就是处理这类定时操作的。</li></ul><p>时间事件不需要多花时间了解，我们接触最多的还是 ⽂件事件（客户端进⾏读取写⼊等操作，涉及 ⼀系列⽹络通信）。</p><blockquote><p>Redis 基于 Reactor 模式开发了⾃⼰的⽹络事件处理器：这个处理器被称为⽂件事件处理器 （file event handler）。⽂件事件处理器使⽤ I&#x2F;O 多路复⽤（multiplexing）程序来同时监听多 个套接字，并根据套接字⽬前执⾏的任务来为套接字关联不同的事件处理器。 当被监听的套接字准备好执⾏连接应答（accept）、读取（read）、写⼊（write）、关 闭 （close）等操作时，与操作相对应的⽂件事件就会产⽣，这时⽂件事件处理器就会调⽤套接字 之前关联好的事件处理器来处理这些事件。 虽然⽂件事件处理器以单线程⽅式运⾏，但通过使⽤ I&#x2F;O 多路复⽤程序来监听多个套接字，⽂ 件事件处理器既实现了⾼性能的⽹络通信模型，⼜可以很好地与 Redis 服务器中其他同样以单 线程⽅式运⾏的模块进⾏对接，这保持了 Redis 内部单线程设计的简单性。</p></blockquote><p>可以看出，⽂件事件处理器（file event handler）主要是包含 4 个部分： </p><ul><li>多个 socket（客户端连接） </li><li>IO 多路复⽤程序（⽀持多个客户端连接的关键） </li><li>⽂件事件分派器（将 socket 关联到相应的事件处理器） </li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ul><h2 id="Redis内存管理"><a href="#Redis内存管理" class="headerlink" title="Redis内存管理"></a>Redis内存管理</h2><p>Redis 通过⼀个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。过期字典的键指向 Redis 数据库中的某个 key(键)，过期字典的值是⼀个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261956718.png" alt="image-20240910171943654"></p><h3 id="过期的数据的删除策略了解么？"><a href="#过期的数据的删除策略了解么？" class="headerlink" title="过期的数据的删除策略了解么？"></a>过期的数据的删除策略了解么？</h3><p>过期数据删除策略就两个：</p><ol><li><strong>惰性删除</strong>：只会在取出 key 的时候才对数据进⾏过期检查。这样对 CPU 最友好，但是可能会 造成太多过期 key 没有被删除。</li><li><strong>定期删除</strong>：每隔⼀段时间抽取⼀批 key 执⾏删除过期 key 操作。并且，Redis 底层会通过限制 删除操作执⾏的时⻓和频率来减少删除操作对 CPU 时间的影响。</li></ol><p>定期删除对内存更加友好，惰性删除对CPU更加友好，两者各有千秋，<strong>所以Redis采用的是定期删除+惰性删除。</strong></p><p>但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了 很多过期 key 的情况。这样就导致⼤量过期 key 堆积在内存⾥，然后就 Out of memory 了。</p><p> 怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。</p><h3 id="Redis内存淘汰机制了解么？"><a href="#Redis内存淘汰机制了解么？" class="headerlink" title="***Redis内存淘汰机制了解么？"></a>***Redis内存淘汰机制了解么？</h3><p>Redis提供6种数据淘汰策略：</p><ul><li><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选**最近最少使⽤**的数据淘汰；</li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰；</li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰；</li><li><strong>allkeys-lru</strong>：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最近最少使⽤的 key（这个是最常⽤的）；</li><li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰；</li><li><strong>no-eviction</strong>：禁⽌驱逐数据，也就是说当内存不⾜以容纳新写⼊数据时，新写⼊操作会报错。 这个应该没⼈使⽤吧！</li><li><strong>volatile-lfu</strong>（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中 挑选最不经常使⽤的数据淘汰 </li><li><strong>allkeys-lfu</strong>（least frequently used）：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最 不经常使⽤的 key；</li></ul><blockquote><p>在 Redis 中，<code>volatile-lfu</code> 和 <code>volatile-lru</code> 是两种不同的内存淘汰策略，用于在内存达到限制时决定哪些键值对应该被淘汰。这两者的主要区别在于它们如何选择要淘汰的数据。</p><h3 id="1-volatile-lfu（Least-Frequently-Used）"><a href="#1-volatile-lfu（Least-Frequently-Used）" class="headerlink" title="1. volatile-lfu（Least Frequently Used）"></a>1. <strong>volatile-lfu</strong>（Least Frequently Used）</h3><ul><li><p><strong>解释</strong>：<code>volatile-lfu</code> 策略会选择那些<strong>使用频率最少</strong>的数据进行淘汰。Redis 通过记录键被访问的次数来决定哪些数据不经常使用。</p></li><li><p><strong>适用场景</strong>：适合那些有”热点”数据的场景。某些数据可能一段时间内被频繁访问，而其他数据很少被访问，<code>LFU</code> 能更好地保持频繁使用的数据，淘汰那些长期不被使用的数据。</p></li><li><p><strong>行为示例</strong>：<br>假设 Redis 中有以下键值对及其访问频率（在过期键集合 <code>expires</code> 中）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key1 -&gt; 10 (访问次数)</span><br><span class="line">key2 -&gt; 5  (访问次数)</span><br><span class="line">key3 -&gt; 1  (访问次数)</span><br><span class="line">key4 -&gt; 20 (访问次数)</span><br></pre></td></tr></table></figure><p>当 Redis 内存不够用，需要淘汰键时，<code>volatile-lfu</code> 会选择访问频率最低的 <code>key3</code> 进行淘汰，因为它的使用次数是最少的。</p></li></ul><h3 id="2-volatile-lru（Least-Recently-Used）"><a href="#2-volatile-lru（Least-Recently-Used）" class="headerlink" title="2. volatile-lru（Least Recently Used）"></a>2. <strong>volatile-lru</strong>（Least Recently Used）</h3><ul><li><p><strong>解释</strong>：<code>volatile-lru</code> 策略会淘汰那些<strong>最近最少使用</strong>的数据，而不是看数据的访问频率。Redis 会记录每个键最后一次被访问的时间，选择那些长时间未被访问的键进行淘汰。</p></li><li><p><strong>适用场景</strong>：适合那些访问数据的”新鲜度”很重要的场景。即使一个键曾经被频繁访问，但如果长时间未被访问，也可能不再有价值，这时 <code>LRU</code> 策略就会将其淘汰。</p></li><li><p><strong>行为示例</strong>：<br>假设 Redis 中有以下键值对及其最近访问时间（在过期键集合 <code>expires</code> 中）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key1 -&gt; 2 分钟前访问</span><br><span class="line">key2 -&gt; 5 分钟前访问</span><br><span class="line">key3 -&gt; 1 小时前访问</span><br><span class="line">key4 -&gt; 10 秒前访问</span><br></pre></td></tr></table></figure><p>当 Redis 内存不足时，<code>volatile-lru</code> 会选择 <code>key3</code> 进行淘汰，因为它是最近最少被访问的。</p></li></ul><h3 id="3-区别总结"><a href="#3-区别总结" class="headerlink" title="3. 区别总结"></a>3. <strong>区别总结</strong></h3><ul><li><strong>volatile-lfu</strong>：根据<strong>访问频率</strong>选择最不常使用的键进行淘汰。适合需要保留最常访问数据的场景。</li><li><strong>volatile-lru</strong>：根据<strong>最后一次访问时间</strong>选择最近最少使用的键进行淘汰。适合需要保留最新访问数据的场景。</li></ul><h3 id="4-示例代码说明"><a href="#4-示例代码说明" class="headerlink" title="4. 示例代码说明"></a>4. 示例代码说明</h3><p>假设我们使用 Java 模拟 Redis 的这两种策略（伪代码）。</p><h4 id="volatile-lfu-示例："><a href="#volatile-lfu-示例：" class="headerlink" title="volatile-lfu 示例："></a>volatile-lfu 示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileLFU</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; frequency = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        data.put(key, value.hashCode());</span><br><span class="line">        frequency.put(key, frequency.getOrDefault(key, <span class="number">0</span>) + <span class="number">1</span>);  <span class="comment">// 更新访问频率</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">leastUsedKey</span> <span class="operator">=</span> Collections.min(frequency.entrySet(), Map.Entry.comparingByValue()).getKey();</span><br><span class="line">        data.remove(leastUsedKey);</span><br><span class="line">        frequency.remove(leastUsedKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;Evicted key with least frequency: &quot;</span> + leastUsedKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VolatileLFU</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileLFU</span>();</span><br><span class="line">        cache.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        cache.evict();  <span class="comment">// 淘汰访问次数最少的键</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="volatile-lru-示例："><a href="#volatile-lru-示例：" class="headerlink" title="volatile-lru 示例："></a>volatile-lru 示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileLRU</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Long&gt; lastAccessed = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        data.put(key, value.hashCode());</span><br><span class="line">        lastAccessed.put(key, System.currentTimeMillis());  <span class="comment">// 更新最后访问时间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">leastRecentlyUsedKey</span> <span class="operator">=</span> Collections.min(lastAccessed.entrySet(), Map.Entry.comparingByValue()).getKey();</span><br><span class="line">        data.remove(leastRecentlyUsedKey);</span><br><span class="line">        lastAccessed.remove(leastRecentlyUsedKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;Evicted least recently used key: &quot;</span> + leastRecentlyUsedKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VolatileLRU</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileLRU</span>();</span><br><span class="line">        cache.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        cache.evict();  <span class="comment">// 淘汰最近最少访问的键</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><ul><li><strong>volatile-lfu</strong>：基于访问频率淘汰键，适合那些有“热点”数据的场景。</li><li><strong>volatile-lru</strong>：基于最后访问时间淘汰键，适合那些数据”新鲜度”较重要的场景。</li></ul></blockquote><h2 id="Redis持久化机制"><a href="#Redis持久化机制" class="headerlink" title="Redis持久化机制"></a>Redis持久化机制</h2><h3 id="怎么保证Redis挂掉之后再重启数据可以进行恢复吗？"><a href="#怎么保证Redis挂掉之后再重启数据可以进行恢复吗？" class="headerlink" title="怎么保证Redis挂掉之后再重启数据可以进行恢复吗？"></a>怎么保证Redis挂掉之后再重启数据可以进行恢复吗？</h3><p>Redis 的⼀种持久化⽅式叫快照（snapshotting，RDB），另⼀种⽅式是只追加⽂件 （append-only file, AOF）。</p><p>Redis 提供了两个命令来⽣成 RDB 快照⽂件： </p><ul><li>save : 主线程执⾏，会阻塞主线程； </li><li>bgsave : ⼦线程执⾏，不会阻塞主线程，默认选项</li></ul><h3 id="RDB快照"><a href="#RDB快照" class="headerlink" title="RDB快照"></a>RDB快照</h3><p>RDB利用的就是操作系统中的COW（写时复制)来实现的。</p><p>RDB是基于快照一次的全量备份，即<strong>周期性</strong>的把redis当前内存中的全量数据写入到一个快照文件中(周期时间可以通过配置来调整)。redis是单线程程序，这个线程要同时负责多个客户端的读写请求，还要负责周期性的把当前内存中的数据写到快照文件中RDB中，数据写到<strong>RDB</strong>文件是IO操作，IO操作会严重影响redis的性能，甚至在持久化的过程中，读写请求会阻塞，为了解决这些问题，Redis采用多进程来同时进行读写请求和持久化操作。这样又会导致另外的问题，持久化的过程中，内存中的数据还在改变，假如redis正在进行持久化一个大的数据结构，在这个过程中客户端发送一个删除请求，把这个大的数据结构删掉了，这时候持久化的动作还没有完成，那么redis该怎么办呢？</p><p><strong>redis</strong>使用操作系统的多进程<strong>COW</strong>(Copy On Write)机制来实现快照的持久化，在持久化过程中调用 glibc(Linux下的C函数库) 的函数fork()产生一个子进程，快照持久化完全交给子进程来处理，父进程继续处理客户端的读写请求。子进程刚刚产生时，和父进程共享内存里面的代码段和数据段，这是Linux操作系统的机制，为了节约内存资源，所以尽可能让父子进程共享内存，这样在进程分离的一瞬间，内存的增长几乎没有明显变化。</p><h3 id="AOP持久化"><a href="#AOP持久化" class="headerlink" title="AOP持久化"></a>AOP持久化</h3><p>与快照持久化相⽐，AOF 持久化的实时性更好，因此已成为主流的持久化⽅案。默认情况下 Redis 没有开启 AOF（append only file）⽅式的持久化，可以通过 appendonly 参数开启：</p><p>在关系型数据库通常都是执行命令之前记录日志（方便故障恢复），而Redis AOF持久化机制是在执行完命令之后再记录日志。</p><p>这是为了避免额外的检查开销，AOF记录日志会对命令进行语法检查；在命令执行完之后再记录，不会阻塞当前命令的执行。</p><p>但是这样也会导致出现Redis宕机从而对应的修改丢失，可能也会阻塞后续其它命令的执行，AOF记录日志实在Redis主线程中进行的。</p><p>AOF 重写了解吗？ AOF 重写可以产⽣⼀个新的 AOF ⽂件，这个新的 AOF ⽂件和原有的 AOF ⽂件所保存的数据库状 态⼀样，但体积更⼩。 AOF 重写是⼀个有歧义的名字，该功能是通过读取数据库中的键值对来实现的，程序⽆须对现有 AOF ⽂件进⾏任何读⼊、分析或者写⼊操作。</p><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p>Redis 可以通过 MULTI ， EXEC ， DISCARD 和 WATCH 等命令来实现事务(transaction)功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">&gt; SET USER &quot;Guide哥&quot;</span><br><span class="line">QUEUED</span><br><span class="line">&gt; GET USER</span><br><span class="line">QUEUED</span><br><span class="line">&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) &quot;Guide哥&quot;</span><br></pre></td></tr></table></figure><p>DISCARD取消一个事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">&gt; SET USER &quot;Guide哥&quot;</span><br><span class="line">QUEUED</span><br><span class="line">&gt; GET USER</span><br><span class="line">QUEUED</span><br><span class="line">&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WATCH 命令⽤于监听指定的键，当调⽤ EXEC 命令执⾏事务时，如果⼀个被 WATCH 命令监 视的键被修改的话，整个事务都不会执⾏，直接返回失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; WATCH USER</span><br><span class="line">OK</span><br><span class="line">&gt; MULTI</span><br><span class="line">&gt; SET USER &quot;Guide哥&quot;</span><br><span class="line">OK</span><br><span class="line">&gt; GET USER</span><br><span class="line">Guide哥</span><br><span class="line">&gt; EXEC</span><br><span class="line">ERR EXEC without MULTI</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关系型数据库事务的四大特性：原子性、持久性、隔离性和一致性；但是Redis不满足在事务运行错误的情况下进行回滚，即不满足原子性，Redis也定不满足持久性。</p><p>Redis事务提供一种将多个命令打包的功能，然后再按顺序执行打包的所有命令，并且不会被中途打断。</p><p>除了不满⾜原⼦性之外，事务中的每条命令都会与 Redis 服务器进⾏⽹络交互，这是⽐᫾浪费资源 的⾏为。 因此，Redis 事务是不建议在⽇常开发中使⽤的。</p><p>为了解决这个问题，在Redis2.6之后提出了Lua机制，通过使用Lua脚本来批量执行多条Redis命令，而且这些Redis会一次性打包到Redis服务器中执行。</p><p>但是通过Lua脚本执行的命令也不会满足原子性，这是因为在一个Lua脚本中的命令如果出现执行错误的命令则会停止执行接下来的命令，但是之前的命令不会回滚。</p><h2 id="Redis优化"><a href="#Redis优化" class="headerlink" title="Redis优化"></a>Redis优化</h2><h3 id="Redis-bigkey"><a href="#Redis-bigkey" class="headerlink" title="Redis bigkey"></a>Redis bigkey</h3><p>什么是 bigkey？ 简单来说，如果⼀个 key 对应的 value 所占⽤的内存比较大，那这个 key 就可以看作是 bigkey。具 体多⼤才算⼤呢？有⼀个不是特别精确的参考标准：string 类型的 value 超过 10 kb，复合类型的 value 包含的元素超过 5000 个（对于复合类型的 value 来说，不⼀定包含的元素越多，占⽤的内存 就越多）。</p><p>bigkey对性能的影响很大，在实际的开发中应该尽量避免bigkey。</p><p>通过分析RDB文件来得到bigkey，前提是Redis采用的是RDB持久化。</p><h3 id="大量key集中过期问题"><a href="#大量key集中过期问题" class="headerlink" title="大量key集中过期问题"></a>大量key集中过期问题</h3><p>这一问题是在某一时刻遇到了大量的key过期，而这个清除Redis过期数据是由Redis主线程中执行的，导致客户端请求响应速度减慢。</p><p>针对key在某一时刻同时过期，我们提出：为key设置一个随机过期时间，避免造成拥堵；</p><p>针对清除过期key导致主线程阻塞，那么我们可以让清除过期key交给一个子线程，避免阻塞主线程，我们称这个方法为lazy-free（惰性删除&#x2F;延迟释放）</p><h2 id="Redis生产问题"><a href="#Redis生产问题" class="headerlink" title="Redis生产问题"></a>Redis生产问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h4><p>简单的说就是大量的请求key不存在缓存中，导致大量的请求直接打到了数据库上，导致数据库压力激增。解决办法如下：</p><ol><li><p>缓存无效的key；</p><blockquote><p>如果缓存和数据库都查不到某个 key 的数据就写⼀个到 Redis 中去并设置过期时间，具体命令如 下： SET key value EX 10086 。这种⽅式可以解决请求的 key 变化不频繁的情况，如果⿊客恶意攻 击，每次构建不同的请求 key，会导致 Redis 中缓存⼤量⽆效的 key 。很明显，这种⽅案并不能从 根本上解决此问题。如果⾮要⽤这种⽅式来解决穿透问题的话，尽量将⽆效的 key 的过期时间设置 短⼀点⽐如 1 分钟。 另外，这⾥多说⼀嘴，⼀般情况下我们是这样设计 key 的： 表名:列名:主键名:主键值 。</p></blockquote></li><li><p>布隆过滤器；</p><blockquote><p>布隆过滤器说某个元素存 在，⼩概率会误判。布隆过滤器说某个元素不在，那么这个元素⼀定不在。</p><p>布隆过滤器的本质是哈希函数，因为是哈希函数，那么就存在一定的几率出现哈希冲突，所以就会出现布隆过滤器说它不在它一定不在，说它在它不一定在。</p></blockquote></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存在同⼀时间⼤⾯积的失效，后⾯的请求都直 接落到了数据库上，造成数据库短时间内承受⼤量请求。 这就好⽐雪崩⼀样，摧枯拉朽之势，数据 库的压⼒可想⽽知，可能直接就被这么多请求弄宕机了。</p><blockquote><p>可以发现缓存雪崩和缓存穿透的区别就是这个key是否真实有效存在的。</p></blockquote><p>有哪些解决办法？ 针对 Redis 服务不可⽤的情况： </p><ol><li>采⽤ Redis 集群，避免单机出现问题整个缓存服务都没办法使⽤。 </li><li>限流，避免同时处理⼤量的请求。</li></ol><p>针对热点缓存失效的情况： </p><ol><li>设置不同的失效时间⽐如随机设置缓存的失效时间。</li><li>缓存永不失效</li></ol><h2 id="如何保证缓存和数据库数据的一致性"><a href="#如何保证缓存和数据库数据的一致性" class="headerlink" title="如何保证缓存和数据库数据的一致性"></a>如何保证缓存和数据库数据的一致性</h2><p>参考资料：<a href="https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&mid=2247487312&idx=1&sn=fa19566f5729d6598155b5c676eee62d&chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&scene=178&cur_album_id=1699766580538032128#rd">缓存和数据库一致性问题，看这篇就够了</a></p><p>我们首先就需要明确一下为什么引入缓存之后会出现缓存和数据库数据一致性的问题，在引入缓存之前，我们存取数据都是在一个数据库中进行操作的，但是如果我们引入了缓存之后，系统读的时候会优先从缓存中读取，那么如果缓存中的数据和磁盘中的数据不一致该如何是好？</p><p>所以我们就需要认真思考一下该如何解决缓存和数据库数据一致性的问题。</p><p>在这里我们需要面对下面几个选择：</p><ul><li>更新缓存 OR 删除缓存</li><li>如果是更新缓存，是先更新缓存还是先更新数据库；</li><li>如果是删除缓存，是先删除缓存还是先更新数据库再删除缓存；</li></ul><p>下面我们依次来看看这些方案分别会出现什么问题。</p><h3 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h3><p>如果我们选择更新缓存这一大方案，那么我们就会出现下面几个选择：先更新数据库再更新缓存OR先更新缓存再更新数据库。</p><p>在高并发的情况下，无论是先更新缓存再更新数据库还是先更新数据库再更新缓存都回出现下面这个问题，下面我们以先更新缓存再更新数据库为例来介绍其可能会出现的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261957695.png" alt="image-20240911115932602"></p><h3 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h3><h4 id="先删除缓存，后更新数据库"><a href="#先删除缓存，后更新数据库" class="headerlink" title="先删除缓存，后更新数据库"></a>先删除缓存，后更新数据库</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261957053.png" alt="image-20240911120051711"></p><h4 id="先更新数据库，后删除缓存"><a href="#先更新数据库，后删除缓存" class="headerlink" title="先更新数据库，后删除缓存"></a>先更新数据库，后删除缓存</h4><p>如果先更新数据库再删除缓存，是不会出现上面这种情况的，但是还会出现下面这个问题：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261957387.png" alt="image-20240911122040552"></p><p>所以为了解决并发情况的最好解决方案是：先更新数据库后删除缓存；</p><p>但是无论是更新缓存还是删除缓存，只要第二步发生失败，那么就会导致数据库和缓存不一致。</p><p>保证第二步成功执行就是解决问题的关键，最简单的办法是<strong>重试</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261957109.png" alt="image-20240911122740355"></p><h3 id="异步重试"><a href="#异步重试" class="headerlink" title="异步重试"></a>异步重试</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261957752.png" alt="image-20240911122814117"></p><p><strong>至此，我们可以得出结论，想要保证数据库和缓存一致性，推荐采用「先更新数据库，再删除缓存」方案，并配合「消息队列」或「订阅变更日志」的方式来做。</strong></p><h2 id="Bug解决"><a href="#Bug解决" class="headerlink" title="Bug解决"></a>Bug解决</h2><h3 id="解决Rediis客户端无法连接服务器上Redis服务问题"><a href="#解决Rediis客户端无法连接服务器上Redis服务问题" class="headerlink" title="解决Rediis客户端无法连接服务器上Redis服务问题"></a><a href="https://blog.csdn.net/m0_51295655/article/details/128791852?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-128791852-blog-82425785.235%5Ev43%5Econtrol&spm=1001.2101.3001.4242.1&utm_relevant_index=1">解决Rediis客户端无法连接服务器上Redis服务问题</a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>49 Java JDBC</title>
      <link href="/2025/02/26/49%20Java%20JDBC/"/>
      <url>/2025/02/26/49%20Java%20JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="49-Java-JDBC"><a href="#49-Java-JDBC" class="headerlink" title="49 Java JDBC"></a>49 Java JDBC</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/weixin_45187434/article/details/127510916">JavaJDBC：连接池</a></li><li><a href="https://blog.csdn.net/qq_39093474/article/details/136850812?ops_request_misc=&request_id=&biz_id=102&utm_term=Druid&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-136850812.142%5Ev100%5Epc_search_result_base2&spm=1018.2226.3001.4187">springboot集成Druid，配置详解新手必须读</a></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据库连接池顾名思义就是存放数据库连接状态的池子，在该技术提出之前，如果需要连接数据库，就会创建一个JDBC连接对象，当结束的时候，该对象就会被回收。所以如果重复的创建同样的数据库连接，就会造成资源的极大浪费，数据库连接池应运而生。</p><p>在数据库连接池中存放一定数量的数据库连接，当用户需要连接时，并非创建一个新的连接，而是查看连接池中是否已经存在了该连接，如果有则会直接拿出使用，从而提高效率。</p><p>连接池优点：</p><ol><li>减少连接创建时间：虽然与其它数据库相比 GBase 提供了较为快速连接功能，但是创建新的 JDBC 连接仍会招致网络和 JDBC 驱动的开销。如果这类连接是“循环”使用的，使用该方式这些花销就可避免</li><li>简化的编程模式：当使用连接池时，每一个单独的线程能够像创建了一个自己的 JDBC 连接一样操作，允许用户直接使用JDBC编程技术。</li><li>受控的资源使用：如果用户不使用连接池，而是每当线程需要时创建一个新的连接，那么用户的应用程序的资源使用会产生非常大的浪费并且可能会导致高负载下的异常发生。连接池能够使性能最大化，同时还能将资源利用控制在一定的水平之下，如果超过该水平，应用程序将崩溃而不仅仅是变慢。</li></ol><h2 id="连接池原理"><a href="#连接池原理" class="headerlink" title="连接池原理"></a>连接池原理</h2><ol><li>建立数据库连接池对象（服务器启动）。</li><li>按照事先指定的参数创建初始数量的数据库连接（即：空闲连接数）。</li><li>对于一个数据库的访问请求，直接从连接池中得到一个连接，如果数据库连接池对象中有空闲连接则直接使用、若没有空闲的链接，且连接数没有达到最大（即：最大活跃连接数），创建一个新的数据库连接来处理该请求，如果没有空闲连接并且达到最大活跃值则进行等待其它的链接释放再进行该请求的处理。</li><li>存取数据库。</li><li>关闭数据库，释放所有数据库连接（此时福安比数据库连接，并非真正的关闭，而是将其放入空闲队列中。如果实际空闲连接数大于初始空闲连接数则释放连接）。</li><li>释放数据库连接池对象（在服务器停止、维护期间，真正的释放数据库连接池对象，并释放所有资源）。</li></ol><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>Druid 是一个强大的数据库连接池和监控库，它提供了比常见的数据库连接池更多的功能，如连接池监控、统计<a href="https://so.csdn.net/so/search?q=SQL&spm=1001.2101.3001.7020">SQL</a>信息、SQL 监控、防 SQL 注入等。在 Spring Boot 项目中，Druid 可以很容易地集成并进行配置。</p><h3 id="SpringBoot配置Druid"><a href="#SpringBoot配置Druid" class="headerlink" title="SpringBoot配置Druid"></a>SpringBoot配置Druid</h3><h4 id="加入Maven"><a href="#加入Maven" class="headerlink" title="加入Maven"></a>加入Maven</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用 log4j2 记录日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">mybatis，引入了 SpringBoot的 JDBC 模块，</span></span><br><span class="line"><span class="comment">所以，默认是使用 hikari 作为数据源</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除默认的 HikariCP 数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>53 Linux服务器</title>
      <link href="/2025/02/26/53%20Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2025/02/26/53%20Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="53-Linux服务器"><a href="#53-Linux服务器" class="headerlink" title="53 Linux服务器"></a>53 Linux服务器</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>服务器IP：1.94.101.104</p><p>华为云账号：15107031522</p><p>华为云密码：fyh2380514719</p><p>服务器登录密码：!Fyh2380514719</p><h2 id="Linux相关命令"><a href="#Linux相关命令" class="headerlink" title="Linux相关命令"></a>Linux相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux命令行访问网页</span></span><br><span class="line">curl http://localhost:9200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里提供vim的一些操作帮助</span></span><br><span class="line"><span class="comment"># Shift + I编辑文档</span></span><br><span class="line"><span class="comment"># Esc退出编辑</span></span><br><span class="line"><span class="comment"># :q!    关闭文档</span></span><br><span class="line"><span class="comment"># :wq!保存文档并关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="comment"># .tar.gz 后缀</span></span><br><span class="line">tar -zxvf 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># .tar.xz 后缀</span></span><br><span class="line">tar -Jxvf 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新apt</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内存使用情况</span></span><br><span class="line">free -m</span><br><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定端口是否占用</span></span><br><span class="line">netstat -tulnp | grep &lt;端口号&gt;</span><br></pre></td></tr></table></figure><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用MySQL</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 密码 fyh2380514719</span></span><br><span class="line"><span class="comment"># 用户名 root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务开机自启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否正常启动 </span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://blog.csdn.net/mazaiting/article/details/106661158">MySQL 异常: “Host ‘xxx’ is not allowed to connect to this MySQL server”</a></li><li><a href="https://blog.csdn.net/weixin_45626288/article/details/133220238">在Ubuntu 22.04 LTS 上安装 MySQL两种方式：在线方式和离线方式</a></li><li><a href="https://blog.csdn.net/qq_43116788/article/details/84146918">MySql ERROR 1046(3D000): No Database Selected的解决办法</a></li></ol><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建新用户fang</span><br><span class="line"># 密码：fang</span><br><span class="line"></span><br><span class="line">su - fang</span><br><span class="line">cd /home/fang/software/elasticsearch-7.8.0/bin/</span><br><span class="line">./elasticsearch</span><br><span class="line"></span><br><span class="line"># 2、然后使用命令绑定bash即可。</span><br><span class="line">usermod -s /bin/bash name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>52 SIDC</title>
      <link href="/2025/02/26/52%20SIDC/"/>
      <url>/2025/02/26/52%20SIDC/</url>
      
        <content type="html"><![CDATA[<h1 id="52-SIDC"><a href="#52-SIDC" class="headerlink" title="52 SIDC"></a>52 SIDC</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SIDC全称<strong>螺钉IT开发社区</strong>（Screw IT Development Community），主要功能为：开发者打造专业技术写作、分享与交流平台，为技术人提供资讯与<a href="https://baike.baidu.com/item/%E7%9F%A5%E8%AF%86%E4%BA%A4%E6%B5%81/56528577?fromModule=lemma_inlink">知识交流</a>互动。为个人开发者提供项目学习案例，该项目仅供学习使用。</p><p><strong>注意你不仅仅只是为了完成这一个项目，而是为了在这个项目中学习，学习所有使用到的技术和可能会面临的问题，对待每一个技术、每一个知识点都需要去深挖，而不是浅尝辄止，仅仅处于会使用的层面，因为会使用而沾沾自喜，而不去深挖其内在。</strong></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SIDC主要功能有：</p><ol><li>用户模块：用户登录注册、用户关注、用户平台私信交流；</li><li>博客模块：博客浏览、博客评价、博客收藏、博客点赞、博客搜索、关注者博客推送、博客发表、博客管理；</li><li></li></ol><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ol><li><p>启动MySQL；</p></li><li><p>启动Redis；</p></li><li><p>启动Elasticsearch；</p></li><li><p>启动minio；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.\minio.exe server D:\CodeFolder\ToolFolder\MinIO\data  --console-address &quot;:9001&quot; --address &quot;:9000&quot; </span><br><span class="line"></span><br><span class="line">cd /d D:\CodeFolder\ToolFolder\MinIO &amp;&amp; .\minio.exe server D:\CodeFolder\ToolFolder\MinIO\data --console-address &quot;:9001&quot; --address &quot;:9000&quot;</span><br><span class="line"></span><br><span class="line">账号：admin</span><br><span class="line">密码：admin1234</span><br><span class="line">http://localhost:9001</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改profile"><a href="#修改profile" class="headerlink" title="修改profile"></a>修改profile</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959604.png" alt="image-20250225182928012"></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><table><thead><tr><th align="center">名称</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">SpringBoot</td><td align="center"></td></tr><tr><td align="center">SpringCloud</td><td align="center"></td></tr><tr><td align="center">MyBatis</td><td align="center"></td></tr><tr><td align="center">MyBatis-Plus</td><td align="center"></td></tr><tr><td align="center">Redis</td><td align="center"></td></tr><tr><td align="center">Dubbo</td><td align="center"></td></tr><tr><td align="center">Nacos</td><td align="center"></td></tr><tr><td align="center">Spring Security</td><td align="center"></td></tr><tr><td align="center">Spring Gateway</td><td align="center"></td></tr><tr><td align="center">Feign</td><td align="center"></td></tr><tr><td align="center">RabbitMQ</td><td align="center"></td></tr></tbody></table><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><table><thead><tr><th align="center">名称</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">Elasticsearch</td><td align="center"></td></tr><tr><td align="center">MySQL</td><td align="center"></td></tr><tr><td align="center">MinIo</td><td align="center"></td></tr></tbody></table><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><table><thead><tr><th align="center">名称</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">Vue</td><td align="center"></td></tr><tr><td align="center">HTML</td><td align="center"></td></tr><tr><td align="center">JS</td><td align="center"></td></tr><tr><td align="center">CSS</td><td align="center"></td></tr></tbody></table><h2 id="前端设计"><a href="#前端设计" class="headerlink" title="前端设计"></a>前端设计</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959554.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959563.png" alt="图片2"></p><h3 id="前端页面设计"><a href="#前端页面设计" class="headerlink" title="前端页面设计"></a>前端页面设计</h3><h4 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h4><p>生成代码promote：</p><blockquote><p>现在假设你是一个资深的Vue3+ElementUI开发者，且你对美学有深刻的理解，你会利用前端开发工具开发出简约且具有美感的页面。相关依赖我已经下载过，请你直接给出页面的vue代码即可！所有的模块，输入框，按钮等都请使用圆角样式，字体为楷体，字体较大，且你生成的所有代码都是局域setup语法糖，请严格按照我的描述和要求生成！！！。 </p><p>请你帮我实现一个用户注册页面，要求用户输入的有用户名、密码、重复密码、邮箱、电话号码、验证码，要求生成的页面简约，且所有的输入框均是圆角，页面需要自定义背景图片，且所有的输入框较宽较大，不同的输入框直接上下间距较大，字体较大且使用艺术字体，所有输入框所属的这个div应该较大。</p></blockquote><h4 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h4><blockquote><p>现在假设你是一个资深的Vue3+ElementUI开发者，且你对美学有深刻的理解，你会利用前端开发工具开发出简约且具有美感的页面。相关依赖我已经下载过，请你直接给出页面的vue代码即可！所有的模块，输入框，按钮等都请使用圆角样式，字体为楷体，字体较大，且你生成的所有代码都是基于setup语法糖，请严格按照我的描述和要求生成！！！</p><p> 请你帮我实现一个用户登录页面，要求用户输入的有用户名、密码。要求生成的页面简约，且所有的输入框均是圆角，页面需要自定义背景图片，且所有的输入框较宽较大，不同的输入框直接上下间距较大，字体较大且使用楷体，所有输入框所属的这个div应该较大，整个表达应该位于整个页面的左边，整个表单上方应有：SIDN用户登录，下方应该提供用户注册和忘记密码跳转按钮，两个按钮应该位于同一行且居中。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959544.png" alt="image-20240729222526580"></p><h4 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h4><blockquote><p>现在假设你是一个资深的Vue3+ElementUI开发者，且你对美学有深刻的理解，你会利用前段开发工具开发出简约且具有美感的页面。相关依赖我已经下载过，请你直接给出页面的vue代码即可！</p><p> 请你帮我实现一个用户注册页面，要求用户输入的有用户名、密码、重复密码、邮箱、电话号码、验证码，要求生成的页面简约，且所有的输入框均是圆角，页面需要自定义背景图片，且所有的输入框较宽较大，不同的输入框直接上下间距较大，字体较大且使用艺术字体，所有输入框所属的这个div应该较大。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959541.png" alt="image-20240729222558501"></p><h4 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h4><h5 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959007.png" alt="image-20240803101845892"></p><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><h5 id="首页参考如下"><a href="#首页参考如下" class="headerlink" title="首页参考如下"></a>首页参考如下</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959088.png" alt="image-20240726115403176"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959638.png" alt="image-20240803102018659"></p><blockquote><p>现在假设你是一个资深的Vue3+ElementUI开发者，且你对美学有深刻的理解，你会利用前端开发工具开发出简约且具有美感的页面。相关依赖我已经下载过，请你直接给出页面的vue代码即可！所有的模块，输入框，按钮等都请使用圆角样式，字体为楷体，字体较大，且你生成的所有代码都是局域setup语法糖，请严格按照我的描述和要求生成！！！。</p><p> 请你帮我实现一个博客浏览首页，请你按照下面的要求帮我生成页面代码： 1、该首页首先具有一个导航栏，该导航具有用户登录、注册、消息、历史等模块，这些模块的字体都处于导航栏的中间，且用户浏览往下翻时，该导航栏会一直显示在页面上方，导航栏可以设置背景图片； 2、在导航栏的下方就是一个搜索输入框，输入框圆角，输入框的搜索按钮和输入框一体，不能有明显的分割，且用户浏览往下翻时，其搜索框会一直显示在页面上面跟随者导航栏一起，搜索按钮请设置成红色，中间有一个搜索的logo图标； 3、然后下方就是一个div，其默认折叠，只会显示一行，这主要是放置各种博客的类型，比如：后端、前端、Java等，其中间有一个小图标，点击之后会展开所有的类型，运允许我设置图片背景在这个div，圆角。 上面所有的都需要显示在页面中间，距离左右两边有一定的边距，不多也不少，且样式应该简约且具有一种美学的大气。</p></blockquote><h5 id="头条"><a href="#头条" class="headerlink" title="头条"></a>头条</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959106.png" alt="image-20240803112433125"></p><h4 id="博客模块"><a href="#博客模块" class="headerlink" title="博客模块"></a>博客模块</h4><h5 id="博客上传"><a href="#博客上传" class="headerlink" title="博客上传"></a>博客上传</h5><blockquote><p>现在假设你是一个资深的Vue3+ElementUI开发者，且你对美学有深刻的理解，你会利用前端开发工具开发出简约且具有美感的页面。相关依赖我已经下载过，请你直接给出页面的vue代码即可！所有的模块，输入框，按钮等都请使用圆角样式，字体为楷体，字体较大，且你生成的所有代码都是局域setup语法糖，请严格按照我的描述和要求生成！！！。 </p><p>请你帮我实现一个用户博客上传功能，用户只能上传md格式的文件，支持用户拖文件上传。用户选择文件确定之后，你需要提取这个md文件中的所有图片，并上传后端服务器，并获取到后端服务器保存的地址，然后替换现在的md文件中的地址，所有替换完成后再将该博客上传到后端服务器。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container style=&quot;padding: 20px; font-family: 楷体; font-size: larger;&quot;&gt;</span><br><span class="line">    &lt;el-header&gt;</span><br><span class="line">      &lt;h2&gt;上传博客&lt;/h2&gt;</span><br><span class="line">    &lt;/el-header&gt;</span><br><span class="line">    &lt;el-main&gt;</span><br><span class="line">      &lt;el-upload</span><br><span class="line">        drag</span><br><span class="line">        action=&quot;&quot;</span><br><span class="line">        :http-request=&quot;uploadMdFile&quot;</span><br><span class="line">        :accept=&quot;.md&quot;</span><br><span class="line">        :on-success=&quot;handleSuccess&quot;</span><br><span class="line">        :before-upload=&quot;beforeUpload&quot;</span><br><span class="line">        :on-remove=&quot;handleRemove&quot;</span><br><span class="line">        :show-file-list=&quot;false&quot;</span><br><span class="line">        style=&quot;border-radius: 15px;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-upload&quot; style=&quot;font-size: 48px;&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div class=&quot;el-upload__text&quot;&gt;将 Markdown 文件拖到这里，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/el-upload&gt;</span><br><span class="line">      &lt;el-button </span><br><span class="line">        v-if=&quot;file&quot; </span><br><span class="line">        type=&quot;primary&quot; </span><br><span class="line">        @click=&quot;uploadBlog&quot; </span><br><span class="line">        style=&quot;margin-top: 20px; border-radius: 10px;&quot;&gt;</span><br><span class="line">        上传博客</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line">    &lt;/el-main&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">const file = ref(null)</span><br><span class="line"></span><br><span class="line">const beforeUpload = (file) =&gt; &#123;</span><br><span class="line">  const isMarkdown = file.type === &#x27;text/markdown&#x27;</span><br><span class="line">  if (!isMarkdown) &#123;</span><br><span class="line">    ElMessage.error(&#x27;只能上传 Markdown 文件!&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  return isMarkdown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const handleSuccess = (response, file) =&gt; &#123;</span><br><span class="line">  ElMessage.success(&#x27;文件上传成功!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const handleRemove = () =&gt; &#123;</span><br><span class="line">  file.value = null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const uploadMdFile = async (file) =&gt; &#123;</span><br><span class="line">  file.value = file.raw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const uploadBlog = async () =&gt; &#123;</span><br><span class="line">  if (!file.value) return</span><br><span class="line">  </span><br><span class="line">  const reader = new FileReader()</span><br><span class="line">  reader.readAsText(file.value)</span><br><span class="line">  </span><br><span class="line">  reader.onload = async () =&gt; &#123;</span><br><span class="line">    let content = reader.result</span><br><span class="line">    </span><br><span class="line">    // 提取所有图片链接并上传</span><br><span class="line">    const imgRegex = /!\[.*?\]\((.*?)\)/g</span><br><span class="line">    let match</span><br><span class="line">    while ((match = imgRegex.exec(content)) !== null) &#123;</span><br><span class="line">      const imgUrl = match[1]</span><br><span class="line">      const imgData = await fetch(imgUrl).then(res =&gt; res.blob())</span><br><span class="line">      const formData = new FormData()</span><br><span class="line">      formData.append(&#x27;file&#x27;, imgData, &#x27;image.png&#x27;)</span><br><span class="line">      </span><br><span class="line">      // 假设你的后端图片上传接口是 /upload/image</span><br><span class="line">      const response = await axios.post(&#x27;/upload/image&#x27;, formData)</span><br><span class="line">      const newImgUrl = response.data.url</span><br><span class="line">      </span><br><span class="line">      content = content.replace(imgUrl, newImgUrl)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 上传最终的 Markdown 文件</span><br><span class="line">    const blogFormData = new FormData()</span><br><span class="line">    const finalBlob = new Blob([content], &#123; type: &#x27;text/markdown&#x27; &#125;)</span><br><span class="line">    blogFormData.append(&#x27;file&#x27;, finalBlob, file.value.name)</span><br><span class="line">    </span><br><span class="line">    // 假设你的后端博客上传接口是 /upload/blog</span><br><span class="line">    await axios.post(&#x27;/upload/blog&#x27;, blogFormData)</span><br><span class="line">    </span><br><span class="line">    ElMessage.success(&#x27;博客上传成功!&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.el-upload &#123;</span><br><span class="line">  background: #f5f5f5;</span><br><span class="line">  border: 2px dashed #d9d9d9;</span><br><span class="line">  border-radius: 15px;</span><br><span class="line">  padding: 40px 20px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  transition: border-color 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-upload:hover &#123;</span><br><span class="line">  border-color: #409eff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container style=&quot;padding: 20px; font-family: 楷体,serif; font-size: larger;&quot;&gt;</span><br><span class="line">    &lt;el-header&gt;</span><br><span class="line">      &lt;h2&gt;上传博客&lt;/h2&gt;</span><br><span class="line">    &lt;/el-header&gt;</span><br><span class="line">    &lt;el-main&gt;</span><br><span class="line">      &lt;el-upload</span><br><span class="line">          drag</span><br><span class="line">          :headers=&quot;upload.headers&quot;</span><br><span class="line">          :action=&quot;upload.url&quot;</span><br><span class="line">          accept=&quot;.md&quot;</span><br><span class="line">          :on-success=&quot;handleSuccess&quot;</span><br><span class="line">          :before-upload=&quot;beforeUpload&quot;</span><br><span class="line">          auto-upload:false</span><br><span class="line">          :show-file-list=&quot;true&quot;</span><br><span class="line">          style=&quot;border-radius: 15px;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-upload&quot; style=&quot;font-size: 48px;&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div class=&quot;el-upload__text&quot;&gt;将 Markdown 文件拖到这里，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/el-upload&gt;</span><br><span class="line">    &lt;/el-main&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">// import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">const file = ref(null)</span><br><span class="line"></span><br><span class="line">const upload = (&#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Authorization: &quot;Bearer &quot;,</span><br><span class="line">    &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  url: &#x27;/screw/api/blog/addBlogMDFile1&#x27;,  // 地址,以aaa打头</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const beforeUpload = (file) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  const allowedTypes = [&#x27;.md&#x27;];</span><br><span class="line">  const fileType = file.name.split(&#x27;.&#x27;).pop().toLowerCase();</span><br><span class="line">  if (!allowedTypes.includes(&#x27;.&#x27; + fileType)) &#123;</span><br><span class="line">    ElMessage.error(&#x27;只能上传.md格式的文件！&#x27;);</span><br><span class="line">    return false; // 阻止上传</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&quot;格式符合&quot;)</span><br><span class="line"></span><br><span class="line">  if (!file.name) return</span><br><span class="line">  console.log(file.name)</span><br><span class="line"></span><br><span class="line">  const reader = new FileReader()</span><br><span class="line">  reader.readAsText(file)</span><br><span class="line"></span><br><span class="line">  reader.onload = async () =&gt; &#123;</span><br><span class="line">    let content = reader.result</span><br><span class="line"></span><br><span class="line">    // 提取所有图片链接并上传</span><br><span class="line">    const imgRegex = /!\[.*?\]\((.*?)\)/g</span><br><span class="line">    let match</span><br><span class="line">    while ((match = imgRegex.exec(content)) !== null) &#123;</span><br><span class="line">      const imgUrl = match[1]</span><br><span class="line">      console.log(imgUrl)</span><br><span class="line">      // const imgData = await fetch(imgUrl).then(res =&gt; res.blob())</span><br><span class="line">      // const formData = new FormData()</span><br><span class="line">      // formData.append(&#x27;file&#x27;, imgData, &#x27;image.png&#x27;)</span><br><span class="line"></span><br><span class="line">      // 假设你的后端图片上传接口是 /upload/image</span><br><span class="line">      // const response = await axios.post(&#x27;/upload/image&#x27;, formData)</span><br><span class="line">      // const newImgUrl = response.data.url</span><br><span class="line"></span><br><span class="line">      // content = content.replace(imgUrl, newImgUrl)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 上传最终的 Markdown 文件</span><br><span class="line">    const blogFormData = new FormData()</span><br><span class="line">    const finalBlob = new Blob([content], &#123;type: &#x27;text/markdown&#x27;&#125;)</span><br><span class="line">    blogFormData.append(&#x27;file&#x27;, finalBlob, file.value.name)</span><br><span class="line"></span><br><span class="line">    // 假设你的后端博客上传接口是 /upload/blog</span><br><span class="line">    // await axios.post(&#x27;/upload/blog&#x27;, blogFormData)</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;博客上传成功!&#x27;)</span><br><span class="line"></span><br><span class="line">    // 可以在这里添加更多的文件检查逻辑</span><br><span class="line">    return true; // 允许上传</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const handleSuccess = (response, file) =&gt; &#123;</span><br><span class="line">  ElMessage.success(&#x27;文件上传成功!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const handleRemove = () =&gt; &#123;</span><br><span class="line">  file.value = null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const uploadMdFile = async (file) =&gt; &#123;</span><br><span class="line">  file.value = file.raw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function readFileFirefox(fileBrowser) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    netscape.security.PrivilegeManager.enablePrivilege(&quot;UniversalXPConnect&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  catch (e) &#123;</span><br><span class="line">    alert(&#x27;无法访问本地文件，由于浏览器安全设置。为了克服这一点，请按照下列步骤操作：(1)在地址栏输入&quot;about:config&quot;;(2) 右键点击并选择 New-&gt;Boolean; (3) 输入&quot;signed.applets.codebase_principal_support&quot; （不含引号）作为一个新的首选项的名称;(4) 点击OK并试着重新加载文件&#x27;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  var fileName=fileBrowser.value; //这一步就能得到客户端完整路径。下面的是否判断的太复杂，还有下面得到ie的也很复杂。</span><br><span class="line">  var file = Components.classes[&quot;@mozilla.org/file/local;1&quot;]</span><br><span class="line">      .createInstance(Components.interfaces.nsILocalFile);</span><br><span class="line">  try &#123;</span><br><span class="line">    // Back slashes for windows</span><br><span class="line">    file.initWithPath( fileName.replace(/\//g, &quot;\\\\&quot;) );</span><br><span class="line">  &#125;</span><br><span class="line">  catch(e) &#123;</span><br><span class="line">    if (e.result!=Components.results.NS_ERROR_FILE_UNRECOGNIZED_PATH) throw e;</span><br><span class="line">    alert(&quot;File &#x27;&quot; + fileName + &quot;&#x27; cannot be loaded: relative paths are not allowed. Please provide an absolute path to this file.&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( file.exists() == false ) &#123;</span><br><span class="line">    alert(&quot;File &#x27;&quot; + fileName + &quot;&#x27; not found.&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  return file.path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.el-upload &#123;</span><br><span class="line">  background: #f5f5f5;</span><br><span class="line">  border: 2px dashed #d9d9d9;</span><br><span class="line">  border-radius: 15px;</span><br><span class="line">  padding: 40px 20px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  transition: border-color 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-upload:hover &#123;</span><br><span class="line">  border-color: #409eff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="读取本地文件路径代码"><a href="#读取本地文件路径代码" class="headerlink" title="读取本地文件路径代码"></a>读取本地文件路径代码</h5><p>参考资料：<a href="https://blog.csdn.net/u011250186/article/details/122387755">html5加js实现本地文件读取和写入并获取本地文件路径</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//FX获取文件路径方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">readFileFirefox</span>(<span class="params">fileBrowser</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            netscape.<span class="property">security</span>.<span class="property">PrivilegeManager</span>.<span class="title function_">enablePrivilege</span>(<span class="string">&quot;UniversalXPConnect&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;无法访问本地文件，由于浏览器安全设置。为了克服这一点，请按照下列步骤操作：(1)在地址栏输入&quot;about:config&quot;;(2) 右键点击并选择 New-&gt;Boolean; (3) 输入&quot;signed.applets.codebase_principal_support&quot; （不含引号）作为一个新的首选项的名称;(4) 点击OK并试着重新加载文件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> fileName=fileBrowser.<span class="property">value</span>; <span class="comment">//这一步就能得到客户端完整路径。下面的是否判断的太复杂，还有下面得到ie的也很复杂。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> file = <span class="title class_">Components</span>.<span class="property">classes</span>[<span class="string">&quot;@mozilla.org/file/local;1&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">createInstance</span>(<span class="title class_">Components</span>.<span class="property">interfaces</span>.<span class="property">nsILocalFile</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Back slashes for windows</span></span></span><br><span class="line"><span class="language-javascript">            file.<span class="title function_">initWithPath</span>( fileName.<span class="title function_">replace</span>(<span class="regexp">/\//g</span>, <span class="string">&quot;\\\\&quot;</span>) );</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">catch</span>(e) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (e.<span class="property">result</span>!=<span class="title class_">Components</span>.<span class="property">results</span>.<span class="property">NS_ERROR_FILE_UNRECOGNIZED_PATH</span>) <span class="keyword">throw</span> e;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;File &#x27;&quot;</span> + fileName + <span class="string">&quot;&#x27; cannot be loaded: relative paths are not allowed. Please provide an absolute path to this file.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> ( file.<span class="title function_">exists</span>() == <span class="literal">false</span> ) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;File &#x27;&quot;</span> + fileName + <span class="string">&quot;&#x27; not found.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> file.<span class="property">path</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//根据不同浏览器获取路径</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getvl</span>(<span class="params">obj</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//判断浏览器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Sys</span> = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> s;</span></span><br><span class="line"><span class="language-javascript">        (s = ua.<span class="title function_">match</span>(<span class="regexp">/msie ([\d.]+)/</span>)) ? <span class="title class_">Sys</span>.<span class="property">ie</span> = s[<span class="number">1</span>] :</span></span><br><span class="line"><span class="language-javascript">            (s = ua.<span class="title function_">match</span>(<span class="regexp">/firefox\/([\d.]+)/</span>)) ? <span class="title class_">Sys</span>.<span class="property">firefox</span> = s[<span class="number">1</span>] :</span></span><br><span class="line"><span class="language-javascript">                (s = ua.<span class="title function_">match</span>(<span class="regexp">/chrome\/([\d.]+)/</span>)) ? <span class="title class_">Sys</span>.<span class="property">chrome</span> = s[<span class="number">1</span>] :</span></span><br><span class="line"><span class="language-javascript">                    (s = ua.<span class="title function_">match</span>(<span class="regexp">/opera.([\d.]+)/</span>)) ? <span class="title class_">Sys</span>.<span class="property">opera</span> = s[<span class="number">1</span>] :</span></span><br><span class="line"><span class="language-javascript">                        (s = ua.<span class="title function_">match</span>(<span class="regexp">/version\/([\d.]+).*safari/</span>)) ? <span class="title class_">Sys</span>.<span class="property">safari</span> = s[<span class="number">1</span>] : <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> file_url=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="title class_">Sys</span>.<span class="property">ie</span>&lt;=<span class="string">&quot;6.0&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ie5.5,ie6.0</span></span></span><br><span class="line"><span class="language-javascript">            file_url = obj.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">Sys</span>.<span class="property">ie</span>&gt;=<span class="string">&quot;7.0&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ie7,ie8</span></span></span><br><span class="line"><span class="language-javascript">            obj.<span class="title function_">select</span>();</span></span><br><span class="line"><span class="language-javascript">            file_url = <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">createRange</span>().<span class="property">text</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">Sys</span>.<span class="property">firefox</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//fx</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//file_url = document.getElementById(&quot;file&quot;).files[0].getAsDataURL();//获取的路径为FF识别的加密字符串</span></span></span><br><span class="line"><span class="language-javascript">            file_url = <span class="title function_">readFileFirefox</span>(obj);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">Sys</span>.<span class="property">chrome</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            file_url = obj.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//alert(file_url);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;获取文件域完整路径为：&quot;</span>+file_url;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JS获取文件域完整路径的方法，兼容不同浏览器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:#f00;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;getvl(this)&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="博客阅读"><a href="#博客阅读" class="headerlink" title="博客阅读"></a>博客阅读</h5><p>参考设计</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959533.png" alt="image-20240805100336400"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://blog.csdn.net/Kiruthika/article/details/124974833">vue项目图片滑动验证码 前端+后端验证</a></li></ol><h3 id="二次封装"><a href="#二次封装" class="headerlink" title="二次封装"></a>二次封装</h3><p>参考资料：<a href="https://blog.csdn.net/Vivien_CC/article/details/127507545">vue中axios的二次封装——vue 封装axios详细步骤</a></p><p>api统一管理，不管接口有多少，所有的接口都可以非常清晰，容易维护。</p><p>通常我们的项目会越做越大，页面也会越来越多，如果页面非常的少，直接用axios也没有什么大的影响，那页面组件多了起来，上百个接口呢，这个时候后端改了接口，多加了一个参数什么的呢？那就只有找到那个页面，进去修改，整个过程很繁琐，不易于项目的维护和迭代。</p><p>这个时候如果我们统一的区管理接口，需要修改某一个接口的时候直接在api里修改对应的请求，是不是很方便呢？因为我们用的最多的还是get post请求，我们就可以针对封装。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><table><thead><tr><th><code>width</code></th><th><code>100px</code>, <code>50%</code>, <code>auto</code> - 元素的宽度，可以是具体数值、百分比或自动。</th></tr></thead><tbody><tr><td><code>height</code></td><td><code>200px</code>, <code>30%</code>, <code>auto</code> - 元素的高度，可以是具体数值、百分比或自动。</td></tr><tr><td><code>margin</code></td><td><code>10px</code>, <code>5%</code>, <code>10px 20px</code> - 元素的外边距，可以是单个值或多个值。</td></tr><tr><td><code>padding</code></td><td><code>5px</code>, <code>2%</code>, <code>10px 5px 2px 8px</code> - 元素的内边距，可以是单个值或多个值。</td></tr><tr><td><code>border</code></td><td><code>1px solid black</code> - 元素边框的宽度、样式和颜色。</td></tr><tr><td><code>border-radius</code></td><td><code>5px</code>, <code>50%</code> - 元素边框的圆角半径，可以是具体数值或百分比。</td></tr><tr><td><code>background</code></td><td><code>#f0f0f0</code>, <code>url(image.jpg)</code> - 元素背景的颜色或图像。</td></tr><tr><td><code>color</code></td><td><code>red</code>, <code>#ff0000</code>, <code>rgb(255, 0, 0)</code> - 文本颜色。</td></tr><tr><td><code>font-size</code></td><td><code>16px</code>, <code>1.5em</code> - 字体大小。</td></tr><tr><td><code>font-family</code></td><td><code>Arial, sans-serif</code> - 字体族。</td></tr><tr><td><code>line-height</code></td><td><code>1.5</code>, <code>20px</code> - 行高，可以是数字或具体数值。</td></tr><tr><td><code>text-align</code></td><td><code>left</code>, <code>right</code>, <code>center</code>, <code>justify</code> - 文本对齐方式。</td></tr><tr><td><code>display</code></td><td><code>block</code>, <code>inline</code>, <code>flex</code>, <code>none</code> - 元素的显示类型。</td></tr><tr><td><code>position</code></td><td><code>static</code>, <code>relative</code>, <code>absolute</code>, <code>fixed</code> - 元素的定位方式。</td></tr><tr><td><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code></td><td>与<code>position</code>属性配合使用，定义元素的位置。</td></tr><tr><td><code>z-index</code></td><td><code>10</code>, <code>100</code> - 元素的堆叠顺序。</td></tr><tr><td><code>opacity</code></td><td><code>0.5</code> - 元素的透明度，0完全透明，1完全不透明。</td></tr><tr><td><code>overflow</code></td><td><code>visible</code>, <code>hidden</code>, <code>scroll</code> - 元素内容溢出时的处理方式。</td></tr><tr><td><code>cursor</code></td><td><code>pointer</code>, <code>default</code>, <code>none</code> - 鼠标指针在元素上的形状。</td></tr><tr><td><code>box-shadow</code></td><td><code>10px 10px 5px grey</code> - 元素的阴影效果。</td></tr><tr><td><code>text-shadow</code></td><td><code>2px 2px 2px grey</code> - 文本的阴影效果。</td></tr><tr><td><code>transition</code></td><td><code>all 0.3s ease</code> - 属性值变化时的过渡效果。</td></tr><tr><td><code>transform</code></td><td><code>rotate(45deg)</code>, <code>scale(1.5)</code> - 元素的变换效果。</td></tr></tbody></table><h2 id="后端设计"><a href="#后端设计" class="headerlink" title="后端设计"></a>后端设计</h2><h3 id="1-0版"><a href="#1-0版" class="headerlink" title="1.0版"></a>1.0版</h3><p>关于后端服务划分大概会划分为：用户服务、博客服务。</p><p>用户服务：在该版本中主要实现用户登录，用户注册、用户修改密码、用户关注列表、权限管理、VIP用户、等。</p><p>博客服务：博客发表、博客浏览、博客查看、VIP博客、付费博客统一管理、博客搜索、</p><h3 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h3><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h3><h4 id="用户表设计"><a href="#用户表设计" class="headerlink" title="用户表设计"></a>用户表设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="评论表"><a href="#评论表" class="headerlink" title="评论表"></a>评论表</h4><h4 id="博客表"><a href="#博客表" class="headerlink" title="博客表"></a>博客表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT /blogs</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;,</span><br><span class="line">      &quot;title&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;,</span><br><span class="line">      &quot;content&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;,</span><br><span class="line">      &quot;summary&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;,</span><br><span class="line">      &quot;author&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;,</span><br><span class="line">      &quot;create_time&quot;: &#123; &quot;type&quot;: &quot;date&quot;,&quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot; &#125;,</span><br><span class="line">      &quot;update_time&quot;: &#123; &quot;type&quot;: &quot;date&quot;,&quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot; &#125;,</span><br><span class="line">      &quot;views&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;,</span><br><span class="line">      &quot;likes&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;,</span><br><span class="line">      &quot;comments_count&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;,</span><br><span class="line">      &quot;tags&quot;: &#123; &quot;type&quot;: &quot;integer&quot;,&quot;index&quot;: true &#125;,</span><br><span class="line">      &quot;category&quot;: &#123; &quot;type&quot;: &quot;integer&quot;,&quot;index&quot;: true &#125;,</span><br><span class="line">      &quot;status&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;,</span><br><span class="line">      &quot;images&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;,</span><br><span class="line">      &quot;attachments&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;,</span><br><span class="line">      &quot;access_control&quot;: &#123; &quot;type&quot;: &quot;integer&quot;,&quot;index&quot;: true &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h3><h2 id="功能模块设计"><a href="#功能模块设计" class="headerlink" title="功能模块设计"></a>功能模块设计</h2><h3 id="即时通信交流模块"><a href="#即时通信交流模块" class="headerlink" title="即时通信交流模块"></a>即时通信交流模块</h3><h4 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://blog.csdn.net/zhizhengguan/article/details/121600366?ops_request_misc=%257B%2522request%255Fid%2522%253A%25226079B66A-5D06-438D-8C92-D1283E96C0E1%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=6079B66A-5D06-438D-8C92-D1283E96C0E1&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-121600366-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=%E6%B6%88%E6%81%AF%E6%94%B6%E5%8F%91%E6%9E%B6%E6%9E%84&spm=1018.2226.3001.4187">即时消息：消息收发架构</a></li><li><a href="https://blog.csdn.net/m0_68103666/article/details/141359336?ops_request_misc=&request_id=&biz_id=102&utm_term=Java%20IM%E6%9C%8D%E5%8A%A1%E5%99%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-141359336.142%5Ev100%5Epc_search_result_base2&spm=1018.2226.3001.4187">推荐一款 Java 开发的即时通讯系统，轻量、高性能、单机支持几十万至百万在线用户（附源码）</a></li><li><a href="https://blog.csdn.net/qq_41698074/article/details/113741753#:~:text=%E5%89%8D%E8%A8%80%20%E6%9C%80%E8%BF%91%E5%9C%A8%E5%81%9A%E4%B8%80%E4%B8%AA%E8%81%8A#:~:text=%E5%89%8D%E8%A8%80%20%E6%9C%80%E8%BF%91%E5%9C%A8%E5%81%9A%E4%B8%80%E4%B8%AA%E8%81%8A">SpringBoot + Vue 实现基于 WebSocket 的聊天室(单聊)</a></li><li><a href="https://github.com/zhangjiwei1221/blog/blob/master/chat/chat-back/src/main/java/cn/zjw/chatback/websocket/WebSocketServer.java">https://github.com/zhangjiwei1221/blog/blob/master/chat/chat-back/src/main/java/cn/zjw/chatback/websocket/WebSocketServer.java</a></li><li></li></ul><h4 id="数据库设计-1"><a href="#数据库设计-1" class="headerlink" title="数据库设计"></a>数据库设计</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959662.png" alt="image-20240806145003799"></p><p>如果有用户发送消息给该接收方时。该消息会被保存到Redis中，以接收方userId作为Key。并设置一个定时任务即每十分钟（举例子）读Redis中的内容并保存到MySQL中，然后清除Redis中对应的消息内容。</p><p>对于每个用户设置两个缓存区，一个是新消息区、一个是历史消息区和一个会话区。如果用户有新消息，就会把这个消息保存到Redis缓存的新消息区。</p><p>当用户登录之后，就会开始消息初始化操作，先查看</p><p>我们需要建立两个表：会话表&amp;消息记录表；会话表保存用户当前页面上维持的会话，字段大概如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_conversation:</span><br><span class="line">id: 会话ID</span><br><span class="line">send_user_id: 会话发送方</span><br><span class="line">current_id: 会话拥有方</span><br><span class="line">not_read_num: 未读消息数目</span><br><span class="line">last_message: 会话最后一条消息内容</span><br><span class="line">last_message_time: 最后一条消息发送时间</span><br><span class="line">del_flag: 是否删除</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">message_history:</span><br><span class="line">id：消息ID</span><br><span class="line">conversation_id:会话ID</span><br><span class="line">send_user_id:消息发送方ID</span><br><span class="line">revice_user_id:消息接收方ID</span><br><span class="line">message：具体消息</span><br><span class="line">send_time:消息发送时间</span><br><span class="line">message_type:消息类型：1-文字、2-图片、3-文件、4-其它</span><br></pre></td></tr></table></figure><h4 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h4><p>目前计划使用WebSocket来实现即时通信这一项功能，计划采用Redis、MySQL做持久化处理，前端增加一个消息模块，前端页面设计从github上获取，无需多好看，能用就行，这不是我们的重点，我们重点需要把这个即时通信弄好。</p><p>关于数据库该如何设计，其中涉及到很多技术细节，后续再详细的给出。</p><p>关于发送的消息持久化这一步其中可能会遇到哪些问题，这些问题的解决方案是什么样的都需要后续详细的分析一下。</p><h4 id="工作安排"><a href="#工作安排" class="headerlink" title="工作安排"></a>工作安排</h4><p>TODO</p><ol><li><del>简单跑通WebSocket在SpringBoot项目中（目前只是跑通了简单的群发WebSocket以及初步理解了WebSocket的概念，点对点聊天还未跑通）；</del></li><li>简单跑通WebSocket的点对点聊天案例；</li></ol><h3 id="博客上传-1"><a href="#博客上传-1" class="headerlink" title="博客上传"></a>博客上传</h3><h4 id="博客保存"><a href="#博客保存" class="headerlink" title="博客保存"></a>博客保存</h4><p><a href="http://localhost:8081/article/saveArticle">http://localhost:8081/article/saveArticle</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;articleTitle&quot;: &quot;Test上传&quot;,</span><br><span class="line">  &quot;articleContent&quot;: &quot;# 34-04 Milvus\n\n## 参考资料\n\n1. [为AI而生的数据库：Milvus详解及实战](https://blog.csdn.net/lsb2002/article/details/132222947)\n\n\n\n## 概述\n\n\n\n\n\n## Python使用Demo\n\n```\n# 安装 Python 客户端\npip install pymilvus\n```\n\n```\n# 3. 初始化 Milvus 客户端\n\nfrom pymilvus import connections as milvus\n\n# 初始化一个 Milvus 客户端，默认连接到本地的 Milvus 服务\nclient = milvus.connect(&#x27;default&#x27;, host=&#x27;localhost&#x27;, port=&#x27;19530&#x27;)\n```\n\n```\n# 4. 创建集合\n\ncollection_name = \&quot;face_collection\&quot;\n\n# 创建集合，确保集合不存在\nif not client.has_collection(collection_name):\n    client.create_collection(collection_name)\n```\n\n```\n# 5. 定义向量字段的类型\n\nimport numpy as np\n\n# 定义向量字段的类型，假设向量维度为 128\nfields = [\n    (\&quot;face_vector\&quot;, \&quot;float_vector\&quot;, 128),\n    (\&quot;face_name\&quot;, \&quot;text\&quot;)\n]\n```\n\n```\n# 6. 插入数据\n# 准备一些示例数据\ndata_to_insert = [\n    &#123;\&quot;face_vector\&quot;: np.random.random(128).tolist(), \&quot;face_name\&quot;: \&quot;Person1\&quot;&#125;,\n    &#123;\&quot;face_vector\&quot;: np.random.random(128).tolist(), \&quot;face_name\&quot;: \&quot;Person2\&quot;&#125;,\n    # ... 更多数据\n]\n\n# 插入数据\ninsert_result = client.insert(collection_name, fields, data_to_insert)\n```\n\n```\n7. 搜索相似向量\n# 准备一个查询向量\nquery_vector = np.random.random(128).tolist()\n\n# 定义搜索参数\nsearch_params = &#123;\n    \&quot;nprobe\&quot;: 10,\n    \&quot;metric_type\&quot;: \&quot;L2\&quot;\n&#125;\n\n# 执行搜索\ntop_k = 1  # 返回最相似的一个结果\nresults = client.search(collection_name, \&quot;face_vector\&quot;, query_vector, top_k, search_params)\n\n# 打印结果\nfor result in results:\n    for item in result:\n        print(f\&quot;相似度: &#123;item.distance&#125;, 对应字符串: &#123;item.entity.get(&#x27;face_name&#x27;)[0]&#125;\&quot;)\n```\n\n```python\nfrom pymilvus import connections as milvus\nimport numpy as np\n\n# 初始化 Milvus 客户端\nclient = milvus.connect(&#x27;default&#x27;, host=&#x27;localhost&#x27;, port=&#x27;19530&#x27;)\n\ncollection_name = \&quot;face_collection\&quot;\n\n# 创建集合\nif not client.has_collection(collection_name):\n    client.create_collection(collection_name)\n\n# 定义向量字段的类型\nfields = [\n    (\&quot;face_vector\&quot;, \&quot;float_vector\&quot;, 128),\n    (\&quot;face_name\&quot;, \&quot;text\&quot;)\n]\n\n# 插入数据\ndata_to_insert = [\n    &#123;\&quot;face_vector\&quot;: np.random.random(128).tolist(), \&quot;face_name\&quot;: \&quot;Person1\&quot;&#125;,\n    &#123;\&quot;face_vector\&quot;: np.random.random(128).tolist(), \&quot;face_name\&quot;: \&quot;Person2\&quot;&#125;,\n]\ninsert_result = client.insert(collection_name, fields, data_to_insert)\n\n# 准备一个查询向量\nquery_vector = np.random.random(128).tolist()\n\n# 定义搜索参数\nsearch_params = &#123;\n    \&quot;nprobe\&quot;: 10,\n    \&quot;metric_type\&quot;: \&quot;L2\&quot;\n&#125;\n\n# 执行搜索\ntop_k = 1  # 返回最相似的一个结果\nresults = client.search(collection_name, \&quot;face_vector\&quot;, query_vector, top_k, search_params)\n\n# 打印结果\nfor result in results:\n    for item in result:\n        print(f\&quot;相似度: &#123;item.distance&#125;, 对应字符串: &#123;item.entity.get(&#x27;face_name&#x27;)[0]&#125;\&quot;)\n\n# 清理资源\nclient.drop_collection(collection_name)\n```\n\n&quot;,</span><br><span class="line">  &quot;commentStatus&quot;: true,</span><br><span class="line">  &quot;recommendStatus&quot;: true,</span><br><span class="line">  &quot;viewStatus&quot;: true,</span><br><span class="line">  &quot;password&quot;: &quot;&quot;,</span><br><span class="line">  &quot;tips&quot;: &quot;&quot;,</span><br><span class="line">  &quot;articleCover&quot;: &quot;无&quot;,</span><br><span class="line">  &quot;videoUrl&quot;: &quot;无&quot;,</span><br><span class="line">  &quot;sortId&quot;: 1,</span><br><span class="line">  &quot;labelId&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>博客中的articleContent中的图片需要进行处理，图片分为两种状态：</p><ol><li>本地照片</li><li>网络照片</li></ol><p>如果是本地照片，需要在上传的图片表中找到该对应图片的文件资源中的地址并进行替换；</p><p>如果是网络照片则不需要进行处理；</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959916.png" alt="img"></p><h3 id="前后端页面所有请求和响应都进行加密处理"><a href="#前后端页面所有请求和响应都进行加密处理" class="headerlink" title="前后端页面所有请求和响应都进行加密处理"></a>前后端页面所有请求和响应都进行加密处理</h3><p>在一次面试中，面试询问，是否做过前后端的请求和响应都做加密处理。当时对这个只是大概的进行了介绍，现在我打算在这个项目中应用上。</p><p>参考资料：</p><ol><li><a href="https://blog.csdn.net/qq_35250826/article/details/106111767#:~:text=1%E3%80%81%E9%80%9A%E4%BF%A1%E4%BD%BF%E7%94%A8">前后端API交互加密解密（js、Java）</a></li><li><a href="https://www.cnblogs.com/huanzi-qch/p/10913636.html">前后端API交互数据加密——AES与RSA混合加密完整实例 </a></li><li><a href="https://blog.csdn.net/qq_33803102/article/details/110927078">SpringCloudGateway请求&#x2F;响应拦截，加&#x2F;解密</a></li></ol><p>现在在这个项目中我们选择使用RSA+AES进行加密处理，通过RSA加密交换前后端AES的密钥，交换成功后，使用AES密钥进行加密和解密处理。</p><p>具体流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959828.png" alt="image-20240926215944099"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959881.png" alt="image-20240926225001815"></p><p>通过切面的方式来对端口进行加密解密。</p><p>上面的方法否决。</p><p>在这个项目中我选择使用网关进行拦截，前端对所有的请求进行加密处理后，打到后端网关，后端网关拦截所有的请求，并进行解密后然后进行处理。同样的，网关会拦截所有的响应，并把响应进行加密后传送给前端，前端进行解密后在页面进行显示。</p><p><strong>关于前端对所有的post进行加密已经实现了，但是后端对于所有的响应进行加密和前端对所有的响应进行解密还未实现。</strong></p><h3 id="共同好友"><a href="#共同好友" class="headerlink" title="共同好友"></a>共同好友</h3><p>Redis中使用set来保存该用户的好友，Redis中set有一个封装好的函数sinter set1 set2</p><h3 id="定时任务（多线程、xxjob、定时清理过期的登录日志）"><a href="#定时任务（多线程、xxjob、定时清理过期的登录日志）" class="headerlink" title="定时任务（多线程、xxjob、定时清理过期的登录日志）"></a>定时任务（多线程、xxjob、定时清理过期的登录日志）</h3><h3 id="切面应用（切面）"><a href="#切面应用（切面）" class="headerlink" title="切面应用（切面）"></a>切面应用（切面）</h3><p>参考资料</p><ol><li><a href="https://blog.csdn.net/qq_52227892/article/details/133876816#:~:text=%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%AA">Spring AOP + 异步任务实现日志记录（操作日志、异常日志）参考ruoyi</a></li></ol><p>为了更好对AOP的使用有更深的了解，这里我们以下面这个场景进行实现：</p><blockquote><p>现在在项目中有一些接口需要进行权限校验，即某些用户是无权访问这个接口的，如果无权限应进行拦截。同时这个接口很重要，应该避免某些人员进行恶意的刷接口，所以我们需要对这个接口进行防刷。对某些恶意刷的IP进行封禁，并进行限流，请你基于AOP来完成这个功能。</p></blockquote><p>详细查看<a href="https://blog.csdn.net/fyh2944163240/article/details/142794529?spm=1001.2014.3001.5501">65 切面</a></p><h3 id="网关鉴权"><a href="#网关鉴权" class="headerlink" title="网关鉴权"></a>网关鉴权</h3><h3 id="记录连续登录时间"><a href="#记录连续登录时间" class="headerlink" title="记录连续登录时间"></a>记录连续登录时间</h3><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="3-评论系统与异步通知"><a href="#3-评论系统与异步通知" class="headerlink" title="3. 评论系统与异步通知"></a>3. <strong>评论系统与异步通知</strong></h4><h5 id="业务场景："><a href="#业务场景：" class="headerlink" title="业务场景："></a>业务场景：</h5><p>用户在文章下评论或回复他人评论时，网站需要通知文章作者或被回复的用户。这类操作可以通过消息队列处理，以避免直接在评论提交时执行通知操作，减少主业务系统的延迟。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务在实际开发中可能会存在的一些问题该怎么去解决等等。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>避免缓存穿透、缓存雪崩等问题，具体的实现。</p><h3 id="数据库加密"><a href="#数据库加密" class="headerlink" title="数据库加密"></a>数据库加密</h3><p>如果对数据库中的某个表中的内容进行加密后，那么如何进行查询呢？模糊查询呢？</p><h3 id="博客上传——服务器版"><a href="#博客上传——服务器版" class="headerlink" title="博客上传——服务器版"></a>博客上传——服务器版</h3><p>将服务部署到服务器上时，如果一次性批量上传过多的图片，就会导致超时，导致上传失败。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261959593.png" alt="image-20241031191823443"></p><p>因为在后端服务中，这个上传图片功能是同步的，需要等待minio上传好了之后，保存到MySQL之后才能给前端进行返回，这是阻塞的，严重限制了效率，所以是否可以采用消息队列的方式，把服务上传这个任务交给其它服务自动的来上传，自动的处理超时等一些其它问题，从而变成异步的。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><h3 id="博客保存-1"><a href="#博客保存-1" class="headerlink" title="博客保存"></a>博客保存</h3><p>Q :  假设你是一名非常资深的Java程序员，现在请你帮我思考一下下面的csdn保存这篇博客是如何实现： CSDN这个在线博客网址，允许用户在上面发表博客，用户在网址上写博客，并在文字中插入图片，那么请问如果用户点击发表，csdn该如何保存这篇博客呢？</p><p>A ：作为一名资深的Java程序员，实现一个像CSDN这样的在线博客平台的”保存博客”功能，可以分为几个关键步骤：</p><ol><li><strong>前端数据收集</strong>：<ul><li>用户通过富文本编辑器（如TinyMCE、CKEditor等）输入和格式化文本。</li><li>用户可以上传图片或插入网络图片链接。</li><li>所有这些数据通常被收集到一个表单中，并通过AJAX请求发送到服务器。</li></ul></li><li><strong>后端接收数据</strong>：<ul><li>服务器端（可能是使用Java的Spring Boot框架）接收来自前端的数据，包括文本内容、图片、以及其他元数据（如标题、标签、分类等）。</li></ul></li><li><strong>数据验证</strong>：<ul><li>验证数据的有效性，例如检查文本是否为空，图片格式是否被支持等。</li></ul></li><li><strong>图片处理</strong>：<ul><li>如果用户上传了图片，服务器需要处理这些图片（如调整大小、压缩、生成缩略图等）。</li><li>将图片存储到文件系统或云存储服务，并保存图片的URL。</li></ul></li><li><strong>文本内容处理</strong>：<ul><li>将富文本编辑器生成的HTML内容进行清理和转义，以防止XSS攻击。</li><li>可能需要将HTML转换为Markdown或其他格式，以便存储。</li></ul></li><li><strong>数据库存储</strong>：<ul><li>将博客的元数据和文本内容存储到数据库中。这可能涉及到创建新的表记录或更新现有记录。</li><li>数据库设计可能包括<code>blogs</code>表（存储博客ID、标题、内容、创建时间等），<code>blog_images</code>表（存储博客ID、图片URL等）。</li></ul></li><li><strong>事务管理</strong>：<ul><li>确保数据的一致性，使用数据库事务来处理可能的并发问题。</li></ul></li><li><strong>反馈给用户</strong>：<ul><li>操作完成后，给用户一个成功或失败的反馈。</li><li>如果成功，可能还会重定向到博客的展示页面或提供博客的永久链接。</li></ul></li><li><strong>搜索引擎优化（SEO）</strong>：<ul><li>为了提高博客的可发现性，可能需要生成博客的SEO友好的URL。</li></ul></li><li><strong>缓存机制</strong>：<ul><li>对于高流量的博客，可以使用缓存机制（如Redis）来提高读取速度。</li></ul></li><li><strong>安全性考虑</strong>：<ul><li>确保整个流程考虑到了安全性，如防止SQL注入、XSS攻击等。</li></ul></li><li><strong>API设计</strong>：<ul><li>设计RESTful API来处理前端的请求，例如使用POST请求来保存博客。</li></ul></li><li><strong>异步处理</strong>：<ul><li>对于耗时的操作（如图片处理），可能需要使用异步任务队列（如RabbitMQ、Kafka等）来提高响应速度。</li></ul></li><li><strong>日志记录</strong>：<ul><li>记录关键操作的日志，以便于问题追踪和性能监控。</li></ul></li><li><strong>前端与后端的交互</strong>：<ul><li>使用JSON或其他格式在前端和后端之间交换数据。</li></ul></li></ol><p>这是一个高层次的概述，实际实现时，还需要考虑许多细节和特定场景的需求。</p><h4 id="上传安全"><a href="#上传安全" class="headerlink" title="上传安全"></a>上传安全</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MarkdownController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload-markdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadMarkdown</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取Markdown文件内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">markdownContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(file.getBytes(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用安全的Markdown解析器转换为HTML</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">htmlContent</span> <span class="operator">=</span> parseMarkdownToHtml(markdownContent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清理HTML内容，防止XSS攻击</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">safeHtmlContent</span> <span class="operator">=</span> sanitizeHtml(htmlContent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存储或返回安全的HTML内容</span></span><br><span class="line">            <span class="keyword">return</span> safeHtmlContent;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 错误处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error processing file&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseMarkdownToHtml</span><span class="params">(String markdown)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用安全的Markdown解析器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SomeSecureMarkdownParser</span>().parse(markdown);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">sanitizeHtml</span><span class="params">(String html)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用HTML清理库，如Jsoup</span></span><br><span class="line">        <span class="keyword">return</span> Jsoup.clean(html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="博客图片"><a href="#博客图片" class="headerlink" title="博客图片"></a>博客图片</h3><p>Q：那么如果用户查看这篇博客的时候，该如何知道这个博客图片的应该插入博客中的哪个位置呢？</p><p>A ： 当用户查看博客时，确保图片正确插入到博客文本中的正确位置是一个关键功能。以下是实现这一功能的几个步骤：</p><ol><li><strong>富文本编辑器的使用</strong>：<ul><li>用户在撰写博客时，通常使用富文本编辑器（如TinyMCE、CKEditor等）。这些编辑器允许用户在文本中插入图片，并在文本中指定图片的位置。</li></ul></li><li><strong>图片位置的标记</strong>：<ul><li>在富文本编辑器中，图片通常被插入到特定的HTML标签中，例如<code>&lt;img&gt;</code>标签。编辑器会生成相应的HTML代码，其中包含图片的URL和可能的其他属性（如宽度、高度、对齐方式等）。</li></ul></li><li><strong>图片数据的存储</strong>：<ul><li>当用户提交博客时，后端需要将编辑器生成的HTML内容（包括图片标签）存储到数据库中。这通常涉及到将HTML内容存储为一个文本字段。</li></ul></li><li><strong>数据库设计</strong>：<ul><li>数据库中通常会有一个表来存储博客内容，其中包含博客的文本字段。图片的URL可以作为文本的一部分存储在博客内容字段中。</li></ul></li><li><strong>图片URL的处理</strong>：<ul><li>图片的URL在存储时需要确保其正确性和安全性。后端可能需要验证图片URL，并处理任何相对路径或绝对路径的问题。</li></ul></li><li><strong>前端展示</strong>：<ul><li>当用户查看博客时，前端页面会从数据库中读取博客内容，并将其渲染到页面上。这包括解析HTML内容，并正确显示其中的图片。</li></ul></li><li><strong>图片的加载和缓存</strong>：<ul><li>图片的加载可能需要考虑加载时间和缓存策略。可以使用CDN来加速图片的加载，并使用浏览器缓存来减少重复加载的开销。</li></ul></li><li><strong>响应式设计</strong>：<ul><li>确保图片在不同设备和屏幕尺寸上正确显示。这可能涉及到使用CSS来调整图片的尺寸和布局。</li></ul></li><li><strong>SEO优化</strong>：<ul><li>图片的加载和显示也需要考虑搜索引擎优化（SEO）。确保图片的<code>alt</code>属性被正确设置，以提高博客的可访问性和搜索引擎排名。</li></ul></li><li><strong>安全性</strong>：<ul><li>确保图片的加载不会引入安全风险，如跨站脚本攻击（XSS）。对图片URL进行适当的过滤和验证。</li></ul></li><li><strong>错误处理</strong>：<ul><li>如果图片加载失败，前端需要有相应的错误处理机制，例如显示一个占位符或错误信息。</li></ul></li><li><strong>编辑和更新</strong>：<ul><li>如果用户需要编辑博客，编辑器需要能够正确处理和更新图片的位置和URL。</li></ul></li></ol><p>通过这些步骤，可以确保用户在查看博客时，图片能够正确地插入到博客文本中指定的位置。这需要前端和后端的紧密协作，以及对HTML内容和图片处理的深入理解。</p><h3 id="博客MD格式文件上传"><a href="#博客MD格式文件上传" class="headerlink" title="博客MD格式文件上传"></a>博客MD格式文件上传</h3><h4 id="Kimi"><a href="#Kimi" class="headerlink" title="Kimi"></a>Kimi</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; @change=&quot;handleFileChange&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;uploadFile&quot;&gt;上传&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; saveAs &#125; from &#x27;file-saver&#x27;;</span><br><span class="line"></span><br><span class="line">const file = ref(null);</span><br><span class="line">const fileContent = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">const handleFileChange = (e) =&gt; &#123;</span><br><span class="line">  const file = e.target.files[0];</span><br><span class="line">  if (file) &#123;</span><br><span class="line">    const reader = new FileReader();</span><br><span class="line">    reader.onload = (event) =&gt; &#123;</span><br><span class="line">      fileContent.value = event.target.result;</span><br><span class="line">      // 处理图片并上传</span><br><span class="line">      handleImagesInMd(fileContent.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.readAsText(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleImagesInMd = (mdContent) =&gt; &#123;</span><br><span class="line">  const imageRegex = /!\[.*?\]\((.*?)\)/g;</span><br><span class="line">  let match;</span><br><span class="line">  let updatedContent = mdContent;</span><br><span class="line"></span><br><span class="line">  while ((match = imageRegex.exec(mdContent)) !== null) &#123;</span><br><span class="line">    const imageUrl = match[1];</span><br><span class="line">    uploadImage(imageUrl).then((serverUrl) =&gt; &#123;</span><br><span class="line">      updatedContent = updatedContent.replace(match[0], `!$&#123;match[0].split(&#x27;(&#x27;)[0]&#125;($&#123;serverUrl&#125;)`);</span><br><span class="line">      if (imageRegex.lastIndex === mdContent.length) &#123;</span><br><span class="line">        // 所有图片处理完成，上传MD文件</span><br><span class="line">        uploadMdFile(updatedContent);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const uploadImage = (url) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    const img = new Image();</span><br><span class="line">    img.crossOrigin = &#x27;Anonymous&#x27;;</span><br><span class="line">    img.onload = () =&gt; &#123;</span><br><span class="line">      const canvas = document.createElement(&#x27;canvas&#x27;);</span><br><span class="line">      const ctx = canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">      canvas.width = img.width;</span><br><span class="line">      canvas.height = img.height;</span><br><span class="line">      ctx.drawImage(img, 0, 0);</span><br><span class="line">      canvas.toBlob((blob) =&gt; &#123;</span><br><span class="line">        const formData = new FormData();</span><br><span class="line">        formData.append(&#x27;image&#x27;, blob);</span><br><span class="line">        axios.post(&#x27;/upload-image&#x27;, formData, &#123;</span><br><span class="line">          headers: &#123; &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27; &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">          resolve(response.data.url);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.onerror = reject;</span><br><span class="line">    img.src = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const uploadMdFile = (content) =&gt; &#123;</span><br><span class="line">  axios.post(&#x27;/upload-md&#x27;, content, &#123;</span><br><span class="line">    headers: &#123; &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;MD文件上传成功&#x27;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((error) =&gt; &#123;</span><br><span class="line">    console.error(&#x27;MD文件上传失败&#x27;, error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload-image&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;image&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Files.createTempFile(<span class="string">&quot;images&quot;</span>, fileName);</span><br><span class="line">            Files.write(path, file.getBytes(), StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/images/&quot;</span> + fileName; <span class="comment">// 返回图片的服务器路径</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件保存失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload-md&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadMdFile</span><span class="params">(<span class="meta">@RequestParam(&quot;mdFile&quot;)</span> String mdContent)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以添加代码将mdContent保存到Elasticsearch</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MD文件内容: &quot;</span> + mdContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ChatGPT-1"><a href="#ChatGPT-1" class="headerlink" title="ChatGPT"></a>ChatGPT</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;upload-container&quot;&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      class=&quot;upload-demo&quot;</span><br><span class="line">      action=&quot;http://localhost:8080/api/upload&quot;</span><br><span class="line">      :http-request=&quot;handleUpload&quot;</span><br><span class="line">      :show-file-list=&quot;false&quot;</span><br><span class="line">      accept=&quot;.md&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; class=&quot;upload-button&quot;&gt;上传 Markdown 文件&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; ElUpload, ElButton, ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">const handleUpload = async (file) =&gt; &#123;</span><br><span class="line">  const formData = new FormData();</span><br><span class="line">  formData.append(&#x27;file&#x27;, file.file);</span><br><span class="line"></span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await axios.post(&#x27;http://localhost:8080/api/upload&#x27;, formData, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    ElMessage.success(&#x27;文件上传成功&#x27;);</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    ElMessage.error(&#x27;文件上传失败&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.upload-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  background-color: #f0f2f5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.upload-button &#123;</span><br><span class="line">  border-radius: 25px;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  font-family: &#x27;KaiTi&#x27;, serif;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.upload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.ServletUriComponentsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.upload-dir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 确保上传目录存在</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">uploadPath</span> <span class="operator">=</span> Paths.get(uploadDir);</span><br><span class="line">            <span class="keyword">if</span> (!Files.exists(uploadPath)) &#123;</span><br><span class="line">                Files.createDirectories(uploadPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存Markdown文件</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> uploadPath.resolve(file.getOriginalFilename());</span><br><span class="line">            Files.copy(file.getInputStream(), filePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理Markdown文件中的图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">markdownContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(filePath));</span><br><span class="line">            Map&lt;String, String&gt; imageUrlMap = extractAndUploadImages(markdownContent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 替换Markdown文件中的图片URL</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : imageUrlMap.entrySet()) &#123;</span><br><span class="line">                markdownContent = markdownContent.replace(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存Markdown内容到Elasticsearch</span></span><br><span class="line">            saveToElasticsearch(file.getOriginalFilename(), markdownContent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(<span class="number">500</span>).body(<span class="string">&quot;文件上传失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; <span class="title function_">extractAndUploadImages</span><span class="params">(String markdownContent)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Map&lt;String, String&gt; imageUrlMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;!\\[.*?\\]\\((.*?)\\)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(markdownContent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">        accept=&quot;.md&quot;</span><br><span class="line">        :headers=&quot;upload.headers&quot;</span><br><span class="line">        :action=&quot;upload.url&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-icon class=&quot;el-icon--upload&quot;&gt;</span><br><span class="line">        &lt;upload-filled /&gt;</span><br><span class="line">      &lt;/el-icon&gt;</span><br><span class="line">      &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">      &lt;template #tip&gt;</span><br><span class="line">        &lt;div class=&quot;el-upload__tip text-center&quot;&gt;</span><br><span class="line">          &lt;span&gt;仅允许导入pdf格式文件。&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">const upload = (&#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Authorization: &quot;Bearer &quot;,</span><br><span class="line">    &#x27;Access-Control-Allow-Origin&#x27;:&#x27;*&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  url: &#x27;/screw/api/blog/addBlogMDFile&#x27;,  // 地址,以aaa打头</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h4><p>用户在前端点击上传文件之后，在后端，上传的文件首先被暂时存储在服务器的内存中（通常是在JVM的堆内存里），或者如果文件太大，可能被存储在临时文件中（在服务器的文件系统中，比如<code>/tmp</code>目录下）。</p><p>后端服务<code>FileStorageService</code>接收到<code>MultipartFile</code>对象，这个对象代表了上传的文件及其元数据（如文件名、大小、类型）。</p><h3 id="用户重复登录"><a href="#用户重复登录" class="headerlink" title="用户重复登录"></a>用户重复登录</h3><h4 id="疑问-1"><a href="#疑问-1" class="headerlink" title="疑问"></a>疑问</h4><p>在用户登录模块中，如果用户一直重复登录，如果该用户的所有信息都是正确的，那么我们就会不断的生成Token，并将该Token携带的用户信息存入Redis中，由于Token是唯一的且不断变化的，所以如果用户一直登录，Redis就会一直存，最后Redis存满导致问题。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在Redis中记录当前用户是否登录过，如果没有登录，就将该生成的Token也存放一份在Redis 用户登录状态中，如果登录过，就直接返回Redis中保存的token，从而避免用户恶意重复登录导致Redis内存不够。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断该用户是否登录 登陆过就无需再生成Token然后保存到Redis中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) redisUtils.get(RedisDynamicParameter.REDIS_USER_LOGIN_STATUS + blogUserDTO.getId());</span><br><span class="line"><span class="keyword">if</span>(ObjectUtils.isNotEmpty(token))&#123;</span><br><span class="line">    <span class="keyword">return</span> R.ok(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> RedisDynamicParameter.REDIS_USER_LOGIN_TOKEN +uuid;</span><br><span class="line"></span><br><span class="line">redisUtils.set(tokenKey,blogUserDTO,EXPIRATION_TIME);</span><br><span class="line">token = JWTUtils.generateToken(uuid,<span class="number">1L</span>);</span><br><span class="line">redisUtils.set(RedisDynamicParameter.REDIS_USER_LOGIN_STATUS + blogUserDTO.getId(),token,EXPIRATION_TIME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> R.ok(token);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户登录Key</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REDIS_USER_LOGIN_TOKEN</span> <span class="operator">=</span> <span class="string">&quot;screw:user:login:token:&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REDIS_USER_LOGIN_STATUS</span> <span class="operator">=</span> <span class="string">&quot;screw:user:login:status:&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="MyBatis-MyBatis-Plus二次开发"><a href="#MyBatis-MyBatis-Plus二次开发" class="headerlink" title="MyBatis &amp; MyBatis-Plus二次开发"></a>MyBatis &amp; MyBatis-Plus二次开发</h3><p>在使用MyBatis对数据库进行查询时，发现其无法对create_time等字段自动插入，且在很多查询时需要自动加入del_flag &#x3D; 0这个条件语句，为了减少开发量，我们需要对MyBatis进行二次开发，实现上述功能。</p><h4 id="拦截MyBatis-SQL并进行修改"><a href="#拦截MyBatis-SQL并进行修改" class="headerlink" title="拦截MyBatis SQL并进行修改"></a>拦截MyBatis SQL并进行修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MyBatisQuerySqlInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-07-28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">            method = &quot;prepare&quot;,</span></span><br><span class="line"><span class="meta">            args = &#123;Connection.class, Integer.class&#125;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisQuerySqlInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">statementHandler</span> <span class="operator">=</span> (StatementHandler) invocation.getTarget();</span><br><span class="line"></span><br><span class="line">        <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> statementHandler.getBoundSql();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.contains(sql,<span class="string">&quot;WHERE&quot;</span>))&#123;</span><br><span class="line">            sql = sql.substring(<span class="number">0</span>,sql.length() - <span class="number">1</span>);</span><br><span class="line">            sql = sql + <span class="string">&quot; AND del_flag = &quot;</span> + NOT_DEL_FLAG;</span><br><span class="line"></span><br><span class="line">            sql = sql + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sql = sql + <span class="string">&quot; WHERE (&quot;</span>;</span><br><span class="line">            sql = sql + <span class="string">&quot;del_flag = &quot;</span> + NOT_DEL_FLAG;</span><br><span class="line">            sql = sql + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> boundSql.getClass().getDeclaredField(<span class="string">&quot;sql&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(boundSql,sql);</span><br><span class="line"></span><br><span class="line">        log.info(boundSql.getSql().toString());</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MyBatisSqlInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 为MyBatis执行SQL自动插入某些公共条件 或 自动插入参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-07-28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class,</span></span><br><span class="line"><span class="meta">                method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">                type = Executor.class,</span></span><br><span class="line"><span class="meta">                method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;MappedStatement.class, Object.class&#125;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">//        @Signature(</span></span><br><span class="line"><span class="meta">//                type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">//                method = &quot;batch&quot;,</span></span><br><span class="line"><span class="meta">//                args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUpdateSqlInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">mappedStatement</span> <span class="operator">=</span> (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 获取 SQL 命令</span></span><br><span class="line">        <span class="type">SqlCommandType</span> <span class="variable">sqlCommandType</span> <span class="operator">=</span> mappedStatement.getSqlCommandType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只判断新增和修改</span></span><br><span class="line">        <span class="keyword">if</span> (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) &#123;</span><br><span class="line">            <span class="comment">// 获取参数</span></span><br><span class="line"><span class="comment">//            Object parameter = invocation.getArgs()[1];</span></span><br><span class="line">            <span class="comment">// 获取参数</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">parameter</span> <span class="operator">=</span> invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">            setParameter(parameter, sqlCommandType);</span><br><span class="line"><span class="comment">//            //批量操作时</span></span><br><span class="line"><span class="comment">//            if (parameter instanceof MapperMethod.ParamMap) &#123;</span></span><br><span class="line"><span class="comment">//                MapperMethod.ParamMap map = (MapperMethod.ParamMap) parameter;</span></span><br><span class="line"><span class="comment">//                Object obj = map.get(&quot;list&quot;);</span></span><br><span class="line"><span class="comment">//                List&lt;?&gt; list = (List&lt;?&gt;) obj;</span></span><br><span class="line"><span class="comment">//                if (list != null) &#123;</span></span><br><span class="line"><span class="comment">//                    for (Object o : list) &#123;</span></span><br><span class="line"><span class="comment">//                        setParameter(o, sqlType);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                setParameter(parameter, sqlType);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(Object parameter, SqlCommandType sqlCommandType)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = parameter.getClass();</span><br><span class="line"><span class="comment">//        Field[] declaredFields;</span></span><br><span class="line">        List&lt;Field[]&gt; declaredFields = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取当前类和父类的属性</span></span><br><span class="line">        <span class="keyword">while</span>(ObjectUtils.isNotEmpty(aClass) &amp;&amp; aClass != Object.class)&#123;</span><br><span class="line">            declaredFields.add(aClass.getDeclaredFields());</span><br><span class="line">            aClass = aClass.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field[] fields : declaredFields)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">                <span class="type">TableField</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(TableField.class);</span><br><span class="line">                <span class="keyword">if</span> (ObjectUtils.isEmpty(annotation))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (SqlCommandType.INSERT.equals(sqlCommandType)) &#123; <span class="comment">// insert 语句插入 createBy</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.equals(value,<span class="string">&quot;create_time&quot;</span>))&#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        field.set(parameter, LocalDateTime.now());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.equals(value,<span class="string">&quot;update_time&quot;</span>))&#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        field.set(parameter, LocalDateTime.now());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (SqlCommandType.UPDATE.equals(sqlCommandType)) &#123; <span class="comment">// update 语句插入 updateTime</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.equals(value,<span class="string">&quot;update_time&quot;</span>))&#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        field.set(parameter, LocalDateTime.now());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other，项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50 日志系统</title>
      <link href="/2025/02/26/50%20%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/02/26/50%20%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="50-日志系统"><a href="#50-日志系统" class="headerlink" title="50 日志系统"></a>50 日志系统</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/m0_60353039/article/details/131532602">【Spring Boot】Spring Boot日志详情：基于lombok的日志输出</a></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>日志文件就是帮助我们记录程序开发或者使用过程中的一些必要信息，帮助我们进行后期的维护和纠错</strong></p><p>总之，日志是开发中不可或缺的一部分，它可以帮助开发人员快速排查问题，优化性能，并保证应用程序的安全和可靠性。</p><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>⽇志的级别分为：</p><ol><li>trace：微量，少许的意思，级别最低；</li><li>debug：需要调试时候的关键信息打印；</li><li>info：普通的打印信息（默认⽇志级别）；</li><li>warn：警告，不影响使⽤，但需要注意的问题；</li><li>error：错误信息，级别较⾼的错误⽇志信息；</li><li>fatal：致命的，因为代码异常导致程序退出执⾏的事件。</li></ol><h2 id="日志级别的设置"><a href="#日志级别的设置" class="headerlink" title="日志级别的设置"></a>日志级别的设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志级别设置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志持久化"><a href="#日志持久化" class="headerlink" title="日志持久化"></a>日志持久化</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置日志文件的目录</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">D:\\home\\log</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">D:\\home\\log\\spring-1024.log</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><p>Lombok 是一种 Java 库，它提供了一些注解来自动生成 Java 代码。Lombok 的原理是在编译时通过 Java 的注解处理器和 AST（Abstract Syntax Tree，抽象语法树）转换器代替开发人员手动编写常见的 Java 代码（如构造函数、getter 和 setter 方法、equals 和 hashCode 方法等）。也就是说，Lombok 在编译期间生成代码，而不是在运行时生成。 Lombok 的使用可以节省开发者在编写 Java 代码时的时间和精力，并且可以让代码更加简洁易懂。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502261958381.png" alt="img"></p><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p><strong>logback.xml的加载顺序早于springboot的application.yml (或application.properties) 配置文件当然读不到application.yml（或application.properties）文件中的值了。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;springProperty scope=&quot;context&quot; name=&quot;application_name&quot; source=&quot;spring.application.name&quot; /&gt;</span><br></pre></td></tr></table></figure><p>需要通过springProperty标签来引用：<springProperty scope="context" name="log.path" source="path.log"/>这里的name和上面property标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    小技巧: 在根pom里面设置统一存放路径，统一管理方便维护</span></span><br><span class="line"><span class="comment">    &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;log-path&gt;/Users/chao.lu&lt;/log-path&gt;</span></span><br><span class="line"><span class="comment">    &lt;/properties&gt;</span></span><br><span class="line"><span class="comment">    1. 其他模块加日志输出，直接copy本文件放在resources 目录即可</span></span><br><span class="line"><span class="comment">    2. 注意修改 &lt;property name=&quot;$&#123;log-path&#125;/log.path&quot; value=&quot;&quot;/&gt; 的value模块</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span> <span class="attr">scan</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;application_name&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./log/$&#123;application_name&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Console log output --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Log file debug output --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/%d&#123;yyyy-MM, aux&#125;/debug.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date [%thread] %-5level [%logger&#123;50&#125;] %file:%line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Log file info output --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/%d&#123;yyyy-MM, aux&#125;/info.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date [%thread] %-5level [%logger&#123;50&#125;] %file:%line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Log file error output --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/%d&#123;yyyy-MM&#125;/error.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date [%thread] %-5level [%logger&#123;50&#125;] %file:%line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--nacos 心跳 INFO 屏蔽--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.alibaba.nacos&quot;</span> <span class="attr">level</span>=<span class="string">&quot;OFF&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Level: FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54 内网穿透</title>
      <link href="/2025/02/26/54%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2025/02/26/54%20%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="54-内网穿透"><a href="#54-内网穿透" class="headerlink" title="54 内网穿透"></a>54 内网穿透</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/gui951753/article/details/79593307">NAT(地址转换技术)详解</a></li><li><a href="https://www.cnblogs.com/cyrus0w/p/13123504.html">内网穿透详解</a></li><li><a href="https://blog.csdn.net/m0_46109609/article/details/127881735">简单使用FRP实现本地mysql的内网穿透</a></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>阅读本文前需要先搞懂NAT、PAT、端口映射几个概念。</p><p>内网宽带中的主机可以访问公网宽带主机，反之不可以访问；公网宽带主机可以和公网宽带主机双向访问；内网宽带中的主机和内网宽带中的主机互相无法访问。那么内网宽带中的客户机和公网宽带中的客户机如何访问另一个内网宽带中的服务器呢？这里就需要用到内网穿透技术。</p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>NAT名字很准确，网络地址转换，就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址提供公网可达性和上层协议的连接能力。</p><p>对于有Internet访问需求而内部又使用私有地址的网络，就要在组织的出口位置部署NAT网关，在报文离开私网进入Internet时，将源IP替换为公网地址，通常是出口设备的接口地址。一个对外的访问请求在到达目标以后，表现为由本组织出口设备发起，因此被请求的服务端可将响应由Internet发回出口网关。出口网关再将目的地址替换为私网的源主机地址，发回内部。这样一次由私网主机向公网服务端的请求和响应就在通信两端均无感知的情况下完成了。依据这种模型，数量庞大的内网主机就不再需要公有IP地址了。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262001430.png" alt="这里写图片描述"></p><p>在整个NAT的转换中，最关键的流程有以下几点</p><ol><li>网络被分为私网和公网两个部分，NAT网关设置在私网到公网的路由出口位置，双向流量必须都要经过NAT网关；</li><li>网络访问只能先由私网侧发起，公网无法主动访问私网主机；</li><li>NAT网关在两个访问方向上完成两次地址的转换或翻译，出方向做源信息替换，入方向做目的信息替换；</li><li>NAT网关的存在对通信双方是保持透明的；</li><li>NAT网关为了实现双向翻译的功能，需要维护一张关联表，把会话的信息保存下来。</li></ol><h3 id="动态NAT"><a href="#动态NAT" class="headerlink" title="动态NAT"></a><strong>动态NAT</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262003735.png" alt="这里写图片描述"></p><h3 id="NAT重载（经常应用到实际中）"><a href="#NAT重载（经常应用到实际中）" class="headerlink" title="NAT重载（经常应用到实际中）"></a><strong>NAT重载</strong>（经常应用到实际中）</h3><p>这是最常用的NAT类型。NAT重载也是动态NAT，它利用源端口将多个私网ip地址映射到一个公网ip地址(多对一)。那么，它的独特之处何在呢?它也被称为端口地址特换(PAT)。通过使用PAT(NAT重载)，只需使用一个公网ip地址，就可将数千名用户连接到因特网。其核心之处就在于利用端口号实现公网和私网的转换。</p><p>面对私网内部数量庞大的主机，如果NAT只进行IP地址的简单替换，就会产生一个问题：**当有多个内部主机去访问同一个服务器时，从返回的信息不足以区分响应应该转发到哪个内部主机。**此时，需要NAT设备根据传输层信息或其他上层协议去区分不同的会话，并且可能要对上层协议的标识进行转换，比如TCP或UDP端口号。这样NAT网关就可以将不同的内部连接访问映射到同一公网IP的不同传输层端口，通过这种方式实现公网IP的复用和解复用。这种方式也被称为端口转换PAT、NAPT或IP伪装，但更多时候直接被称为NAT，因为它是最典型的一种应用模式。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262003619.png" alt="这里写图片描述"></p><p><strong>也就是说，NAT利用端口号的唯一性实现了公网ip转换为私网ip的这一步。PAT（NAT重载）能够使用传输层端口号来标识主机，因此，从理论上说，最多可让大约65000台主机共用一个公有IP地址</strong></p><p>但是这样就会有上面提到的那个问题：内网宽带中的客户机和公网宽带中的客户机如何访问另一个内网宽带中的服务器呢？</p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>对于在NAT之后的服务器来说，其不是不能主动访问公网端口，而是不能反过来有效的被公网访问。所以可以在中间架设一个公网服务器，<strong>让在NAT之后的服务器持续主动访问这个拥有公网IP地址的服务器，</strong>，这样内网服务器就成功与公网中转服务器建立了一个连接通道。然后当有任何其他NAT后的客户端主动连接公网中转服务器时，公网服务器接收到连接请求之后马上把这连接请求通过先前建立好的隧道转发到内网服务器，内网服务器将响应数据包再原路转发回去，最终到达公网中转服务器，然后返回给其他NAT后的客户端。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262002431.png" alt="img"></p><h3 id="点对点穿透原理"><a href="#点对点穿透原理" class="headerlink" title="点对点穿透原理"></a>点对点穿透原理</h3><p>在内网穿透传输大量数据时如果都经过服务器中转的话，这样会对服务器端带宽压力比较大。只要是数据量很大，而一般利用中转服务器又需要一定规模投入的应用，我们都可以考虑用P2P技术。</p><p>1.UDP打洞技术</p><p>最为常见的实现P2P的方式是采用UDP打洞技术，UDP打洞技术是通过中间服务器的协助在各自的NAT网关上建立相关的表项，使P2P连接的双方发送的报文能够直接穿透对方的NAT网关，从而实现P2P客户端互连。如果两台位于NAT设备后面的P2P客户端希望在自己的NAT网关上打个洞，那么他们需要一个协助者——集中服务器，并且还需要一种用于打洞的Session建立机制。</p><p>Session建立机制：</p><p>假定客户端A要发起对客户端B的直接连接，具体的“打洞”过程如下：</p><p>（1）A最初不知道如何向客户端B发起连接，于是A向集中服务器（本质上是一台被设置在公网上的服务器，建立P2P的双方都可以直接访问到这台服务器。位于NAT网关后面的客户端A和B都可以与一台已知的集中服务器建立连接，并通过这台集中服务器了解对方的信息并中转各自的信息）发送消息，请求集中服务器帮助建立与客户端B的UDP连接。</p><p>（2）集中服务器将含有B的外网和内网的地址二元组发给A，同时，集中服务器将包含有A的外网和内网的地址二元组信息的消息也发给B。这样一来， A与B就都知道对方外网和内网的地址二元组信息了。</p><p>（3）当A收到由集中服务器发来的包含B的外网和内网的地址二元组信息后，A开始向B的地址二元组发送UDP数据包，并且A会自动锁定第一个给出响应的B的地址二元组。同理，当B收到由集中服务器发来的A的外网和内网地址二元组信息后，也会开始向A的外网和内网的地址二元组发送UDP数据包，并且自动锁定第一个得到A回应的地址二元组。一旦A与B都向对方的NAT设备在外网上的地址二元组发送了数据包，就打开了A与B之间的“洞”，A与B向对方的外网地址发送数据，等效为向对方的客户端直接发送UDP数据包了。一旦应用程序确认已经可以通过往对方的外网地址发送数据包的方式让数据包到达NAT后面的目的应用程序，程序会自动停止继续发送用于“打洞”的数据包，转而开始真正的P2P数据传输。</p><p>当然，UDP转换协议提供的“洞”不是绝对可靠的，多数NAT设备内部都有一个UDP转换的空闲状态计时器，如果在一段时间内没有UDP数据通信，NAT设备会关掉由“打洞”过程打出来的“洞”。如果P2P应用程序希望“洞”的存活时间不受NAT网关的限制，就最好在穿越NAT以后设定一个穿越的有效期。</p><p>2.TCP打洞技术<br>从现在的主流应用的角度上来看，基于TCP的P2P应用显然不如基于UDP的应用那么广泛，但是也存在打洞的需求。TCP相对于UDP而言要复杂的多，TCP连接的建立要依赖于三次握手的交互，所以NAT网关在处理TCP连接的时候，需要更多的开销。但是，由于TCP协议完备的状态机机制，TCP反而比UDP更能精确的获取某个Session的生命期。</p><p>一种新的代理类型 XTCP 能解决这个问题，实现方式可以是采用搭建FRP服务器的方式，在传输数据的两端都部署上FRP客户端用于建立直接的连接。</p><blockquote><p>为了安全起见，通常会在网络中加入防火墙，防火墙有入站规则和出站规则。如果不是非常严格的安全管控，通常是不会设置出站规则的，但是入站规则一般都会设置的，比如说外部可以通过80端口传入内网的WEB服务器访问网页，但是不能通过3389端口登陆内网的远程桌面。而在内网渗透的过程中碰到这种情况，我们也可以借助上面内网传统的方式实现穿透防火墙的入站规则。因为防火墙通常只拦截了入站，没有拦截出站，那么我们可以让内网服务器主动出站（主动连接到黑客的服务器），与黑客自己的服务器打通隧道，最终绕过防火墙连上3389远程桌面。</p><p>还有一种情况就是我们已经拿下了内网其中一台并没有做任何防火墙规则的白名单服务器，但是我们想连上内网另一台做了入站规则的目标服务器，那么我们可以让这台白名单服务器作为一个跳板，让他先监听自身任意一个端口，然后在有任何用户连上这个端口之后，白名单服务器就主动连上内网的目标服务器，然后借助这台白名单服务器打通黑客和目标服务器的连接隧道。而在黑客工具中大名鼎鼎的lcx原理也就是如此，前者的实现是lcx的listen和slave命令，后者的实现是lcx的tran命令。</p></blockquote><blockquote><p><strong>内网穿透传统方式会出现服务器和客户机之间的数据传输全部经过中转服务器，传输速度将受制于中转服务器的上下行带宽，不过稳定性很好，对于自己要购置的云主机要求就是大带宽，一般这种云主机按流量计费，传输的数据量越大价格自然越贵。所以点对点穿透便能解决流量带来的困扰，点对点可以实现服务器和客户机之间打洞直接进行数据通信，这种方式一般用于udp协议的传输，比如应用于远程NAS看视频听歌，但这种方式需要服务器和客户机都安装穿透工具，对用户访问端来说不够方便，而且这种方式受复杂网络环境影响较大，不能100%实现，稳定性欠缺。</strong></p></blockquote><h2 id="FRP内网穿透"><a href="#FRP内网穿透" class="headerlink" title="FRP内网穿透"></a>FRP内网穿透</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>FRP使用 Go 语言开发，可以支持 Windows、Linux、macOS、ARM 等多平台部署。frp内网穿透无需多复杂的配置就可以达到比较好的穿透效果，具有较强的扩展性，支持tcp, udp, http, https 协议，并且 web 服务支持根据域名进行路由转发。此外，**FRP 提供了一种新的代理类型 XTCP ，可以在传输大量数据时让流量不经过服务器中转，用于实现点对点穿透,**当然，此功能并不能保证在你的网络环境 100% 可用，成功率较低，而且还要求访问端也得运行 FRP 客户端 (目前手机端ios没有frp客户端软件)。由于实现条件较多，所以有文件传输需求的朋友但必须用frp的朋友还是建议买带宽稍大一点的 VPS 会比较省心。<strong>frp适合有linux基础的个人，且需要自购一个云主机做中转，企业追求稳定可以考虑其他方式。</strong></p><h3 id="中转服务器FRP搭建"><a href="#中转服务器FRP搭建" class="headerlink" title="中转服务器FRP搭建"></a>中转服务器FRP搭建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> wget <span class="string">&quot;https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; $ vi frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000     <span class="comment">#隧道端口，默认配置中监听的是 7000 端口，可根据自己实际情况修改。</span></span><br><span class="line">subdomain_host = frp.abc.top  <span class="comment">#配置中转服务器域名绑定,可选配置，如果域名多可以设置一个</span></span><br><span class="line">authentication_method = token  <span class="comment">#启用token验证，frpc也需要加此参数</span></span><br><span class="line">token = changeit              <span class="comment">#token密码</span></span><br><span class="line">vhost_http_port = 80                 <span class="comment">#内网服务器http映射的端口，内网可以有多个网站使用这个端口</span></span><br><span class="line">vhost_https_port = 443               <span class="comment">#内网服务器https映射的端口，内网可以有多个网站使用这个端口</span></span><br><span class="line">dashboard_port = 7500   <span class="comment">#配置Dashboard监控frp状态的端口，后面可以直接访问http://frp.abc.top:7500/或http://中转服务器公网IP:7500/</span></span><br><span class="line">dashboard_user = admin  <span class="comment">#监控访问账户</span></span><br><span class="line">dashboard_pwd = admin   <span class="comment">#监控访问密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前台启动frps</span></span><br><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><p><a href="http://1.94.101.104:7500/static/#/">http://1.94.101.104:7500/static/#/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">sudo systemctl start frps </span><br><span class="line">#关闭</span><br><span class="line">sudo systemctl stop frps</span><br><span class="line">#重启</span><br><span class="line">sudo systemctl restart frps</span><br><span class="line">#查看状态</span><br><span class="line">sudo systemctl status frps</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Windows中转服务器FRP搭建"><a href="#Windows中转服务器FRP搭建" class="headerlink" title="Windows中转服务器FRP搭建"></a>Windows中转服务器FRP搭建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 1.94.101.104</span><br><span class="line">server_port = 7000</span><br><span class="line">authentication_method = token  </span><br><span class="line">token = fyh2380514719</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line">[secret_ssh]                             </span><br><span class="line"><span class="built_in">type</span> = stcp            </span><br><span class="line">sk = abcdefg           </span><br><span class="line">local_ip = 127.0.0.1                                                                                            </span><br><span class="line">local_port = 22                                                                                                  </span><br><span class="line">remote_port = 6000 </span><br><span class="line"></span><br><span class="line">[web]            </span><br><span class="line"><span class="built_in">type</span> = http         </span><br><span class="line">local_port = 80   </span><br><span class="line">custom_domains = 1.94.101.104</span><br><span class="line">remote_port = 8000</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3306</span><br><span class="line">remote_port = 13306</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56 算法</title>
      <link href="/2025/02/26/56%20%E7%AE%97%E6%B3%95/"/>
      <url>/2025/02/26/56%20%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="56-算法"><a href="#56-算法" class="headerlink" title="56 算法"></a>56 算法</h1><h2 id="Java控制台输入"><a href="#Java控制台输入" class="headerlink" title="Java控制台输入"></a>Java控制台输入</h2><p>在Java中负责输入的类是Scanner，所以如果我们需要进行输入时，需要创建这个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">// 参数System.in 表示这是一个控制台输入</span></span><br></pre></td></tr></table></figure><p>在Scanner中定义了多种方法用来获取控制台输入，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine(); <span class="comment">// 获取一行的字符串，注意如果是第一次使用，且输入之前存在换行 需要使用in.nextLine()；来抵消掉换行。</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.next(); <span class="comment">// 获取一个字符串，会以空格、回车为结束符</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> in.nextInt(); <span class="comment">// 获取整型</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">x</span> <span class="operator">=</span> in.nextFloat(); <span class="comment">// 获取单精度浮点型</span></span><br><span class="line"></span><br><span class="line"><span class="type">Double</span> <span class="variable">x</span> <span class="operator">=</span> in.nextDouble(); <span class="comment">// 获取双精度浮点型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(in.hasNextLine())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">&#125; <span class="comment">// 判断是否还存在下一行输入</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(in.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.next();</span><br><span class="line">&#125; <span class="comment">// 判断是否还存在下一个输入</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            System.out.println(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p><a href="https://blog.csdn.net/m0_53067943/article/details/127636615?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522F3FEC682-D11D-4F95-AAC3-C91548DFD580%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=F3FEC682-D11D-4F95-AAC3-C91548DFD580&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127636615-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=java%20string%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95&spm=1018.2226.3001.4187">Java中String类的常用方法</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005778.png" alt="image-20240903103624074"></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005332.png" alt="image-20240905093844829"></p><p>从题目中我们可以分析得出，数组中的每个元素都存在两种状态，即当前元素选还是不选，且我们需要求 该数组的最自序和，所以我们不妨设dp[i]表示以i结尾的数组的最大子序和的值。</p><p>那么如果假设我们已经知道了dp[i-1]的值，我们该如何求解dp[i]的值呢？</p><p>我们认真想了一下，当前元素有两种状态：选 or 不选，所有我们把状态转移方程进行更改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dp[i][2]: dp[i][0] 表示当前元素不选择的最大子序和 dp[i][1] 表示当前元素选择后的最大子序和</span><br><span class="line"></span><br><span class="line">这样我们的状态转移方程也就很明显了</span><br><span class="line"></span><br><span class="line">dp[i][0] = max(dp[i-1][0],dp[i-1][1]);</span><br><span class="line">dp[i][1] = max(nums[i],dp[i-1][1] + nums[i]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="最大子序和变形"><a href="#最大子序和变形" class="headerlink" title="最大子序和变形"></a>最大子序和变形</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005758.png" alt="image-20240905105011958"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005189.png" alt="image-20240905105030682"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> energy int整型一维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxEnergyCircular</span> <span class="params">(<span class="type">int</span>[] energy)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> energy.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> energy[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> energy[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">1</span>], <span class="number">0</span>) + energy[i];</span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">            sum += energy[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> energy[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i - <span class="number">1</span>], <span class="number">0</span>) + energy[i];</span><br><span class="line">            min = Math.min(min, dp[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max &lt; <span class="number">0</span> ? max : Math.max(max, sum - min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最大无连续和"><a href="#最大无连续和" class="headerlink" title="最大无连续和"></a>最大无连续和</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005892.png" alt="image-20240906095905909"></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>当前每一个草堆都存在两种状态：吃 OR 不吃，且吃不吃与上一个草堆的状态相关联，如果假设我们前一个草堆的选择后的结果已知，那么这就是一个很明显的动态规划问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设dp[i][0]表示当前草堆不吃时的最高饱腹度；</span><br><span class="line">dp[i][1]表示当前草堆吃时的最高饱腹度</span><br><span class="line"></span><br><span class="line">那么状态转移方程为：</span><br><span class="line">dp[i][0] = max(dp[i-1][1],dp[i-1][0])</span><br><span class="line">dp[i][1] = dp[i-1][0] + nums[i]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums int整型一维数组 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eatGrass</span> <span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> [][]dp = <span class="keyword">new</span> <span class="title class_">int</span>[len+<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i&lt;=len;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len][<span class="number">0</span>],dp[len][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="循环最大无连续和"><a href="#循环最大无连续和" class="headerlink" title="循环最大无连续和"></a>循环最大无连续和</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005037.png" alt="image-20240906100513338"></p><p>思路：循环情况下，第一个节点的选择会影响最后一个节点的选择，也就是说最后一个节点的状态的转移需要知道第一个节点和前一个节点的状态。所以我们选择分类：当第一个节点选择时，最后一个节点不选时的最高饱腹度；当第一个节点不选择时的最高饱腹度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums int整型一维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eatGrass</span> <span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> [][] dp1 = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> [][] dp2 = <span class="keyword">new</span> <span class="title class_">int</span> [len + <span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">        dp1[<span class="number">1</span>][<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            dp1[i][<span class="number">0</span>] = Math.max(dp1[i - <span class="number">1</span>][<span class="number">1</span>], dp1[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">2</span> &amp;&amp; i != len) &#123;</span><br><span class="line">                dp1[i][<span class="number">1</span>] = dp1[i - <span class="number">1</span>][<span class="number">0</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            dp2[i][<span class="number">0</span>] = Math.max(dp2[i - <span class="number">1</span>][<span class="number">1</span>], dp2[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp2[i][<span class="number">1</span>] = dp2[i - <span class="number">1</span>][<span class="number">0</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(dp1[len][<span class="number">1</span>],Math.max(dp1[len][<span class="number">0</span>],Math.max(dp2[len][<span class="number">0</span>],dp2[len][<span class="number">1</span>])));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最长回文串"><a href="#最长回文串" class="headerlink" title="最长回文串"></a>最长回文串</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005717.png" alt="image-20240909095536037"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s string字符串 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> [][]dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len+<span class="number">10</span>][len+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// start = i;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;j;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i) == s.charAt(j) &amp;&amp; (j-i&gt;=<span class="number">1</span> || dp[i+<span class="number">1</span>][j-<span class="number">1</span>]))&#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(j -i + <span class="number">1</span> &gt; maxLen)&#123;</span><br><span class="line">                        maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                        start = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s.substring(start,start + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最长严格上升子序列"><a href="#最长严格上升子序列" class="headerlink" title="最长严格上升子序列"></a>最长严格上升子序列</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005657.png" alt="image-20240921110446331"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++ i ) &#123;</span><br><span class="line">            a[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] low = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++ i ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p == -<span class="number">1</span>) low[++ p] = a[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(low[p] &lt; a[i]) low[++ p] = a[i];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">ti</span> <span class="operator">=</span> lowerbound(low, <span class="number">0</span>, p, a[i]);</span><br><span class="line">                    low[ti] = a[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lowerbound</span><span class="params">(<span class="type">int</span>[] low, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(low[mid] &lt; k) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lxt_Lucia/article/details/81206439">https://blog.csdn.net/lxt_Lucia/article/details/81206439</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005242.png" alt="image-20240921110531082"></p><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005731.png" alt="image-20240922105201700"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> [] v = <span class="keyword">new</span> <span class="title class_">int</span> [n+<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> [] w = <span class="keyword">new</span> <span class="title class_">int</span> [n+<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> []dp = <span class="keyword">new</span> <span class="title class_">int</span> [V + <span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> []dp1 = <span class="keyword">new</span> <span class="title class_">int</span>[V + <span class="number">10</span>];</span><br><span class="line">        Arrays.fill(dp1,Integer.MIN_VALUE);</span><br><span class="line">        dp1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            v[i] = in.nextInt();</span><br><span class="line">            w[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> v[i];j&lt;=V;j++)&#123;</span><br><span class="line">                dp[j] = Math.max(dp[j],dp[j-v[i]] + w[i]);</span><br><span class="line">                dp1[j] = Math.max(dp1[j],dp1[j-v[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(dp[V]);</span><br><span class="line">        System.out.println(dp1[V] &gt; <span class="number">0</span>?dp1[V]:<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="差分法"><a href="#差分法" class="headerlink" title="差分法"></a>差分法</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005577.png" alt="image-20240922105328604"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原数组：d[i]</span><br><span class="line">差分数组：f[i]</span><br><span class="line">求差分数组：f[i] = d[i] - d[i-1]</span><br><span class="line">区间内进行同样的操作 ，区间左边index做一次该操作，区间最右边做一次反向操作；</span><br><span class="line">还原： d[i] = f[i] + d[i-1];</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="区间差分"><a href="#区间差分" class="headerlink" title="区间差分"></a>区间差分</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> [][] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">10</span>][m+<span class="number">10</span>];</span><br><span class="line">        <span class="type">long</span> [][] d = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">10</span>][m+<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                d[i][j] = in.nextInt();</span><br><span class="line">                dp[i][j] = d[i][j] - d[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span>  <span class="operator">=</span> in.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> x1;j&lt;=x2;j++)&#123;</span><br><span class="line">                dp[j][y1] += k;</span><br><span class="line">                dp[j][y2+<span class="number">1</span>] -= k;</span><br><span class="line"><span class="comment">//                 System.out.print(j+&quot; &quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                d[i][j] = dp[i][j] + d[i][j-<span class="number">1</span>];</span><br><span class="line">                System.out.print(d[i][j] +<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005324.png" alt="image-20240923094644267"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> [][] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">10</span>][m+<span class="number">10</span>];</span><br><span class="line">        <span class="type">long</span> [][] d = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">10</span>][m+<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                d[i][j] = in.nextInt();</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>] - dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + d[i][j];</span><br><span class="line"><span class="comment">//                 System.out.print(dp[i][j] + &quot; &quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//             System.out.println();</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> dp[x2][y2] - dp[x2][y1-<span class="number">1</span>] - dp[x1-<span class="number">1</span>][y2] + dp[x1-<span class="number">1</span>][y1-<span class="number">1</span>];</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寻找最短路径可以走完所有节点且每一个节点只能走一次"><a href="#寻找最短路径可以走完所有节点且每一个节点只能走一次" class="headerlink" title="寻找最短路径可以走完所有节点且每一个节点只能走一次"></a>寻找最短路径可以走完所有节点且每一个节点只能走一次</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005572.png" alt="image-20241017105304467"></p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ol><li><strong>状态压缩</strong>：每个节点只能访问一次，可以用位掩码（bitmask）来表示哪些节点已经访问过。例如，如果共有 <code>n</code> 个节点，一个位掩码 <code>mask</code> 表示访问过的节点状态，<code>mask</code> 的第 <code>i</code> 位为 <code>1</code> 表示节点 <code>i</code> 已经访问过，为 <code>0</code> 表示未访问。</li><li><strong>动态规划</strong>：定义一个 <code>dp[mask][i]</code>，表示当前处于节点 <code>i</code>，访问过的节点集合为 <code>mask</code> 时，从节点 <code>i</code> 开始，访问所有未访问的节点，再回到节点 <code>0</code> 所需的最小消耗。</li></ol><h3 id="状态转移方程："><a href="#状态转移方程：" class="headerlink" title="状态转移方程："></a>状态转移方程：</h3><p>设 <code>mask</code> 表示当前访问的节点集合，<code>i</code> 表示当前处于的节点，则状态转移方程为：</p><p>dp[mask][i]&#x3D;min⁡(dp[mask∖(1&lt;&lt;i)][j]+costs[j][i])∀j∈mask,j≠idp[mask][i] &#x3D; \min(dp[mask \setminus (1 &lt;&lt; i)][j] + costs[j][i]) \quad \forall j \in \text{mask}, j \neq idp[mask][i]&#x3D;min(dp[mask∖(1&lt;&lt;i)][j]+costs[j][i])∀j∈mask,j&#x3D;i</p><p>最终的答案是：</p><p>min⁡(dp[2n−1][i]+costs[i][0])∀i∈[1,n−1]\min(dp[2^n - 1][i] + costs[i][0]) \quad \forall i \in [1, n-1]min(dp[2n−1][i]+costs[i][0])∀i∈[1,n−1]</p><p>其中 <code>2^n - 1</code> 表示所有节点都已访问。</p><p>这是典型的<strong>旅行商问题（Traveling Salesman Problem, TSP）</strong>，可以使用<strong>动态规划</strong>和<strong>状态压缩</strong>来求解最少消耗路径。旅行商问题要求从一个起点出发，经过所有节点一次，最后回到原点，并使路径的总消耗最小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TravelingSalesman</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">tsp</span><span class="params">(<span class="type">int</span>[][] costs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> costs.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span> &lt;&lt; n][n];  <span class="comment">// dp[mask][i] 表示访问mask集合下，到达节点i的最小消耗</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : dp) &#123;</span><br><span class="line">            Arrays.fill(row, Integer.MAX_VALUE / <span class="number">2</span>);  <span class="comment">// 防止溢出，初始化为一个大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">// 从节点0开始，mask=1表示只访问了节点0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历所有的状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span>; mask &lt; (<span class="number">1</span> &lt;&lt; n); mask++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((mask &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span>) <span class="keyword">continue</span>;  <span class="comment">// 节点i没有被访问</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((mask &amp; (<span class="number">1</span> &lt;&lt; j)) != <span class="number">0</span>) <span class="keyword">continue</span>;  <span class="comment">// 节点j已经被访问</span></span><br><span class="line">                    dp[mask | (<span class="number">1</span> &lt;&lt; j)][j] = Math.min(dp[mask | (<span class="number">1</span> &lt;&lt; j)][j], dp[mask][i] + costs[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找到最小消耗路径，回到节点0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            result = Math.min(result, dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i] + costs[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] costs = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="number">10</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">25</span>&#125;,</span><br><span class="line">            &#123;<span class="number">15</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">30</span>&#125;,</span><br><span class="line">            &#123;<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;最少消耗: &quot;</span> + tsp(costs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="给一组坐标点（整数），求这组坐标点的垂直平分线不同的个数"><a href="#给一组坐标点（整数），求这组坐标点的垂直平分线不同的个数" class="headerlink" title="给一组坐标点（整数），求这组坐标点的垂直平分线不同的个数"></a>给一组坐标点（整数），求这组坐标点的垂直平分线不同的个数</h2><p>考察点：直线的一般表达式，set</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262005059.png" alt="image-20241025213217718"></p><p>两点的垂直平分线的各参数的表达式如上，还可以把各个对象的参数变成String方便快速查重。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">gcd</span><span class="params">(<span class="type">long</span> a,<span class="type">long</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            t--;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span>[][] points = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][n];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                points[<span class="number">0</span>][i] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                points[<span class="number">1</span>][i] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Set&lt;String&gt; lines = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;   </span><br><span class="line">                <span class="type">long</span> <span class="variable">x0</span> <span class="operator">=</span> points[<span class="number">0</span>][i];</span><br><span class="line">                <span class="type">long</span> <span class="variable">y0</span> <span class="operator">=</span> points[<span class="number">1</span>][i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">x1</span> <span class="operator">=</span> points[<span class="number">0</span>][j];</span><br><span class="line">                    <span class="type">long</span> <span class="variable">y1</span> <span class="operator">=</span> points[<span class="number">1</span>][j];</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> (x1 - x0)*<span class="number">2L</span>;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> (y1 - y0) * <span class="number">2L</span>;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> -((x1-x0)*(x0+x1)*<span class="number">1L</span> + (y1-y0)*(y0+y1)*<span class="number">1L</span>);</span><br><span class="line">                    <span class="type">long</span> <span class="variable">ha</span> <span class="operator">=</span> gcd(gcd(a,b),c);</span><br><span class="line">                    a/=ha;</span><br><span class="line">                    b/=ha;</span><br><span class="line">                    c/=ha;</span><br><span class="line">                    <span class="keyword">if</span>(a &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        a = -a;</span><br><span class="line">                        b = -b;</span><br><span class="line">                        c = -c;</span><br><span class="line">                    &#125;</span><br><span class="line">                    lines.add(a+<span class="string">&quot; &quot;</span>+b+<span class="string">&quot; &quot;</span>+c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(lines.size());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>55 WebSocket</title>
      <link href="/2025/02/26/55%20WebSocket/"/>
      <url>/2025/02/26/55%20WebSocket/</url>
      
        <content type="html"><![CDATA[<h1 id="55-WebSocket"><a href="#55-WebSocket" class="headerlink" title="55 WebSocket"></a>55 WebSocket</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://blog.csdn.net/qq_54773998/article/details/123863493?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172285079816800213042439%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=172285079816800213042439&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-123863493-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=WebSocket&spm=1018.2226.3001.4187">WebSocket</a></p></li><li><p><a href="https://blog.csdn.net/qq_43595018/article/details/135290793?ops_request_misc=&request_id=&biz_id=102&utm_term=WebSocket%20SpringBoot&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-135290793.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">SpringBoot使用WebSocket</a></p></li><li><p><a href="https://blog.csdn.net/qq_42402854/article/details/130948270?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172292203816800172571906%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172292203816800172571906&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-130948270-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=SpringBoot%20WebSocket&spm=1018.2226.3001.4187">SpringBoot 集成WebSocket详解</a></p></li><li></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>WebSocket是HTML5下一种新的协议（websocket协议本质上是一个基于<strong>tcp</strong>的协议）</li><li>它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的</li><li>WebSocket是一个<strong>持久化</strong>的协议</li><li>WebSocket约定了一个通信的规范，通过一个握手的机制，客户端和服务器之间能建立一个类似tcp的连接，从而方便它们之间的通信</li><li>在WebSocket出现之前，web交互一般是基于http协议的短连接或者长连接</li><li>WebSocket是一种全新的协议，不属于HTTP无状态协议，协议名为”ws”</li></ul><h2 id="WebSocket和HTTP"><a href="#WebSocket和HTTP" class="headerlink" title="WebSocket和HTTP"></a>WebSocket和HTTP</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262003985.png" alt="img"></p><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都是基于TCP协议即都是可靠性传输协议；</li><li>都是应用层协议；</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ol><li><strong>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息</strong></li><li><strong>HTTP是单向的</strong></li><li><strong>WebSocket是需要浏览器和服务器握手进行建立连接的</strong></li><li><strong>而HTTP是浏览器发起向服务器的连接，服务器预先并不知道这个连接</strong></li></ol><p><strong>WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的</strong></p><h3 id="总结（总体过程）："><a href="#总结（总体过程）：" class="headerlink" title="总结（总体过程）："></a>总结（总体过程）：</h3><ul><li>首先，客户端发起http请求，经过3次握手后，建立起TCP连接；http请求里存放WebSocket支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version等；</li><li>然后，服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据；</li><li>最后，客户端收到连接成功的消息后，开始借助于TCP传输信道进行全双工通信。</li></ul><h2 id="WebSocket解决的问题"><a href="#WebSocket解决的问题" class="headerlink" title="WebSocket解决的问题"></a>WebSocket解决的问题</h2><h3 id="HTTP存在的问题"><a href="#HTTP存在的问题" class="headerlink" title="HTTP存在的问题"></a>HTTP存在的问题</h3><p>如果是基于HTTP协议，在我们开发的时候，如果后端服务器想要给客户端发送信息是无法实现的，我们只能等客户端发送请求后才能把该信息发送给客户端。</p><p>这是因为HTTP协议是无状态的，每当一次会话完成后，服务端都不知道下一次的客户端是谁，需要每次知道对方是谁，才进行相应的响应，因此本身对于实时通讯就是一种极大的障碍。</p><p>http协议采用一次请求，一次响应，每次请求和响应就携带有大量的header头，对于实时通讯来说，解析请求头也是需要一定的时间，因此，效率也更低下。</p><p>最重要的是，需要客户端主动发，服务端被动发，也就是一次请求，一次响应，不能实现主动发送。</p><h4 id="long-poll-长轮询"><a href="#long-poll-长轮询" class="headerlink" title="long poll(长轮询)"></a>long poll(长轮询)</h4><p>HTTP为了解决这个问题提出来一种技术，那就是long poll(长轮询)，基于HTTP的特性，简单点说，就是客户端发起长轮询，如果服务端的数据没有发生变更，会 hold 住请求，直到服务端的数据发生变化，或者等待一定时间超时才会返回。返回后，客户端又会立即再次发起下一次长轮询。</p><p>很显然这样会占用很多的资源，如果用户量很大，很多请求都在等待，这需要很大的并发量。</p><h4 id="Ajax轮询"><a href="#Ajax轮询" class="headerlink" title="Ajax轮询"></a>Ajax轮询</h4><p>同样也是为了解决这个问题，提出了Ajax轮询，即让前端页面每隔一段时间就向后端发送一个请求。</p><ul><li>总的来看，Ajax轮询存在的问题：</li></ul><ol><li>推送延迟。</li><li>服务端压力。配置一般不会发生变化，频繁的轮询会给服务端造成很大的压力。</li><li>推送延迟和服务端压力无法中和。降低轮询的间隔，延迟降低，压力增加；增加轮询的间隔，压力降低，延迟增高</li></ol><h4 id="websocket的改进"><a href="#websocket的改进" class="headerlink" title="websocket的改进"></a>websocket的改进</h4><p>一旦WebSocket连接建立后，后续数据都以帧序列的形式传输。在客户端断开WebSocket连接或Server端中断连接前，不需要客户端和服务端重新发起连接请求。在海量并发及客户端与服务器交互负载流量大的情况下，极大的节省了网络带宽资源的消耗，有明显的性能优势，且客户端发送和接受消息是在同一个持久连接上发起，实现了“真·长链接”，实时性优势明显。</p><p>WebSocket建立连接是通过TCP的三次握手，其接下来的通信也是通过升级HTTP来达到效果的。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262004395.png" alt="img"></p><p>连接建立过程</p><p>WebSocket协议的建立连接过程如下：</p><ul><li>客户端发送一个HTTP请求到服务器，请求中包括希望升级为WebSocket协议的信息，即在请求头中包含Upgrade字段，值为”websocket”；</li><li>服务器收到请求后，会返回一个HTTP 101状态码，表示同意升级为WebSocket协议，同时在响应头中添加Upgrade字段和Connection字段，告知客户端已升级为WebSocket协议；</li><li>客户端收到服务器的响应后，会通过TCP通道进行传输通信。</li><li></li></ul><h2 id="在SpringBoot中实现WebSocket实时通信"><a href="#在SpringBoot中实现WebSocket实时通信" class="headerlink" title="在SpringBoot中实现WebSocket实时通信"></a>在SpringBoot中实现WebSocket实时通信</h2><p>为了加深对WebSocket的了解以及它的使用，为此用一个简单的小例子来使用WebSocket，前端基于vue2，后端基于SpringBoot、WebSocket来简单的做一个好友聊天的功能页面。</p><p>具体页面情况如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262004634.png" alt="image-20241009171712368"></p><p>下面就一步一步来介绍其实现。</p><h3 id="WebSocket依赖注入问题"><a href="#WebSocket依赖注入问题" class="headerlink" title="WebSocket依赖注入问题"></a>WebSocket依赖注入问题</h3><p>在 Spring Boot WebSocket 中，依赖注入可能会出现问题，尤其是在 WebSocket 端点类中使用 <code>@Autowired</code> 注解时。原因主要与 WebSocket 的生命周期管理和 Spring 的管理机制之间的差异有关。</p><p>WebSocket 实例由 Web 容器管理而非 Spring 容器。</p><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.screw.chat.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> CustomSpringConfigurator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 这段代码的主要作用是将Spring框架与WebSocket集成，使得WebSocket端点能够通过Spring的依赖注入机制获取Spring管理的Bean。</span></span><br><span class="line"><span class="comment"> * 具体来说，它通过实现ServerEndpointConfig.Configurator接口和ApplicationContextAware接口，将Spring的ApplicationContext</span></span><br><span class="line"><span class="comment"> * 注入到WebSocket配置中，从而允许WebSocket端点使用Spring的依赖注入功能。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-08</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomSpringConfigurator</span> <span class="keyword">extends</span> <span class="title class_">ServerEndpointConfig</span>.Configurator <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> BeanFactory context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  &lt;T&gt; T <span class="title function_">getEndpointInstance</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        CustomSpringConfigurator.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;myUserId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MessageMapper messageMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageMapper</span><span class="params">(MessageMapper messageMapper)</span>&#123;</span><br><span class="line">        WebSocket.messageMapper = messageMapper;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;main1&quot;&gt;</span><br><span class="line">      .</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;contact&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;avatar&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">            &#123;&#123; user.username &#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 添加好友按钮 --&gt;</span><br><span class="line">          &lt;button @click=&quot;showModal = true&quot; class=&quot;add-friend-button&quot;&gt;Add Friend&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 弹出的小页面（模态框） --&gt;</span><br><span class="line">          &lt;div v-if=&quot;showModal&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">                &lt;h2&gt;Add a Friend&lt;/h2&gt;</span><br><span class="line">                &lt;span @click=&quot;showModal = false&quot; class=&quot;close&quot;&gt;&amp;times;&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;!-- 搜索框 --&gt;</span><br><span class="line">              &lt;div class=&quot;search-section&quot;&gt;</span><br><span class="line">                &lt;input v-model=&quot;searchQuery&quot; type=&quot;text&quot; placeholder=&quot;Search by username or phone number&quot;</span><br><span class="line">                  class=&quot;search-input&quot; @keyup.enter=&quot;searchFriends&quot; /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;!-- 搜索结果展示 --&gt;</span><br><span class="line">              &lt;div class=&quot;friend-list&quot;&gt;</span><br><span class="line">                &lt;div v-for=&quot;friend in filteredFriends&quot; :key=&quot;friend.id&quot; class=&quot;friend-item&quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;friend-avatar&quot;&gt;</span><br><span class="line">                    &lt;img :src=&quot;friend.avatar&quot; :alt=&quot;friend.username&quot; /&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                  &lt;div class=&quot;friend-info&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;friend-name&quot;&gt;&#123;&#123; friend.username &#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;button @click=&quot;addFriend(friend)&quot; class=&quot;add-button&quot;&gt;Add&lt;/button&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div v-if=&quot;friends.length&quot; class=&quot;bottom&quot;&gt;</span><br><span class="line">          &lt;div v-for=&quot;(friend, i) in friends&quot; class=&quot;friend&quot; :class=&quot;&#123;activeColor: isActive(i)&#125;&quot;</span><br><span class="line">            @click=&quot;selectFriend(friend)&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">              &lt;img class=&quot;avatar&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">              &#123;&#123; friend.userBName &#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div v-else class=&quot;info&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;msg&quot;&gt;</span><br><span class="line">            还没有好友~~~</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div v-if=&quot;selectedFriend&quot; class=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;top1&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;name&quot;&gt;</span><br><span class="line">            &#123;&#123; selectedFriend.userBName &#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;middle&quot; @mouseover=&quot;over&quot; @mouseout=&quot;out&quot;&gt;</span><br><span class="line">          &lt;div v-if=&quot;msgList.length&quot;&gt;</span><br><span class="line">            &lt;div v-for=&quot;msg in msgList&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;msg&quot;</span><br><span class="line">                :style=&quot;msg.sendUser === selectedFriend.userB ? &#x27;flex-direction: row;&#x27; : &#x27;flex-direction: row-reverse;&#x27;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;avatar&quot;&gt;</span><br><span class="line">                  &lt;img alt=&quot;&quot; src=&quot;&quot; /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div v-if=&quot;msg.sendUser === selectedFriend.userB&quot; style=&quot;flex: 13;&quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;bubble-msg-left&quot; style=&quot;margin-right: 75px;&quot;&gt;</span><br><span class="line">                    &#123;&#123; msg.message &#125;&#125;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div v-else style=&quot;flex: 13;&quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;bubble-msg-right&quot; style=&quot;margin-left: 75px;&quot;&gt;</span><br><span class="line">                    &#123;&#123; msg.message &#125;&#125;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;line&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">          &lt;label&gt;</span><br><span class="line">            &lt;textarea class=&quot;messageText&quot; maxlength=&quot;256&quot; v-model=&quot;msg&quot; :placeholder=&quot;hint&quot;</span><br><span class="line">              @keydown.enter=&quot;sendMsg($event)&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">          &lt;button class=&quot;send&quot; :class=&quot;&#123;emptyText: isEmptyText&#125;&quot; title=&quot;按下 ENTER 发送&quot; @click=&quot;sendMsg()&quot;&gt;发送&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-else class=&quot;info&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;msg&quot;&gt;</span><br><span class="line">          找个好友聊天吧~~~</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        showModal: false,   // 控制模态框的显示与隐藏</span><br><span class="line">        searchQuery: &#x27;&#x27;,    // 搜索框的输入内容</span><br><span class="line">        msg: &#x27;&#x27;,</span><br><span class="line">        friends: [],</span><br><span class="line">        selectedFriend: null,</span><br><span class="line">        chatHistory: [],</span><br><span class="line">        newMessage: &#x27;&#x27;,</span><br><span class="line">        websocket: null,</span><br><span class="line">        hint: &#x27;&#x27;,</span><br><span class="line">        bubbleMsg: &#x27;&#x27;,</span><br><span class="line">        interval: null,</span><br><span class="line">        isEmptyText: true,</span><br><span class="line">        msgList: [],</span><br><span class="line">        filteredFriends: [] // 搜索到的好友</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      user () &#123;</span><br><span class="line">        return JSON.parse(localStorage.getItem(&#x27;currentUser&#x27;))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      msgList () &#123;</span><br><span class="line">        const mid = document.querySelector(&#x27;.middle&#x27;)</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">          mid &amp;&amp; (mid.scrollTop = mid.scrollHeight)</span><br><span class="line">          document.querySelector(&#x27;.messageText&#x27;).focus()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      msg () &#123;</span><br><span class="line">        this.isEmptyText = !this.msg</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      searchFriends () &#123;</span><br><span class="line">        // 模拟通过用户名或电话号码搜索好友</span><br><span class="line">        this.$http.get(this.$constant.baseURL + &quot;/upm/user/getUserByUserNameOrEmail/&quot; + this.searchQuery)</span><br><span class="line">          .then((res) =&gt; &#123;</span><br><span class="line">            if (!this.$common.isEmpty(res.data)) &#123;</span><br><span class="line">              this.filteredFriends = res.data;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch((error) =&gt; &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: error.message,</span><br><span class="line">              type: &quot;error&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      addFriend (friend) &#123;</span><br><span class="line">        alert(`Friend request sent to $&#123;friend.username&#125;`);</span><br><span class="line"></span><br><span class="line">        this.$http.post(this.$constant.baseURL + &quot;/chat/addFriend&quot;, &#123;</span><br><span class="line">          &quot;id&quot;: friend.id</span><br><span class="line">        &#125;)</span><br><span class="line">          .then((res) =&gt; &#123;</span><br><span class="line">            alert(&quot;添加成功&quot;);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch((error) =&gt; &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: error.message,</span><br><span class="line">              type: &quot;error&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">        // 执行添加好友的逻辑</span><br><span class="line">      &#125;,</span><br><span class="line">      over () &#123;</span><br><span class="line">        this.setColor(&#x27;#c9c7c7&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      out () &#123;</span><br><span class="line">        this.setColor(&#x27;#0000&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      setColor (color) &#123;</span><br><span class="line">        document.documentElement.style.setProperty(&#x27;--scroll-color&#x27;, `$&#123;color&#125;`)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      getFriends () &#123;</span><br><span class="line">        this.$http.get(this.$constant.baseURL + &quot;/chat/getFriendsListById&quot;)</span><br><span class="line">          .then((res) =&gt; &#123;</span><br><span class="line">            if (!this.$common.isEmpty(res.data)) &#123;</span><br><span class="line">              this.friends = res.data</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch((error) =&gt; &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: error.message,</span><br><span class="line">              type: &quot;error&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      selectFriend (friend) &#123;</span><br><span class="line">        this.selectedFriend = friend;</span><br><span class="line">        this.loadChatHistory(friend);</span><br><span class="line">      &#125;,</span><br><span class="line">      loadChatHistory (friend) &#123;</span><br><span class="line">        this.$http.post(this.$constant.baseURL + &quot;/chat/message/getMessage&quot;, friend)</span><br><span class="line">          .then((res) =&gt; &#123;</span><br><span class="line">            if (!this.$common.isEmpty(res.data)) &#123;</span><br><span class="line">              this.msgList = res.data;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch((error) =&gt; &#123;</span><br><span class="line">            this.$message(&#123;</span><br><span class="line">              message: error.message,</span><br><span class="line">              type: &quot;error&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      sendMsg (e) &#123;</span><br><span class="line">        if (e) &#123;</span><br><span class="line">          e.preventDefault()</span><br><span class="line">        &#125;</span><br><span class="line">        if (!this.msg) &#123;</span><br><span class="line">          this.hint = &#x27;信息不可为空！&#x27;</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        let entity = &#123;</span><br><span class="line">          sendUser: JSON.parse(localStorage.getItem(&#x27;currentUser&#x27;)).id,</span><br><span class="line">          receiveUser: this.selectedFriend.userB,</span><br><span class="line">          message: this.msg.trim(),</span><br><span class="line">          // time: new Date()</span><br><span class="line">        &#125;</span><br><span class="line">        this.websocket.send(JSON.stringify(entity))</span><br><span class="line">        var ha = JSON.stringify(entity);</span><br><span class="line">        this.msgList.push(entity);</span><br><span class="line">        this.msg = &#x27;&#x27;</span><br><span class="line">        this.hint = &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">      ,</span><br><span class="line">      sendMessage () &#123;</span><br><span class="line">        if (this.newMessage.trim() === &#x27;&#x27;) return;</span><br><span class="line"></span><br><span class="line">        const message = &#123; content: this.newMessage, isMine: true &#125;;</span><br><span class="line">        this.chatHistory.push(message);</span><br><span class="line"></span><br><span class="line">        let entity = &#123;</span><br><span class="line">          sendUser: JSON.parse(localStorage.getItem(&#x27;currentUser&#x27;)).id,</span><br><span class="line">          receiveUser: this.selectedFriend.userB,</span><br><span class="line">          message: this.newMessage.trim(),</span><br><span class="line">          // time: new Date()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.websocket.send(JSON.stringify(entity)); // Send message through WebSocket</span><br><span class="line">        this.newMessage = &#x27;&#x27;;</span><br><span class="line">      &#125;,</span><br><span class="line">      setupWebSocket () &#123;</span><br><span class="line">        this.websocket = new WebSocket(`ws://localhost:56281/websocket/$&#123;JSON.parse(localStorage.getItem(&#x27;currentUser&#x27;)).id&#125;`);</span><br><span class="line">        this.websocket.onmessage = (event) =&gt; &#123;</span><br><span class="line">          const receivedMessage = JSON.parse(event.data);</span><br><span class="line">          this.msgList.push(receivedMessage);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      setContact (index) &#123;</span><br><span class="line">        this.active = index</span><br><span class="line">        delete this.friendList[index].password</span><br><span class="line">        this.$emit(&#x27;set-contact&#x27;, this.friendList[index])</span><br><span class="line">      &#125;,</span><br><span class="line">      isActive (index) &#123;</span><br><span class="line">        return this.active === index</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      this.setupWebSocket();</span><br><span class="line">      this.getFriends();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .contact &#123;</span><br><span class="line">    width: 360px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    float: left;</span><br><span class="line">    border-right: #d0d0d0 1px solid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .top &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 80px;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    border-bottom: #e0dfdf 1px solid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .activeColor &#123;</span><br><span class="line">    background-color: #c9cbcb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .top .left &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .avatar &#123;</span><br><span class="line">    width: 48px;</span><br><span class="line">    height: 48px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .top .right &#123;</span><br><span class="line">    flex: 3;</span><br><span class="line">    color: black;</span><br><span class="line">    /* 设置字体颜色为黑色 */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .friend &#123;</span><br><span class="line">    width: 360px;</span><br><span class="line">    height: 60px;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    border-bottom: #faf7f7 1px solid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .friend .left &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    margin-top: 24px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .friend .right &#123;</span><br><span class="line">    flex: 3;</span><br><span class="line">    color: #575454;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: black;</span><br><span class="line">    /* 设置字体颜色为黑色 */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .friend .avatar &#123;</span><br><span class="line">    width: 36px;</span><br><span class="line">    height: 36px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info &#123;</span><br><span class="line">    margin-top: 230px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info .msg &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #app &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-image: url(&quot;../assets/img/chat-bg.jpg&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .main &#123;</span><br><span class="line">    width: 1080px;</span><br><span class="line">    height: 648px;</span><br><span class="line">    margin-top: 72px;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    background-color: #efeded;</span><br><span class="line">    border: #d0d0d0 1px solid;</span><br><span class="line">    box-shadow: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04);</span><br><span class="line">    /* 新增的 Flexbox 样式 */</span><br><span class="line">    display: flex;</span><br><span class="line">    /* 启用 Flexbox 布局 */</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    /* 水平方向排列子元素 */</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    /* 子元素间的距离自动分配，或根据需要调整 */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  :root &#123;</span><br><span class="line">    --scroll-color: #0000;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .dialog &#123;</span><br><span class="line">    width: 719px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    float: right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .name &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: 22px;</span><br><span class="line">    left: 25px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info &#123;</span><br><span class="line">    width: 719px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info .msg &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .top1 &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 60px;</span><br><span class="line">    border-bottom: #d0d0d0 1px solid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .top1::after &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    float: right;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: 40px;</span><br><span class="line">    border: 4px solid #0000;</span><br><span class="line">    border-top-color: #8e9292;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .middle &#123;</span><br><span class="line">    height: 432px;</span><br><span class="line">    overflow: auto;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    margin: 6px 0 11px 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .middle::-webkit-scrollbar &#123;</span><br><span class="line">    width: 8px;</span><br><span class="line">    height: 1px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .middle::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    border-radius: 8px;</span><br><span class="line">    background-color: var(--scroll-color);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .middle::-webkit-scrollbar-track &#123;</span><br><span class="line">    background: #efeded;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .middle .msg &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .avatar &#123;</span><br><span class="line">    margin: 8px;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .avatar img &#123;</span><br><span class="line">    width: 36px;</span><br><span class="line">    height: 36px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bubble-msg-left,</span><br><span class="line">  .bubble-msg-right &#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    line-height: 24px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    width: fit-content;</span><br><span class="line">    line-break: anywhere;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bubble-msg-left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    color: black;</span><br><span class="line">    margin-left: -12px;</span><br><span class="line">    text-indent: -0.5em;</span><br><span class="line">    background-color: white;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bubble-msg-right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    color: white;</span><br><span class="line">    background-color: #1e6ee1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bubble-msg-right::before &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    float: right;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: 18px;</span><br><span class="line">    border: 4px solid #0000;</span><br><span class="line">    border-left-color: #1e6ee1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bubble-msg-left::before &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: -18px;</span><br><span class="line">    border: 4px solid #0000;</span><br><span class="line">    border-right-color: white;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .line &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 0;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -6px;</span><br><span class="line">    border-top: #d0d0d0 1px solid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .dialog .bottom &#123;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">    padding-right: 25px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .messageText &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin-right: 2px;</span><br><span class="line">    font: 14px/1.5 Helvetica, Arial, Tahoma, 微软雅黑;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 106px;</span><br><span class="line">    outline: none;</span><br><span class="line">    background: #efeded;</span><br><span class="line">    border: 0 none;</span><br><span class="line">    overflow-y: auto;</span><br><span class="line">    -webkit-box-sizing: border-box;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    resize: none;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    display: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .dialog .bottom::after &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    float: right;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -121px;</span><br><span class="line">    left: 75px;</span><br><span class="line">    border: 4px solid #0000;</span><br><span class="line">    border-bottom-color: #8e9292;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .send &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -20px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    background-color: #51a5e6;</span><br><span class="line">    border: #87ceeb;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 22px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .send:focus &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .emptyText &#123;</span><br><span class="line">    background-color: #d0d0d0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .name &#123;</span><br><span class="line">    color: black;</span><br><span class="line">    /* 设置字体颜色为黑色 */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /* 主体按钮样式 */</span><br><span class="line">  .add-friend-button &#123;</span><br><span class="line">    padding: 10px 20px;</span><br><span class="line">    background-color: #007bff;</span><br><span class="line">    color: white;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    border: none;</span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    transition: background-color 0.3s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .add-friend-button:hover &#123;</span><br><span class="line">    background-color: #0056b3;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 模态框背景 */</span><br><span class="line">  .modal &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: rgba(0, 0, 0, 0.5);</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 模态框内容 */</span><br><span class="line">  .modal-content &#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    border-radius: 15px;</span><br><span class="line">    width: 400px;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 模态框头部 */</span><br><span class="line">  .modal-header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .modal-header h2 &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    font-family: &#x27;KaiTi&#x27;, serif;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .close &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 搜索框样式 */</span><br><span class="line">  .search-input &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    border: 2px solid #ccc;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 好友列表样式 */</span><br><span class="line">  .friend-list &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 单个好友项 */</span><br><span class="line">  .friend-item &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    margin-bottom: 15px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .friend-avatar img &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    margin-right: 15px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .friend-info &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .friend-name &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-family: &#x27;KaiTi&#x27;, serif;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 添加好友按钮 */</span><br><span class="line">  .add-button &#123;</span><br><span class="line">    padding: 8px 15px;</span><br><span class="line">    background-color: #28a745;</span><br><span class="line">    color: white;</span><br><span class="line">    border: none;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    transition: background-color 0.3s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .add-button:hover &#123;</span><br><span class="line">    background-color: #218838;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;myUserId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与客户端的连接会话，需要通过他来给客户端发消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span></span><br><span class="line"><span class="comment">     *  虽然<span class="doctag">@Component</span>默认是单例模式的，但springboot还是会为每个websocket连接初始化一个bean，所以可以用一个静态set保存起来。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CopyOnWriteArraySet&lt;WebSocket&gt; webSockets =<span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *用来存在线连接用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;Integer,Session&gt; sessionPool = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Integer,Session&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MessageMapper messageMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageMapper</span><span class="params">(MessageMapper messageMapper)</span>&#123;</span><br><span class="line">        WebSocket.messageMapper = messageMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接成功方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 连接会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session , <span class="meta">@PathParam(&quot;myUserId&quot;)</span> Integer userId)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.session = session;</span><br><span class="line">            <span class="built_in">this</span>.userId = userId;</span><br><span class="line">            webSockets.add(<span class="built_in">this</span>);</span><br><span class="line">            sessionPool.put(userId, session);</span><br><span class="line">            log.info(<span class="string">&quot;【websocket消息】 用户：&quot;</span> + userId + <span class="string">&quot; 加入连接...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;---------------WebSocket连接异常---------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            webSockets.remove(<span class="built_in">this</span>);</span><br><span class="line">            sessionPool.remove(<span class="built_in">this</span>.userId);</span><br><span class="line">            log.info(<span class="string">&quot;【websocket消息】 用户：&quot;</span>+ <span class="built_in">this</span>.userId + <span class="string">&quot; 断开连接...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;---------------WebSocket断开异常---------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String body)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将Body解析</span></span><br><span class="line">            <span class="type">MessageEntityDecode</span> <span class="variable">messageEntityDecode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageEntityDecode</span>();</span><br><span class="line">            <span class="type">MessageVO</span> <span class="variable">messageVO</span> <span class="operator">=</span> messageEntityDecode.decode(body);</span><br><span class="line">            log.info(messageVO.toString());</span><br><span class="line">            sendOneMessage(messageVO.getReceiveUser(),messageVO.getMessage());</span><br><span class="line"></span><br><span class="line">            <span class="type">MessagePO</span> <span class="variable">messagePO</span> <span class="operator">=</span> messageVO.transformPO();</span><br><span class="line">            messageMapper.insert(messagePO);</span><br><span class="line">            </span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;---------------WebSocket消息异常---------------&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单点消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendOneMessage</span><span class="params">(Integer userId, String message)</span> &#123;</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sessionPool.get(userId);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span>&amp;&amp;session.isOpen()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;【websocket消息】 单点消息:&quot;</span>+message);</span><br><span class="line">                <span class="type">MessageVO</span> <span class="variable">messageVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageVO</span>();</span><br><span class="line">                messageVO.setMessage(message);</span><br><span class="line">                messageVO.setSendUser(<span class="built_in">this</span>.userId);</span><br><span class="line">                messageVO.setReceiveUser(userId);</span><br><span class="line"></span><br><span class="line">                <span class="type">MessageEntityEncode</span> <span class="variable">messageEntityEncode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageEntityEncode</span>();</span><br><span class="line">                session.getAsyncRemote().sendText(messageEntityEncode.encode(messageVO));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;---------------WebSocket单点消息发送异常---------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L5-大模型预训练-并行训练和框架</title>
      <link href="/2025/02/26/61%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/"/>
      <url>/2025/02/26/61%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="L5-大模型预训练-并行训练和框架"><a href="#L5-大模型预训练-并行训练和框架" class="headerlink" title="L5-大模型预训练-并行训练和框架"></a>L5-大模型预训练-并行训练和框架</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.swanlab.cn/zh/examples/pretrain_llm.html">从零预训练一个自己的大模型</a></li><li>[大语言模型的预训练[1]:基本概念原理、神经网络的语言模型、Transformer模型原理详解、Bert模型原理介绍(<a href="https://cloud.tencent.com/developer/article/2303090">https://cloud.tencent.com/developer/article/2303090</a>)</li></ul><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><h3 id="5-3-大模型预训练"><a href="#5-3-大模型预训练" class="headerlink" title="5.3****大模型预训练"></a><strong>5.3****大模型预训练</strong></h3><p>l 预训练方法</p><p>l 预训练数据准备与清洗</p><p>l Scaling Law简介</p><p>l 二次预训练的灾难性遗忘</p><p>l 二次预训练的通用数据混合与数据配比</p><h3 id="5-5-并行训练和框架"><a href="#5-5-并行训练和框架" class="headerlink" title="5.5****并行训练和框架"></a><strong>5.5****并行训练和框架</strong></h3><p>l 并行训练背景</p><p>l 数据并行</p><p>l 模型并行+流水线并行</p><p>l 张量并行</p><p>l 大模型分布式训练框架简介：DeepSpeed</p><p>l DeepSpeed 实践（实际效果）</p><h2 id="大语言模型预训练"><a href="#大语言模型预训练" class="headerlink" title="大语言模型预训练"></a>大语言模型预训练</h2><p>预训练（Pre-training）是语言模型学习的初始阶段。在预训练期间，模型会接触到大量未标记的文本数据，例如书籍、文章和网站。在大量未标记文本数据上训练语言模型。比如说在包含数百万本书、文章和网站的数据集上预训练像 GPT-3 这样的语言模型。预训练目标是捕获文本语料库中存在的底层模式、结构和语义知识。</p><p>原文链接：<a href="https://blog.csdn.net/ARPOSPF/article/details/131431885">https://blog.csdn.net/ARPOSPF/article/details/131431885</a></p><h3 id="预训练方法"><a href="#预训练方法" class="headerlink" title="预训练方法"></a>预训练方法</h3><p><a href="https://cloud.tencent.com/developer/article/2303090">https://cloud.tencent.com/developer/article/2303090</a></p><p>预训练属于迁移学习的范畴。现有的神经网络在进行训练时，一般基于反向传播（Back Propagation，BP）算法，先对网络中的参数进行随机初始化，再利用随机梯度下降（Stochastic Gradient Descent，SGD）等优化算法不断优化模型参数。而预训练的思想是，模型参数不再是随机初始化的，而是通过一些任务进行预先训练，得到一套模型参数，然后用这套参数对模型进行初始化，再进行训练。</p><p>预训练将大量低成本收集的训练数据放在一起，经过某种预训练的方法去学习其中的共性，然后将其中的共性 “移植” 到特定任务的模型中，再使用相关特定领域的少量标注数据进行 “微调”。因此，模型只需要从“共性” 出发，去 “学习” 该特定任务的 “特殊” 部分。</p><p>例如：让一个完全不懂英文的人去做英文法律文书的关键词提取的工作会完全无法进行，或者说他需要非常多的时间去学习，因为他现在根本看不懂英文。但是，如果让一个英语为母语但没接触过此类工作的人去做这项任务，他可能只需要相对比较短的时间学习如何去提取法律文书的关键词就可以上手这项任务。在这里，英文知识就属于 “共性” 的知识，这类知识不必要只通过英文法律文书的相关语料进行学习，而是可以通过大量英文语料，不管是小说、书籍，还是自媒体，都可以是学习资料的来源。在该例中，让完全不懂英文的人去完成这样的任务，这就对应了传统的直接训练方法，而完全不懂英文的人如果在早期系统学习了英文，再让他去做同样的任务，就对应了 “预训练 + 微调” 的思路，系统的学习英文即为 “预训练” 的过程。</p><p>大语言模型的预训练是指搭建一个大的神经网络模型并喂入海量的数据以某种方法去训练语言模型。大语言模型预训练的主要特点是训练语言模型所用的数据量够多、模型够大。</p><h4 id="大语言模型的预训练方式有哪些？"><a href="#大语言模型的预训练方式有哪些？" class="headerlink" title="大语言模型的预训练方式有哪些？"></a>大语言模型的预训练方式有哪些？</h4><p>大语言模型的预训练主要分为以下几种方式，各有其特点，适用于不同的任务类型：</p><h5 id="（1）掩码语言模型（Masked-Language-Model-MLM）"><a href="#（1）掩码语言模型（Masked-Language-Model-MLM）" class="headerlink" title="（1）掩码语言模型（Masked Language Model, MLM）"></a>（1）掩码语言模型（Masked Language Model, MLM）</h5><ul><li><strong>方法</strong>：在预训练时，随机掩盖句子中的一些词，让模型预测这些被掩盖的词。此方法使模型能够同时学习上下文的左、右两侧信息。</li><li><strong>代表模型</strong>：BERT 系列（如 BERT、RoBERTa、ALBERT 等）使用掩码语言模型方法。</li><li><strong>应用</strong>：MLM 使模型适用于理解和推理类任务，例如情感分析、句子分类、问答系统等。</li></ul><h5 id="（2）因果语言模型（Causal-Language-Model-CLM）"><a href="#（2）因果语言模型（Causal-Language-Model-CLM）" class="headerlink" title="（2）因果语言模型（Causal Language Model, CLM）"></a>（2）因果语言模型（Causal Language Model, CLM）</h5><ul><li><strong>方法</strong>：这种方法基于自回归语言模型原理，通过逐词预测下一个词进行训练。CLM 仅依赖左侧的上下文，适合顺序生成任务。</li><li><strong>代表模型</strong>：GPT 系列（如 GPT、GPT-2、GPT-3）使用因果语言模型进行预训练。</li><li><strong>应用</strong>：CLM 主要应用于文本生成、对话系统和多轮对话场景，如 ChatGPT 等生成式任务。</li></ul><h5 id="（3）序列到序列模型（Sequence-to-Sequence-Model-Seq2Seq）"><a href="#（3）序列到序列模型（Sequence-to-Sequence-Model-Seq2Seq）" class="headerlink" title="（3）序列到序列模型（Sequence-to-Sequence Model, Seq2Seq）"></a>（3）序列到序列模型（Sequence-to-Sequence Model, Seq2Seq）</h5><ul><li><strong>方法</strong>：使用编码器-解码器架构，输入序列通过编码器转化为上下文表示，再由解码器生成输出序列。Seq2Seq 模型主要适用于输入和输出存在对应关系的任务。</li><li><strong>代表模型</strong>：T5、BART 等模型使用 Seq2Seq 架构，将语言理解和生成任务结合。</li><li><strong>应用</strong>：该方法广泛用于机器翻译、文本摘要、问答等任务。</li></ul><h5 id="（4）多任务学习（Multi-task-Learning）"><a href="#（4）多任务学习（Multi-task-Learning）" class="headerlink" title="（4）多任务学习（Multi-task Learning）"></a>（4）多任务学习（Multi-task Learning）</h5><ul><li><strong>方法</strong>：模型同时在多个自监督任务上进行训练。例如，T5 模型在多任务框架下使用“填空式”训练任务，将所有任务转化为文本生成问题。</li><li><strong>代表模型</strong>：T5、UnifiedQA 等。</li><li><strong>应用</strong>：增强模型的多样性，使其能更好地处理跨任务的场景。</li></ul><hr><h3 id="预训练数据准备与清洗"><a href="#预训练数据准备与清洗" class="headerlink" title="预训练数据准备与清洗"></a>预训练数据准备与清洗</h3><p>参考资料：<a href="https://www.jiqizhixin.com/articles/2019-02-21-15">数据清洗&amp;预处理入门完整指南</a></p><p><a href="https://blog.csdn.net/2401_85379281/article/details/143053667">数据清洗与治理：为大模型预训练打造完美数据</a></p><p><a href="https://blog.csdn.net/xiaobing259/article/details/138267915#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%A4%A7,%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BD%B1%E5%93%8D%E5%88%86%E6%9E%90%E3%80%82">AI大模型探索之路-训练篇6：大语言模型预训练数据准备-预处理</a></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>数据预处理是建立机器学习模型的第一步（也很可能是最重要的一步），对最终结果有决定性的作用：如果你的数据集没有完成数据清洗和预处理，那么你的模型很可能也不会有效——就是这么简单。</p><p>人们通常认为，数据预处理是一个非常枯燥的部分。但它就是「做好准备」和「完全没有准备」之间的差别，也是表现专业和业余之间的差别。就像为度假做好事先准备一样，如果你提前将行程细节确定好，就能够预防旅途变成一场噩梦。</p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>让我们从导入数据预处理所需要的库开始吧。库是非常棒的使用工具：将输入传递给库，它则完成相应的工作。你可以接触到非常多的库，但在 PYTHON 中，有三个是最基础的库。任何时候，你都很可能最终还是使用到它们。这三个在使用 PYTHON 时最流行的库就是 <strong>Numpy、Matplotlib 和 Pandas</strong>。Numpy 是满足所有数学运算所需要的库，由于代码是基于数学公式运行的，因此就会使用到它。Maplotlib（具体而言，Matplotlib.pyplot）则是满足绘图所需要的库。Pandas 则是最好的导入并处理数据集的一个库。<strong>对于数据预处理而言，Pandas 和 Numpy 基本是必需的</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在导入这些库的时候，赋予其缩写的称呼形式，在之后的使用中，这可以节省一定的时间成本。这一步非常简单，可以用如下方式实现：</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据集</span></span><br><span class="line">dataset = pd.read_csv(<span class="string">&#x27;my_data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个冒号表示提取数据集的全部行，「:-1」则表示提取除最后一列以外的所有列。最后的「.values」表示希望提取所有的值。</span></span><br><span class="line">X = dataset.iloc[:, :-<span class="number">1</span>].values</span><br><span class="line">y = dataset.iloc[:, <span class="number">3</span>].values</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262011200.png" alt="image-20241022154619745"></p><h5 id="如果有缺失数据会怎么样？"><a href="#如果有缺失数据会怎么样？" class="headerlink" title="如果有缺失数据会怎么样？"></a><strong>如果有缺失数据会怎么样？</strong></h5><p>事实上，我们总会遇到数据缺失。对此，我们可以将存在缺失的行直接删除，但这不是一个好办法，还很容易引发问题。因此需要一个更好的解决方案。最常用的方法是，用其所在列的均值来填充缺失。为此，你可以利用 scikit-learn 预处理模型中的 inputer 类来很轻松地实现。（如果你还不知道，那么我强烈建议你搞明白它：scikit-learn 包含非常棒的机器学习模型）。在机器学习中，你可能并不适应诸如「方法」、「类」和「对象」这些术语。这不是什么大问题！</p><ul><li>类就是我们希望为某目的所建立的模型。如果我们希望搭建一个棚子，那么搭建规划就是一个类。</li><li>对象是类的一个实例。在这个例子中，根据规划所搭建出来的一个棚子就是一个对象。同一个类可以有很多对象，就像可以根据规划搭建出很多个棚子一样。</li><li>方法是我们可以在对象上使用的工具，或在对象上实现的函数：传递给它某些输入，它返回一个输出。这就像，当我们的棚子变得有点不通气的时候，可以使用「打开窗户」这个方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Imputer</span><br><span class="line">imputer = Imputer(missing_values = np.nan, strategy = ‘mean’, axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">imputer = imputer.fit(X[:, <span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">X[:, <span class="number">1</span>:<span class="number">3</span>] = imputer.transform(X[:, <span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> docx2pdf <span class="keyword">import</span> convert</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_</span> docx to_pdf(docx file, pdf file):</span><br><span class="line">    convert(docx file, pdf file)</span><br><span class="line"><span class="comment"># 调用示例</span></span><br><span class="line">docx_file =<span class="string">&#x27;example.docx&#x27;</span><span class="comment"># 替换为实际的docx文件路径</span></span><br><span class="line">pdf_file =<span class="string">&#x27;example.pdf&#x27;</span> <span class="comment">#替换为实际的pdf文件路径</span></span><br><span class="line">convert_ docx to_pdf(docx file, pdf file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PlL <span class="keyword">import</span> lmage</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convertjpg_to_pdf</span>(<span class="params">jpg_file, pdf_file</span>):</span><br><span class="line">    image = lmage.<span class="built_in">open</span>(jpg_file)</span><br><span class="line">    pdffilepath = pdffile</span><br><span class="line">    image.save(pdffile path,<span class="string">&#x27;PDF&#x27;</span>,resolution=<span class="number">100.0</span>, save <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 调用示例</span></span><br><span class="line">jpg_file =<span class="string">&#x27;example.jpg’# 替换为实际的ipg文件路径</span></span><br><span class="line"><span class="string">pdf_file =&#x27;</span>example.pd<span class="string">f&#x27; # 替换为实际的pdf文件路径</span></span><br><span class="line"><span class="string">convertjpg_to_pdf(jpg_file, pdf file)</span></span><br></pre></td></tr></table></figure><h5 id="如果包含属性数据，会怎么样呢？"><a href="#如果包含属性数据，会怎么样呢？" class="headerlink" title="如果包含属性数据，会怎么样呢？"></a><strong>如果包含属性数据，会怎么样呢？</strong></h5><p>这是一个好问题。没有办法明确地计算诸如猫、狗、麋鹿的均值。那么可以怎么做呢？可以将属性数据编码为数值！你可能希望使用 sklearn.preprocessing 所提供的 LabelEncoder 类。从你希望进行编码的某列数据入手，调用 label encoder 并拟合在你的数据上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line">labelencoder_X = LabelEncoder()</span><br><span class="line">X[:, <span class="number">0</span>] = labelencoder_X.fit_transform(X[:, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>这就是将第一列中的属性变量替换为数值所需的全部工作了。例如，麋鹿将用 0 表示，狗将用 2 表示，猫将用 3 表示。</p><p>标注体系暗含以下信息：所使用的数值层级关系可能会影响模型结果：3 比 0 的数值大，但猫并不一定比麋鹿大。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262011893.png" alt="image-20241022155033442"></p><p>我们需要创建哑变量。</p><p>我们可以为猫创建一列数据，为麋鹿创建一列数据，……以此类推。然后，将每一列分别以 0&#x2F;1 填充（认为 1&#x3D;Yes，0 &#x3D; No）。这表明，如果原始列的值为猫，那么就会在麋鹿一列得到 0，狗一列得到 0，猫一列得到 1。</p><p>看上去非常复杂。输入 OneHotEncoder 吧！</p><p>导入编码器，并制定对应列的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line">onehotencoder = OneHotEncoder(categorical_features = [<span class="number">0</span>])</span><br><span class="line">X = onehotencoder.fit_transform(X).toarray()</span><br><span class="line">labelencoder_y = LabelEncoder()</span><br><span class="line">y = labelencoder_y.fit_transform(y)</span><br></pre></td></tr></table></figure><h4 id="训练集与测试集的划分"><a href="#训练集与测试集的划分" class="headerlink" title="训练集与测试集的划分"></a><strong>训练集与测试集的划分</strong></h4><p>现在，你可以开始将数据集划分为训练集和测试集了。这已经在之前的图像分类教程一文中论述过了。不过记得，一定要将你的数据分为训练集和测试集，永远不要用测试集来训练！需要避免<a href="https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit&action=edit&type=10&appmsgid=503273714&isMul=1&token=1842803922&lang=zh_CN">过拟合</a>（可以认为，过拟合就像在一次测验前，记忆了许多细节，但没有理解其中的信息。如果只是记忆细节，那么当你自己在家复习知识卡片时，效果会很好，但在所有会考察新信息的真实测验中，都会不及格。）</p><p>现在，我们有了需要学习的模型。模型需要在数据上训练，并在另外的数据上完成测试。对训练集的记忆并不等于学习。模型在训练集上学习得越好，就应该在测试集给出更好的预测结果。过拟合永远都不是你想要的结果，学习才是！</p><p>首先，导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.model_selection import train_test_split</span><br></pre></td></tr></table></figure><p>现在，可以创建 X_train、X_test、y_train 和 y_test 集合了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)</span><br></pre></td></tr></table></figure><p>一种常见的方法是将数据集按 80&#x2F;20 进行划分，其中 80% 的数据用作训练，20% 的数据用作测试。这也是为何指定 test_size 为 0.2 的原因。你也可以根据自己的需求来任意划分。你并不需要设置 random_state，这里设置的原因是为了可以完全复现结果。</p><h4 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a><strong>特征缩放</strong></h4><p>什么是特征缩放？为什么需要特征缩放？</p><p>看看我们的数据。我们有一列动物年龄，范围是 4~17，还有一列动物价值，范围是$48,000-$83,000。价值一栏的数值不仅远大于年龄一栏，而且它还包含更加广阔的数据范围。这表明，欧式距离将完全由价值这一特征所主导，而忽视年龄数据的主导效果。如果欧式距离在特定机器学习模型中并没有具体作用会怎么样？缩放特征将仍能够加速模型，因此，你可以在数据预处理中，加入特征缩放这一步。</p><p>特征缩放的方法有很多。但它们都意味着我们将所有的特征放在同一量纲上，进而没有一个会被另一个所主导。</p><p>导入相关库开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.preprocessing import StandardScaler</span><br></pre></td></tr></table></figure><p>创建一个需要缩放对象并调用 Standard Scaler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc_X = StandardScaler()</span><br></pre></td></tr></table></figure><p>直接在数据集上进行拟合以及变换。获取对象并应用方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_train = sc_X.fit_transform(X_train)</span><br><span class="line">X_test = sc_X.transform(X_test)</span><br></pre></td></tr></table></figure><p>不需要在测试集上进行拟合，只进行变换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc_y = StandardScaler()</span><br><span class="line">y_train = sc_y.fit_transform(y_train)</span><br></pre></td></tr></table></figure><p><strong>对于哑变量而言，是否需要进行缩放？</strong></p><p>对于这个问题，有些人认为需要，有些则认为不需要。这取决于你对模型可解释性的看重诚度。将所有数据缩放至同一量纲固然有好处，但缺点是，这丢失了解释每个观测样本归属于哪个变量的便捷性。</p><p>对于 Y 呢？如果因变量是 0 和 1，那么并不需要进行特征缩放。这是一个具有明确相关值的分类问题。但如果其取值范围非常大，那么答案是你需要做缩放。</p><p>恭喜你，你已经完成了数据预处理的工作！</p><p>通过少量的几行代码，你已经领略了数据清洗和预处理的基础。毫无疑问，在数据预处理这一步中，你可以加入很多自己的想法：你可能会想如何填充缺失值。思考是否缩放特征以及如何缩放特征？是否引入哑变量？是否要对数据做编码？是否编码哑变量……有非常多需要考虑的细节。现在，你已经完全了解了这些，可以亲自动手试试了，准备数据吧！</p><hr><h3 id="Scaling-Law简介"><a href="#Scaling-Law简介" class="headerlink" title="Scaling Law简介"></a>Scaling Law简介</h3><p>参考资料：<a href="https://blog.csdn.net/qq_27590277/article/details/134544174">解析大模型中的Scaling Law</a></p><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><p>在大模型的研发中，通常会有下面一些需求：</p><ul><li>计划训练一个10B的模型，想知道至少需要多大的数据？</li><li>收集到了1T的数据，想知道能训练一个多大的模型？</li><li>老板准备1个月后开发布会，能用的资源是100张A100，那应该用多少数据训一个多大模型最终效果最好？</li><li>老板对现在10B的模型不满意，想知道扩大到100B模型的效果能提升到多少？</li></ul><p>以上这些问题都可以基于Scaling Law的理论进行回答。</p><h4 id="核心结论"><a href="#核心结论" class="headerlink" title="核心结论"></a>核心结论</h4><p>大模型的Scaling Law是<a href="https://so.csdn.net/so/search?q=OpenAI&spm=1001.2101.3001.7020">OpenAI</a>在2020年提出的概念[1]，具体如下:</p><ol><li>对于Decoder-only的模型，计算量(Flops), 模型参数量, 数据大小(token数)，三者满足: 。(推导见本文最后)</li><li>模型的最终性能**「主要与」**计算量，模型参数量和数据大小三者相关，而与模型的具体结构(层数&#x2F;深度&#x2F;宽度)基本无关。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262011907.png" alt="e005326347d9c36bf43da1175adac2ae.png"></p><blockquote><blockquote><p>固定模型的总参数量，调整层数&#x2F;深度&#x2F;宽度，不同模型的性能差距很小，大部分在2%以内</p></blockquote></blockquote><p>尺度定律（Scaling laws）是一种描述系统随着规模的变化而发生的规律性变化的数学表达。这些规律通常表现为一些可测量的特征随着系统大小的增加而呈现出一种固定的比例关系。尺度定律在不同学科领域中都有广泛的应用，包括物理学、生物学、经济学等。</p><p>有趣的是，OpenAI的研究者在2020年发现，大语言模型也遵循着尺度定律[1]。</p><p>大语言模型的尺度定律描述的是模型的性能 𝐿 ，模型的参数量大小 𝑁 ，训练模型的数据大小 𝐷 以及训练模型使用的计算量 𝐶 之间的关系。需要注意的是，这里的尺度定律默认要求大语言模型使用的是Transformer的解码器结构。</p><p>模型的性能 𝐿 是指模型在测试集上的交叉熵损失：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262011983.png" alt="image-20241022160324756"></p><p>𝐷 表示token字典表， 𝑇 表示文本样本被划分为token后的长度。值得注意的是，这里的数学表达进行了一定的简化，仅针对单个文本样本。实际上，测试集由多个文本样本组成。</p><p>模型的参数量大小 𝑁 是除了静态编码矩阵和位置编码外的参数。</p><p>训练数据大小 𝐷 指的是在训练过程中使用的token数量。通常情况下， 𝐷 等于 𝐵𝑆 ，其中 𝐵 代表使用梯度下降法时的批量大小（Batch Size）， 𝑆 表示参数迭代的次数（Step）。</p><p>训练模型使用的计算量 𝐶 是指训练模型时，使用的浮点运算次数。每训练一个token会涉及一次前向传播，一次反向传播，在大语言模型的训练中，反向传播的浮点运算次数约为前向传播的两倍。需要注意的是，和参数量大小 𝑁 类似，这里的浮点运算次数需要排除掉静态编码和位置编码。</p><p>在使用Transformer的解码器结构训练模型时，我们可以得到如下的关于 𝐶,𝑁,𝐷 之间的近似计算关系：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262011605.png" alt="image-20241022160443302"></p><p>关于上述公式的推导过程，可参考论文“Scaling Laws for Neural Language Models”的2.1小节，在此不再详述。公式(2)表明，当 𝐶 、 𝑁 、 𝐷 三者中已知其中的两个值时，我们可利用上述公式估算出第三个值。</p><p>尺度定律的核心结论可以用下面这句话简单总结：</p><p>对于计算量 𝐶 ，模型参数量 𝑁 和数据集大小 𝐷 ，当不受其他两个因素制约时，模型性能 𝐿 与每个因素都呈现 幂律关系。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262011965.png" alt="image-20241022160536432"></p><hr><h3 id="二次预训练的灾难性遗忘"><a href="#二次预训练的灾难性遗忘" class="headerlink" title="二次预训练的灾难性遗忘"></a>二次预训练的灾难性遗忘</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><p>灾难性遗忘（Catastrophic Forgetting）指的是在神经网络模型进行新的学习任务时，已经学到的旧任务知识迅速丢失的现象。这一问题在深度学习和迁移学习中尤其突出，特别是在进行二次预训练（即在原有预训练基础上进行新任务的训练时）时。</p><h4 id="2-理论背景"><a href="#2-理论背景" class="headerlink" title="2. 理论背景"></a>2. 理论背景</h4><p>在机器学习中，模型通过不断调整其权重来学习特定任务。如果一个模型在处理新的数据集或任务时进行训练，优化过程可能会导致模型对旧任务的权重调整，从而导致对之前任务的表现显著下降。这种现象通常可以用以下理论框架进行解释：</p><ul><li><p><strong>权重重分配</strong>：当模型学习新任务时，它的权重更新可能会朝着优化新任务的方向进行调整，导致对旧任务的表示能力下降。</p></li><li><p><strong>内存限制</strong>：神经网络的容量是有限的，当向其添加新知识时，可能会导致其存储旧知识的能力下降。这就类似于人类在学习新信息时，旧信息的回忆能力减弱。</p></li><li><p><strong>冲突</strong>：新任务的数据分布可能与旧任务的数据分布存在差异，导致模型在训练过程中对旧知识产生“冲突”。</p></li></ul><h4 id="二次预训练的背景"><a href="#二次预训练的背景" class="headerlink" title="二次预训练的背景"></a>二次预训练的背景</h4><p>在大语言模型的训练中，模型通常经过一次预训练以学习一般性的语言表示，然后再进行针对特定任务的微调或二次预训练。这种方法利用了大量未标注数据的预训练表示，使模型能够更快地适应特定任务。然而，二次预训练可能会导致模型遗忘原有预训练中学到的通用语言表示，从而影响后续任务的表现。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>为了解决灾难性遗忘的问题，研究者提出了一些方法，以下是几种常见的解决方案：</p><h5 id="1-正则化方法"><a href="#1-正则化方法" class="headerlink" title="1. 正则化方法"></a>1. 正则化方法</h5><ul><li><p><strong>弹性权重固定（Elastic Weight Consolidation, EWC）</strong>：</p><ul><li>通过引入正则化项来约束模型的权重更新，从而保持旧任务的重要特征。具体做法是在训练新任务时，通过计算重要性矩阵，限制对旧任务重要参数的改变。</li></ul></li><li><p><strong>L2正则化</strong>：</p><ul><li>在新任务的损失函数中添加L2正则化项，以避免模型对权重的剧烈更新，从而保持旧任务的知识。</li></ul></li></ul><h5 id="2-增量学习"><a href="#2-增量学习" class="headerlink" title="2. 增量学习"></a>2. 增量学习</h5><ul><li><p><strong>多任务学习</strong>：</p><ul><li>同时训练多个任务，通过共享特征和参数，减少任务之间的干扰。例如，在进行新任务的训练时，可以保留旧任务的训练数据，以便于模型同时学习。</li></ul></li><li><p><strong>记忆增强网络</strong>：</p><ul><li>使用记忆网络（Memory-Augmented Networks）来存储旧任务的知识。模型在学习新任务时，可以从记忆中提取旧任务的相关信息，从而减少遗忘。</li></ul></li></ul><h5 id="3-数据回放"><a href="#3-数据回放" class="headerlink" title="3. 数据回放"></a>3. 数据回放</h5><ul><li><p><strong>经验回放（Experience Replay）</strong>：</p><ul><li>在训练新任务时，定期将旧任务的数据样本（或生成样本）重新引入训练过程中，以帮助模型保持对旧知识的记忆。</li></ul></li><li><p><strong>生成模型</strong>：</p><ul><li>使用生成对抗网络（GANs）或其他生成模型生成旧任务的样本，在训练新任务时与新数据一起使用，帮助模型保持旧知识。</li></ul></li></ul><h5 id="4-元学习"><a href="#4-元学习" class="headerlink" title="4. 元学习"></a>4. 元学习</h5><ul><li><strong>元学习（Meta-Learning）</strong>：<ul><li>通过训练一个能够快速适应新任务的模型，可以在学习新任务时利用旧任务的信息。该方法通过优化模型在新任务上的学习速度，从而减少灾难性遗忘的风险。</li></ul></li></ul><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>灾难性遗忘是深度学习中的一个重要问题，特别是在二次预训练的背景下。通过使用正则化方法、增量学习、数据回放和元学习等策略，可以有效减轻遗忘现象，确保模型在新任务学习的同时保留对旧知识的理解。未来的研究可以进一步探索更加有效的解决方案，以提高模型在不断变化的任务环境中的适应能力。</p><hr><h3 id="二次预训练的通用数据混合与数据配比"><a href="#二次预训练的通用数据混合与数据配比" class="headerlink" title="二次预训练的通用数据混合与数据配比"></a>二次预训练的通用数据混合与数据配比</h3><p>二次预训练（或称为“二次训练”）是深度学习和自然语言处理领域中的一个重要概念，尤其是在大型语言模型（LLMs）中。其主要目标是通过在已经预训练的基础上，进一步增强模型的性能，特别是在特定任务或领域的应用中。以下是二次预训练过程中通用数据混合与数据配比的详细介绍。</p><h4 id="1-通用数据混合"><a href="#1-通用数据混合" class="headerlink" title="1. 通用数据混合"></a>1. 通用数据混合</h4><p>通用数据混合是指在二次预训练阶段，利用多种类型的数据源进行模型训练，以提升模型的泛化能力和适应性。数据源可以包括：</p><ul><li><p><strong>预训练数据</strong>：使用已经存在的大规模文本数据集，如Wikipedia、Common Crawl等，这些数据通常包含丰富的语言知识和语境信息。</p></li><li><p><strong>领域特定数据</strong>：针对特定应用场景或行业（如医学、法律等）的数据集。这些数据通常较小但能提供针对性的知识，使模型更好地适应特定任务。</p></li><li><p><strong>增强数据</strong>：通过数据增强技术生成的新数据，或通过合成方法（如生成对抗网络）产生的样本。这种数据能帮助模型学习到更广泛的特征。</p></li></ul><h5 id="数据混合的好处"><a href="#数据混合的好处" class="headerlink" title="数据混合的好处"></a>数据混合的好处</h5><ul><li><p><strong>提高泛化能力</strong>：通过引入多样化的数据源，模型能够学习到更全面的特征，提高在未知数据上的表现。</p></li><li><p><strong>减少过拟合</strong>：多样化的数据能有效缓解模型在特定数据集上过拟合的风险。</p></li><li><p><strong>优化迁移学习效果</strong>：模型可以更好地将学到的知识应用到新任务中，提升迁移学习的效果。</p></li></ul><h4 id="2-数据配比"><a href="#2-数据配比" class="headerlink" title="2. 数据配比"></a>2. 数据配比</h4><p>数据配比是指在进行二次预训练时，各类数据的比例分配。合理的数据配比是确保模型性能的重要因素。数据配比通常考虑以下几个方面：</p><ul><li><p><strong>预训练数据 vs. 领域特定数据</strong>：如果领域特定数据相对较小，可以增加预训练数据的比例，以确保模型仍能获得丰富的语言知识。相反，如果领域特定数据质量高且涵盖目标任务的重要特征，可以适当增加该类数据的比重。</p></li><li><p><strong>原始数据 vs. 增强数据</strong>：通常情况下，原始数据能提供更真实的样本，而增强数据可以扩展训练集。数据配比的选择依赖于增强数据的质量和多样性，如果增强数据能有效提升模型性能，可以适当增加其比重。</p></li><li><p><strong>正负样本比例</strong>：在某些特定任务中（如分类），正负样本的比例需要仔细调整，以避免模型偏向于某一类。例如，在不平衡数据集上，可能需要增加负样本的比例，以确保模型能够识别少数类。</p></li></ul><h5 id="配比策略示例"><a href="#配比策略示例" class="headerlink" title="配比策略示例"></a>配比策略示例</h5><ul><li><p><strong>1:1 配比</strong>：预训练数据和领域特定数据各占一半，适用于领域特定数据丰富的情况。</p></li><li><p><strong>7:3 配比</strong>：预训练数据占比高，适用于领域特定数据稀缺但希望保持模型通用性的情况。</p></li><li><p><strong>2:1:1 配比</strong>：在有丰富原始数据和增强数据的情况下，原始数据占2，增强数据和领域特定数据各占1，以此确保模型在泛化能力与领域知识之间达到平衡。</p></li></ul><h4 id="3-结论"><a href="#3-结论" class="headerlink" title="3. 结论"></a>3. 结论</h4><p>通用数据混合与数据配比在二次预训练过程中起着关键作用。通过合理的数据选择和比例配置，可以有效提升模型的性能，尤其是在处理特定任务或领域的应用时。选择合适的混合策略和配比需要根据具体应用场景进行实验和调整，以达到最佳效果。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59 Spring源码</title>
      <link href="/2025/02/26/59%20Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/26/59%20Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="59-Spring源码"><a href="#59-Spring源码" class="headerlink" title="59 Spring源码"></a>59 Spring源码</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要借鉴网络上对Spring源码解析的文章，并融入自己的理解后得到的记录文章。</p><p>希望在记录的过程中可以对Spring的启动以及相关的思想有一定的了解学习。</p><p>也希望在这个学习的过程中能够加深对Spring框架的基础结构，对IoC、Aop和MVC等基础概念有了更深的了解。</p><p>参考资料来自于：<a href="https://blog.csdn.net/qq_36882793/article/details/106440723">Spring源码分析：全集整理</a></p><h2 id="Spring-Boot-启动流程"><a href="#Spring-Boot-启动流程" class="headerlink" title="Spring Boot 启动流程"></a>Spring Boot 启动流程</h2><p>参考资料：<a href="https://blog.csdn.net/qq_36882793/article/details/112305866">https://blog.csdn.net/qq_36882793/article/details/112305866</a></p><p>我们来看一下在Spring boot中的启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(SpringbootDemoApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到在这段代码中存在两个重点代码：@SpringBootApplication和SpringApplication.run，下面我们分别对这些进行详细的解释。</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>该注解是一个组合注解，其注解是由其它的注解组合起来从而得到的，他的作用就是标记和说明这个类是Springboot的主配置类。</p><p>该注解主要由下面三个注解组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication = @SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan</span><br></pre></td></tr></table></figure><ol><li><blockquote><p>@SpringBootConfiguration<br>@SpringBootConfiguration &#x3D; @Configuration + @Component</p><p>表示这个类是一个配置类，而配置类也是Spring容器中的组件</p><p>该注解主要标记启动类，并为Springboot应用提供额外的配置支持</p></blockquote></li><li><blockquote><p>@EnableAutoConfiguration</p><p>@EnableConfiguration  &#x3D; @AutoConfigurationPackage + @Import</p><p><code>@EnableAutoConfiguration</code> 是 Spring Boot 的核心注解之一。它的作用是根据应用的类路径、项目所声明的 Bean 定义以及其他环境配置自动配置 Spring 应用的上下文。</p><p>@AutoConfigurationPackage该注解就是将该启动类所在包以及其子包中的所有组件都扫描并加载到Spring的容器中，这也就是为什么我们在利用springboot进行开发的时候，无论是Controller还是Service的路径都是与主配置类同级或者次级的原因。</p></blockquote></li><li><blockquote><p>@ComponentScan</p><p>该注解用于自动扫描指定包及子包中的Spring组件，这里和上面不同之处在于，该注解支持指定包，他会将指定包及其子包中所有的Spring组件都注册成Spring容器中的Beans。</p></blockquote></li></ol><h3 id="SpringApplication-run方法"><a href="#SpringApplication-run方法" class="headerlink" title="SpringApplication.run方法"></a>SpringApplication.run方法</h3><p>这里我们直接看SpringApplication.run调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着往其调用的run方法看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line"><span class="comment">// 开启关于启动时间的信息监控</span></span><br><span class="line"><span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">stopWatch.start();</span><br><span class="line"><span class="comment">// 准备 ApplicationContext</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//java.awt.headless是J2SE的一种模式用于在缺少显示屏、键盘或者鼠标时的系统配置，很多监控工具如jconsole 需要将该值设置为true，系统变量默认为true</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line"><span class="comment">// 1. 获取Spring的监听器类，这里是从 spring.factories 中去获取，默认的是以 org.springframework.boot.SpringApplicationRunListener 为key,获取到的监听器类型为 EventPublishingRunListener。</span></span><br><span class="line"><span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line"><span class="comment">// 1.1 监听器发送启动事件</span></span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 封装参数</span></span><br><span class="line"><span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line"><span class="comment">// 2. 构造容器环境。将容器的一些配置内容加载到 environment  中</span></span><br><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"><span class="comment">// 配置BeanInfo的忽略 ：“spring.beaninfo.ignore”，值为“true”表示跳过对BeanInfo类的搜索</span></span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line"><span class="comment">// 打印信息对象</span></span><br><span class="line"><span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line"><span class="comment">// 3. 创建上下文对象</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line"><span class="comment">// 从 spring.factries 中获取错误报告的类。出错的时候会调用其方法通知</span></span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line"><span class="comment">// 4. 准备刷新上下文</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line"><span class="comment">// 5. 刷新上下文</span></span><br><span class="line">refreshContext(context);</span><br><span class="line"><span class="comment">// 结束刷新，留待扩展功能，并未实现什么</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line"><span class="comment">// 停止监听</span></span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听器发送启动结束时间</span></span><br><span class="line">listeners.started(context);</span><br><span class="line"><span class="comment">// 调用 ApplicationRunner 和 CommandLineRunner 对应的方法</span></span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 发送容器运行事件</span></span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h2><p>参考资料：<a href="https://blog.csdn.net/weixin_51146329/article/details/140086129?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522AA3F56AE-6CB8-4C56-B60E-3FF70F24D9E3%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=AA3F56AE-6CB8-4C56-B60E-3FF70F24D9E3&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-140086129-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=Spring%20IOC%E6%BA%90%E7%A0%81&spm=1018.2226.3001.4187">【Spring成神之路】一次SpringIOC源码之旅，女朋友也成为了Spring大神！</a></p><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>从Spring IOC的使用过程中，我们可以非常直观的感受到Spring IOC代替我们程序员完成了一个对象的创建和管理过程。</p><p>也许你觉得不就是new 一个对象吗，何必需要专门设计一个IOC来替我们管理呢？这样不是反而会更复杂吗？也许我们可能想错了，如果在我们的程序中越来越复杂，一个对象的依赖关系会越来越复杂，比如类A同时依赖类B、类C、类D，而类B又依赖类X、类Y、类Z，当你尝试<code>new</code>一个这样的对象不可避免的会感觉心累。</p><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>既然Spring IOC是替我们管理着所有的Bean，那么如果我们需要通过源码去看他的设计思想的话，我们可以带着“Bean存储在哪里？什么时候实例化？怎么获取的？”三个问题来看Spring IOC源码。</p><p>首先来看看Spring 加载时的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;context 启动成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(userService.selectList());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractXmlApplicationContext</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;configLocation&#125;, <span class="literal">true</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="type">boolean</span> refresh, ApplicationContext parent)</span></span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">        setConfigLocations(configLocations);</span><br><span class="line">        <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过上面的代码可以分析出Spring容器创建的时候就完成了Spring Bean的注入。</p><p>这里最重要的是refresh()方法，这个方法会触发Spring容器的刷新，加载Bean的定义。它负责整个IOC容器的初始化和刷新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// 1. 准备刷新上下文环境</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建并获取 `BeanFactory`</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 准备 BeanFactory，设置相关配置</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4. 允许子类实现的额外操作</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 调用所有注册的 BeanFactoryPostProcessor</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6. 注册 BeanPostProcessors</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7. 初始化上下文信息（如国际化、事件等）</span></span><br><span class="line">            initMessageSource();</span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8. 初始化其他特殊 bean（如 ApplicationListener）</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 9. 完成所有单例 bean 的预实例化</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 10. 完成刷新过程，发布相应事件</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            destroyBeans();</span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring-Bean管理"><a href="#Spring-Bean管理" class="headerlink" title="Spring Bean管理"></a>Spring Bean管理</h2><p>参考资料：<a href="https://blog.csdn.net/mr_xioabai/article/details/129865414?ops_request_misc=%257B%2522request%255Fid%2522%253A%252224449F8C-B35C-4AD5-9AEF-FED26D190A5F%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=24449F8C-B35C-4AD5-9AEF-FED26D190A5F&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-129865414-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=Spring%20%E6%98%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86Bean%E7%9A%84&spm=1018.2226.3001.4187">Spring中的Bean的管理（史上最全）</a></p><h3 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h3><p>Spring的本质是一个bean工厂(beanFactory)或者说bean容器，它按照我们的要求，生产我们需要的各种各样的bean，提供给我们使用。只是在生产bean的过程中，需要解决bean之间的依赖问题，才引入了依赖注入(DI)这种技术。也就是说依赖注入是beanFactory生产bean时为了解决bean之间的依赖的一种技术而已。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>68 Netty</title>
      <link href="/2025/02/26/68%20Netty/"/>
      <url>/2025/02/26/68%20Netty/</url>
      
        <content type="html"><![CDATA[<h1 id="68-Netty"><a href="#68-Netty" class="headerlink" title="68 Netty"></a>68 Netty</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/qq_35190492/article/details/113174359?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522D07BDB48-FAA2-4E6E-86E3-A8188987EE2B%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=D07BDB48-FAA2-4E6E-86E3-A8188987EE2B&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113174359-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=Netty&spm=1018.2226.3001.4187">【硬核】肝了一月的Netty知识点</a></li><li></li></ol><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>Netty 是一个高性能、异步事件驱动的网络应用框架</strong>，简化了 Java 网络编程，适用于构建高效、可扩展的网络服务器和客户端。</p><p>Netty 是基于 Java NIO 的异步事件驱动的网络应用框架，使用 Netty 可以快速开发网络应用，Netty 提供了高层次的抽象来简化 TCP 和 UDP 服务器的编程，但是你仍然可以使用底层的 API。</p><p>Netty是一个非阻塞的IO客户端服务器框架</p><p>阻塞（Block）与非阻塞（Non-Block）</p><ul><li><p>阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式，当数据没有准备的时候。</p></li><li><p>阻塞：往往需要等待缓冲区中的数据准备好过后才处理其他的事情，否则一直等待在那里。</p></li><li><p>非阻塞:当我们的进程访问我们的数据缓冲区的时候，如果数据没有准备好则直接返回，不会等待。如果数据已经准备好，也直接返回。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262018372.png" alt="image-20241010184412267"></p><ul><li><strong>Feign</strong> 是一个用于调用 RESTful API 的同步框架，调用方会被阻塞，直到接收到响应。在消息队列的场景中，生产者通常需要非阻塞地发送消息，以提高性能和吞吐量。</li></ul><h3 id="Netty-核心组件"><a href="#Netty-核心组件" class="headerlink" title="Netty 核心组件"></a>Netty 核心组件</h3><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p> Channel是 Java NIO 的一个基本构造。<strong>可以看作是传入或传出数据的载体</strong>。因此，它可以被打开或关闭，连接或者断开连接。</p><h4 id="EventLoop-与-EventLoopGroup"><a href="#EventLoop-与-EventLoopGroup" class="headerlink" title="EventLoop 与 EventLoopGroup"></a>EventLoop 与 EventLoopGroup</h4><p> EventLoop 定义了Netty的核心抽象，用来处理连接的生命周期中所发生的事件，在内部，将会为每<strong>个Channel分配一个EventLoop</strong>。</p><p> EventLoopGroup 是一个 EventLoop 池，包含很多的 EventLoop。</p><p> Netty 为每个 Channel 分配了一个 EventLoop，用于处理用户连接请求、对用户请求的处理等所有事件。<strong>EventLoop 本身只是一个线程驱动，在其生命周期内只会绑定一个线程，让该线程处理一个 Channel 的所有 IO 事件。</strong></p><p> 一个 Channel 一旦与一个 EventLoop 相绑定，那么在 Channel 的整个生命周期内是不能改变的。一个 EventLoop 可以与多个 Channel 绑定。即 Channel 与 EventLoop 的关系是 n:1，而 EventLoop 与线程的关系是 1:1。</p><h4 id="ServerBootstrap-与-Bootstrap"><a href="#ServerBootstrap-与-Bootstrap" class="headerlink" title="ServerBootstrap 与 Bootstrap"></a>ServerBootstrap 与 Bootstrap</h4><p> Bootstarp 和 ServerBootstrap 被称为引导类，指对应用程序进行配置，并使他运行起来的过程。Netty处理引导的方式是使你的应用程序和网络层相隔离。</p><p> Bootstrap 是客户端的引导类，Bootstrap 在调用 bind()（连接UDP）和 connect()（连接TCP）方法时，会新创建一个 Channel，仅创建一个单独的、没有父 Channel 的 Channel 来实现所有的网络交换。</p><p> <strong>ServerBootstrap 是服务端的引导类，ServerBootstarp 在调用 bind() 方法时会创建一个 ServerChannel 来接受来自客户端的连接，并且该 ServerChannel 管理了多个子 Channel 用于同客户端之间的通信。</strong></p><h4 id="ChannelHandler-与-ChannelPipeline"><a href="#ChannelHandler-与-ChannelPipeline" class="headerlink" title="ChannelHandler 与 ChannelPipeline"></a>ChannelHandler 与 ChannelPipeline</h4><p> ChannelHandler 是对 Channel 中数据的处理器，这些处理器可以是系统本身定义好的编解码器，也可以是用户自定义的。这些处理器会被统一添加到一个 ChannelPipeline 的对象中，然后按照添加的顺序对 Channel 中的数据进行依次处理。</p><h4 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h4><p> Netty 中所有的 I&#x2F;O 操作都是异步的，即操作不会立即得到返回结果，所以 Netty 中定义了一个 ChannelFuture 对象作为这个异步操作的“代言人”，表示异步操作本身。如果想获取到该异步操作的返回值，可以通过该异步操作对象的addListener() 方法为该异步操作添加监 NIO 网络编程框架 Netty 听器，为其注册回调：当结果出来后马上调用执行。</p><p> Netty 的异步编程模型都是建立在 Future 与回调概念之上的。</p><h3 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h3><p>因为 Netty 建立的是<strong>长连接</strong>，也就是说只要不在 Client 的代码中手动 <code>channel.close();</code> 那该连接就会一直保持着，直到客户端或者服务器一方关闭。</p><p>也不是说长连接它就不好，但大家想想，每一个客户端都一直占着一个连接，即使它后面已经用不到服务器了，而服务器能承受的连接数是有限的，后面再来了真正有需求的用户，它也进不来了，而且长时间的高并发也可能导致服务器宕机。</p><p>所以，有没有一种办法，如果我一段时间用不到服务器，就把这个连接给关掉？答：心跳机制。所谓心跳，即在 TCP 长连接中，客户端和服务器之间定期发送的一种特殊的数据包（比如消息内容是某种要求格式、内容），通知对方自己还在线，以确保 TCP 连接的有效性。</p><p>在 Netty 中，实现心跳机制的关键是 IdleStateHandler（空闲状态处理器），它的作用跟名字一样，是用来监测连接的空闲情况。然后我们就可以根据心跳情况，来实现具体的处理逻辑，比如说断开连接、重新连接等等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Netty 是一个高性能的<strong>异步事件驱动</strong>的网络应用框架，广泛用于开发网络应用程序，如协议服务器和客户端。简单来说这个框架是基于<strong>异步事件驱动</strong>的网络应用框架，这里最重要的一个点是事件驱动。</p><p>何为事件驱动呢？事件驱动就是指它的服务逻辑都是针对发生的事件来触发的，一旦某个事件发生了，就会触发该时间的处理逻辑。比如建立连接、数据读取、数据写入等等情况。</p><p>该应用框架总体来说就是为了两个服务直接进行通信，只不过这个是异步通信，而不是像之前那样的同步通信，它是非阻塞的，具有很高的性能。那么连接两个节点之间进行通信的称为<strong>通道</strong>（<strong>Channel</strong>），通过这个通道来实现双方之间的通信。这些都是应用层面的，对于传输层来说，具体使用的是TCP协议还是UDP协议都做了适配。</p><p><strong>ChannelHandler</strong> 是处理特定事件和数据的组件。你可以定义自己的 ChannelHandler，重写方法来处理数据的编解码、连接的生命周期事件、异常处理等。这个可以看成通道上的管理人员，我们可以在通道的两头编写的自定义的入站和出站逻辑。</p><p>在网络通信中，数据通常需要进行<strong>编码和解码</strong>。在 Netty 中，编解码的过程通过 <code>ChannelHandler</code> 的实现来完成。Netty 提供了 <code>MessageToByteEncoder</code> 和 <code>ByteToMessageDecoder</code> 等抽象类，简化了这一过程。</p><p><strong>ChannelPipeline</strong> 是一个关键概念，它允许开发者将多个 ChannelHandler 组合在一起，形成一个<strong>处理链</strong>。当数据在 Channel 中流动时，它会依次经过链中的每个处理器。这种设计使得数据的处理过程可以灵活配置，支持不同的协议和业务逻辑。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServerHandlerInitializer</span> <span class="keyword">extends</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ch.pipeline()</span><br><span class="line">                <span class="comment">//空闲检测</span></span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ServerIdleStateHandler</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32FrameDecoder</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufDecoder</span>(MessageBase.Message.getDefaultInstance()))</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32LengthFieldPrepender</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufEncoder</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">NettyServerHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是一个ChannelPipeline。</p><p><strong>Reactor模型</strong>是Netty采用的线程模型，下面是其一个图：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262019297.png" alt="image-20241011195241906"></p><p>Netty 的线程模型基于 <strong>Reactor</strong> 模式，这种模式特别适合于处理大量的并发连接。<strong>Reactor 模式的基本思路是将 I&#x2F;O 操作与业务逻辑处理分离，将 I&#x2F;O 事件的处理和业务逻辑处理分配给不同的线程</strong>。</p><p><strong>事件循环</strong>: 每个 EventLoop 会不断地循环处理事件，包括连接事件、读事件和写事件。EventLoop 负责从操作系统获取可读或可写的 Channel，并将这些事件分发给对应的 ChannelHandler 进行处理。</p><p>Netty的处理架构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262019692.png" alt="image-20241011195650688"></p><p>Netty主要在Reactor的主从模型上进行了一些改进后得到了目前Netty使用的Reactor模型。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262019433.png" alt="image-20241011195844135"></p><h3 id="Netty工作原理"><a href="#Netty工作原理" class="headerlink" title="Netty工作原理"></a>Netty工作原理</h3><p>参考资料：<a href="https://blog.csdn.net/weixin_40909461/article/details/138355959?ops_request_misc=%257B%2522request%255Fid%2522%253A%25221B4F5303-2934-4300-B3BE-9463B4F2B8F5%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=1B4F5303-2934-4300-B3BE-9463B4F2B8F5&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-138355959-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=Netty%E6%9E%B6%E6%9E%84&spm=1018.2226.3001.4187">【Netty系列】Netty高性能架构设计以及光速入门</a></p><p>一图见真知</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262019540.png" alt="image-20241011200020959"></p><p>Netty 抽象出了两组线程池BossGroup和WorkerGroup，<strong>其中BossGroup专门负责接受客户端的连接</strong>，<strong>WorkerGroup专门负责网络的读写</strong>。BossGroup和WorkerGroup的类型都是NioEventLoopGroup。NioEventLoopGroup相当于一个事件循环组，这个组种含有多个事件循环，每一个事件循环是一个NioEventLoop。NioEeventLoop表示一个不断循环执行处理任务的线程，可以有多个线程，也就是说可以含有多个NioEventLoop，每个NioEventLoop都有一个Selector，用于监听绑定在其上的socket的网络通讯。</p><p><strong>EventLoop 和 EventLoopGroup</strong>：<code>EventLoop</code> 是 Netty 的事件循环，它处理 Channel 上的所有事件，包括 I&#x2F;O 事件、任务调度等。每个 <code>EventLoop</code> 负责处理一个或多个 <code>Channel</code>，确保同一个 <code>Channel</code> 的所有 I&#x2F;O 操作都在同一个线程中执行，避免线程安全问题。<code>EventLoopGroup</code> 是 <code>EventLoop</code> 的集合，通常分为两类：</p><ul><li><strong>BossGroup</strong>：负责处理新的连接请求。</li><li><strong>WorkerGroup</strong>：负责处理已经建立的连接的 I&#x2F;O 操作。</li></ul><p><strong>Bootstrap&#x2F;ServerBootstrap</strong>：用于启动 Netty 应用程序的辅助类。<code>Bootstrap</code> 用于客户端，<code>ServerBootstrap</code> 用于服务器。它们简化了配置和初始化过程。</p><h2 id="SpringBoot集成Netty"><a href="#SpringBoot集成Netty" class="headerlink" title="SpringBoot集成Netty"></a>SpringBoot集成Netty</h2><p>参考资料</p><ul><li><a href="https://cloud.tencent.com/developer/article/1620776">Springboot 2.0 +protobuf + Netty 实战(附源码)</a></li><li><a href="https://blog.csdn.net/li371518473/article/details/136572133">Spring Boot与Netty的完美结合：打造高性能网络通信</a></li></ul><h3 id="protobuf协议格式"><a href="#protobuf协议格式" class="headerlink" title="protobuf协议格式"></a>protobuf协议格式</h3><p>在整合使用 Netty 的过程中，我们使用 Google 的protobuf定义消息格式，下面来简单介绍下 protobuf。</p><p>了解一个新的事物，我们从这几个方面快速的了解：</p><ul><li>它是什么？Protobuf是一个数据格式，专业术语为：一种结构化数据存储格式；</li><li>它有什么用？通常用于结构化数据的序列化和反序列化；</li><li>它相比较之前存在的有什么优点？解决了什么问题？它相对于JSON来说，性能更好，支持跨语言（因为它最后是二进制格式的数据编码）</li></ul><p>通过上面三个问题就可以对Protobuf有一个初步清晰的了解。</p><h3 id="引入Netty依赖"><a href="#引入Netty依赖" class="headerlink" title="引入Netty依赖"></a>引入Netty依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.netty/netty-all --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.112.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Netty服务端"><a href="#Netty服务端" class="headerlink" title="Netty服务端"></a>Netty服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boss 线程组用于处理连接工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">EventLoopGroup</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**在</span></span><br><span class="line"><span class="comment">     * work 线程组用于数据处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">EventLoopGroup</span> <span class="variable">work</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;netty.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">54021</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// @PostConstruct 是一个用于 Java EE 和 Spring 框架中的注解，标记在一个方法上，表示这个方法将在依赖注入完成后被自动调用。</span></span><br><span class="line">    <span class="comment">// 它通常用于进行初始化操作，例如设置默认值、执行启动时的逻辑、或者进行资源的准备。</span></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 启动Netty Server</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span>  &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/10</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">        serverBootstrap.group(boss,work)</span><br><span class="line">                <span class="comment">// 指定Channel</span></span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                <span class="comment">//使用指定的端口设置套接字地址</span></span><br><span class="line">                .localAddress(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port))</span><br><span class="line">                <span class="comment">// 方法设置了 Socket 选项 SO_BACKLOG，它指定了在连接队列中可以排队的最大连接数。当服务器正在处理现有连接时，</span></span><br><span class="line">                <span class="comment">// 新的连接请求会被放入队列中，直到当前连接处理完成。1024 是队列的长度，这个值可以根据需要进行调整。</span></span><br><span class="line">                .option(ChannelOption.SO_BACKLOG,<span class="number">1024</span>)</span><br><span class="line">                <span class="comment">// 设置 SO_KEEPALIVE 选项为 true，这意味着在 TCP 连接上启用 TCP 保活机制。</span></span><br><span class="line">                <span class="comment">// 如果连接闲置时间过长，系统会发送保活探测包，以保持连接的活跃状态。</span></span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE,<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置 TCP_NODELAY 选项为 true，启用 Nagle 算法。</span></span><br><span class="line">                <span class="comment">// 这会在发送小数据包时禁用延迟，从而减少数据包的发送延迟，提高实时性。</span></span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY,<span class="literal">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">NettyServerHandlerInitializer</span>());</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> serverBootstrap.bind().sync();</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess())&#123;</span><br><span class="line">            log.info(<span class="string">&quot;Netty Server Running&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        boss.shutdownGracefully().sync();</span><br><span class="line">        work.shutdownGracefully().sync();</span><br><span class="line">        log.info(<span class="string">&quot;Netty Server Stop&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MessageBase.Message) &#123;</span><br><span class="line">            <span class="comment">// 将接收到的消息转换为 Protobuf 消息</span></span><br><span class="line">            MessageBase.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> (MessageBase.Message) msg;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理消息（例如，打印消息内容）</span></span><br><span class="line">            log.info(<span class="string">&quot;Received message:&quot;</span>);</span><br><span class="line">            log.info(message.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可选：根据接收到的消息发送响应</span></span><br><span class="line">            MessageBase.<span class="type">Message</span> <span class="variable">response</span> <span class="operator">=</span> MessageBase.Message.newBuilder()</span><br><span class="line">                    .setRequestId(message.getRequestId())</span><br><span class="line">                    .setCmd(MessageBase.Message.CommandType.ACK)</span><br><span class="line">                    .build();</span><br><span class="line">            ctx.writeAndFlush(response); <span class="comment">// 发送响应</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果接收到的消息不是预期的类型，可以选择忽略或者抛出异常</span></span><br><span class="line">            System.err.println(<span class="string">&quot;Received an unknown message type: &quot;</span> + msg.getClass().getName());</span><br><span class="line">            ctx.fireChannelRead(msg); <span class="comment">// 继续向下传递</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理异常</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close(); <span class="comment">// 关闭连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServerHandlerInitializer</span> <span class="keyword">extends</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ch.pipeline()</span><br><span class="line">                <span class="comment">//空闲检测</span></span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ServerIdleStateHandler</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32FrameDecoder</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufDecoder</span>(MessageBase.Message.getDefaultInstance()))</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32LengthFieldPrepender</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufEncoder</span>())</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">NettyServerHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerIdleStateHandler</span> <span class="keyword">extends</span> <span class="title class_">IdleStateHandler</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置空闲检测时间为 30s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">READER_IDLE_TIME</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerIdleStateHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(READER_IDLE_TIME, READER_IDLE_TIME, READER_IDLE_TIME, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelIdle</span><span class="params">(ChannelHandlerContext ctx, IdleStateEvent evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; 秒内没有读取到数据,关闭连接&quot;</span>, READER_IDLE_TIME);</span><br><span class="line"></span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;发生超时事件--&quot;</span> + evt);</span><br><span class="line"></span><br><span class="line">        ctx.channel().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Netty客户端"><a href="#Netty客户端" class="headerlink" title="Netty客户端"></a>Netty客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EventLoopGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">54021</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> Netty客户端启动函数 调用Start可以启动对Netty服务端的连接</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">        bootstrap.group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .remoteAddress(host, port)</span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>)</span><br><span class="line">                .option(ChannelOption.TCP_NODELAY, <span class="literal">true</span>)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        ch.pipeline()</span><br><span class="line">                                <span class="comment">// 空闲检测</span></span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)) <span class="comment">// 60秒写空闲，30秒读空闲</span></span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">HeartbeatHandler</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32FrameDecoder</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufDecoder</span>(MessageBase.Message.getDefaultInstance()))</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32LengthFieldPrepender</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">ProtobufEncoder</span>())</span><br><span class="line">                                .addLast(<span class="keyword">new</span> <span class="title class_">NettyClientHandler</span>())</span><br><span class="line">                        ; <span class="comment">// 自定义处理器</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.connect();</span><br><span class="line">        <span class="comment">//客户端断线重连逻辑</span></span><br><span class="line">        future.addListener((ChannelFutureListener) future1 -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (future1.isSuccess()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;连接Netty服务端成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;连接失败，进行断线重连&quot;</span>);</span><br><span class="line">                future1.channel().eventLoop().schedule(<span class="built_in">this</span>::start, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        socketChannel = (SocketChannel) future.channel();</span><br><span class="line"></span><br><span class="line">        sendMessageThread.setSocketChannel(socketChannel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="proto文件"><a href="#proto文件" class="headerlink" title="proto文件"></a>proto文件</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//protobuf语法有 proto2和proto3两种，这里指定 proto3</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 文件选项</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.fang.screw.client.protocol&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;MessageBase&quot;</span>;</span><br><span class="line"><span class="comment">// 消息模型定义</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Message</span> &#123;</span><br><span class="line">  <span class="type">string</span> requestId = <span class="number">1</span>;</span><br><span class="line">  CommandType cmd = <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> content = <span class="number">3</span>;</span><br><span class="line">  <span class="type">int32</span> retryCount = <span class="number">4</span>;</span><br><span class="line">  <span class="type">string</span> urlPath = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">CommandType</span> &#123;</span><br><span class="line">    NORMAL = <span class="number">0</span>; <span class="comment">//常规业务消息</span></span><br><span class="line">    HEARTBEAT_REQUEST = <span class="number">1</span>; <span class="comment">//客户端心跳消息</span></span><br><span class="line">    HEARTBEAT_RESPONSE = <span class="number">2</span>; <span class="comment">//服务端心跳消息</span></span><br><span class="line">    ACK = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要把Protobuf文件进行编译，具体如何操作请查阅相关资料。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="客户端的心跳包无法传给服务端，但是自行的消息可以发送到服务端"><a href="#客户端的心跳包无法传给服务端，但是自行的消息可以发送到服务端" class="headerlink" title="客户端的心跳包无法传给服务端，但是自行的消息可以发送到服务端"></a>客户端的心跳包无法传给服务端，但是自行的消息可以发送到服务端</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>客户端的心跳配置错误，导致心跳没有触发；</li></ul><p>心跳没问题，能够触发，但是消息发不出去了；</p><ul><li>项目结构存在问题，导致客户端的心跳发送消息存在一定的问题；</li></ul><p>暂时没找到是什么问题，目前决定取消心跳，在到达一定的空闲时间后就会关闭这个连接，当客户端收到了消息后就会打开链接，然后发送消息。</p><p>- </p><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><blockquote><p>以下是涵盖整个Netty知识点的面试题，难度循序渐进，共有20个问题：</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li>什么是Netty，它主要解决了哪些问题？</li><li>请简述Netty的工作流程。</li><li>Netty的核心组件有哪些？它们各自的作用是什么？</li><li>什么是Channel，ChannelHandler和ChannelPipeline，它们之间有什么关系？</li><li>Netty中NIO模型是如何工作的？</li><li>解释什么是EventLoop以及它的作用。</li><li>请描述一下Netty的异步处理模型和事件驱动机制。</li></ol><h3 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h3><ol><li>Netty中如何实现TCP连接的管理？如何处理长连接？</li><li>如何在Netty中实现心跳机制？心跳机制的作用是什么？</li><li>请描述一下Netty的编解码器（Codec），它是如何工作的？</li><li>Netty中如何实现SSL&#x2F;TLS加密？</li><li>在Netty中，如何处理异常并确保程序的健壮性？</li><li>Netty如何支持自定义协议的编解码？</li><li>Netty的线程模型是怎样的？如何优化线程池的使用？</li></ol><h3 id="性能与优化"><a href="#性能与优化" class="headerlink" title="性能与优化"></a>性能与优化</h3><ol><li>如何在Netty中实现高并发的处理？有哪些优化措施？</li><li>Netty中的内存管理是如何进行的？如何优化内存的使用？</li><li>Netty的零拷贝技术是什么，它是如何提高性能的？</li><li>如何在Netty中处理大文件上传&#x2F;下载？如何优化性能？</li><li>你如何解决Netty中的TCP粘包和拆包问题？</li><li>Netty的负载均衡机制是如何实现的？如何保证高可用性？</li></ol><p>这些问题涉及到Netty的基础使用、架构原理、高级特性、性能优化等各个方面，适用于不同难度层次的面试。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58 MySQL</title>
      <link href="/2025/02/26/58%20MySQL/"/>
      <url>/2025/02/26/58%20MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="58-MySQL"><a href="#58-MySQL" class="headerlink" title="58 MySQL"></a>58 MySQL</h1><h2 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>元组：关系是⼀张表，表中的每⾏（即数据库中的 每条记录）就是⼀个元组，每列就是⼀个属性。 在⼆维表⾥，元组也称为**⾏**；</p><p>码：码指的是能够唯一标识&#x2F;区分元组（行）的一个或者一组属性；</p><p>候选码：在一个数据表中码可能存在很多组，而在这些码中存在<strong>其任何子集都不能唯一标识该元组的码</strong>我们称之为候选码；</p><p>主码：一个表存在多个候选码，从候选码中选出一个，我们把这个候选码称之为主码，一个表只能存在一个主码，我们也称主码为主键；</p><p>外码：我们类比一下，外码就是非本表的主码；</p><p>主属性：出现在候选码中的属性都称为主属性；</p><p>非主属性：在这个表中的所有属性中，只要不是主属性就是非主属性。</p><h4 id="为什么不推荐使用外键和级联"><a href="#为什么不推荐使用外键和级联" class="headerlink" title="为什么不推荐使用外键和级联"></a>为什么不推荐使用外键和级联</h4><p>在高并发的情况下，外键可能会造成级联更新，级联更新是强阻塞，存 在数据库更新⻛暴的⻛险; 外键影响数据库的插⼊速度。</p><p>外键在一定程度上也会增加复杂性，同时也增加了额外工作，对分库分表不友好；</p><h4 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h4><h5 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h5><p>通俗的来讲就是在一个表中的属性不可分割，即不可再分，1NF是所有关系型数据库的最基本要求。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006719.png" alt="image-20240906144004121"></p><h5 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h5><p><strong>2NF 在 1NF 的基础之上，消除了⾮主属性对于码的部分函数依赖。</strong></p><p><strong>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006551.png" alt="image-20240906144228145"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006981.png" alt="image-20240906145007347"></p><h5 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006282.png" alt="image-20240906144716968"></p><p>**3NF 在 2NF 的基础之上，消除了⾮主属性对于码的传递函数依赖 。**符合 3NF 要求的数据库设计， 基本上解决了数据冗余过⼤，插⼊异常，修改异常，删除异常的问题。</p><p><strong>在2NF基础上，任何非主属性(opens new window)不依赖于其它非主属性（在2NF基础上消除传递依赖）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006137.png" alt="image-20240906144832578"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006634.png" alt="image-20240906145143433"></p><h4 id="drop、delete-与-truncate-区别？"><a href="#drop、delete-与-truncate-区别？" class="headerlink" title="drop、delete 与 truncate 区别？"></a>drop、delete 与 truncate 区别？</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006417.png" alt="image-20240906162330746"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006693.png" alt="image-20240906162517712"></p><h4 id="常见关系型数据库"><a href="#常见关系型数据库" class="headerlink" title="常见关系型数据库"></a>常见关系型数据库</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006292.png" alt="image-20240906163157862"></p><h4 id="MySQL基础架构"><a href="#MySQL基础架构" class="headerlink" title="MySQL基础架构"></a>MySQL基础架构</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006522.png" alt="image-20240909190029815"></p><p>MySQL查询缓存在MySQL8.0之后被移除，因为其的实用性并不是很好。</p><h4 id="何时选择SQL又什么时候选择NoSQL呢"><a href="#何时选择SQL又什么时候选择NoSQL呢" class="headerlink" title="何时选择SQL又什么时候选择NoSQL呢"></a>何时选择SQL又什么时候选择NoSQL呢</h4><p>回答这个问题，主要针对于SQL满足四大特性，即ACID，而NoSQL满足BASD。这分别什么意思呢？</p><p>SQL：原子性、持久性、隔离性保证了强一致性，而NoSQL只保证最终一致性，所以在具体的业务场景中如果对数据要求强一致性的话考虑SQL数据库。</p><p>但是NoSQL可扩展性很好，且数据直接是无关系的。NoSQL数据之间无关系，这样就非常容易扩展，也无形之间，在架构的层面上带来了可扩展的能力。比如 redis 自带主从复制模式、哨兵模式、切片集群模式。 相反关系型数据库的数据之间存在关联性，水平扩展较难 ，需要解决跨服务器 JOIN，分布式事务等问题。</p><h4 id="MySQL如何进行联表查询"><a href="#MySQL如何进行联表查询" class="headerlink" title="MySQL如何进行联表查询"></a>MySQL如何进行联表查询</h4><h5 id="内连接（INNER-JOIN"><a href="#内连接（INNER-JOIN" class="headerlink" title="内连接（INNER JOIN)"></a>内连接（INNER JOIN)</h5><p>一句话：<strong>内连接</strong>会返回两个表中<strong>满足连接条件</strong>的匹配记录，过滤掉不匹配的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>关联列 <span class="operator">=</span> 表<span class="number">2.</span>关联列;</span><br></pre></td></tr></table></figure><h5 id="左外连接-LEFT-JOIN"><a href="#左外连接-LEFT-JOIN" class="headerlink" title="左外连接 (LEFT JOIN)"></a>左外连接 (LEFT JOIN)</h5><p>一句话：返回左表（主表）的所有记录，即使右表没有匹配。 若右表无匹配，右表字段显示为 NULL。 核心逻辑：“左表为主，右表补充”。</p><h5 id="右外连接-RIGHT-JOIN"><a href="#右外连接-RIGHT-JOIN" class="headerlink" title="右外连接 (RIGHT JOIN)"></a>右外连接 (RIGHT JOIN)</h5><p>一句话：返回右表（主表）的所有记录，即使左表没有匹配。 若左表无匹配，左表字段显示为 NULL。 核心逻辑：“右表为主，左表补充”。</p><h5 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a>全外连接</h5><p>一句话：都要，为Null都要。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503121411192.png" alt="image-20250312141103084"></p><h4 id="Group-By-聚合函数"><a href="#Group-By-聚合函数" class="headerlink" title="Group By 聚合函数"></a>Group By 聚合函数</h4><p><a href="https://so.csdn.net/so/search?q=%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">聚合函数</a>对一组值进行计算并返回单一的值，通常聚合函数会与SELECT语句的GROUP BY子句一同使用，在与GROUP BY子句使用时，聚合函数会为每一个组产生一个单一值，而不会为整个表产生一个单一值.</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503121434191.png" alt="image-20250312143404138"></p><h4 id="SQL查询语句的执行顺序是怎么样的？"><a href="#SQL查询语句的执行顺序是怎么样的？" class="headerlink" title="SQL查询语句的执行顺序是怎么样的？"></a>SQL查询语句的执行顺序是怎么样的？</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503121446316.png" alt="image-20250312144616250"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(9) SELECT </span><br><span class="line">(10) DISTINCT &lt;column&gt;,</span><br><span class="line">(6) AGG_FUNC &lt;column&gt; or &lt;expression&gt;, ...</span><br><span class="line">(1) FROM &lt;left_table&gt; </span><br><span class="line">    (3) &lt;join_type&gt;JOIN&lt;right_table&gt;</span><br><span class="line">    (2) ON&lt;join_condition&gt;</span><br><span class="line">(4) WHERE &lt;where_condition&gt;</span><br><span class="line">(5) GROUP BY &lt;group_by_list&gt;</span><br><span class="line">(7) WITH &#123;CUBE|ROLLUP&#125;</span><br><span class="line">(8) HAVING &lt;having_condtion&gt;</span><br><span class="line">(11) ORDER BY &lt;order_by_list&gt;</span><br><span class="line">(12) LIMIT &lt;limit_number&gt;;</span><br></pre></td></tr></table></figure><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>SQL（Structured Query Language）是“结构化查询语言”，它是对关系型数据库的操作语言。它可以应用到所有关系型数据库中，例如：MySQL、Oracle、SQL Server 等。SQL 标准（ANSI&#x2F;ISO）有：</p><p>SQL-92：1992 年发布的 SQL 语言标准；</p><p>SQL:1999：1999 年发布的 SQL 语言标签；</p><p>SQL:2003：2003 年发布的 SQL 语言标签；</p><p>这些标准就与 JDK 的版本一样，在新的版本中总要有一些语法的变化。不同时期的数据库对不同标准做了实现。</p><p>虽然 SQL 可以用在所有关系型数据库中，但很多数据库还都有标准之后的一些语法，我们可以称之为“方言”。例如 MySQL 中的 LIMIT 语句就是 MySQL 独有的方言，其它数据库都不支持！当然，Oracle 或 SQL Server 都有自己的方言。</p><ul><li>SQL 语句可以单行或多行书写，以分号结尾；</li><li>可以用空格和缩进来来增强语句的可读性；</li><li>关键字不区别大小写，建议使用大写；</li></ul><h4 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h4><ol><li><p>DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等；</p></li><li><p>DML（Data Manipulation Language）：数据操作语言，用来定义数据库记录（数据）；</p></li><li><p>DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；</p></li><li><p>DQL（Data Query Language）：数据查询语言，用来查询记录（数据）</p></li></ol><h4 id="DDL（Data-Definition-Language）：数据定义语言"><a href="#DDL（Data-Definition-Language）：数据定义语言" class="headerlink" title="DDL（Data Definition Language）：数据定义语言"></a>DDL（Data Definition Language）：数据定义语言</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; <span class="operator">/</span><span class="operator">/</span> 查看当前建立的所有数据库</span><br><span class="line">use mysqldb; <span class="operator">/</span><span class="operator">/</span> 切换到指定数据库</span><br><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] mydb1; <span class="operator">/</span><span class="operator">/</span> 创建数据库 如果没有存在的话</span><br><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] mydb1; <span class="operator">/</span><span class="operator">/</span> 删除指定数据库</span><br><span class="line"><span class="keyword">alter</span> database mydb1 <span class="keyword">character set</span> utf8; <span class="operator">/</span><span class="operator">/</span> 修改数据库编码</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建表</span><br><span class="line"><span class="keyword">CREATE TABLE</span> stu(</span><br><span class="line">sid <span class="type">CHAR</span>(<span class="number">6</span>), </span><br><span class="line">sname <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">age <span class="type">INT</span>, </span><br><span class="line">gender <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> 表名； <span class="operator">/</span><span class="operator">/</span> 查看表的结构</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名； <span class="operator">/</span><span class="operator">/</span> 删除表</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改表</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 添加列：给 stu 表添加 classname 列</span><br><span class="line"><span class="keyword">ALTER TABLE</span> stu <span class="keyword">ADD</span> (classname <span class="type">varchar</span>(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改列的数据类型：修改 stu 表的 gender 列类型为 <span class="type">CHAR</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">ALTER TABLE</span> stu MODIFY gender <span class="type">CHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改列名：修改 stu 表的 gender 列名为 sex</span><br><span class="line"><span class="keyword">ALTER TABLE</span> stu change gender sex <span class="type">CHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除列：删除 stu 表的 classname 列</span><br><span class="line"><span class="keyword">ALTER TABLE</span> stu <span class="keyword">DROP</span> classname;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改表名称：修改 stu 表名称为 student</span><br><span class="line"><span class="keyword">ALTER TABLE</span> stu RENAME <span class="keyword">TO</span> student;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据类型：</p><ul><li>int：整型</li><li>double：浮点型，例如 double(5,2)表示最多 5 位，其中必须有 2 位小数，即最大值为 999.99；</li><li>decimal：泛型型，在表单线方面使用该类型，因为不会出现精度缺失问题；</li><li>char：固定长度字符串类型；(当输入的字符不够长度时会补空格)</li><li>varchar：固定长度字符串类型；</li><li>text：字符串类型；</li><li>blob：字节类型；</li><li>date：日期类型，格式为：yyyy-MM-dd；</li><li>time：时间类型，格式为：hh:mm:ss</li><li>timestamp：时间戳类型；</li></ul><h4 id="DML（Data-Manipulation-Language）：数据操作语言"><a href="#DML（Data-Manipulation-Language）：数据操作语言" class="headerlink" title="DML（Data Manipulation Language）：数据操作语言"></a>DML（Data Manipulation Language）：数据操作语言</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 插入数据</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法<span class="number">1</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> stu(sid, sname) <span class="keyword">VALUES</span>(<span class="string">&#x27;s_1001&#x27;</span>, <span class="string">&#x27;zhangSan&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法 <span class="number">2</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 因为没有指定要插入的列，表示按创建表时列的顺序插入所有列的值：</span><br><span class="line"><span class="keyword">INSERT INTO</span> stu <span class="keyword">VALUES</span>(<span class="string">&#x27;s_1002&#x27;</span>, <span class="string">&#x27;liSi&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 注意：所有字符串数据必须使用单引用！</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改数据</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名 <span class="number">1</span><span class="operator">=</span>值 <span class="number">1</span>, … 列名 n<span class="operator">=</span>值 n [<span class="keyword">WHERE</span> 条件];</span><br><span class="line"><span class="keyword">UPDATE</span> stu <span class="keyword">SET</span> sname<span class="operator">=</span>’zhangSanSan’, age<span class="operator">=</span>’<span class="number">32</span>’, gender<span class="operator">=</span>’female’ <span class="keyword">WHERE</span> sid<span class="operator">=</span>’s_1001’;</span><br><span class="line"><span class="keyword">UPDATE</span> stu <span class="keyword">SET</span> sname<span class="operator">=</span>’liSi’, age<span class="operator">=</span>’<span class="number">20</span>’<span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">50</span> <span class="keyword">AND</span> gender<span class="operator">=</span>’male’;</span><br><span class="line"><span class="keyword">UPDATE</span> stu <span class="keyword">SET</span> sname<span class="operator">=</span>’wangWu’, age<span class="operator">=</span>’<span class="number">30</span>’<span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">60</span> <span class="keyword">OR</span> gender<span class="operator">=</span>’female’;</span><br><span class="line"><span class="keyword">UPDATE</span> stu <span class="keyword">SET</span> gender<span class="operator">=</span>’female’<span class="keyword">WHERE</span> gender <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UPDATE</span> stu <span class="keyword">SET</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">1</span> <span class="keyword">WHERE</span> sname<span class="operator">=</span>’zhaoLiu’;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除数据</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件];</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sid<span class="operator">=</span>’s_1001’<span class="number">003</span>B;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> sname<span class="operator">=</span>’chenQi’ <span class="keyword">OR</span> age <span class="operator">&gt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> stu;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法 <span class="number">2</span>：<span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> stu;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 两者之间的区别：虽然 <span class="keyword">TRUNCATE</span> 和 <span class="keyword">DELETE</span> 都可以删除表的所有记录，但有原理不同。<span class="keyword">DELETE</span>的效率没有 <span class="keyword">TRUNCATE</span> 高！<span class="keyword">TRUNCATE</span> 其实属性 DDL 语句，因为它是先 <span class="keyword">DROP</span> <span class="keyword">TABLE</span>，再 <span class="keyword">CREATE TABLE</span>。而且<span class="keyword">TRUNCATE</span>删除的记录是无法回滚的，但<span class="keyword">DELETE</span>删除的记录是可以回滚的（回滚是事务的知识！）。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="DCL（Data-Control-Language）：数据控制语言"><a href="#DCL（Data-Control-Language）：数据控制语言" class="headerlink" title="DCL（Data Control Language）：数据控制语言"></a>DCL（Data Control Language）：数据控制语言</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建用户</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法：<span class="keyword">CREATE</span> <span class="keyword">USER</span> ‘用户名’@地址 IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> ‘user1’<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> ‘<span class="number">123</span>’;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> ‘user2’@’<span class="operator">%</span>’ IDENTIFIED <span class="keyword">BY</span> ‘<span class="number">123</span>’;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 给用户授权</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法：<span class="keyword">GRANT</span> 权限 <span class="number">1</span>, … , 权限 n <span class="keyword">ON</span> 数据库.<span class="operator">*</span> <span class="keyword">TO</span> ‘用户名’@地址;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span>,<span class="keyword">ALTER</span>,<span class="keyword">DROP</span>,<span class="keyword">INSERT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>,<span class="keyword">SELECT</span> <span class="keyword">ON</span> mydb1.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user1&#x27;</span><span class="variable">@localhost</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> mydb1.<span class="operator">*</span> <span class="keyword">TO</span> user2<span class="variable">@localhost</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 撤销授权</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法：<span class="keyword">REVOKE</span> 权限 <span class="number">1</span>, … , 权限 n <span class="keyword">ON</span> 数据库.<span class="operator">*</span> <span class="keyword">FROM</span> ‘用户名’@地址;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">CREATE</span>,<span class="keyword">ALTER</span>,<span class="keyword">DROP</span> <span class="keyword">ON</span> mydb1.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;user1&#x27;</span><span class="variable">@localhost</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查看用户权限</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法：<span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> ‘用户名’@地址;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;user1&#x27;</span><span class="variable">@localhost</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除用户</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法：<span class="keyword">DROP</span> <span class="keyword">USER</span> ‘用户名’@地址;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> ‘user1’<span class="variable">@localhost</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改用户密码（以root身份）</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 语法 ：use mysql;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span><span class="variable">@localhost</span> identified <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="DQL（Data-Query-Language）：数据查询语言"><a href="#DQL（Data-Query-Language）：数据查询语言" class="headerlink" title="DQL（Data Query Language）：数据查询语言"></a>DQL（Data Query Language）：数据查询语言</h4><p>语法：</p><ul><li>select 列名 —-&gt; 要查询的列名称</li><li>from 表名 —-&gt; 要查询的表名称</li><li>where 条件 —-&gt; 行条件</li><li>group by 分组列 —-&gt; 对结果分组</li><li>having 分组条件 —-&gt; 分组后的行条件</li><li>order by 排序列 —-&gt; 对结果分组</li><li>limit 起始行, 行数 —-&gt; 结果限定</li></ul><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p>条件查询介绍<br>条件查询就是在查询时给出 WHERE 子句，在 WHERE 子句中可以使用如下运算符及关键字：</p><ul><li>&#x3D;、!&#x3D;、&lt;&gt;、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;；</li><li>BETWEEN…AND；</li><li>IN(set)；</li><li>IS NULL；</li><li>AND；</li><li>OR；</li><li>NOT；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006155.png" alt="image-20240904110449093"></p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><p>SELECT 字段 FROM 表 WHERE 某字段 Like 条件<br>其中关于条件，SQL 提供了两种匹配模式：</p><p>% ：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。</p><p>_ ： 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字 符长度语句。</p><h5 id="字段控制查询"><a href="#字段控制查询" class="headerlink" title="字段控制查询"></a>字段控制查询</h5><p>去掉重复记录</p><p>去除重复记录（两行或两行以上记录中系列的上的数据都相同），例如 emp 表中 sal 字段就存在相同的记录。当只查询 emp 表的 sal 字段时，那么会出现重复记录，那么想去除重复记录，需要使用 <strong>DISTINCT</strong>：</p><p>SELECT DISTINCT sal FROM emp;</p><p>查看雇员的月薪与佣金之和</p><p>因为 sal 和 comm 两列的类型都是数值类型，所以可以做加运算。如果 sal 或 comm 中有一个字段不是数值类型，那么会出错。</p><p>SELECT *,<br>sal+comm FROM emp;</p><p>comm 列有很多记录的值为 NULL，因为任何东西与 NULL 相加结果还是 NULL，所以结算结果可能会出现 NULL。下面使用了把 NULL 转换成数值 0 的函数 IFNULL：</p><p>SELECT *, sal+IFNULL(comm,0) FROM emp;</p><p>给列名添加别名</p><p>在上面查询中出现列名为 sal+IFNULL(comm,0)，这很不美观，现在我们给这一列给出一个别名，为 total：</p><p>SELECT *, sal+IFNULL(comm,0) AS total FROM emp;<br>给列起别名时，是可以省略 AS 关键字的：</p><p>SELECT *, sal+IFNULL(comm,0) total FROM emp;</p><h4 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h4><p>参考资料：</p><ol><li><a href="https://www.zhihu.com/tardis/zm/art/92654574?source_id=1005">通俗易懂的学会：SQL窗口函数</a></li></ol><h5 id="窗口函数应用场景"><a href="#窗口函数应用场景" class="headerlink" title="窗口函数应用场景"></a>窗口函数应用场景</h5><p>在日常工作中，经常会遇到需要<strong>在每组内排名</strong>，比如下面的业务需求：</p><blockquote><p><strong>排名问题：<strong>每个部门按业绩来排名</strong><br>       <strong>topN问题</strong>：找出每个部门排名前N的员工进行奖励</strong></p></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>窗口函数<span class="operator">&gt;</span> <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="operator">&lt;</span>用于分组的列名<span class="operator">&gt;</span></span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>用于排序的列名<span class="operator">&gt;</span>)</span><br><span class="line">                </span><br></pre></td></tr></table></figure><blockquote><p>&lt;窗口函数&gt;的位置，可以放以下两种函数：</p><p>1） 专用窗口函数，包括后面要讲到的rank, dense_rank, row_number等专用窗口函数。</p><p>2） 聚合函数，如sum. avg, count, max, min等</p><p>因为窗口函数是对where或者group by子句处理后的结果进行操作，所以窗口函数原则上只能写在select子句中。</p></blockquote><p><strong>窗口函数有以下功能：</strong></p><p>1）同时具有分组（partition by）和排序（order by）的功能</p><p>2）不减少原表的行数，所以经常用来在每组内排名</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006373.png" alt="image-20240905221424939"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262006254.png" alt="image-20240905221437164"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,</span><br><span class="line">   <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> 班级</span><br><span class="line">                 <span class="keyword">order</span> <span class="keyword">by</span> 成绩 <span class="keyword">desc</span>) <span class="keyword">as</span> ranking</span><br><span class="line"><span class="keyword">from</span> 班级表</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262009309.png" alt="image-20240905222107861"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007776.png" alt="image-20240905222135175"></p><p><strong>简单来说，窗口函数有以下功能：</strong></p><p>1）同时具有分组和排序的功能</p><p>2）不减少原表的行数</p><p>3）语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>窗口函数<span class="operator">&gt;</span> <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="operator">&lt;</span>用于分组的列名<span class="operator">&gt;</span></span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>用于排序的列名<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007609.png" alt="image-20240905222441114"></p><h5 id="聚合函数作为窗口函数"><a href="#聚合函数作为窗口函数" class="headerlink" title="聚合函数作为窗口函数"></a>聚合函数作为窗口函数</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007320.png" alt="image-20240905222532998"></p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL5.5版本之前使用的默认存储引擎是MyISAM，后续使用的是InnoDB，他们直接的区别就是：</p><ul><li>MyISAM不支持行级锁，该存储引擎一锁就锁住了整个表；</li><li>且不支持事务；</li><li>且不支持外键，尽管外键对于维护数据库中的一致性有非常好的作用，但是其性能的损耗太大，所以一般在实际的开发环境中是不建议使用外键的；</li><li>且不支持数据库崩溃后安全恢复，InnoDB是支持的，这都是基于redo log而完成的；</li><li>不支持MVCC（多版本并发控制）；</li><li>索引实现不一样，尽管他们两个都使用B+Tree作为其索引结构，</li></ul><p>存储引擎是插件式的，它可以为一个数据库中的不同的表指定不同的存储引擎，即存储引擎是基于表的</p><h3 id="一条SQL请求的执行顺序是什么？"><a href="#一条SQL请求的执行顺序是什么？" class="headerlink" title="一条SQL请求的执行顺序是什么？"></a>一条SQL请求的执行顺序是什么？</h3><p>前面了解了一个SQL查询语句的执行顺序，那么这里一个SQ请求的执行顺序是什么样的呢？</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503121453148.png" alt="image-20250312145326067"></p><h3 id="InnoDB于MyISAM存储引擎有哪些区别"><a href="#InnoDB于MyISAM存储引擎有哪些区别" class="headerlink" title="InnoDB于MyISAM存储引擎有哪些区别"></a>InnoDB于MyISAM存储引擎有哪些区别</h3><ul><li>事务：InnoDB 支持事务，MyISAM 不支持事务，这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一。 </li><li>索引结构：InnoDB 是聚簇索引，MyISAM 是非聚簇索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚簇索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li><li>锁粒度：InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。 </li><li>count 的效率：InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="请你介绍一下什么是索引"><a href="#请你介绍一下什么是索引" class="headerlink" title="请你介绍一下什么是索引"></a>请你介绍一下什么是索引</h3><p>索引类似于书籍的目录，可以减少扫描的数据量，提高查询效率。 </p><ul><li>如果查询的时候，没有用到索引就会全表扫描，这时候查询的时间复杂度是On</li><li>如果用到了索引，那么查询的时候，可以基于二分查找算法，通过索引快速定位到目标数据， mysql 索引的数据结构一般是 b+树，其搜索复杂度为O(logdN)，其中 d 表示节点允许的最大子节点个数为 d 个。</li></ul><h3 id="请你介绍一下索引的分类"><a href="#请你介绍一下索引的分类" class="headerlink" title="请你介绍一下索引的分类"></a>请你介绍一下索引的分类</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503121514919.png" alt="image-20250312151403870"></p><h3 id="请你介绍一下为什么选择B-Tree作为其索引数据结构呢"><a href="#请你介绍一下为什么选择B-Tree作为其索引数据结构呢" class="headerlink" title="请你介绍一下为什么选择B+Tree作为其索引数据结构呢"></a>请你介绍一下为什么选择B+Tree作为其索引数据结构呢</h3><p>首先针对于B+树的特性来进行介绍，B+树相对于B树，其非叶子结点不存储数据，那么该非叶子节点就有大量的空间保存其下行节点（键值对），即可以降低树的高度且减少硬盘的读取次数。</p><p>且叶子节点之间有指针互相连接，那么其天然的支持范围查询，其范围查询的效率会高很多。</p><p>B+树节点大小通常设置为磁盘块大小（如16KB），最大化单次I&#x2F;O读取的数据量。</p><h3 id="B-树是如何构建的"><a href="#B-树是如何构建的" class="headerlink" title="B+树是如何构建的"></a>B+树是如何构建的</h3><blockquote><h3 id="B-树插入与删除操作详解（以阶数m-3为例）"><a href="#B-树插入与删除操作详解（以阶数m-3为例）" class="headerlink" title="B+树插入与删除操作详解（以阶数m&#x3D;3为例）"></a>B+树插入与删除操作详解（以阶数m&#x3D;3为例）</h3><hr><h4 id="1-初始B-树结构"><a href="#1-初始B-树结构" class="headerlink" title="1. 初始B+树结构"></a><strong>1. 初始B+树结构</strong></h4><p>假设阶数m&#x3D;3（每个节点最多存储3个键，超过则分裂），初始树为空。<br><strong>插入顺序</strong>：依次插入键值 <code>5, 10, 15, 20, 25, 30, 35, 40</code>，观察分裂过程。</p><hr><h4 id="2-插入操作与节点分裂"><a href="#2-插入操作与节点分裂" class="headerlink" title="2. 插入操作与节点分裂"></a><strong>2. 插入操作与节点分裂</strong></h4><h5 id="2-1-插入5、10、15"><a href="#2-1-插入5、10、15" class="headerlink" title="2.1 插入5、10、15"></a><strong>2.1 插入5、10、15</strong></h5><p>• <strong>操作</strong>：依次插入 <code>5 → 10 → 15</code>。<br>• <strong>结果</strong>：单个叶子节点存储全部键值（未超过容量）。<br>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[叶子节点]</span><br><span class="line">┌────┬────┬────┐</span><br><span class="line">│ 5  │ 10 │ 15 │</span><br><span class="line">└────┴────┴────┘</span><br></pre></td></tr></table></figure></p><h5 id="2-2-插入20（触发分裂）"><a href="#2-2-插入20（触发分裂）" class="headerlink" title="2.2 插入20（触发分裂）"></a><strong>2.2 插入20（触发分裂）</strong></h5><p>• <strong>插入20</strong>：叶子节点键数超过3（4个键），需分裂。<br>• <strong>分裂规则</strong>：</p><ol><li>将中间键（第2个键，<code>15</code>）提升到父节点（此时父节点不存在，创建根节点）。</li><li>左子节点保留 <code>5, 10</code>，右子节点保留 <code>15, 20</code>。<br>• <strong>结构变化</strong>：</li></ol>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">          [根节点（非叶子）]</span><br><span class="line">                │</span><br><span class="line">                ▼</span><br><span class="line">          ┌───────┐</span><br><span class="line">          │  15   │</span><br><span class="line">          └───┬───┘</span><br><span class="line">              ├───────────┐</span><br><span class="line">              ▼           ▼</span><br><span class="line">[叶子节点1]          [叶子节点2]</span><br><span class="line">┌────┬────┐      ┌────┬────┐</span><br><span class="line">│ 5  │ 10 │      │ 15 │ 20 │</span><br><span class="line">└────┴────┘      └────┴────┘</span><br></pre></td></tr></table></figure><h5 id="2-3-插入25、30"><a href="#2-3-插入25、30" class="headerlink" title="2.3 插入25、30"></a><strong>2.3 插入25、30</strong></h5><p>• <strong>插入25 → 30</strong>：插入到叶子节点2，当前键数为 <code>15, 20, 25, 30</code>，触发分裂。<br>• <strong>分裂规则</strong>：</p><ol><li>中间键 <code>25</code> 提升到父节点。</li><li>左子节点保留 <code>15, 20</code>，右子节点保留 <code>25, 30</code>。<br>• <strong>结构变化</strong>：</li></ol>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          [根节点（非叶子）]</span><br><span class="line">          ┌───────┬───────┐</span><br><span class="line">          │  15   │  25   │</span><br><span class="line">          └───┬───┴───┬───┘</span><br><span class="line">              ▼       ▼       ▼</span><br><span class="line">[叶子1]   [叶子2]   [叶子3]</span><br><span class="line">┌──┬──┐  ┌──┬──┐  ┌──┬──┐</span><br><span class="line">│5 │10│  │15│20│  │25│30│</span><br><span class="line">└──┴──┘  └──┴──┘  └──┴──┘</span><br></pre></td></tr></table></figure><h5 id="2-4-插入35、40"><a href="#2-4-插入35、40" class="headerlink" title="2.4 插入35、40"></a><strong>2.4 插入35、40</strong></h5><p>• <strong>插入35 → 40</strong>：插入到叶子节点3，键数为 <code>25, 30, 35, 40</code>，触发分裂。<br>• <strong>分裂规则</strong>：</p><ol><li>中间键 <code>35</code> 提升到父节点。</li><li>左子节点保留 <code>25, 30</code>，右子节点保留 <code>35, 40</code>。<br>• <strong>结构变化</strong>：</li></ol>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          [根节点（非叶子）]</span><br><span class="line">      ┌───────┬───────┬───────┐</span><br><span class="line">      │  15   │  25   │  35   │</span><br><span class="line">      └───┬───┴───┬───┴───┬───┘</span><br><span class="line">          ▼       ▼       ▼       ▼</span><br><span class="line">[叶子1] [叶子2] [叶子3] [叶子4]</span><br><span class="line">┌──┬──┐┌──┬──┐┌──┬──┐┌──┬──┐</span><br><span class="line">│5│10││15│20││25│30││35│40│</span><br><span class="line">└──┴──┘└──┴──┘└──┴──┘└──┴──┘</span><br></pre></td></tr></table></figure><hr><h4 id="3-删除操作与节点合并-重新分配"><a href="#3-删除操作与节点合并-重新分配" class="headerlink" title="3. 删除操作与节点合并&#x2F;重新分配"></a><strong>3. 删除操作与节点合并&#x2F;重新分配</strong></h4><h5 id="3-1-删除15（直接删除）"><a href="#3-1-删除15（直接删除）" class="headerlink" title="3.1 删除15（直接删除）"></a><strong>3.1 删除15（直接删除）</strong></h5><p>• <strong>操作</strong>：删除叶子节点2中的键 <code>15</code>，剩余键为 <code>20</code>（未低于最小值 ⌈m&#x2F;2⌉-1&#x3D;1）。<br>• <strong>结果</strong>：无需合并，直接删除。<br>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[叶子2]</span><br><span class="line">┌────┐</span><br><span class="line">│ 20 │</span><br><span class="line">└────┘</span><br></pre></td></tr></table></figure></p><h5 id="3-2-删除25（触发重新分配）"><a href="#3-2-删除25（触发重新分配）" class="headerlink" title="3.2 删除25（触发重新分配）"></a><strong>3.2 删除25（触发重新分配）</strong></h5><p>• <strong>操作</strong>：删除叶子节点3中的键 <code>25</code>，剩余键为 <code>30</code>（不足1个键）。<br>• <strong>重新分配规则</strong>：  </p><ol><li>向兄弟节点（叶子4）借一个键 <code>35</code>，并更新父节点键为 <code>35</code> → <code>30</code>。  </li><li>叶子3和叶子4合并为 <code>30, 35, 40</code>（需调整父节点）。<br>• <strong>结构变化</strong>：</li></ol>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          [根节点（非叶子）]</span><br><span class="line">      ┌───────┬───────┐</span><br><span class="line">      │  15   │  30   │</span><br><span class="line">      └───┬───┴───┬───┘</span><br><span class="line">          ▼       ▼       ▼</span><br><span class="line">[叶子1] [叶子2] [叶子3-4合并]</span><br><span class="line">┌──┬──┐┌──┐┌──┬──┬──┐</span><br><span class="line">│5│10││20││30│35│40│</span><br><span class="line">└──┴──┘└──┘└──┴──┴──┘</span><br></pre></td></tr></table></figure><h5 id="3-3-删除5（触发合并）"><a href="#3-3-删除5（触发合并）" class="headerlink" title="3.3 删除5（触发合并）"></a><strong>3.3 删除5（触发合并）</strong></h5><p>• <strong>操作</strong>：删除叶子1中的键 <code>5</code>，剩余键为 <code>10</code>（仍满足最小值）。<br>• <strong>无需操作</strong>，直接删除：<br>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[叶子1]</span><br><span class="line">┌────┐</span><br><span class="line">│ 10 │</span><br><span class="line">└────┘</span><br></pre></td></tr></table></figure></p><h5 id="3-4-删除10（触发节点合并）"><a href="#3-4-删除10（触发节点合并）" class="headerlink" title="3.4 删除10（触发节点合并）"></a><strong>3.4 删除10（触发节点合并）</strong></h5><p>• <strong>操作</strong>：删除叶子1中的键 <code>10</code>，此时叶子1为空。<br>• <strong>合并规则</strong>：</p><ol><li>将相邻叶子节点（叶子2）的键 <code>20</code> 移动到父节点。  </li><li>合并叶子1和叶子2，删除父节点中的键 <code>15</code>。<br>• <strong>最终结构</strong>：</li></ol>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    [根节点（非叶子）]</span><br><span class="line">          │</span><br><span class="line">          ▼</span><br><span class="line">    ┌───────┐</span><br><span class="line">    │  30   │</span><br><span class="line">    └───┬───┘</span><br><span class="line">        ▼</span><br><span class="line">[合并后的叶子节点]</span><br><span class="line">┌──┬──┬──┬──┐</span><br><span class="line">│20│30│35│40│</span><br><span class="line">└──┴──┴──┴──┘</span><br></pre></td></tr></table></figure><hr><h4 id="4-关键机制总结"><a href="#4-关键机制总结" class="headerlink" title="4. 关键机制总结"></a><strong>4. 关键机制总结</strong></h4><table><thead><tr><th><strong>操作</strong></th><th><strong>触发条件</strong></th><th><strong>处理方式</strong></th></tr></thead><tbody><tr><td>插入</td><td>节点键数 &gt; m-1</td><td>分裂为两个节点，中间键提升到父节点</td></tr><tr><td>删除</td><td>节点键数 &lt; ⌈m&#x2F;2⌉-1</td><td>若兄弟节点可借键，则重新分配；否则合并节点</td></tr><tr><td>重新分配</td><td>兄弟节点有富余键（≥⌈m&#x2F;2⌉）</td><td>借一个键并更新父节点</td></tr><tr><td>合并</td><td>兄弟节点无富余键</td><td>合并两个节点，父节点删除对应键</td></tr></tbody></table><hr><h4 id="5-B-树操作对性能的影响"><a href="#5-B-树操作对性能的影响" class="headerlink" title="5. B+树操作对性能的影响"></a><strong>5. B+树操作对性能的影响</strong></h4><p>• <strong>插入分裂</strong>：<br>  可能导致父节点递归分裂，最坏情况树高增加，但概率极低（阶数通常较大）。<br>• <strong>删除合并</strong>：<br>  频繁合并可能增加碎片，但InnoDB通过填充因子（<code>innodb_fill_factor</code>）预留空间减少合并。<br>• <strong>平衡性</strong>：<br>  所有操作保证树高平衡，查询效率稳定在 ( O(\log_m n) )。</p><hr><p>通过以上示例，可以清晰理解B+树如何通过分裂和合并保持平衡，从而高效支持数据库的增删查改操作。</p></blockquote><hr><h2 id="MySQL进阶"><a href="#MySQL进阶" class="headerlink" title="MySQL进阶"></a>MySQL进阶</h2><h3 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h3><p>参考资料：<a href="https://mp.weixin.qq.com/s/QevKTIIadpguyWxm7od6SQ">美团二面拷打：MySQL中 SELECT 语句执行流程？</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007401.png" alt="image-20241008114828024"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262009368.png" alt="image-20241008114849197"></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在2024年9月24日面试中，面试官对MySQL事务进行了提问，但是我忘记了。为什么会忘记呢？首先对于MySQL事务的理解并不深，仅仅知识停留在了了解的层面上，对于其内在存在的逻辑，丝毫不明。所以就会出现今天看完好似懂了，但是明天再问就全都回答不上来了。所以接下来我要对这部分内容到达理解的地步。</p><h5 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h5><p>首先我们需要明白什么是事务？事务是一种概念，它可以存在MySQL中，也可以存在后端代码中，甚至是Redis中。事务就是一组操作，这组操作是严密相关的。一句话它们同生死，要么都成功要么都失败。</p><h5 id="为什么需要事务"><a href="#为什么需要事务" class="headerlink" title="为什么需要事务"></a>为什么需要事务</h5><p>我们都知道事务是一组操作的状态一致，那么这种状态一致是为了解决存在的什么问题呢？</p><p>举个栗子，转账是最经典的事务问题。A给B转账，A账户需要扣钱，B账户需要加钱，这就是一组操作，如果其中一个成功了就会导致数据库中的数据不一致！这就会出现很大的问题。</p><p>这就是事务存在的意义。</p><h5 id="事务有什么特点呢"><a href="#事务有什么特点呢" class="headerlink" title="事务有什么特点呢"></a>事务有什么特点呢</h5><p>通过事务的概念来看，要么都成功、要么都失败。很显然这组操作是不可分割的，我们称为<strong>原子性</strong>。</p><p>很好，这只是单线程的情况下，现在我们前往多线程。我们都知道事务是不可分割的，要么都成功要么都失败，那么在多线程情况下，线程A访问数据data，线程B也访问数据，他们的访问顺序不定，这就是高并发环境下的不确定。</p><p>我们也举个栗子，A读取了数据100，然后减去了50，但是A还没有保存到数据库中，线程B就开始执行。它也去读取了这个数据，因为A还没有提交，所以B读取的数据还是100.如果这时候B继续执行，并对这个数据进行操作和保存，那么如果A最终失败回滚，但是这数据已经错误，因为B已经基于错误的数据做了决策。这就是事务里面最困难的一点<strong>隔离性</strong>。</p><p>我们上面降到，如果事务中某一个出错了，需要回滚，那么它是怎么回滚的呢？那肯定就是读取之前保存的数据来覆盖就行了呀。所以这就需要一个特点<strong>持久性</strong>。</p><p>上面所有的操作都是为了保证最后一个特点，那么就是数据<strong>一致性</strong>。我们所有做的一切都是为了保证MySQL中的数据一致，不会出现错误。</p><p>我们通过分析得到了事务的四个特点，我们需要特别注意事务的隔离性。在接下来的面试中还是具体开发中，事务这一个概念涉及到最多的就是<strong>隔离性</strong>。</p><h5 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h5><p>在上面我们简单的介绍了一下事务的特点中的隔离性，但是这远远不够。我们假设现在是高并发的情况下，多个线程事务之间访问相同的数据，并对这个数据做读写操作，请问这会造成什么问题？</p><p>从上面简单的来看，很显然一个明显的特点就是，读取到了其它事务还没有提交的数据，就是这个数据被别的事务读取了甚至操作了，但是目前还不知道这个事务是否可以全部执行成功，。那么如果现在你去读取这个数据，那么就是读取到了可能会存在问题的数据，这就叫读取到了未提交的数据！这个也被称为<strong>脏读</strong>！</p><p>那么请问我该如何避免脏读呢？</p><p>解决办法，MySQL已经给出了。MySQL针对每一张表都可以设置这张表的隔离等级，不同的隔离等级可以解决不同程度下高并发带来的隔离性问题。</p><p>MySQL有四个隔离等级，分别是：读取未提交、读取已提交、可重复读和可串行化。这四个隔离等级是逐步升高。可能现在还记不住它，那么下面我们将逐步去介绍这些概念。</p><p>前面不是说到了脏读吗？脏读造成的主要原因不就是线程读取到了未提交的数据吗，所以我们只需要将事务等级改成读取已提交就可以避免线程去读取未提交的数据。</p><p>那这样的话，还需要下面可重复读和可串行两个事务等级做什么用呢？！很显然，在具体的开发中，读取已提交的数据还是会出现问题，但是会出现什么问题呢？</p><p>我实在无法真正理解不可重复读和幻读在实际场景中出现的问题，如果后续有理解了会更新。</p><p>按照概念来讲，<strong>不可重复读</strong>是高并发情况下会出现的问题。就是一个事务两个查询同一个数据不一致，这就叫做不可重复读。为什么叫不可重复读呢？因为两次读的不一样嘛，所以不让你重复读嘛。</p><p>那么什么是<strong>幻读</strong>呢？幻读其实也是一个事务中两次读取的数据不一致，但是跟不可重复读不一样的在于幻读变化的主要在新增情况下的变化，不可重复读主要在数据更改上。</p><p>将事务等级提高在可重复读就可以解决不可重复读问题，把事务等级提高到可串行化可以解决幻读问题，但是这样并发效果会降低。</p><p>那么为什么需要区别不可重复读和幻读之间的区别呢？这是因为MySQL事务在处理它们的方案不一样。</p><p>解决不可重复读就是直接对记录加锁，但是新增的话这样就锁不住了，这就造成了幻读咯。那么怎么解决新增加锁问题呢，方案是对ID加锁，叫做Next-Key Lock(Recoed Lock + Gap Lock)。具体是如何实现不太了解。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>事务简单的来说是数据库中的一组操作，这组操作具有一定的特殊性，所以技术人员将具有这组特殊性的操作称为事务。那么这特殊性特殊在哪里呢？即这组操作要么全部成功要么都失败，即这组操作是极度耦合。</p><p>一旦这组操作中的某个操作失败了，数据库就会回滚到这组操作之前的状态，即不会保留这组操作中某些正常执行的结果。</p><p>MySQL InnoDB 存储引擎的默认⽀持的隔离级别是 REPEATABLE-READ（可重读）</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>通过上面对事务概念的介绍，相信也能猜到事务的一些特点。</p><h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>首先就是原子性啦，这组操作要么都成功，要么都失败，即这组操作是不可分割的，那么我们借用原子这个名词来描述这一特性，就称为原子性；</p><h5 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h5><p>拿转账的例子来解释，A给B转了钱，那么A的账户就必须扣钱，B的账户必须加钱，这个状态必须一致；从这里可以看到原子性是一致性的前提，一致性是原子性的保障；</p><h5 id="隔离性-1"><a href="#隔离性-1" class="headerlink" title="隔离性"></a>隔离性</h5><p>隔离性是指在并发的环境下，不同的事务之间进行隔离，从而避免各种并发问题。</p><p>1. </p><h6 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h6><p>在这种级别下，一个事务可以读取其它事务未提交的数据，这种级别的事务等级会造成<strong>脏读</strong>。这个级别的并发性最高，但数据一致性最差。</p><p><strong>例子</strong>：</p><ul><li>事务A开始，读取账户1的余额为100元。</li><li>事务B开始，修改账户1的余额为200元，但未提交。</li><li>事务A再次读取账户1的余额，会看到200元，即使事务B还没有提交。这就是<strong>脏读</strong>。</li></ul><h6 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h6><p>在这种隔离级别下，一个事务只能读取到其他事务已经提交的数据。这解决了脏读的问题，但可能会产生不可重复读的问题。</p><p><strong>可能造成的问题：</strong></p><ul><li><p><strong>性能影响：</strong> 由于隔离级别非常严格，事务之间几乎不允许并发执行，这可能导致系统性能降低。</p></li><li><p><strong>例子：</strong></p><ol><li>事务A读取某个数据项的值为100。</li><li>事务B修改该数据项的值并提交，新的值为200。</li><li>事务A再次读取该数据项时，得到的是200，而不是最初读取的100。</li></ol><p><strong>示例：</strong> 假设事务A查询一个商品的库存量，得到的是50。此时事务B修改并提交库存量为30。当事务A再次查询库存量时，得到的是30，而不是最初读取的50，这就是不可重复读问题。</p></li></ul><h6 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h6><p>这<strong>是MySQL默认的隔离级别</strong>。在这种隔离级别下，一个事务在开始后，其读取的数据不会被其他事务的更新所影响，直到该事务结束。 <strong>保证一个事务在其生命周期内多次读取到的数据是一致的</strong>，<strong>但仍可能会有幻读问题</strong>。</p><p><strong>例子</strong>：</p><ul><li>事务A开始，读取账户1的余额为100元。</li><li>事务B开始，修改账户1的余额为200元，然后提交。</li><li>事务A再次读取账户1的余额，仍然会看到100元，因为它在事务开始时创建了一个数据的快照，即使其他事务提交了更新。</li></ul><h6 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h6><p>这是最高的隔离级别，它通过锁定涉及的数据行来避免并发问题，实际上是将事务串行执行。</p><p><strong>例子</strong>：</p><ul><li>事务A开始，读取账户1的余额为100元，并锁定该行。</li><li>事务B尝试读取或修改账户1的余额，会被阻塞，直到事务A结束并释放锁。</li><li>事务A结束，事务B才能继续执行。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007817.png" alt="image-20240909110054353"></p><h5 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h5><p>⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据 库发⽣故障也不应该对其有任何影响。</p><p>只有保证了事务的持久性、原⼦性、隔离性之后，⼀致性才能得到保障。 也就是说 A、I、D 是⼿段，C 是⽬的！</p><h4 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007138.png" alt="image-20240909103442559"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007592.png" alt="image-20240909104643321"></p><h5 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h5><p>出现幻读的原因是事务读取到了未提交的数据，依据这个原因，我们就得出了我们第一种方案。</p><p>方案一：设置数据库事务隔离级别为read committed，即只能读取已提交的数据；</p><h5 id="不可重复读-Non-Repeatable-read"><a href="#不可重复读-Non-Repeatable-read" class="headerlink" title="不可重复读(Non-Repeatable read)"></a>不可重复读(Non-Repeatable read)</h5><p>不可重复读简单的来说就是一个事务多次读取同一数据，发现该数据前后不一致而出现的问题。</p><p>把数据库事务隔离级别设置为可重复读Repeatable read。</p><h5 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h5><p>幻读：同意事务前后读取数据的总量不一致。</p><p>我们把数据库事务隔离级别设置成最高级：串行化来解决这个问题：serializable 。</p><p>但是这样就会导致数据库就变成了单线程访问的数据库，导致性能降低很多。</p><p>Isolation 属性一共支持五种事务设置，具体介绍如下：</p><p>DEFAULT： 使用数据库设置的隔离级别 ( 默认 ) ，由 DBA 默认的设置来决定隔离级别 .</p><p>READ_UNCOMMITTED： 会读到未提交的数据， 出现脏读、不可重复读、幻读 ( 隔离级别最低，并发性能高 )。</p><p>READ_COMMITTED： 不会读到未提交的数据，会出现不可重复读、幻读问题（锁定正在读取的行）</p><p>REPEATABLE_READ ：会出幻读（锁定所读取的所有行）</p><p>SERIALIZABLE ：保证所有的情况不会发生（锁表）。</p><h4 id="MySQL-的隔离级别是基于锁实现的吗"><a href="#MySQL-的隔离级别是基于锁实现的吗" class="headerlink" title="MySQL 的隔离级别是基于锁实现的吗"></a>MySQL 的隔离级别是基于锁实现的吗</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007610.png" alt="image-20240909110559001"></p><p><strong>MVCC</strong></p><blockquote><p>MVCC（Multi-Version Concurrency Control，多版本并发控制）是一种数据库的并发控制机制，允许多个事务并发执行，同时避免了锁机制带来的性能瓶颈和死锁问题。通过维护数据的多个版本，MVCC 可以使读操作不阻塞写操作，写操作也不阻塞读操作，从而提高并发性能。</p></blockquote><blockquote><h3 id="MVCC-的核心思想："><a href="#MVCC-的核心思想：" class="headerlink" title="MVCC 的核心思想："></a>MVCC 的核心思想：</h3><p>MVCC 机制在数据库中维护了每一行数据的多个版本，通常每行数据都会存储以下几个额外的信息：</p><ol><li><strong>版本号</strong>或<strong>事务ID</strong>：每次数据修改（INSERT、UPDATE、DELETE）时，数据库都会分配一个事务ID，作为该版本的标识。</li><li><strong>删除标记</strong>：标识该数据行是否被删除。</li><li><strong>开始版本号和结束版本号</strong>：记录该数据行何时被创建和何时失效（在被更新或删除时）。</li></ol><p>当一个事务查询数据时，它只会看到在当前事务开始时可见的版本，这样就保证了事务之间的隔离性。</p></blockquote><h4 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h4><p>在MySQL5.5版本之前默认使用存储引擎是MyISAM，之后MySQL默认的存储引擎是InnoDB。</p><p>MyISAM仅仅支持表级锁，顾名思义就是一锁就锁住整个表，很显然这样会导致并发性能很差，这也就是为什么在5.5版本之后舍弃该存储引擎换成InnoDB。</p><p>InnoDB支持行级锁，显然也支持表级锁，默认使用行级锁。⾏ 级锁的粒度更⼩，仅对相关的记录上锁即可（对⼀⾏或者多⾏记录加锁），所以对于并发写⼊操作来 说， InnoDB 的性能更⾼。</p><p><strong>行级锁</strong>：</p><ul><li>优点: 并发度高；</li><li>缺点：加锁开销大，可能会出现死锁；</li></ul><p>行级锁是基于表的索引进行加锁的，所以如果对于那些SQL没有命中索引或者索引失效的情况，就会锁住整个表</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007121.png" alt="image-20240909193523534"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007856.png" alt="image-20240909195036859"></p><h4 id="MySQL数据库的事务实现原理"><a href="#MySQL数据库的事务实现原理" class="headerlink" title="MySQL数据库的事务实现原理"></a>MySQL数据库的事务实现原理</h4><p>以MySQL 的InnoDB （InnoDB 是 MySQL 的⼀个存储引擎）为例，介绍⼀ 下单⼀数据库的事务实现原理。 InnoDB 是通过 ⽇志和锁 来保证的事务的 ACID特性，具体如下： </p><ul><li>（1）通过数据库锁的机制，保障事务的隔离性； </li><li>（2）通过 Redo Log（重做⽇志）来，保障事务的持久性； </li><li>（3）通过 Undo Log （撤销⽇志）来，保障事务的原⼦性； </li><li>（4）通过 Undo Log （撤销⽇志）来，保障事务的⼀致性；</li></ul><p><strong>Undo Log 如何保障事务的原⼦性呢？</strong> 具体的⽅式为：在操作任何数据之前，⾸先将数据备份到⼀个地⽅（这个 存储数据备份的地⽅称为 Undo Log），然后进⾏数据的修改。如果出现了 错误或者⽤户执⾏了 Rollback 语句，系统可以利⽤ Undo Log 中的备份将 数据恢复到事务开始之前的状态。 </p><p><strong>Redo Log如何保障事务的持久性呢？</strong> 具体的⽅式为：Redo Log 记录的是新数据的备份（和 Undo Log 相反）。 在事务提交前，只要将 Redo Log 持久化即可，不需要将数据持久化。当 系统崩溃时，虽然数据没有持久化，但是 Redo Log 已经持久化。系统可 以根据 Redo Log 的内容，将所有数据恢复到崩溃之前的状态。</p><p><strong>redo log（重做日志）</strong>：用于记录事务操作的日志，确保即使在数据库崩溃时，通过重做日志也能恢复数据。</p><p><strong>undo log（回滚日志）</strong>：用于记录撤销操作，以支持事务的回滚。undo log帮助在事务失败或显式回滚时，撤销已执行的操作，保持数据的一致性。</p><p><strong>锁机制</strong>：InnoDB实现了两种类型的锁机制：<strong>行级锁</strong>和<strong>表级锁</strong>。行级锁保证了高并发性能，而表级锁适用于大批量操作。</p><p><strong>MVCC（多版本并发控制）</strong>：InnoDB通过MVCC实现行级并发控制。它的关键机制是通过保存数据的多个版本来允许多个事务同时执行，避免锁定冲突，特别是在较低的隔离级别（如READ COMMITTED、REPEATABLE READ）下。</p><p>怎么说呢？MySQL事务的保证是基于MVCC来实现的，其中MVCC为多版本并发控制，其是如何具体来实现这个事务的呢？这就涉及到undo log和redo log两个非常重要的日志，通过这个日志和锁来保证其事务。</p><p>就那MySQL默认的可重复读这个默认的事务等级来说，在一个线程来修改这个数据时，其会将其老数据生成一个快照保存到undo log中，一方面为了其它线程可以读取老数据，这样就能够保证高并发。同时也是为了如果这个事务执行失败了，可以通过undo log来进行回滚。在事务执行成功后，其会采用两阶段提交提交的方式来持久化，首先会把这个事务结果写入redo log，然后再提交这个事务，这样这个数据才是真正的被写入了数据库中。通过上面的描述相信对MySQL中的事务有了更深层次的了解。</p><h3 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h3><p>2024年9月24日，面试，问了索引失效，很幸运，之前看了，很不幸，忘记了，无语ing。</p><p>主要原因还是没有真正的去理解索引这一个概念，所以今天晚上也就今天问的几个概念去真正的去理解一下。</p><p>要理解索引，首先就得知道什么是索引吧，那么什么是索引呢？</p><h4 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h4><p>索引就是一种数据结构，我们可以看成一本书的目录，这个目录记录着这个数据库中你创建索引下标的值，并且查询很快。</p><p>官方介绍索引是帮助MySQL<strong>高效获取数据</strong>的<strong>数据结构</strong>。更通俗的说，数据库索引好比是一本书前面的目录，能<strong>加快数据库的查询速度</strong>。</p><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>根据设定索引列上的类型进行划分，比如索引列上的值是否可以为空、是否可以重复，这样就分为：主键索引（不重复、不为空）、唯一索引（不重复、可以为空）、普通索引（无要求）、全文索引（文本类型，字段较长）、空间索引（几何数据）和前缀索引。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262009128.png" alt="image-20241014192208575"></p><p>MySQL 中的索引数据结构至关重要，影响查询性能。最常用的索引结构是 <strong>B+树</strong>，此外还有 <strong>哈希索引</strong>、<strong>全文索引</strong> 和 <strong>空间数据索引 (R-Tree)</strong>。</p><h4 id="索引的优势和劣势"><a href="#索引的优势和劣势" class="headerlink" title="索引的优势和劣势"></a>索引的优势和劣势</h4><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p>很显然，加快数据库访问速度。</p><h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><p>占空间，但是如果更新索引中的数据的话，更新速度就很慢。</p><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><p>参考资料：<a href="https://blog.csdn.net/weixin_46224056/article/details/137597431#:~:text=%E4%BB%8A%E5%A4%A9%E5%B0%B1%E8%B7%9F%E5%A4%A7%E5%AE%B6">索引失效的10种场景，你知道几个呢？（面试必刷!）</a></p><h5 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h5><p>最左匹配原则指的就是你在查询时的条件必须要从最左边的字段开始，否则就不会走索引。就是说如果直接查询B或者C还有其它都不会走索引。</p><p>不满足最左匹配原则的都会导致索引失效。</p><p>即在SQL语句中一定要有索引最左边的那个字段，没有也可以，Select 选用所有的索引字段也会走索引。</p><h5 id="使用了select"><a href="#使用了select" class="headerlink" title="使用了select *"></a>使用了select *</h5><p>使用了Select * 如果不符合最左匹配原则，显然索引也是一定会失效的。但是在一定的情况下可能会成功，就是明确查询得到的字段都是索引字段，那么这也是可以走索引查询的，查询条件就是具有索引中的字段。</p><h5 id="索引上有计算"><a href="#索引上有计算" class="headerlink" title="索引上有计算"></a>索引上有计算</h5><p>如果满足最左匹配原则，但是索引上有计算也会失效。这是因为索引建立的结构没有你运算之后的结果，它也就无法根据结果来直接查询到这个在哪里了。</p><h5 id="索引上有函数"><a href="#索引上有函数" class="headerlink" title="索引上有函数"></a>索引上有函数</h5><p>很显然，函数也是计算，索引失效</p><h5 id="字段类型不同"><a href="#字段类型不同" class="headerlink" title="字段类型不同"></a>字段类型不同</h5><p>如果索引中的类型是字符串类型，但是你在where中选择的类型是其它类型，就会导致索引无法适配，导致它认为你找的不是这个索引，就不会走索引了。</p><h5 id="like左边包含"><a href="#like左边包含" class="headerlink" title="like左边包含%"></a>like左边包含%</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> code <span class="keyword">like</span> <span class="string">&#x27;%1%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>索引就会失效，查询范围太大，无效。</p><p>其实很好理解，索引就像字典中的目录。一般目录是按字母或者拼音从小到大，从左到右排序，是有顺序的。</p><p>我们在查目录时，通常会先从左边第一个字母进行匹对，如果相同，再匹对左边第二个字母，如果再相同匹对其他的字母，以此类推。</p><p>通过这种方式我们能快速锁定一个具体的目录，或者缩小目录的范围。</p><h5 id="列对比"><a href="#列对比" class="headerlink" title="列对比"></a>列对比</h5><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007667.png" alt="image-20240924223117186"></p><h5 id="使用OR关键词"><a href="#使用OR关键词" class="headerlink" title="使用OR关键词"></a>使用OR关键词</h5><p>OR中如果存在一个不在索引内的字段，都会导致索引失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain SELECT del_flag FROM `mysql_table` WHERE NAME = &#x27;Siu Tin Wing&#x27; or  age = 1;</span><br></pre></td></tr></table></figure><p>这两个字段都建立了索引，但是最后却没有走索引：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007267.png" alt="image-20241014195345355"></p><p>如果 <code>NAME</code> 字段的唯一性较差（即重复值较多），或者 <code>age</code> 字段有大量相同值，MySQL 优化器可能会判断索引的使用效率不高。</p><h5 id="not-in和not-exists"><a href="#not-in和not-exists" class="headerlink" title="not in和not exists"></a>not in和not exists</h5><p>普通索引字段走not in会失效，但是主键索引走not in依旧有效</p><p>同样使用not exists索引也会失效</p><h5 id="使用-ORDER-BY-或-GROUP-BY-时的索引失效"><a href="#使用-ORDER-BY-或-GROUP-BY-时的索引失效" class="headerlink" title="使用 ORDER BY  或 GROUP BY 时的索引失效"></a>使用 <code>ORDER BY</code>  或 GROUP BY 时的索引失效</h5><p><code>ORDER BY</code> 对索引的要求比较严格，如果 <code>ORDER BY</code> 字段不是索引的最左前缀或包含了非索引字段，索引会失效。</p><ul><li><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制代码SELECT * FROM users WHERE id = 1 ORDER BY name; -- 索引生效</span><br><span class="line">SELECT * FROM users ORDER BY name; -- 索引失效</span><br></pre></td></tr></table></figure></li><li><p><strong>原因</strong>：<code>ORDER BY</code> 字段必须与 <code>WHERE</code> 中使用的索引字段一致，MySQL才能高效使用索引，否则会进行文件排序（file sort）。</p></li><li><p><strong>解决方法</strong>：尽量保证 <code>ORDER BY</code> 中的字段与 <code>WHERE</code> 中的索引字段匹配，或者在 <code>ORDER BY</code> 字段上创建独立的索引。</p></li></ul><p>与 <code>ORDER BY</code> 类似，<code>GROUP BY</code> 也要求索引字段符合最左前缀匹配规则，否则会导致索引失效。</p><h4 id="查看是否使用了索引"><a href="#查看是否使用了索引" class="headerlink" title="查看是否使用了索引"></a>查看是否使用了索引</h4><p>24年9月25日上午面试，又问了索引，但是没有问索引失效的情况，而是问了如何查看是否使用了索引。很不幸，昨天刚刚看了对explain有点影响，但是不确定，没打出来。</p><p>答案就是使用EXPLAIN关键字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> A, B, C <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> B<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> A<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>面试已经不止一次问过了，但是每一次的问题都千奇百怪，实在不能忍了。现在这里结合一个实战来看看这个索引是什么？它怎么会出现问题，以及有什么问题。</p><p>现在我们有一个表，字段有id，name，phone，del_flag，age，url，其中有10万条数据。</p><p>现在我们先不建立索引，来执行一下这条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain SELECT * FROM `mysql_table` WHERE age = 10;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007749.png" alt="image-20241014190806851"></p><p>其中看到type字段显示该SQL走的是全局查找，没有走索引。<strong>数据库中的B+Tree索引可以分为聚集索引（clustered index）和辅助索引（secondary index）</strong>。</p><h3 id="慢SQL"><a href="#慢SQL" class="headerlink" title="慢SQL"></a>慢SQL</h3><h4 id="慢SQL定位"><a href="#慢SQL定位" class="headerlink" title="慢SQL定位"></a>慢SQL定位</h4><p>参考资料：<a href="https://blog.csdn.net/laodanqiu/article/details/131423834">【MySQL高级】MySQL找出执行慢的SQL【慢查询日志使用与分析】</a></p><p>在众多的对数据库查询的语句中我们得先要知道我们的敌人是谁把，所以我们需要定位到哪些SQL对于我们来说是慢的。慢SQL没有绝对只有相对，我们称某些SQL执行的时间超过了我们设定的阈值时，我们就称该SQL为慢SQL。那么现在的问题就是如何定位到慢SQL呢？答案就是日志。</p><p>我们需要打开数据库的慢查询日志，MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</p><ul><li>long_query_time的默认值为10，意思是运行10秒以上的语句</li><li>由慢查询日志来查看哪些SQL超出了我们的最大忍耐时间值，比如一条SQL执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒钟的SQL，结合之前explain进行全面分析</li></ul><h4 id="慢SQL优化"><a href="#慢SQL优化" class="headerlink" title="慢SQL优化"></a>慢SQL优化</h4><p>针对慢查询，我们可以从以下几个方面进行优化：</p><ul><li><strong>SQL语句优化：检查SQL语句是否可以通过修改查询条件、连接顺序、子查询等方式进行优化。</strong></li><li><strong>索引优化：确保查询中涉及的字段都已经被正确索引，并考虑使用复合索引、全文索引等高级索引特性。</strong></li><li><strong>表结构优化：考虑是否可以通过拆分表、合并表、修改数据类型等方式优化表结构。</strong></li><li>查询缓存：利用MySQL的查询缓存功能，缓存经常执行的查询结果，减少数据库访问次数。</li><li>硬件和配置优化：考虑增加内存、使用更快的磁盘、调整MySQL配置参数等方式提高数据库性能。</li></ul><p>一般来说问题都会集中在第一到第三条，所以我们重点对前面三条问题进行分析和解决。</p><h5 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h5><p>我们首先从业务侧来分析一下，业务侧书写的SQL是否存在一定的问题。</p><p>我们需要的是优质的SQL，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007842.png" alt="image-20241008105111414"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262007392.png" alt="image-20241008105134406"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262010284.png" alt="image-20241008105155886"></p><h4 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h4><h5 id="1-分析查询：EXPLAIN-诊断查询计划"><a href="#1-分析查询：EXPLAIN-诊断查询计划" class="headerlink" title="1. 分析查询：EXPLAIN 诊断查询计划"></a>1. <strong>分析查询：EXPLAIN 诊断查询计划</strong></h5><p>首先，使用 <code>EXPLAIN</code> 查看查询的执行计划，了解 MySQL 优化器如何执行查询：</p><p><strong>type: range</strong>：查询根据 <code>order_date</code> 和 <code>status</code> 扫描范围。</p><p><strong>key: user_id</strong>：使用了 <code>user_id</code> 的索引。</p><p><strong>rows: 100,000</strong>：扫描大量数据，可能需要优化。</p><h5 id="2-优化索引：组合索引"><a href="#2-优化索引：组合索引" class="headerlink" title="2.优化索引：组合索引"></a>2.<strong>优化索引：组合索引</strong></h5><p>当前查询中，<code>user_id</code>、<code>status</code> 和 <code>order_date</code> 是过滤条件，但这些条件使用了多个独立的索引，可能导致性能下降。我们可以为这些字段创建一个<strong>组合索引</strong>来加速查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制代码</span><br><span class="line">CREATE INDEX idx_user_status_date ON orders (user_id, status, order_date);</span><br></pre></td></tr></table></figure><p>组合索引可以让 MySQL 一次性过滤掉大部分数据，而不是分别利用多个索引。</p><h5 id="3-覆盖索引"><a href="#3-覆盖索引" class="headerlink" title="3.覆盖索引"></a><strong>3.覆盖索引</strong></h5><p>如果在查询中使用的所有字段都能通过索引获取，那么 MySQL 可以直接从索引中返回数据，无需访问数据行。这就是<strong>覆盖索引</strong>的概念。</p><h5 id="4-WHERE-条件优化"><a href="#4-WHERE-条件优化" class="headerlink" title="4.WHERE 条件优化"></a><strong>4.WHERE 条件优化</strong></h5><ul><li><strong>范围查询 (<code>BETWEEN</code>)</strong>：MySQL在处理<code>BETWEEN</code>或其他范围查询时，会限制索引的有效性。确保范围查询字段在索引的最后一列，避免影响其他条件的索引使用顺序。</li><li><strong>避免函数操作</strong>：不要对索引列使用函数或表达式，否则会导致索引失效。例如：</li></ul><h5 id="5-ORDER-BY-优化"><a href="#5-ORDER-BY-优化" class="headerlink" title="5.ORDER BY 优化"></a><strong>5.ORDER BY 优化</strong></h5><ul><li><strong>索引支持排序</strong>：查询中的 <code>ORDER BY total_price DESC</code> 需要确保在索引的最后一列是排序列。如果查询的 <code>WHERE</code> 条件和 <code>ORDER BY</code> 可以同时由同一个索引支持，MySQL 可以避免额外的排序操作。</li></ul><h5 id="6-LIMIT-优化"><a href="#6-LIMIT-优化" class="headerlink" title="6.LIMIT 优化"></a><strong>6.LIMIT 优化</strong></h5><p>在查询返回大数据量时，<code>LIMIT</code> 是非常有用的优化手段。假设你只需要查看前 100 条记录，可以添加 <code>LIMIT</code> 来减少 MySQL 返回的行数：</p><h5 id="7-减少-SELECT-的使用"><a href="#7-减少-SELECT-的使用" class="headerlink" title="7.减少 SELECT * 的使用"></a><strong>7.减少 SELECT * 的使用</strong></h5><p>避免使用 <code>SELECT *</code>，只选择查询需要的字段。这不仅减少了网络传输量，也使得 MySQL 可以更快处理查询。在此案例中，我们仅查询 <code>order_id</code>、<code>user_id</code>、<code>total_price</code> 和 <code>order_date</code>，而不是返回所有列。</p><h3 id="MySQL执行顺序"><a href="#MySQL执行顺序" class="headerlink" title="MySQL执行顺序"></a>MySQL执行顺序</h3><ol><li><strong>FROM</strong>：首先确定要查询的表或视图，并从这些表中读取数据。如果有 <code>JOIN</code>，这个阶段也会处理表连接。</li><li><strong>ON</strong>：如果存在连接条件，在 <code>JOIN</code> 的过程中，先基于 <code>ON</code> 条件进行表之间的连接操作。</li><li><strong>JOIN</strong>：根据表的连接类型（如 INNER JOIN、LEFT JOIN）进行数据的连接。</li><li><strong>WHERE</strong>：对已经连接的数据进行过滤，只保留满足 <code>WHERE</code> 条件的记录。</li><li><strong>GROUP BY</strong>：对 <code>WHERE</code> 过滤后的数据进行分组。</li><li><strong>HAVING</strong>：对分组后的结果进行过滤，类似于 <code>WHERE</code>，但它作用于分组后的结果。</li><li><strong>SELECT</strong>：确定要返回的列和计算的表达式。执行时此步骤也会对列进行投影。</li><li><strong>DISTINCT</strong>：在 <code>SELECT</code> 的基础上进行去重操作。</li><li><strong>ORDER BY</strong>：对最终的结果集进行排序。</li><li><strong>LIMIT &#x2F; OFFSET</strong>：限制返回的行数或从特定行开始返回数据。</li></ol><h3 id="为什么说MySQL行数超过了2000W行后效率就不好了呢"><a href="#为什么说MySQL行数超过了2000W行后效率就不好了呢" class="headerlink" title="为什么说MySQL行数超过了2000W行后效率就不好了呢"></a>为什么说MySQL行数超过了2000W行后效率就不好了呢</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262008409.png" alt="image-20241014211833033"></p><h2 id="MySQL面试题"><a href="#MySQL面试题" class="headerlink" title="MySQL面试题"></a>MySQL面试题</h2><h3 id="第一次面试"><a href="#第一次面试" class="headerlink" title="第一次面试"></a>第一次面试</h3><h4 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h4><ul><li><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522DCFAC641-E438-4EE3-ACC8-12BE1118731A%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187">MySQL常见面试题(2024年最新)</a></li></ul><h4 id="Promote"><a href="#Promote" class="headerlink" title="Promote"></a>Promote</h4><blockquote><p>现在假设你是一个经验丰富的Java后端面试官，现在请问我对于下面的这个回答正确吗？请你特别注意题目是什么？因为我回答的可能完全不对！请你为我打分（10分制），并且给出这个面试题的正确补充。</p></blockquote><h4 id="1-char和varchar的区别"><a href="#1-char和varchar的区别" class="headerlink" title="1.char和varchar的区别"></a><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%7B%22request_id%22:%22DCFAC641-E438-4EE3-ACC8-12BE1118731A%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187#1charvarchar_3">1.char和varchar的区别</a></h4><blockquote><p>我：</p><p>char在MySQL数据中表示固定长度的字符串，即只能保存指定长度的字符串，如果没有达到指定长度，会进行自动填充，如果超过会自动截断超过部分；</p><p>varchar表示不定长度的字符串，但是varchar会设定一个最大长度，数据库中保存的最长字符串不能超过这个最大长度，如果超过会自动截断超过部分的字符。</p></blockquote><blockquote><p>补充：</p><p>整体上正确。</p><p><strong>存储方式</strong>：</p><ul><li><strong><code>CHAR</code></strong>：<code>CHAR</code> 是定长字符串，MySQL 会自动将存储的数据填充到指定长度，比如你定义 <code>CHAR(10)</code>，无论你存储的是 <code>5</code> 个字符还是 <code>8</code> 个字符，MySQL 都会填充空格，使其总长度达到 <code>10</code>。这些空格在检索数据时会被自动删除。</li><li><strong><code>VARCHAR</code></strong>：<code>VARCHAR</code> 是变长字符串，存储的数据长度是实际的字符数加上用于记录长度的额外字节数。对于 <code>VARCHAR</code>，MySQL 不会进行填充，因此数据占用的存储空间较为紧凑。</li></ul><p><strong>空间效率</strong>：</p><ul><li><strong><code>CHAR</code></strong>：由于是定长，即使存储的数据较短，依然会占用完整的定义空间。因此，对于较短的字符串或长度固定的数据使用 <code>CHAR</code> 可能会浪费空间。</li><li><strong><code>VARCHAR</code></strong>：<code>VARCHAR</code> 是变长的，它仅根据实际存储的数据分配空间，更加节省存储空间。</li></ul><p><strong>性能</strong>：</p><ul><li><strong><code>CHAR</code></strong>：由于是固定长度，数据的检索和比较速度会比 <code>VARCHAR</code> 稍快一些，特别是对于经常变化的短数据，比如状态码、固定长度的标识符等，<code>CHAR</code> 的表现会更好。</li><li><strong><code>VARCHAR</code></strong>：因为是变长字符串，每次处理数据时，MySQL 需要计算字符串的长度，这可能会影响性能。对于较长的文本，<code>VARCHAR</code> 更灵活，但在性能上可能不如 <code>CHAR</code>。</li></ul><p><strong>最大长度限制</strong>：</p><ul><li><strong><code>CHAR</code></strong>：最大长度为 255 字节。</li><li><strong><code>VARCHAR</code></strong>：根据字符集的不同，<code>VARCHAR</code> 最多可以存储 65,535 字节的数据。不过，最大长度还受限于行的最大长度（65535 字节），并且 <code>VARCHAR</code> 还会占用 1 或 2 字节来存储字符串的长度。</li></ul></blockquote><h4 id="2-数据库的三大范式"><a href="#2-数据库的三大范式" class="headerlink" title="2.数据库的三大范式"></a><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%7B%22request_id%22:%22DCFAC641-E438-4EE3-ACC8-12BE1118731A%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187#2_8">2.数据库的三大范式</a></h4><blockquote><p>分别为第一范式、第二范式和第三范式；</p><p>第一范式指的是表中的每一列都是不可再分的；</p><p>第二范式指的是在第一范式的基础上消除了非主属性对码的部分依赖；</p><p>第三范式在第二范式的基础上消除了非主属性对码的传递函数依赖；</p></blockquote><blockquote><h3 id="评分：7-10"><a href="#评分：7-10" class="headerlink" title="评分：7&#x2F;10"></a>评分：7&#x2F;10</h3><h3 id="需要补充的内容："><a href="#需要补充的内容：" class="headerlink" title="需要补充的内容："></a>需要补充的内容：</h3><ol><li><strong>第一范式（1NF）</strong>：<ul><li>你提到“每一列都是不可再分的”，这是正确的，但可以更详细说明。例如，表中每个字段应包含原子值（不可分割的最小单位），确保没有重复组或多值列。</li><li>示例：一个电话字段不能同时包含多个电话号码。</li></ul></li><li><strong>第二范式（2NF）</strong>：<ul><li>你提到的“消除非主属性对码的部分依赖”是准确的，但可以解释“码”是什么意思，并具体说明“部分依赖”。</li><li>进一步解释：如果一个表有复合主键，那么所有非主属性必须完全依赖于整个主键，而不能仅依赖于主键的一部分。</li><li>示例：如果一个学生选课表用“学生ID”和“课程ID”作为复合主键，课程名称不能仅依赖于“课程ID”，否则就违反了第二范式。</li></ul></li><li><strong>第三范式（3NF）</strong>：<ul><li>你提到的“消除非主属性对码的传递函数依赖”是正确的。建议补充说明传递依赖的概念，即如果属性 A 依赖于属性 B，属性 B 又依赖于主键，那么 A 应该直接依赖于主键而非通过 B。</li><li>示例：学生表中，如果“班级ID”依赖于“学生ID”，而“班级名称”依赖于“班级ID”，这就构成了传递依赖，应将班级信息拆分到单独的表中。</li></ul></li></ol></blockquote><h4 id="3-你了解sql的执行顺序吗？"><a href="#3-你了解sql的执行顺序吗？" class="headerlink" title="3.你了解sql的执行顺序吗？"></a><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%7B%22request_id%22:%22DCFAC641-E438-4EE3-ACC8-12BE1118731A%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187#3sql_13">3.你了解sql的执行顺序吗？</a></h4><blockquote><p>是的，比较了解。</p><p>就比如一个查询语句来说，它会先根据from来找到对应的表，然后根据where得到对应查询到的数据，如果存在group by，则会根据具体的内容进行分组，然后如果存在having，则会根据having的要求得到分组之后的结果；</p><p>之后就是根据limit来截取得到的结果范围，然后根据select来返回其需要查询对应的列的值。</p></blockquote><blockquote><h3 id="评分：6-10"><a href="#评分：6-10" class="headerlink" title="评分：6&#x2F;10"></a>评分：6&#x2F;10</h3><h3 id="问题与改进建议："><a href="#问题与改进建议：" class="headerlink" title="问题与改进建议："></a>问题与改进建议：</h3><ol><li><strong>执行顺序不准确</strong>：<ul><li>你的回答提到了执行步骤中的 <code>FROM</code>、<code>WHERE</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>LIMIT</code> 和 <code>SELECT</code>，但实际的SQL执行顺序与写法的顺序是不同的。</li><li>你提到 <code>LIMIT</code> 出现在 <code>HAVING</code> 之后，这是不对的，<code>LIMIT</code> 是在 <code>ORDER BY</code> 后执行。</li></ul></li><li><strong>漏掉了 <code>JOIN</code> 和 <code>ORDER BY</code></strong>：<ul><li>你的回答没有提及 <code>JOIN</code> 和 <code>ORDER BY</code>，这些步骤在SQL查询中也非常重要，特别是在复杂查询中。</li></ul></li></ol><h3 id="补充正确的SQL执行顺序："><a href="#补充正确的SQL执行顺序：" class="headerlink" title="补充正确的SQL执行顺序："></a>补充正确的SQL执行顺序：</h3><p>SQL 查询的执行顺序如下（与编写顺序不同）：</p><ol><li><strong>FROM</strong>：首先确定要查询的表或视图，并从这些表中读取数据。如果有 <code>JOIN</code>，这个阶段也会处理表连接。</li><li><strong>ON</strong>：如果存在连接条件，在 <code>JOIN</code> 的过程中，先基于 <code>ON</code> 条件进行表之间的连接操作。</li><li><strong>JOIN</strong>：根据表的连接类型（如 INNER JOIN、LEFT JOIN）进行数据的连接。</li><li><strong>WHERE</strong>：对已经连接的数据进行过滤，只保留满足 <code>WHERE</code> 条件的记录。</li><li><strong>GROUP BY</strong>：对 <code>WHERE</code> 过滤后的数据进行分组。</li><li><strong>HAVING</strong>：对分组后的结果进行过滤，类似于 <code>WHERE</code>，但它作用于分组后的结果。</li><li><strong>SELECT</strong>：确定要返回的列和计算的表达式。执行时此步骤也会对列进行投影。</li><li><strong>DISTINCT</strong>：在 <code>SELECT</code> 的基础上进行去重操作。</li><li><strong>ORDER BY</strong>：对最终的结果集进行排序。</li><li><strong>LIMIT &#x2F; OFFSET</strong>：限制返回的行数或从特定行开始返回数据。</li></ol><h3 id="正确的例子："><a href="#正确的例子：" class="headerlink" title="正确的例子："></a>正确的例子：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sql复制代码SELECT DISTINCT name, AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department = &#x27;IT&#x27;</span><br><span class="line">GROUP BY name</span><br><span class="line">HAVING AVG(salary) &gt; 5000</span><br><span class="line">ORDER BY AVG(salary) DESC</span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure><p>执行顺序：</p><ol><li><code>FROM employees</code></li><li><code>WHERE department = &#39;IT&#39;</code></li><li><code>GROUP BY name</code></li><li><code>HAVING AVG(salary) &gt; 5000</code></li><li><code>SELECT DISTINCT name, AVG(salary)</code></li><li><code>ORDER BY AVG(salary) DESC</code></li><li><code>LIMIT 10</code></li></ol></blockquote><h4 id="4-索引是什么"><a href="#4-索引是什么" class="headerlink" title="4.索引是什么"></a><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%7B%22request_id%22:%22DCFAC641-E438-4EE3-ACC8-12BE1118731A%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187#4_33">4.索引是什么</a></h4><blockquote><p>我不太清楚什么是索引，我大概想索引在MySQL数据中根据其索引值可以快速的进行检索，索引应该为整型，如果该字段是个索引，数据库则会为索引进行处理，后续如果进行查询该字段，会更快。</p></blockquote><blockquote><h3 id="评分：4-10"><a href="#评分：4-10" class="headerlink" title="评分：4&#x2F;10"></a>评分：4&#x2F;10</h3><h3 id="问题与改进建议：-1"><a href="#问题与改进建议：-1" class="headerlink" title="问题与改进建议："></a>问题与改进建议：</h3><ol><li><strong>索引不局限于整型</strong>：<ul><li>你提到“索引应该为整型”，这是不对的。索引可以建立在不同的数据类型上，不仅限于整型，还包括字符串、日期等类型。</li></ul></li><li><strong>索引的实现与数据结构</strong>：<ul><li>索引的本质是为提高查询效率，数据库内部通常通过特定的数据结构（如 B+树 或 哈希表）来实现索引。</li><li>MySQL 的 <code>InnoDB</code> 存储引擎主要使用 B+树作为默认的索引结构，你可以在回答中提及这一点，以展示更深的理解。</li></ul></li><li><strong>索引并不是总会提高性能</strong>：<ul><li>虽然索引可以加速查询，但它也有代价，例如插入、更新和删除操作时，索引也会带来额外的维护开销。过多或不合理的索引可能会影响性能。</li></ul></li></ol><h3 id="补充正确的答案："><a href="#补充正确的答案：" class="headerlink" title="补充正确的答案："></a>补充正确的答案：</h3><h4 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h4><p>索引是数据库中一种用于<strong>提高数据查询效率的机制</strong>。它可以类比为书本中的目录，通过索引，你可以快速定位到数据的位置，而不用遍历整张表。常见的索引类型有：</p><ol><li><strong>①普通索引：</strong> 基本索引类型，允许定义索引的字段为空值和重复值。</li><li><strong>②唯一索引：</strong> 索引的值必须唯一，允许定义索引的字段为空值。</li><li><strong>③主键索引：</strong> 索引的值必须唯一，不可以为空。</li><li><strong>④复合索引：</strong> 多个字段加索引，遵守最左匹配规则。</li><li><strong>⑤全局索引：</strong> 只有在 MyISAM 引擎上才能使用。</li></ol><h3 id="索引的优点："><a href="#索引的优点：" class="headerlink" title="索引的优点："></a>索引的优点：</h3><ul><li>提高 <code>SELECT</code> 查询的性能，尤其是在涉及到 <code>WHERE</code>、<code>ORDER BY</code> 和 <code>JOIN</code> 操作时。</li></ul><h3 id="索引的缺点："><a href="#索引的缺点：" class="headerlink" title="索引的缺点："></a>索引的缺点：</h3><ul><li>会增加数据插入、更新、删除的时间开销，因为索引需要在这些操作时进行维护和更新。</li><li>占用额外的存储空间。</li><li>索引也是一个文件，所以会占用空间。</li><li>降低更新的速度，因为不光要更新数据，还要更新索引。</li></ul></blockquote><h4 id="7-索引怎么设计-优化"><a href="#7-索引怎么设计-优化" class="headerlink" title="7.索引怎么设计(优化)"></a><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%7B%22request_id%22:%22DCFAC641-E438-4EE3-ACC8-12BE1118731A%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187#7_51">7.索引怎么设计(优化)</a></h4><blockquote><p>对于表中某些经常需要修改的字段来说不应设置索引，因为经常的更新会导致其数据库效率降低；</p><p>索引应该设置在那些读操作很多的表中的不常更新的字段上。</p></blockquote><blockquote><ol><li><ul><li><p>你的回答提到了索引设计中的一些基本原则，尤其是关于读写操作频繁程度对索引的影响，这部分是正确的，但内容略显简单。下面我会为你打分并给出进一步的补充建议。</p><h3 id="评分：7-10-1"><a href="#评分：7-10-1" class="headerlink" title="评分：7&#x2F;10"></a>评分：7&#x2F;10</h3><h3 id="改进建议："><a href="#改进建议：" class="headerlink" title="改进建议："></a>改进建议：</h3><ol><li><p><strong>索引的创建不仅取决于读写频率</strong>：</p><ul><li>虽然你提到频繁更新的字段不应该创建索引是正确的，但索引的设计还需要考虑查询模式、表的大小、索引类型等因素。</li></ul></li><li><p><strong>多列索引与单列索引的选择</strong>：</p><ul><li>在索引设计中，经常需要考虑是否使用多列组合索引，尤其是在涉及多个查询条件时，合理设计多列索引可以避免全表扫描，提高性能。</li></ul></li><li><p><strong>覆盖索引（Covering Index）</strong>：</p><ul><li>当查询中的所有字段都被包含在索引中时，MySQL 可以只通过扫描索引来完成查询，而不需要访问数据表。这个概念在索引优化中非常重要。</li></ul></li><li><p><strong>索引前缀（Prefix Index）</strong>：</p><ul><li>对于长文本或字符串字段，可以只对前几位进行索引，这样既可以节省空间又能够提高查询效率。</li></ul></li></ol><h3 id="正确的补充回答："><a href="#正确的补充回答：" class="headerlink" title="正确的补充回答："></a>正确的补充回答：</h3><h4 id="索引设计的原则："><a href="#索引设计的原则：" class="headerlink" title="索引设计的原则："></a>索引设计的原则：</h4><ol><li><p><strong>选择性高的列上创建索引</strong>：</p><ul><li>索引应该创建在选择性高的列上，所谓选择性是指列中唯一值的比例。选择性越高，索引的效率越高，因为它能更快缩小查询范围。</li><li>例如，对某个唯一性高的字段（如用户ID）创建索引能够大幅提高查询效率。</li></ul></li><li><p><strong>避免对频繁更新的字段创建索引</strong>：</p><ul><li>你的回答正确地指出，频繁更新的字段不应创建索引，因为每次更新都需要维护索引，影响写操作的效率。</li></ul></li><li><p><strong>使用复合索引（Multi-column Index）</strong>：</p><ul><li>对多个查询条件经常一起使用的情况，可以创建复合索引，而不是多个单列索引。比如对查询 <code>WHERE name = &#39;John&#39; AND age = 30</code>，可以创建 <code>(name, age)</code> 的复合索引。</li><li>注意索引的顺序，MySQL 使用最左前缀匹配原则，意味着索引顺序很重要，应该将查询中使用最频繁的列放在索引的最前面。</li></ul></li><li><p><strong>覆盖索引</strong>：</p><ul><li>尽量设计“覆盖索引”，即查询所需的所有字段都在索引中，MySQL 就不需要去查询数据表，从而提升查询效率。</li><li>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age_salary <span class="keyword">ON</span> employees(name, age, salary);</span><br></pre></td></tr></table></figure>如果你的查询是 <code>SELECT name, age, salary FROM employees WHERE name = &#39;John&#39;</code>, MySQL 可以只通过索引查询，不需要访问原始数据表。</li></ul></li><li><p><strong>前缀索引</strong>：</p><ul><li>对于较长的文本字段，可以使用前缀索引来节省空间。例如：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_email <span class="keyword">ON</span> users(email(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>这种做法可以在只查询电子邮件前10个字符时仍然保持较好的性能。</li></ul></li><li><p><strong>避免对低选择性字段创建索引</strong>：</p><ul><li>像 <code>gender</code> 这种低选择性的字段，选择只有几个值（如’男’和’女’）的列，不适合创建索引，因为它无法有效过滤大量记录。</li></ul></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>你的回答包含了基础原则，但可以通过更深的索引设计策略来优化回答，特别是复合索引、覆盖索引等高级概念。</li></ul></li></ul></li></ol></blockquote><blockquote><ol><li>①选择唯一性索引：值是唯一的，查询的更快。</li><li>②经常作为查询条件的字段加索引。</li><li>③为经常需要排序、分组和联合操作的字段建立索引：order by、group by、union(联合)、distinct(去重)等。</li><li>④限制索引个数：索引数量多，需要的磁盘空间就越多，更新表时，对索引的重构和更新就很费劲。</li><li>⑤表数据少的不建议使用索引(百万级以内)：数据过少，有可能查询的速度，比遍历索引的速度都快。</li><li>⑥删除不常用和不再使用的索引。</li><li>⑦用类型小的类型做索引：比如：int和BIGINT能用int就使用int。因为类型小，查询速度快和索引占用的空间更少。</li><li>⑧使用前缀索引，要是字符串越长，那么索引占的空间越大，并且比较起来就时间就越长。</li></ol></blockquote><h4 id="8-怎么避免索引失效-也属于sql优化的一种"><a href="#8-怎么避免索引失效-也属于sql优化的一种" class="headerlink" title="8.怎么避免索引失效(也属于sql优化的一种)"></a><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%7B%22request_id%22:%22DCFAC641-E438-4EE3-ACC8-12BE1118731A%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187#8sql_62">8.怎么避免索引失效(也属于sql优化的一种)</a></h4><blockquote><p>没了解过</p></blockquote><blockquote><p>你的回答没有展现出对索引失效的理解，这在技术面试中是个减分项，特别是如果你已经有一定的工作经验。避免索引失效是SQL优化的一个关键点，深入理解这个问题并提供清晰的解释会展现出你对数据库优化的掌握程度。接下来，我会为你打分并给出正确的答案补充。</p><h3 id="评分：3-10"><a href="#评分：3-10" class="headerlink" title="评分：3&#x2F;10"></a>评分：3&#x2F;10</h3><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ol><li><p><strong>回答过于简单</strong>：</p><ul><li>直接回答“没了解过”虽然诚实，但也会给面试官留下你缺乏基础知识的印象，尤其是在数据库优化方面。</li></ul></li><li><p><strong>缺乏探索性思维</strong>：</p><ul><li>在面试中，即使你不完全掌握某个问题，展示出对这个领域的理解和思考过程会给你加分。</li></ul></li></ol><h3 id="补充的正确回答："><a href="#补充的正确回答：" class="headerlink" title="补充的正确回答："></a>补充的正确回答：</h3><h4 id="如何避免索引失效？"><a href="#如何避免索引失效？" class="headerlink" title="如何避免索引失效？"></a>如何避免索引失效？</h4><p>索引失效意味着数据库在查询时没有使用可用的索引，从而导致全表扫描，降低查询效率。避免索引失效是SQL优化的一个重要部分，以下是几种常见的避免索引失效的方法：</p><ol><li><p><strong>避免在 <code>WHERE</code> 子句中的索引列进行函数或表达式操作</strong>：</p><ul><li>当你对索引列进行函数操作（例如 <code>WHERE UPPER(name) = &#39;JOHN&#39;</code>），索引会失效，因为MySQL不能直接使用索引来过滤数据。</li><li>正确做法：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>避免在 <code>WHERE</code> 子句中使用隐式类型转换</strong>：</p><ul><li>如果索引列是字符串类型，但你在查询时使用了整数或其他数据类型，MySQL 会进行隐式类型转换，导致索引失效。</li><li>错误示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> phone_number <span class="operator">=</span> <span class="number">1234567890</span>;  <span class="comment">-- phone_number 是字符串类型</span></span><br></pre></td></tr></table></figure></li><li>正确做法：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> phone_number <span class="operator">=</span> <span class="string">&#x27;1234567890&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>LIKE</code> 查询时避免以 <code>%</code> 开头</strong>：</p><ul><li>在使用 <code>LIKE</code> 查询时，如果通配符 <code>%</code> 出现在开头，索引会失效，因为MySQL无法确定匹配的起始位置。</li><li>错误示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%John&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>正确做法：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;John%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用复合索引时遵循最左前缀法则</strong>：</p><ul><li>如果你在复合索引中查询时没有从第一个索引列开始使用，索引会失效。</li><li>假设你有 <code>(name, age)</code> 的复合索引，以下查询会失效：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;  <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure></li><li>正确的使用方式是：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">30</span>;  <span class="comment">-- 索引有效</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>避免使用 <code>OR</code> 导致索引失效</strong>：</p><ul><li>使用 <code>OR</code> 时，除非 <code>OR</code> 两边的条件字段都有索引，否则会导致索引失效。</li><li>错误示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">30</span>;  <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure></li><li>正确做法是：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> (name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">30</span>);  <span class="comment">-- 使用索引</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>避免使用过多的索引</strong>：</p><ul><li>索引虽然能提高查询效率，但维护索引也会增加写操作的开销。如果一个表的更新频率很高，索引太多反而会拖慢写入速度。因此，需要合理权衡索引的数量。</li></ul></li></ol><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>为了避免索引失效，应该避免对索引列做不必要的操作，并且要遵循索引的设计规则（如最左前缀法则）。掌握这些技巧不仅能提升查询效率，还能帮助你在数据库优化方面展示出更高的水平。</p></blockquote><blockquote><ol><li>①某列使用范围查询(&gt;、&lt;、like、between and)时, 右边的所有列索引也会失效。</li><li>②不要对索引字段进行运算。</li><li>③在where子句中不要使用 OR、!&#x3D;、&lt;&gt;和对值null的判断。</li><li>④避免使用’%’开头的like的模糊查询。</li><li>⑤字符串不加单引号，造成索引失效。</li></ol></blockquote><h4 id="9-索引的数据类型"><a href="#9-索引的数据类型" class="headerlink" title="9.索引的数据类型"></a><a href="https://blog.csdn.net/twotwo22222/article/details/129115194?ops_request_misc=%7B%22request_id%22:%22DCFAC641-E438-4EE3-ACC8-12BE1118731A%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=DCFAC641-E438-4EE3-ACC8-12BE1118731A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129115194-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=MySQL%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187#9_69">9.索引的数据类型</a></h4><blockquote><p>索引的数据类型有：整型、字符串类型、日期类型、布尔型。</p></blockquote><blockquote><p>你的回答虽然提到了一些常见的字段类型，但实际问题是关于“索引的数据类型”，而不是“索引所使用的字段类型”。在MySQL中，索引本身并没有“数据类型”，而是基于字段的类型来创建的。因此，你的回答并未准确回答问题。以下是对你回答的评分和正确的解释。</p><h3 id="评分：4-10-1"><a href="#评分：4-10-1" class="headerlink" title="评分：4&#x2F;10"></a>评分：4&#x2F;10</h3><h3 id="评分说明："><a href="#评分说明：" class="headerlink" title="评分说明："></a>评分说明：</h3><ol><li><strong>正确性</strong>：你提到的字段类型（整型、字符串类型、日期类型、布尔型）确实是常见的字段类型，可以用于索引。但是，索引的“数据类型”这一问题没有被正确回答。</li><li><strong>相关性</strong>：虽然提到的字段类型和索引相关，但并不直接回答索引的类型或如何根据字段类型设计索引。</li></ol><h3 id="正确答案补充："><a href="#正确答案补充：" class="headerlink" title="正确答案补充："></a>正确答案补充：</h3><h4 id="MySQL中索引的类型："><a href="#MySQL中索引的类型：" class="headerlink" title="MySQL中索引的类型："></a>MySQL中索引的类型：</h4><p>在MySQL中，索引没有“数据类型”，而是根据字段的数据类型来创建的。不过，MySQL支持以下几种主要的索引类型：</p><ol><li><p><strong>B-Tree 索引</strong>：</p><ul><li><strong>描述</strong>：这是最常见的索引类型，适用于大多数类型的查询，特别是范围查询。</li><li><strong>适用数据类型</strong>：整型、字符串类型、日期类型等。</li><li><strong>实现</strong>：通过B-Tree（平衡树）结构来存储索引。</li></ul></li><li><p><strong>哈希索引</strong>：</p><ul><li><strong>描述</strong>：哈希索引适用于精确匹配查询（&#x3D;），但不支持范围查询。</li><li><strong>适用数据类型</strong>：整型、字符串类型等。</li><li><strong>实现</strong>：使用哈希表来存储索引。</li><li><strong>注意</strong>：InnoDB存储引擎在某些情况下（如Memory引擎的表）支持哈希索引。</li></ul></li><li><p><strong>全文索引（Full-Text Index）</strong>：</p><ul><li><strong>描述</strong>：用于全文搜索，适用于文本数据。</li><li><strong>适用数据类型</strong>：通常为字符串类型（如 <code>TEXT</code>、<code>VARCHAR</code>）。</li><li><strong>实现</strong>：通过倒排索引来加速全文搜索查询。</li></ul></li><li><p><strong>空间索引（Spatial Index）</strong>：</p><ul><li><strong>描述</strong>：用于空间数据（如地理信息系统中的地理数据）。</li><li><strong>适用数据类型</strong>：空间数据类型（如 <code>GEOMETRY</code>、<code>POINT</code>）。</li><li><strong>实现</strong>：使用R-Tree（矩形树）来存储索引。</li></ul></li><li><p><strong>前缀索引</strong>：</p><ul><li><strong>描述</strong>：对于长字符串类型的数据，可以索引字符串的一部分（前缀），从而减少索引的大小。</li><li><strong>适用数据类型</strong>：字符串类型（如 <code>VARCHAR</code>）。</li><li><strong>实现</strong>：仅对字段的前几个字符建立索引。</li></ul></li></ol><h4 id="其他注意事项："><a href="#其他注意事项：" class="headerlink" title="其他注意事项："></a>其他注意事项：</h4><ul><li><strong>唯一索引（Unique Index）</strong>：确保索引列的值唯一。</li><li><strong>复合索引（Composite Index）</strong>：索引多个列，优化多个列联合查询的性能。</li></ul><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><p>理解索引的类型和如何根据字段的数据类型选择合适的索引类型，是数据库设计和优化的重要部分。确保回答中明确区分索引的类型与字段的类型，以便在面试中提供准确和相关的信息。</p></blockquote><blockquote><ul><li><strong>Hash：</strong> 查询时调用Hash函数获得地址，回表查询实际数据。(InnoDB和MylSAM不支持，Memory支持)。</li><li><strong>B+树：</strong> 每次从根节点出发去查询，然后得到地址，回表查询实际数据。</li></ul></blockquote><h4 id="10-索引为什么使用树结构"><a href="#10-索引为什么使用树结构" class="headerlink" title="10.索引为什么使用树结构"></a>10.索引为什么使用树结构</h4><blockquote><p>因为树的结构可以快速的把问题分解，可以非常有效的加快数据的查询速度。</p><p>树的结构可以把一个大问题分而治之，极大的降低了复杂度。</p></blockquote><blockquote><p>你的回答对“为什么索引使用树结构”这一问题给出了一些基本的理由，但没有深入说明树结构的具体优势以及为何它特别适用于数据库索引。以下是对你回答的评分及详细补充。</p><h3 id="评分：5-10"><a href="#评分：5-10" class="headerlink" title="评分：5&#x2F;10"></a>评分：5&#x2F;10</h3><h3 id="评分说明：-1"><a href="#评分说明：-1" class="headerlink" title="评分说明："></a>评分说明：</h3><ol><li><strong>正确性</strong>：你的回答在某种程度上是正确的，因为树结构确实有助于提高查询效率，但回答过于笼统，未能详细阐述树结构的具体优势。</li><li><strong>详细程度</strong>：未涉及树结构的具体类型（如B-Tree）的细节和它们如何改善索引性能。</li></ol><h3 id="正确答案补充：-1"><a href="#正确答案补充：-1" class="headerlink" title="正确答案补充："></a>正确答案补充：</h3><h4 id="为什么索引使用树结构"><a href="#为什么索引使用树结构" class="headerlink" title="为什么索引使用树结构"></a>为什么索引使用树结构</h4><ol><li><p><strong>高效的查找性能</strong>：</p><ul><li><strong>B-Tree（平衡树）</strong>：在MySQL中，最常用的索引结构是B-Tree（平衡树）。B-Tree能够保持数据的有序性，并且每个节点有多个子节点，使得查找操作的复杂度保持在对数级别O(log N)。这种结构支持高效的范围查询和排序操作。</li><li><strong>R-Tree（矩形树）</strong>：用于空间数据（如地理信息系统中的数据）。R-Tree支持高效的多维范围查询，非常适合处理空间数据。</li></ul></li><li><p><strong>分层结构</strong>：</p><ul><li>树结构的分层特性使得查询能够通过逐层访问来减少需要检查的数据量。例如，在B-Tree中，每一层都将数据分割成更小的子集，从而快速缩小搜索范围。</li></ul></li><li><p><strong>动态平衡</strong>：</p><ul><li><strong>自平衡</strong>：B-Tree是一种自平衡的树结构，确保所有叶子节点都在同一深度，从而使得查找操作的时间复杂度保持在O(log N)。</li><li><strong>插入和删除</strong>：树结构支持高效的插入和删除操作，同时保持树的平衡，从而不会显著降低查询性能。</li></ul></li><li><p><strong>减少磁盘I&#x2F;O</strong>：</p><ul><li><strong>索引页和节点</strong>：树结构的索引通常分为多个页或节点，这样可以将大量数据分布在多个页中，而不是在一个大块中存储。这种设计减少了磁盘I&#x2F;O，因为查询时只需要访问少量的页或节点。</li><li><strong>缓存效率</strong>：树结构能利用缓存，减少磁盘访问次数，从而提高查询速度。</li></ul></li><li><p><strong>支持多种操作</strong>：</p><ul><li><strong>范围查询</strong>：树结构特别适合范围查询（如找出介于两个值之间的所有记录），因为它能够快速定位到起始值和结束值之间的数据。</li><li><strong>排序和聚合</strong>：树结构支持高效的排序操作，因为数据已经按顺序存储。</li></ul></li></ol><h3 id="总结：-3"><a href="#总结：-3" class="headerlink" title="总结："></a>总结：</h3><p>树结构（尤其是B-Tree）因其高效的查找、插入、删除和范围查询操作，成为数据库索引的主要选择。树的层级结构和自平衡特性能够有效提高数据访问的效率，同时减少磁盘I&#x2F;O，提高整体性能。理解这些细节可以帮助你在面试中提供更深入的回答。</p></blockquote><blockquote><p>因为可以加快查询效率，而且可以保持有序。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>65 切面AOP</title>
      <link href="/2025/02/26/65%20%E5%88%87%E9%9D%A2AOP/"/>
      <url>/2025/02/26/65%20%E5%88%87%E9%9D%A2AOP/</url>
      
        <content type="html"><![CDATA[<h1 id="65-切面AOP"><a href="#65-切面AOP" class="headerlink" title="65 切面AOP"></a>65 切面AOP</h1><h2 id="切面基础概念"><a href="#切面基础概念" class="headerlink" title="切面基础概念"></a>切面基础概念</h2><ul><li>AOP：Aspect Oriented Programming，面向切面编程。是通过预编译方式（aspectj）或者<strong>运行期动态代理</strong>（Spring）实现程序功能的统一维护的技术。</li></ul><blockquote><p>面试问题：<br>Spring的两大核心是什么：IoC和AOP<br>分别有什么作用<br>IoC：控制反转，目的用于解耦，底层使用的技术是反射+工厂模式<br>AOP：面向切面编程，目的是在不修改目标对象源码的情况下，进行功能增强，底层使用的是动态代理技术</p></blockquote><ul><li>AOP作用：不修改源码的情况下，进行功能增强，通过动态代理实现的；</li><li>AOP的底层是通过<strong>动态代理</strong>实现的。在运行期间，通过代理技术动态生成代理对象，代理对象方法执行时进行功能的增强介入，再去调用目标方法，从而完成功能增强。</li></ul><blockquote><ul><li>常用的动态代理技术有：<ul><li>JDK的动态代理：基于接口实现的</li><li>cglib的动态代理：基于子类实现的</li></ul></li><li>Spring的AOP采用了哪种代理方式？<ul><li>如果目标对象有接口，就采用JDK的动态代理技术</li><li>如果目标对象没有接口，就采用cglib技术</li></ul></li></ul></blockquote><ul><li><p>AOP相关概念</p><ul><li><p>目标对象(Target)：要代理的&#x2F;要增强的目标对象。</p></li><li><p>代理对象(Proxy)：目标对象被AOP织入增强后，就得到一个代理对象</p></li><li><p>连接点(JoinPoint)：能够被拦截到的点，在Spring里指的是方法。能增强的方法</p></li><li><p>切入点(PointCut)：要对哪些连接点进行拦截的定义。要增强的方法</p></li><li><p>通知&#x2F;增强(Advice)：拦截到连接点之后要做的事情。如何增强，额外添加上去的功能和能力</p></li><li><p>切面(Aspect)：是切入点和通知的结合。 告诉Spring的AOP：要对哪个方法，做什么样的增强</p></li><li><p>织入(Weaving)：把增强&#x2F;通知 应用到 目标对象来创建代理对象的过程</p></li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262014138.png" alt="image-20241009192332682" style="zoom: 25%;" /><ul><li>AOP通知类型<ul><li>@Before 前置通知 通知方法会在目标方法之前执行</li><li>@After 后置通知 通知方法会在目标方法之后执行</li><li>@Around 环绕通知 可以在目标方法之前和之后执行，可以更改方法执行之后的结果，自主性最大，需要掌握</li><li>@AfterReturning 通知方法将在目标方法正常结束之后执行</li><li>@AfterThrowing 通知方法会在目标方法爆出异常之后执行</li></ul></li></ul><h2 id="切面失效"><a href="#切面失效" class="headerlink" title="切面失效"></a>切面失效</h2><p>通过上面的认识我们了解到AOP是基于动态代理来实现的，通过动态代理生成代理对象来达到对目标对象相关方法增强的目的。但是会有一些情况导致AOP失效。所以为了AOP能够正常调用，就得需要通过代理对象进行调用。</p><h3 id="非Spring管理的对象"><a href="#非Spring管理的对象" class="headerlink" title="非Spring管理的对象"></a>非Spring管理的对象</h3><p>Spring的AOP只能拦截由Spring容器管理的Bean对象。如果您使用了非受Spring管理的对象，则AOP将无法对其进行拦截</p><h3 id="同一个Bean内部方法调用"><a href="#同一个Bean内部方法调用" class="headerlink" title="同一个Bean内部方法调用"></a>同一个Bean内部方法调用</h3><p>如果一个Bean内部的方法直接调用同一个Bean内部的另一个方法，AOP将无法拦截这个内部方法调用。因为AOP是基于代理的，只有通过代理对象才能触发AOP拦截。</p><p>这是因为 AOP 无法拦截 <code>method2()</code> 的直接调用，而只能拦截通过代理对象触发的方法调用。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a><a href="https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020">静态方法</a></h3><p>Spring的AOP只能拦截非静态方法。如果您尝试拦截静态方法，AOP将无法生效。</p><h3 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h3><p>AOP无法拦截final方法。final方法是不可重写的，因此AOP无法生成代理对象来拦截这些方法。</p><p>直接在对象内部调用方法：如果您直接在对象内部调用方法而不通过代理对象，AOP将无法拦截。因此，建议始终通过代理对象调用方法以确保AOP的生效。</p><h3 id="异步方法"><a href="#异步方法" class="headerlink" title="异步方法"></a><a href="https://so.csdn.net/so/search?q=%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020">异步方法</a></h3><p>对于使用Spring的异步特性（如@Async注解）的方法，AOP拦截器可能无法正常工作。这是因为异步方法在运行时会创建新的线程或使用线程池，AOP拦截器无法跟踪到这些新线程中的方法调用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>以下几种情况会导致AOP失效：</strong></p><ul><li>非Spring管理的对象</li><li>私有方法调用</li><li>静态方法调用</li><li>final方法调用</li><li>类内部自调用</li><li>内部类方法调用</li><li>异步方法</li></ul><h2 id="切面应用"><a href="#切面应用" class="headerlink" title="切面应用"></a>切面应用</h2><p>为了更好对AOP的使用有更深的了解，这里我们以下面这个场景进行实现：</p><blockquote><p>现在在项目中有一些接口需要进行权限校验，即某些用户是无权访问这个接口的，如果无权限应进行拦截。同时这个接口很重要，应该避免某些人员进行恶意的刷接口，所以我们需要对这个接口进行防刷。对某些恶意刷的IP进行封禁，并进行限流，请你基于AOP来完成这个功能。</p></blockquote><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>那么我们首先就需要写一个注解，来标识这种需要进行处理的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckPermission &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里介绍一下元注解的概念</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p><strong>中文翻译为保留的意思，标明自定义注解的生命周期。</strong></p><p>从编写Java代码到运行主要周期为源文件→ Class文件 → 运行时数据，@Retention则标注了自定义注解的信息要保留到哪个阶段，分别对应的value取值为SOURCE →CLASS→RUNTIME。</p><ol><li>SOURCE 源代码java文件，生成的class文件中就没有该信息了</li><li>CLASS class文件中会保留注解，但是jvm加载运行时就没有了</li><li>RUNTIME 运行时，如果想使用反射获取注解信息，则需要使用RUNTIME，反射是在运行阶段进行反射的</li><li>示例：当RentionPolicy取值为SOURCE时，Class文件中不会保留注解信息，而取值为CLASS时，Class反编译文件中则保留了注解的信息</li></ol><blockquote><ol><li>Source：一个最简单的用法，就是自定义一个注解例如@ThreadSafe，用来标识一个类时线程安全的，就和注释的作用一样，不过更引人注目罢了。</li><li>Class：这个有啥用呢？个人觉得主要是起到标记作用，还没有做实验，例如标记一个@Proxy，JVM加载时就会生成对应的代理类。</li><li>Runtime：反射实在运行阶段执行的，那么只有Runtime的生命周期才会保留到运行阶段，才能被反射读取，也是我们最常用的。</li></ol></blockquote><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>中文翻译为<strong>目标</strong>，描述自定义注解的使用范围，允许自定义注解标注在哪些Java元素上(类、方法、属性、局部属性、参数…)</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262014633.png" alt="image-20241009183033698"></p><h3 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> SecurityAspect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 权限校验 限流 防刷 AOP切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-10-09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于记录每个IP的请求时间戳，用于限流</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Long&gt;&gt; requestTimestamps = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于封禁IP的列表</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; bannedIps = ConcurrentHashMap.newKeySet();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限流阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_REQUESTS</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">// 最多允许的请求次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIME_WINDOW_MS</span> <span class="operator">=</span> <span class="number">10</span> * <span class="number">1000</span>; <span class="comment">// 时间窗口，10秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切入点 指定被注解CheckPermission标记的就是连接点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.fang.screw.communal.annotation.CheckPermission)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkPermission</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 对连接点进行业务扩展 进行鉴权 限流 防刷等操作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> proceedingJoinPoint</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Object &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/9</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Around(&quot;checkPermission()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doPermissionCheck</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes())).getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        <span class="type">UserPO</span> <span class="variable">userPO</span> <span class="operator">=</span> CurrentUserHolder.getUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查IP是否被封禁</span></span><br><span class="line">        <span class="keyword">if</span> (bannedIps.contains(ipAddress)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.failed(<span class="string">&quot;该IP已被封禁，请稍后再试！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非超级管理员不可以访问该接口</span></span><br><span class="line">        <span class="keyword">if</span> (userPO.getUserType() != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.failed(<span class="string">&quot;无访问权限！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 限流机制</span></span><br><span class="line">        <span class="keyword">if</span> (isRequestTooFrequent(ipAddress)) &#123;</span><br><span class="line">            bannedIps.add(ipAddress);  <span class="comment">// 封禁该IP</span></span><br><span class="line">            log.warn(<span class="string">&quot;IP &#123;&#125; 被封禁，因短时间内过多请求&quot;</span>, ipAddress);</span><br><span class="line">            <span class="keyword">return</span> R.failed(<span class="string">&quot;请求过于频繁，请稍后再试！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 判断请求是否过于频繁</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ipAddress</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> boolean &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/10/9</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isRequestTooFrequent</span><span class="params">(String ipAddress)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        requestTimestamps.putIfAbsent(ipAddress, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        List&lt;Long&gt; timestamps = requestTimestamps.get(ipAddress);</span><br><span class="line"></span><br><span class="line">        timestamps.add(currentTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理超过时间窗口的请求</span></span><br><span class="line">        timestamps.removeIf(timestamp -&gt; currentTime - timestamp &gt; TIME_WINDOW_MS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> timestamps.size() &gt; MAX_REQUESTS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.service.BankService.transfer(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Before 通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;transferPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBeforeTransfer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Before] Starting transfer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Around 通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;transferPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logAroundTransfer</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Around] Before proceeding with transfer...&quot;</span>);</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行目标方法</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;[Around] Transfer completed successfully.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[Around] Exception during transfer: &quot;</span> + throwable.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// After 通知</span></span><br><span class="line">    <span class="meta">@After(&quot;transferPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logAfterTransfer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[After] Transfer process finished.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="权限注解的使用"><a href="#权限注解的使用" class="headerlink" title="权限注解的使用"></a>权限注解的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 查询分类文章List</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> PoetryResult&lt;Map&lt;Integer,List&lt;ArticleVO&gt;&gt;&gt; &#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2024/9/22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@CheckPermission</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getListSortArticle&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Map&lt;Integer, List&lt;ArticleVO&gt;&gt;&gt; <span class="title function_">getListSortArticle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.getListSortArticle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62 加密算法</title>
      <link href="/2025/02/26/62%20%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2025/02/26/62%20%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="62-加密算法"><a href="#62-加密算法" class="headerlink" title="62 加密算法"></a>62 加密算法</h1><p>三种加密算法分类：</p><ul><li>对称加密：密钥只有一个，解密、解密都是这个密码，加解密速度快，典型的对称加密有<strong>DES</strong>、<strong>AES</strong>、<strong>RC4</strong>等</li><li>非对称加密：密钥成对出现，分别为公钥和<a href="https://so.csdn.net/so/search?q=%E7%A7%81%E9%92%A5&spm=1001.2101.3001.7020">私钥</a>，从公钥无法推知私钥，反之，从私钥也无法推知公钥，加密和解密使用不同的密钥，公钥加密需要私钥解密，反之，私钥加密需要公钥解密。非对称加密速度较慢，典型的非对称算法有：<strong>RSA,DSA,DSS</strong>.</li><li>Hash算法：这是一种不可逆的算法，它常用于验证数据的完整性。</li></ul><p>针对拥有密钥的数量来分类，发送方和接收方拥有一样的密钥，用这个密钥进行加密解密的话就是对称加密。如果拥有两个密钥的话，分为私钥和公钥</p><h2 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h2><p>摘要算法是一类用于生成固定长度的摘要或哈希值的算法，其核心目的是将任意长度的数据通过计算转化为一个简短的唯一标识符（摘要）。摘要算法的主要特性包括：</p><ol><li><strong>固定长度输出</strong>：无论输入数据的长度多长，摘要算法都会输出固定长度的哈希值，例如MD5生成128位的哈希值，SHA-256生成256位的哈希值。</li><li><strong>高效性</strong>：摘要算法的计算速度通常很快，即使面对大规模数据，生成哈希值的过程也十分高效。</li><li><strong>不可逆性</strong>：摘要算法是单向的，无法从哈希值逆向推导出原始数据。这使得摘要算法在密码学中常用于数据的完整性校验和数字签名。</li><li><strong>抗碰撞性</strong>：好的摘要算法应该很难找到两个不同的输入数据产生相同的哈希值，这种特性称为抗碰撞性。常见的摘要算法包括MD5、SHA-1、SHA-256等。</li></ol><p><strong>摘要算法简单的来说就是无论输入多长都会将输入加密成指定长度的哈希值。</strong></p><h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><p>准确来讲，<strong>MD5不是一种加密算法</strong>，而是一种<strong>摘要算法</strong>，MD5能将明文输出为128bits的字符串，这个<strong>字符串是无法再被转换成明文的</strong>。所以说如果使用了MD5加密之后的字符串是无法通过密文得到其原来的明文的。这种摘要算法一般用于数字签名、密码储存和数据完整性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成MD5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(str.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            result = md.digest();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseByte2HexStr(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将二进制转换成十六进制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseByte2HexStr</span><span class="params">(<span class="type">byte</span> buf[])</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buf.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(buf[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hex = <span class="string">&#x27;0&#x27;</span> + hex;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(hex.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MD5 md5=<span class="keyword">new</span> <span class="title class_">MD5</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;测试test&quot;</span>;</span><br><span class="line">        System.out.println(md5.encode(content));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SHA1算法"><a href="#SHA1算法" class="headerlink" title="SHA1算法"></a>SHA1算法</h3><p>SHA1也是和MD5类似的<strong>信息摘要算法</strong>，但是它比MD5更加安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SHA1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">            md.update(str.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="type">byte</span>[] digest = md.digest();</span><br><span class="line">            <span class="keyword">return</span> byteToHexString(digest);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">byteToHexString</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(Hex.encodeHex(bytes));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SHA1</span> <span class="variable">sha1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SHA1</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;测试test&quot;</span>;</span><br><span class="line">        System.out.println(sha1.encode(content));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p>AES代表<strong>Advanced Encryption Standard</strong>，即高级加密标准。AES是很常见的<strong>对称加密算法</strong>，所谓对称加密，就是<strong>通过密钥加密后可以再通过密钥解密</strong>。这里需要注意的是密钥十分重要，如果密钥丢失，就有信息泄漏的风险。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AES</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将传入的明文转换为密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str,String pwd)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">KeyGenerator</span> <span class="variable">kgen</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> SecureRandom.getInstance(<span class="string">&quot;SHA1PRNG&quot;</span>);</span><br><span class="line">            random.setSeed(pwd.getBytes());</span><br><span class="line">            kgen.init(<span class="number">128</span>, random);</span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> kgen.generateKey();</span><br><span class="line">            <span class="type">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(enCodeFormat, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建密码器</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">            <span class="type">byte</span>[] byteContent = str.getBytes();</span><br><span class="line">            result = cipher.doFinal(byteContent);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parseByte2HexStr(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将传入的密文转换为明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String str,String pwd)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">byte</span>[] content = parseHexStr2Byte(str);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">KeyGenerator</span> <span class="variable">kgen</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> SecureRandom.getInstance(<span class="string">&quot;SHA1PRNG&quot;</span>);</span><br><span class="line">            random.setSeed(pwd.getBytes());</span><br><span class="line">            kgen.init(<span class="number">128</span>, random);</span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> kgen.generateKey();</span><br><span class="line">            <span class="type">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(enCodeFormat, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建密码器</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">            result = cipher.doFinal(content);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将二进制转换成十六进制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseByte2HexStr</span><span class="params">(<span class="type">byte</span> buf[])</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buf.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(buf[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hex = <span class="string">&#x27;0&#x27;</span> + hex;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(hex.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将十六进制转换为二进制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] parseHexStr2Byte(String hexStr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hexStr.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[hexStr.length() / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hexStr.length() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> Integer.parseInt(hexStr.substring(i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> Integer.parseInt(hexStr.substring(i * <span class="number">2</span> + <span class="number">1</span>, i * <span class="number">2</span> + <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">            result[i] = (<span class="type">byte</span>) (high * <span class="number">16</span> + low);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AES</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AES</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;测试加密&quot;</span>;</span><br><span class="line">        <span class="comment">// AES的密钥长度最好是16位(不是必须)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;javayznbjavayznb&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加密前：&quot;</span> + content);</span><br><span class="line">      <span class="type">String</span> <span class="variable">encodeResultStr</span> <span class="operator">=</span> aes.encode(content,pwd);</span><br><span class="line">      System.out.println(<span class="string">&quot;加密后：&quot;</span> + encodeResultStr);</span><br><span class="line">      <span class="comment">// 解密</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">decodeResultStr</span> <span class="operator">=</span> aes.decode(encodeResultStr,pwd);</span><br><span class="line">      System.out.println(<span class="string">&quot;解密后：&quot;</span> + decodeResultStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><p>DES也是一种<strong>对称加密算法</strong>，但是在安全性、效率和灵活性上比AES略差，但是也能保证安全，DES也需要通过密钥进行加密，通过密钥进行解密，因此密钥很重要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DES</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将传入的明文转换为密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str,String pwd)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DESKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DESKeySpec</span>(pwd.getBytes());</span><br><span class="line">            <span class="type">SecretKeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> SecretKeyFactory.getInstance(<span class="string">&quot;DES&quot;</span>);</span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> keyFactory.generateSecret(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;DES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">            <span class="type">byte</span>[] byteContent = str.getBytes();</span><br><span class="line">            result = cipher.doFinal(byteContent);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parseByte2HexStr(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将传入的密文转换为明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String str,String pwd)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">byte</span>[] content = parseHexStr2Byte(str);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DESKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DESKeySpec</span>(pwd.getBytes());</span><br><span class="line">            <span class="type">SecretKeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> SecretKeyFactory.getInstance(<span class="string">&quot;DES&quot;</span>);</span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> keyFactory.generateSecret(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;DES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">            result = cipher.doFinal(content);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将二进制转换成十六进制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseByte2HexStr</span><span class="params">(<span class="type">byte</span> buf[])</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buf.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(buf[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hex = <span class="string">&#x27;0&#x27;</span> + hex;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(hex.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将十六进制转换为二进制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] parseHexStr2Byte(String hexStr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hexStr.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[hexStr.length() / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hexStr.length() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> Integer.parseInt(hexStr.substring(i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> Integer.parseInt(hexStr.substring(i * <span class="number">2</span> + <span class="number">1</span>, i * <span class="number">2</span> + <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">            result[i] = (<span class="type">byte</span>) (high * <span class="number">16</span> + low);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DES</span> <span class="variable">des</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DES</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;测试test&quot;</span>;</span><br><span class="line">        <span class="comment">// DES的密钥长度必须是8位(小于8位则会报错，8位之后对加密结果不会产生影响)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;javayznb&quot;</span>;</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加密前：&quot;</span> + content);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodeResultStr</span> <span class="operator">=</span> des.encode(content,pwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;加密后：&quot;</span> + encodeResultStr);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">decodeResultStr</span> <span class="operator">=</span> des.decode(encodeResultStr,pwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;解密后：&quot;</span> + decodeResultStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>RSA是目前最具影响力的公钥加密算法，并且可以用于加密和验签。支付宝支付对接时用的加密方式就是RSA。在RSA中，存在一对密钥，分别称为公钥和私钥，通过私钥由个人保存，公钥可能多人持有。</p><p>RSA的主要应用场景就是加密和验签，加密就不用说了，验签是指通过私钥对消息进行签名，使得消息无法篡改和伪造。</p><p>加密方式：B传加密数据给A</p><p>1、A生成公钥和私钥，私钥自己保留，公钥任何人可以获取。</p><p>2、B拿到公钥，将数据通过公钥加密</p><p>3、A收到密文，通过私钥解密。</p><p>验签方式：A传消息给B</p><p>1、A生成公钥和私钥，私钥自己保留，公钥任何人可以获取。</p><p>2、A使用私钥对消息加签，并将加签后的消息传给B。</p><p>3、B通过公钥验签，如果返回是true则说明消息是A发过来的且未被篡改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRSA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA最大加密明文大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ENCRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">117</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA最大解密密文大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_DECRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密钥对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密钥对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> KeyPair <span class="title function_">getKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        generator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">return</span> generator.generateKeyPair();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取私钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(String privateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] decodedKey = Base64.decodeBase64(privateKey.getBytes());</span><br><span class="line">        <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(decodedKey);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePrivate(keySpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title function_">getPublicKey</span><span class="params">(String publicKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] decodedKey = Base64.decodeBase64(publicKey.getBytes());</span><br><span class="line">        <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(decodedKey);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePublic(keySpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 待加密数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String data, PublicKey publicKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">        <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.getBytes().length;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] cache;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 对数据分段加密</span></span><br><span class="line">        <span class="keyword">while</span> (inputLen - offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputLen - offset &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                cache = cipher.doFinal(data.getBytes(), offset, MAX_ENCRYPT_BLOCK);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cache = cipher.doFinal(data.getBytes(), offset, inputLen - offset);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offset = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="comment">// 获取加密内容使用base64进行编码,并以UTF-8为标准转化成字符串</span></span><br><span class="line">        <span class="comment">// 加密后的字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64String(encryptedData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 待解密数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String data, PrivateKey privateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">        <span class="type">byte</span>[] dataBytes = Base64.decodeBase64(data);</span><br><span class="line">        <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> dataBytes.length;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] cache;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 对数据分段解密</span></span><br><span class="line">        <span class="keyword">while</span> (inputLen - offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputLen - offset &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                cache = cipher.doFinal(dataBytes, offset, MAX_DECRYPT_BLOCK);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cache = cipher.doFinal(dataBytes, offset, inputLen - offset);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">            i++;</span><br><span class="line">            offset = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="comment">// 解密后的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decryptedData, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 待签名数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String data, PrivateKey privateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] keyBytes = privateKey.getEncoded();</span><br><span class="line">        <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(keyBytes);</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">key</span> <span class="operator">=</span> keyFactory.generatePrivate(keySpec);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;MD5withRSA&quot;</span>);</span><br><span class="line">        signature.initSign(key);</span><br><span class="line">        signature.update(data.getBytes());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(signature.sign()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcData 原始字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign 签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否验签通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String srcData, PublicKey publicKey, String sign)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] keyBytes = publicKey.getEncoded();</span><br><span class="line">        <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(keyBytes);</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        <span class="type">PublicKey</span> <span class="variable">key</span> <span class="operator">=</span> keyFactory.generatePublic(keySpec);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;MD5withRSA&quot;</span>);</span><br><span class="line">        signature.initVerify(key);</span><br><span class="line">        signature.update(srcData.getBytes());</span><br><span class="line">        <span class="keyword">return</span> signature.verify(Base64.decodeBase64(sign.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 生成密钥对</span></span><br><span class="line">            <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> getKeyPair();</span><br><span class="line">            <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(keyPair.getPrivate().getEncoded()));</span><br><span class="line">            <span class="type">String</span> <span class="variable">publicKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(keyPair.getPublic().getEncoded()));</span><br><span class="line">            System.out.println(<span class="string">&quot;私钥:&quot;</span> + privateKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;公钥:&quot;</span> + publicKey);</span><br><span class="line">            <span class="comment">// RSA加密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;待加密的文字内容&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">encryptData</span> <span class="operator">=</span> encrypt(data, getPublicKey(publicKey));</span><br><span class="line">            System.out.println(<span class="string">&quot;加密后内容:&quot;</span> + encryptData);</span><br><span class="line">            <span class="comment">// RSA解密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">decryptData</span> <span class="operator">=</span> decrypt(encryptData, getPrivateKey(privateKey));</span><br><span class="line">            System.out.println(<span class="string">&quot;解密后内容:&quot;</span> + decryptData);</span><br><span class="line">            <span class="comment">// RSA签名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> sign(data, getPrivateKey(privateKey));</span><br><span class="line">            System.out.println(<span class="string">&quot;加签后：&quot;</span>+sign);</span><br><span class="line">            <span class="comment">// RSA验签</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> verify(data, getPublicKey(publicKey), sign);</span><br><span class="line">            System.out.print(<span class="string">&quot;验签结果:&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.print(<span class="string">&quot;加解密异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>签名</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262012537.png" alt="image-20240926220841354"></p><p>签名的作用就是验证传输的消息是否被人修改过了。</p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64是一种二进制到文本的编码方式。如果要更具体一点的话，可以认为它是一种将 byte数组编码为字符串的方法，而且编码出的字符串只包含ASCII基础字符。</p><p>例如字符串ShuSheng007对应的Base64为U2h1U2hlbmcwMDc&#x3D;。其中那个&#x3D;比较特殊，是填充符，一会再说。</p><p>值得注意的是Base64不是加密算法，其仅仅是一种编码方式，算法也是公开的，所以不能依赖它进行加密。</p><h3 id="为什么叫Base64？"><a href="#为什么叫Base64？" class="headerlink" title="为什么叫Base64？"></a>为什么叫Base64？</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262012038.png" alt="image-20240926222712149"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262012879.png" alt="image-20240926222721935"></p><p><strong>Base64就是为了解决各系统以及传输协议中二进制不兼容的问题而生的</strong></p>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69 面试问题</title>
      <link href="/2025/02/26/69%20%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2025/02/26/69%20%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="69-面试问题"><a href="#69-面试问题" class="headerlink" title="69 面试问题"></a>69 面试问题</h1><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262020131.png" alt="image-20241013163238468"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262020815.png" alt="image-20241013163413830"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262020173.png" alt="image-20241013163845516"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262020735.png" alt="image-20241013164727417"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262020350.png" alt="image-20241020165340083"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262020380.png" alt="image-20241020165411519"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021408.png" alt="image-20241020165501557"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021328.png" alt="image-20241020165559021"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021368.png" alt="image-20241020165701542"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021633.png" alt="image-20241020165816955"></p><h2 id="2024年10月14日面试题"><a href="#2024年10月14日面试题" class="headerlink" title="2024年10月14日面试题"></a>2024年10月14日面试题</h2><h3 id="B-Tree与B-Tree的区别（数据结构）"><a href="#B-Tree与B-Tree的区别（数据结构）" class="headerlink" title="B -Tree与B+ Tree的区别（数据结构）"></a>B -Tree与B+ Tree的区别（数据结构）</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021135.png" alt="image-20241014151830648"></p><p><img src="/assets/image-20241014151844417.png" alt="image-20241014151844417"></p><h3 id="分布式锁（分布式）"><a href="#分布式锁（分布式）" class="headerlink" title="分布式锁（分布式）"></a>分布式锁（分布式）</h3><h3 id="MVCC（数据库）"><a href="#MVCC（数据库）" class="headerlink" title="MVCC（数据库）"></a>MVCC（数据库）</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021154.png" alt="image-20241014164927491"></p><h3 id="索引失效（数据库）"><a href="#索引失效（数据库）" class="headerlink" title="索引失效（数据库）"></a>索引失效（数据库）</h3><p>order by如何处理get</p><h3 id="慢SQL优化（数据库）"><a href="#慢SQL优化（数据库）" class="headerlink" title="慢SQL优化（数据库）"></a>慢SQL优化（数据库）</h3><p>ok</p><h3 id="动态代理（Java）"><a href="#动态代理（Java）" class="headerlink" title="动态代理（Java）"></a>动态代理（Java）</h3><p>JDK 和 CGLIB</p><h3 id="AOP失效场景（Java）"><a href="#AOP失效场景（Java）" class="headerlink" title="AOP失效场景（Java）"></a>AOP失效场景（Java）</h3><p><a href="https://blog.csdn.net/qq_62262918/article/details/135614540?ops_request_misc=%257B%2522request%255Fid%2522%253A%252235042DD7-DC5B-491B-8161-92EDA30973EE%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=35042DD7-DC5B-491B-8161-92EDA30973EE&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-135614540-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=AOP%E5%A4%B1%E6%95%88%E5%9C%BA%E6%99%AF%EF%BC%88Java%EF%BC%89&spm=1018.2226.3001.4187">Spring的AOP失效场景详解</a></p><h3 id="为什么MySQL-2000W数据会导致性能不好，2000w是如何计算出来的呢（数据库）"><a href="#为什么MySQL-2000W数据会导致性能不好，2000w是如何计算出来的呢（数据库）" class="headerlink" title="为什么MySQL 2000W数据会导致性能不好，2000w是如何计算出来的呢（数据库）"></a>为什么MySQL 2000W数据会导致性能不好，2000w是如何计算出来的呢（数据库）</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021660.png" alt="image-20241014211802773"></p><h3 id="索引的数据结构（数据库）"><a href="#索引的数据结构（数据库）" class="headerlink" title="索引的数据结构（数据库）"></a>索引的数据结构（数据库）</h3><p>ok</p><h3 id="多表联合查询时大表join小表还是其它（数据库）"><a href="#多表联合查询时大表join小表还是其它（数据库）" class="headerlink" title="多表联合查询时大表join小表还是其它（数据库）"></a>多表联合查询时大表join小表还是其它（数据库）</h3><p><strong>驱动表与被驱动表</strong>：在JOIN操作中，通常有一个驱动表（外层表）和一个被驱动表（内层表）。数据库会从驱动表开始扫描，然后根据JOIN条件在被驱动表中查找匹配的记录。</p><p><strong>优先选择小表作为驱动表</strong>：一般情况下，<strong>将小表作为驱动表，大表作为被驱动表</strong>，可以减少扫描次数和内存占用，提高查询性能。</p><p>回答错误主要是对SQL的执行流程不清楚，它会先From，然后JOIN 还没到where呢。</p><p><strong>执行方式</strong>：对于嵌套循环JOIN，数据库会对驱动表的每一行，去被驱动表中查找匹配的行。</p><h3 id="事务的传播机制（Spring）"><a href="#事务的传播机制（Spring）" class="headerlink" title="事务的传播机制（Spring）"></a>事务的传播机制（Spring）</h3><p>ok</p><h3 id="Spring事务（Spring）"><a href="#Spring事务（Spring）" class="headerlink" title="Spring事务（Spring）"></a>Spring事务（Spring）</h3><p>ok</p><h3 id="数据库中的日志-Redo-log（数据库）"><a href="#数据库中的日志-Redo-log（数据库）" class="headerlink" title="数据库中的日志 Redo log（数据库）"></a>数据库中的日志 Redo log（数据库）</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262021802.png" alt="image-20241014164927491"></p><h3 id="Spring中负载均衡如何实现（Spring）"><a href="#Spring中负载均衡如何实现（Spring）" class="headerlink" title="Spring中负载均衡如何实现（Spring）"></a>Spring中负载均衡如何实现（Spring）</h3>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70 SpringBoot</title>
      <link href="/2025/02/26/70%20SpringBoot/"/>
      <url>/2025/02/26/70%20SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="70-SpringBoot"><a href="#70-SpringBoot" class="headerlink" title="70 SpringBoot"></a>70 SpringBoot</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/twotwo22222/article/details/129260502?ops_request_misc=%257B%2522request%255Fid%2522%253A%25226608BE09-AE6D-4022-B438-12C181F2B760%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=6608BE09-AE6D-4022-B438-12C181F2B760&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-129260502-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=SpringBoot%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187">springBoot常见面试题(2024最新)</a></li></ul><h2 id="谈谈你对SpringBoot的理解"><a href="#谈谈你对SpringBoot的理解" class="headerlink" title="谈谈你对SpringBoot的理解"></a>谈谈你对SpringBoot的理解</h2><p>SpringBoot是在Spring的基础上开发的，其主要目的是为了简化Spring开发繁多的配置，其采用约定大于配置的理念开发了让开发人员快速开发的框架。让开发人员能够从繁多的配置中解放出来，更多的关注业务。</p><h3 id="为什么选择使用SpringBoot"><a href="#为什么选择使用SpringBoot" class="headerlink" title="为什么选择使用SpringBoot"></a>为什么选择使用SpringBoot</h3><p>在前面我们对SpringBoot理解之后，这个问题很好回答。SpringBoot简化了开发人员繁多的配置，开发效率大幅度提升。解决Maven版本依赖，内置的Tomcat不需要其它外置的Tomcat。</p><h2 id="Spring-Boot常用注解"><a href="#Spring-Boot常用注解" class="headerlink" title="Spring Boot常用注解"></a>Spring Boot常用注解</h2><ul><li>@SpringBootApplication： SpringBootConfiguration配置类、componentScan扫描包、EnableAutoConfiguration导入其他配置类</li><li>@RestController： @ResponseBody和@Controller的作用。</li><li>@Component,@Service,@Controller,@Repository： 将类注入容器。</li><li>@GetMapping、@PostMapping、@PutMapping、@DeleteMapping： 映射请求，只能接收的对应的请求。</li><li>@AutoWired： 按照类型匹配注入。</li><li>@Qualifier： 和AutoWired联合使用，在按照类型匹配的基础上，在按照名称匹配。</li><li>@Resource： 按照名称匹配依赖注入。</li><li>@Bean： 用于将方法返回值对象放入容器。</li><li>@RequestParam： 获取查询参数。即url?name&#x3D;这种形式</li><li>@RequestBody： 该注解用于获取请求体数据（body）,get没有请求体，故而一般用于post请求。@PathVariable： 获取路径参数。即url&#x2F;{id}这种形式。</li><li>@Value： 将外部的值动态注入到 Bean 中。<ul><li>@Value(“${}”)：可以获取配置文件的值。</li><li>@Value(“#{}”)：表示SpEl(Spring Expression Language是Spring表达式语言，可以在运行时查询和操作数据。)表达式通常用来获取 bean 的属性，或者调用 bean 的某个方法。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>74-01 Python</title>
      <link href="/2025/02/26/74-01%20Python/"/>
      <url>/2025/02/26/74-01%20Python/</url>
      
        <content type="html"><![CDATA[<h1 id="74-01-Python"><a href="#74-01-Python" class="headerlink" title="74-01 Python"></a>74-01 Python</h1><p>结合你对Java的熟悉程度，我会详细介绍Python中的面向对象编程（OOP）语法，并与Java进行对比。Python和Java的OOP概念相似，但语法和一些实现细节有所不同。</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1. 类与对象"></a>1. 类与对象</h3><h4 id="Java："><a href="#Java：" class="headerlink" title="Java："></a>Java：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, my name is &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        person.greet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python："><a href="#Python：" class="headerlink" title="Python："></a>Python：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, my name is <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象并调用方法</span></span><br><span class="line">person = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>)</span><br><span class="line">person.greet()</span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ul><li><strong>类定义</strong>：Python使用<code>class</code>关键字定义类，类似于Java。</li><li><strong>构造方法</strong>：Python用<code>__init__</code>方法实现构造函数，而Java使用与类名相同的方法。</li><li><strong>self关键字</strong>：Python中的<code>self</code>类似于Java中的<code>this</code>，表示类的实例。</li><li><strong>方法定义</strong>：Python的方法必须显式包含<code>self</code>作为第一个参数，用于访问实例变量；Java则隐式传递<code>this</code>。</li></ul><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><h4 id="Java：-1"><a href="#Java：-1" class="headerlink" title="Java："></a>Java：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal makes a sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python：-1"><a href="#Python：-1" class="headerlink" title="Python："></a>Python：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal makes a sound&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dog barks&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ul><li><strong>继承方式</strong>：Python的继承类似于Java，直接在类名后括号中声明父类。</li><li><strong>方法重写</strong>：Java使用<code>@Override</code>注解表示重写方法，而Python不需要特殊标注，直接定义同名方法即可。</li></ul><h3 id="3-多继承"><a href="#3-多继承" class="headerlink" title="3. 多继承"></a>3. 多继承</h3><h4 id="Java：-2"><a href="#Java：-2" class="headerlink" title="Java："></a>Java：</h4><p>Java不支持类的多继承，但可以通过接口实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>, B &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Method B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python：-2"><a href="#Python：-2" class="headerlink" title="Python："></a>Python：</h4><p>Python支持类的多继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method_a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Method A&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method_b</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Method B&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A, B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.method_a()</span><br><span class="line">c.method_b()</span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ul><li>Python允许类多继承，而Java通过接口实现类似功能。</li></ul><h3 id="4-封装与访问控制"><a href="#4-封装与访问控制" class="headerlink" title="4. 封装与访问控制"></a>4. 封装与访问控制</h3><h4 id="Java：-3"><a href="#Java：-3" class="headerlink" title="Java："></a>Java：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python：-3"><a href="#Python：-3" class="headerlink" title="Python："></a>Python：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__name = name  <span class="comment"># 双下划线表示私有变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__name = name</span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ul><li><strong>访问控制</strong>：Java使用<code>private</code>、<code>protected</code>和<code>public</code>来控制访问权限；Python使用双下划线前缀（如<code>__name</code>）来表示私有变量，但实际上只是名称重整（name mangling）机制，不是真正的私有。</li><li><strong>getter和setter</strong>：Python可以通过定义方法实现类似Java的getter和setter，或者使用<code>@property</code>装饰器。</li></ul><h3 id="5-多态"><a href="#5-多态" class="headerlink" title="5. 多态"></a>5. 多态</h3><p>多态的概念在Java和Python中基本相同，都是指不同对象可以以相同的方式调用其特定的行为。</p><h4 id="Java：-4"><a href="#Java：-4" class="headerlink" title="Java："></a>Java：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.sound();  <span class="comment">// 输出：Dog barks</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python：-4"><a href="#Python：-4" class="headerlink" title="Python："></a>Python：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal sound&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dog barks&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = Dog()</span><br><span class="line">a.sound()  <span class="comment"># 输出：Dog barks</span></span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ul><li>Python的多态实现与Java非常相似，通过子类重写父类方法实现。</li></ul><h3 id="6-静态方法和类方法"><a href="#6-静态方法和类方法" class="headerlink" title="6. 静态方法和类方法"></a>6. 静态方法和类方法</h3><h4 id="Java：-5"><a href="#Java：-5" class="headerlink" title="Java："></a>Java：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Static method in Java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python：-5"><a href="#Python：-5" class="headerlink" title="Python："></a>Python：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Utility</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_message</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Static method in Python&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">Utility.print_message()</span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ul><li><strong>静态方法</strong>：Java使用<code>static</code>关键字声明静态方法，Python使用<code>@staticmethod</code>装饰器实现。</li></ul><p>Python还支持<code>@classmethod</code>，用于操作类级别的数据，类似Java中的静态方法，但第一个参数是<code>cls</code>，表示类本身。</p><h3 id="7-抽象类与接口"><a href="#7-抽象类与接口" class="headerlink" title="7. 抽象类与接口"></a>7. 抽象类与接口</h3><h4 id="Java：-6"><a href="#Java：-6" class="headerlink" title="Java："></a>Java：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python：-6"><a href="#Python：-6" class="headerlink" title="Python："></a>Python：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dog barks&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>对比</strong>：</p><ul><li><strong>抽象类</strong>：Python通过<code>abc</code>模块实现抽象类，使用<code>@abstractmethod</code>装饰器来定义抽象方法，类似Java的<code>abstract</code>关键字。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>在Python中，数据结构是处理和存储数据的基础工具。Python提供了多种内置的数据结构，涵盖了从基本类型到复杂类型的各种场景需求。基于我对Python的理解，以下是对主要数据结构的详细介绍：</p><h3 id="1-列表（List）"><a href="#1-列表（List）" class="headerlink" title="1. 列表（List）"></a>1. 列表（List）</h3><p>Python的<code>list</code>是动态数组，类似于Java中的<code>ArrayList</code>，可以存储任何类型的元素，并且大小可变。</p><h4 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建列表</span></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">fruits.append(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入元素</span></span><br><span class="line">fruits.insert(<span class="number">1</span>, <span class="string">&quot;kiwi&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line">fruits.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引访问和切片</span></span><br><span class="line">first_fruit = fruits[<span class="number">0</span>]</span><br><span class="line">sublist = fruits[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># 切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(fruit)</span><br></pre></td></tr></table></figure><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>有序</strong>：元素按照插入顺序存储，支持索引访问。</li><li><strong>动态大小</strong>：支持动态添加、删除元素。</li><li><strong>支持多种类型</strong>：可以存储不同类型的元素在同一列表中。</li></ul><h3 id="2-元组（Tuple）"><a href="#2-元组（Tuple）" class="headerlink" title="2. 元组（Tuple）"></a>2. 元组（Tuple）</h3><p><code>tuple</code>类似于<code>list</code>，但<strong>不可变</strong>，这意味着一旦创建，元素就不能修改。</p><h4 id="基本操作：-1"><a href="#基本操作：-1" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建元组</span></span><br><span class="line">coordinates = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问元素</span></span><br><span class="line">x = coordinates[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组不可变，但可以嵌套列表等可变对象</span></span><br><span class="line">nested_tuple = (<span class="number">10</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">nested_tuple[<span class="number">1</span>].append(<span class="number">3</span>)  <span class="comment"># 可以修改内部列表</span></span><br></pre></td></tr></table></figure><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>不可变</strong>：提高了安全性，适合存储固定数据。</li><li><strong>性能优越</strong>：由于不可变，元组操作比列表更快。</li></ul><h3 id="3-字典（Dictionary）"><a href="#3-字典（Dictionary）" class="headerlink" title="3. 字典（Dictionary）"></a>3. 字典（Dictionary）</h3><p>Python的<code>dict</code>类似于Java中的<code>HashMap</code>，存储键值对，提供了快速的查找和插入操作。</p><h4 id="基本操作：-2"><a href="#基本操作：-2" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加或更新键值对</span></span><br><span class="line">person[<span class="string">&quot;city&quot;</span>] = <span class="string">&quot;New York&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问元素</span></span><br><span class="line">name = person[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历键值对</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> person.items():</span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除键值对</span></span><br><span class="line"><span class="keyword">del</span> person[<span class="string">&quot;age&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>无序（Python 3.6之前）</strong>：Python 3.7及以后的版本中，字典保持插入顺序。</li><li><strong>键唯一</strong>：每个键在字典中唯一，值可以是任何类型。</li></ul><h3 id="4-集合（Set）"><a href="#4-集合（Set）" class="headerlink" title="4. 集合（Set）"></a>4. 集合（Set）</h3><p><code>set</code>类似于Java中的<code>HashSet</code>，用于存储<strong>不重复</strong>的元素，支持数学集合运算。</p><h4 id="基本操作：-3"><a href="#基本操作：-3" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">unique_numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">unique_numbers.add(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line">unique_numbers.remove(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合运算</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">union_set = set1.union(set2)  <span class="comment"># 并集</span></span><br><span class="line">intersection_set = set1.intersection(set2)  <span class="comment"># 交集</span></span><br></pre></td></tr></table></figure><h4 id="特点：-3"><a href="#特点：-3" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>无序</strong>：集合中的元素没有固定顺序。</li><li><strong>不重复</strong>：集合中的每个元素是唯一的。</li><li><strong>高效查找</strong>：集合的查找和插入操作时间复杂度为O(1)。</li></ul><h3 id="5-队列（Queue）"><a href="#5-队列（Queue）" class="headerlink" title="5. 队列（Queue）"></a>5. 队列（Queue）</h3><p>Python提供<code>collections.deque</code>作为双端队列（deque），可以在两端高效地添加和删除元素。类似于Java中的<code>LinkedList</code>实现的队列。</p><h4 id="基本操作：-4"><a href="#基本操作：-4" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建队列</span></span><br><span class="line">queue = deque([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进队（尾部添加）</span></span><br><span class="line">queue.append(<span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出队（头部移除）</span></span><br><span class="line">queue.popleft()</span><br></pre></td></tr></table></figure><h4 id="特点：-4"><a href="#特点：-4" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>双端队列</strong>：可以从两端高效地添加和删除元素。</li><li><strong>线程安全</strong>：<code>deque</code>的操作是原子性的，适合多线程场景。</li></ul><h3 id="6-栈（Stack）"><a href="#6-栈（Stack）" class="headerlink" title="6. 栈（Stack）"></a>6. 栈（Stack）</h3><p>Python没有专门的栈结构，但可以使用<code>list</code>模拟，或者使用<code>collections.deque</code>实现更高效的栈操作。</p><h4 id="使用list作为栈："><a href="#使用list作为栈：" class="headerlink" title="使用list作为栈："></a>使用<code>list</code>作为栈：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stack = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压栈</span></span><br><span class="line">stack.append(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出栈</span></span><br><span class="line">stack.pop()</span><br></pre></td></tr></table></figure><h4 id="特点：-5"><a href="#特点：-5" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>后进先出（LIFO）</strong>：栈的操作遵循后进先出原则。</li></ul><h3 id="7-优先队列（Priority-Queue）"><a href="#7-优先队列（Priority-Queue）" class="headerlink" title="7. 优先队列（Priority Queue）"></a>7. 优先队列（Priority Queue）</h3><p>Python提供<code>heapq</code>模块来实现优先队列，底层基于堆结构。</p><h4 id="基本操作：-5"><a href="#基本操作：-5" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建优先队列</span></span><br><span class="line">pq = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">heapq.heappush(pq, <span class="number">3</span>)</span><br><span class="line">heapq.heappush(pq, <span class="number">1</span>)</span><br><span class="line">heapq.heappush(pq, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 弹出最小元素</span></span><br><span class="line">smallest = heapq.heappop(pq)  <span class="comment"># 返回1</span></span><br></pre></td></tr></table></figure><h4 id="特点：-6"><a href="#特点：-6" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>最小堆</strong>：<code>heapq</code>默认实现最小堆，<code>heappop</code>返回最小元素。</li><li><strong>时间复杂度</strong>：插入和删除操作的时间复杂度为O(log n)。</li></ul><h3 id="8-字符串（String）"><a href="#8-字符串（String）" class="headerlink" title="8. 字符串（String）"></a>8. 字符串（String）</h3><p>Python中的<code>str</code>是不可变对象，类似于Java的<code>String</code>，用于存储字符序列。</p><h4 id="基本操作：-6"><a href="#基本操作：-6" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串创建</span></span><br><span class="line">text = <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串拼接</span></span><br><span class="line">new_text = text + <span class="string">&quot;!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串切片</span></span><br><span class="line">subtext = text[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找子字符串</span></span><br><span class="line">index = text.find(<span class="string">&quot;World&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串遍历</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure><h4 id="特点：-7"><a href="#特点：-7" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>不可变</strong>：字符串一旦创建，无法修改。</li><li><strong>丰富的操作方法</strong>：Python提供了大量字符串操作方法，如<code>split()</code>、<code>join()</code>、<code>replace()</code>等。</li></ul><h3 id="9-冻结集合（Frozenset）"><a href="#9-冻结集合（Frozenset）" class="headerlink" title="9. 冻结集合（Frozenset）"></a>9. 冻结集合（Frozenset）</h3><p><code>frozenset</code>是不可变的集合，类似于<code>set</code>，但元素不可变，适合用于作为字典的键或其他需要不可变性的场景。</p><h4 id="基本操作：-7"><a href="#基本操作：-7" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建冻结集合</span></span><br><span class="line">frozen = <span class="built_in">frozenset</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合运算</span></span><br><span class="line">frozen.union(&#123;<span class="number">4</span>, <span class="number">5</span>&#125;)  <span class="comment"># 并集</span></span><br></pre></td></tr></table></figure><h4 id="特点：-8"><a href="#特点：-8" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>不可变</strong>：创建后不可修改。</li></ul><h3 id="10-字节（Bytes）"><a href="#10-字节（Bytes）" class="headerlink" title="10. 字节（Bytes）"></a>10. 字节（Bytes）</h3><p><code>bytes</code>用于处理二进制数据，类似于Java中的<code>byte[]</code>。</p><h4 id="基本操作：-8"><a href="#基本操作：-8" class="headerlink" title="基本操作："></a>基本操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字节</span></span><br><span class="line">data = <span class="string">b&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问字节</span></span><br><span class="line">first_byte = data[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换字符串为字节</span></span><br><span class="line">encoded = <span class="string">&quot;hello&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换字节为字符串</span></span><br><span class="line">decoded = encoded.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="特点：-9"><a href="#特点：-9" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>不可变</strong>：<code>bytes</code>对象是不可变的。</li><li><strong>用于二进制数据处理</strong>：常用于网络通信、文件I&#x2F;O等场景。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>74-02 Flask</title>
      <link href="/2025/02/26/74-02%20Flask/"/>
      <url>/2025/02/26/74-02%20Flask/</url>
      
        <content type="html"><![CDATA[<h1 id="74-02-Flask"><a href="#74-02-Flask" class="headerlink" title="74-02 Flask"></a>74-02 Flask</h1><h2 id="初步使用Demo"><a href="#初步使用Demo" class="headerlink" title="初步使用Demo"></a>初步使用Demo</h2><p>为了实现一个类似于 CSDN 的简单网站，我们可以用 Flask 构建一个基本的博客系统，具备文章展示、创建、编辑和删除功能。下面是这个 Demo 的简要目录结构、核心代码和操作步骤。</p><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">csdn_flask_demo/</span><br><span class="line">│</span><br><span class="line">├── app.py                  <span class="comment"># 主应用文件</span></span><br><span class="line">├── config.py               <span class="comment"># 配置文件</span></span><br><span class="line">├── requirements.txt        <span class="comment"># 项目依赖</span></span><br><span class="line">├── templates/              <span class="comment"># 存放HTML模板</span></span><br><span class="line">│   ├── base.html           <span class="comment"># 基本布局模板</span></span><br><span class="line">│   ├── index.html          <span class="comment"># 首页，展示所有文章</span></span><br><span class="line">│   ├── create_article.html <span class="comment"># 创建新文章页面</span></span><br><span class="line">│   └── article.html        <span class="comment"># 文章详情页</span></span><br><span class="line">├── static/                 <span class="comment"># 静态文件（如CSS, JS, 图片等）</span></span><br><span class="line">│   └── style.css           <span class="comment"># 简单的CSS样式</span></span><br><span class="line">└── models.py               <span class="comment"># 数据库模型</span></span><br></pre></td></tr></table></figure><h3 id="2-核心代码"><a href="#2-核心代码" class="headerlink" title="2. 核心代码"></a>2. 核心代码</h3><h4 id="app-py-主应用文件"><a href="#app-py-主应用文件" class="headerlink" title="app.py (主应用文件)"></a><code>app.py</code> (主应用文件)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, flash</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> db, Article</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    articles = Article.query.<span class="built_in">all</span>()  <span class="comment"># 获取所有文章</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, articles=articles)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/article/&lt;int:id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    article = Article.query.get_or_404(<span class="built_in">id</span>)  <span class="comment"># 获取指定ID的文章</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;article.html&#x27;</span>, article=article)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/create&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_article</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.form[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        content = request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> title <span class="keyword">and</span> content:</span><br><span class="line">            new_article = Article(title=title, content=content)</span><br><span class="line">            db.session.add(new_article)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            flash(<span class="string">&#x27;Article created successfully!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&#x27;Title and Content are required.&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;create_article.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="models-py-数据库模型"><a href="#models-py-数据库模型" class="headerlink" title="models.py (数据库模型)"></a><code>models.py</code> (数据库模型)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Article <span class="subst">&#123;self.title&#125;</span>&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="config-py-配置文件"><a href="#config-py-配置文件" class="headerlink" title="config.py (配置文件)"></a><code>config.py</code> (配置文件)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class="string">&#x27;app.db&#x27;</span>)</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;your_secret_key&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="templates-base-html-基本布局模板"><a href="#templates-base-html-基本布局模板" class="headerlink" title="templates/base.html (基本布局模板)"></a><code>templates/base.html</code> (基本布局模板)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Simple CSDN Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple CSDN<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;create_article&#x27;) &#125;&#125;&quot;</span>&gt;</span>Create New Article<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="templates-index-html-主页模板"><a href="#templates-index-html-主页模板" class="headerlink" title="templates/index.html (主页模板)"></a><code>templates/index.html</code> (主页模板)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Articles<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for article in articles %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;article&#x27;, id=article.id) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="templates-article-html-文章详情页模板"><a href="#templates-article-html-文章详情页模板" class="headerlink" title="templates/article.html (文章详情页模板)"></a><code>templates/article.html</code> (文章详情页模板)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; article.content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;</span>&gt;</span>Back to Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="templates-create-article-html-创建文章页模板"><a href="#templates-create-article-html-创建文章页模板" class="headerlink" title="templates/create_article.html (创建文章页模板)"></a><code>templates/create_article.html</code> (创建文章页模板)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Create a New Article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Title:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="static-style-css-简单的CSS样式"><a href="#static-style-css-简单的CSS样式" class="headerlink" title="static/style.css (简单的CSS样式)"></a><code>static/style.css</code> (简单的CSS样式)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="requirements-txt-项目依赖"><a href="#requirements-txt-项目依赖" class="headerlink" title="requirements.txt (项目依赖)"></a><code>requirements.txt</code> (项目依赖)</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask==2.0.1</span><br><span class="line">Flask-SQLAlchemy==2.5.1</span><br></pre></td></tr></table></figure><h3 id="3-操作步骤"><a href="#3-操作步骤" class="headerlink" title="3. 操作步骤"></a>3. 操作步骤</h3><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>创建一个虚拟环境并安装项目依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate  <span class="comment"># 激活虚拟环境 (Windows 用户执行 venv\Scripts\activate)</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2. 初始化数据库"></a>2. 初始化数据库</h4><p>运行以下命令初始化数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;&gt; from app import db</span><br><span class="line">&gt;&gt;&gt; db.create_all()</span><br></pre></td></tr></table></figure><p>这会在项目目录下生成一个 <code>app.db</code> 文件。</p><h4 id="3-运行应用"><a href="#3-运行应用" class="headerlink" title="3. 运行应用"></a>3. 运行应用</h4><p>启动 Flask 应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><p>应用将在 <code>http://127.0.0.1:5000/</code> 上运行，你可以在浏览器中访问该地址查看效果。</p><h4 id="4-功能测试"><a href="#4-功能测试" class="headerlink" title="4. 功能测试"></a>4. 功能测试</h4><ul><li>首页将列出所有文章。</li><li>你可以点击创建新文章，填写标题和内容后保存。</li><li>点击文章标题可以查看文章详情。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个简单的 Flask Demo 展示了如何构建一个类似 CSDN 的博客网站。你可以在这个基础上扩展功能，比如用户注册、评论系统、文章分类等。与 CSDN 类似，你可以逐步构建出一个功能强大的博客平台。</p><h2 id="Flask请求方式-请求参数获取"><a href="#Flask请求方式-请求参数获取" class="headerlink" title="Flask请求方式&amp;请求参数获取"></a>Flask请求方式&amp;请求参数获取</h2><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@testHttpMethodApi_bp.route(<span class="params"><span class="string">&quot;/testMethodApi&quot;</span>,methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_blueprint</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    password = request.args.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name and password are null&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;get test blueprint&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><h4 id="参数类型为form-data"><a href="#参数类型为form-data" class="headerlink" title="参数类型为form-data"></a>参数类型为form-data</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262023322.png" alt="image-20241022140839643"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@testHttpMethodApi_bp.route(<span class="params"><span class="string">&quot;/testPostMethod&quot;</span>,methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_example</span>():</span><br><span class="line">    name = request.form.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name and password are null&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;get test blueprint&quot;</span></span><br></pre></td></tr></table></figure><h4 id="参数类型为JSON"><a href="#参数类型为JSON" class="headerlink" title="参数类型为JSON"></a>参数类型为JSON</h4><p>自动装配JSON格式数据并转化成目标对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义装饰器来自动转换 JSON 数据为对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_to_object</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">f</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            data = request.get_json()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;No JSON data provided&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 将 JSON 数据映射为类对象</span></span><br><span class="line">                obj = cls(**data)</span><br><span class="line">            <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">400</span></span><br><span class="line">            <span class="comment"># 将对象作为参数传递给被装饰的函数</span></span><br><span class="line">            <span class="keyword">return</span> f(obj, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@testHttpMethodApi_bp.route(<span class="params"><span class="string">&quot;/testPostMethod&quot;</span>,methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@json_to_object(<span class="params">User</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_example</span>(<span class="params">user</span>):</span><br><span class="line">    <span class="comment"># 表单数据读取</span></span><br><span class="line">    name = request.form.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(user.__repr__())</span><br><span class="line"></span><br><span class="line">    string = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">        string = <span class="string">&quot;name and password are null&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        string = <span class="string">&quot;user is null&quot;</span></span><br><span class="line">    <span class="keyword">return</span> string</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义一个简单的 User 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, password</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;User(name=<span class="subst">&#123;self.name&#125;</span>, password=<span class="subst">&#123;self.password&#125;</span>)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PUT 请求: 从 JSON 数据中获取参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/put-example&#x27;</span>, methods=[<span class="string">&#x27;PUT&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_example</span>():</span><br><span class="line">    <span class="comment"># 获取 JSON 格式的数据</span></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    name = data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    age = data.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: age</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="DELETE请求"><a href="#DELETE请求" class="headerlink" title="DELETE请求"></a>DELETE请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DELETE 请求: 从查询参数中获取要删除的资源标识</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete-example&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_example</span>():</span><br><span class="line">    <span class="comment"># 获取 URL 中的查询参数，表示要删除的资源</span></span><br><span class="line">    resource_id = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;deleted_resource_id&#x27;</span>: resource_id</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Flask-MySQL数据库交互"><a href="#Flask-MySQL数据库交互" class="headerlink" title="Flask MySQL数据库交互"></a>Flask MySQL数据库交互</h2><p>在 Flask 中与数据库交互的方式有很多，常见的工具包包括 <strong>SQLAlchemy</strong> 和 <strong>Flask-SQLAlchemy</strong>。这两个工具包都提供了与数据库的便捷交互方式，类似于 Java 中的 MyBatis。下面，我将通过一个详细的例子介绍如何使用 <strong>Flask-SQLAlchemy</strong> 来实现数据库操作。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLConfig</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 替换为你的数据库信息</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql+pymysql://root:123456@localhost:3306/screw_it_development_biz&#x27;</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span>  <span class="comment"># 关闭修改追踪</span></span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()  <span class="comment"># 实例化 SQLAlchemy</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个简单的 User 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line"></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, password</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;User(name=<span class="subst">&#123;self.username&#125;</span>, password=<span class="subst">&#123;self.password&#125;</span>)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@testHttpMethodApi_bp.route(<span class="params"><span class="string">&quot;/testMySQLConnection/&lt;int:user_id&gt;&quot;</span>,methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="comment"># @json_to_object(User)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_mysql_connection</span>(<span class="params">user_id</span>):</span><br><span class="line"></span><br><span class="line">    user = User.query.get_or_404(user_id)</span><br><span class="line"></span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user.__repr__()</span><br></pre></td></tr></table></figure><h3 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> testHttpMethodApi <span class="keyword">import</span> testHttpMethodApi_bp</span><br><span class="line"><span class="keyword">from</span> config.DbConfig <span class="keyword">import</span> MySQLConfig</span><br><span class="line"><span class="keyword">from</span> entry <span class="keyword">import</span> db</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载配置</span></span><br><span class="line">app.config.from_object(MySQLConfig)</span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册蓝图</span></span><br><span class="line">app.register_blueprint(testHttpMethodApi_bp, url_prefix=<span class="string">&#x27;/testHttpMethodApi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;fangYaoHui using flask&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="蓝图-类似于Java多个Controller"><a href="#蓝图-类似于Java多个Controller" class="headerlink" title="蓝图-类似于Java多个Controller"></a>蓝图-类似于Java多个Controller</h2><p>在 Flask 中，你可以通过**蓝图（Blueprints）<strong>的方式，将路由分割到不同的模块中，这样可以有效地组织代码，特别是在你的应用规模较大时。这与 Java 的 SpringBoot 中的</strong>控制器（Controller）**模块化设计类似，能够使代码更加清晰和易于维护。</p><h3 id="1-调整后的目录结构"><a href="#1-调整后的目录结构" class="headerlink" title="1. 调整后的目录结构"></a>1. 调整后的目录结构</h3><p>我们将路由拆分为不同的模块，比如：文章模块、用户模块等。调整后的项目目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">csdn_flask_demo/</span><br><span class="line">│</span><br><span class="line">├── app.py                  <span class="comment"># 主应用文件</span></span><br><span class="line">├── config.py               <span class="comment"># 配置文件</span></span><br><span class="line">├── requirements.txt        <span class="comment"># 项目依赖</span></span><br><span class="line">├── templates/              <span class="comment"># 存放HTML模板</span></span><br><span class="line">│   ├── base.html           <span class="comment"># 基本布局模板</span></span><br><span class="line">│   ├── index.html          <span class="comment"># 首页，展示所有文章</span></span><br><span class="line">│   ├── create_article.html <span class="comment"># 创建新文章页面</span></span><br><span class="line">│   └── article.html        <span class="comment"># 文章详情页</span></span><br><span class="line">├── static/                 <span class="comment"># 静态文件（如CSS, JS, 图片等）</span></span><br><span class="line">│   └── style.css           <span class="comment"># 简单的CSS样式</span></span><br><span class="line">├── models.py               <span class="comment"># 数据库模型</span></span><br><span class="line">├── article/                <span class="comment"># 文章模块目录</span></span><br><span class="line">│   ├── __init__.py         <span class="comment"># 文章蓝图定义</span></span><br><span class="line">│   └── routes.py           <span class="comment"># 文章相关的路由定义</span></span><br><span class="line">└── user/                   <span class="comment"># 用户模块目录（示例）</span></span><br><span class="line">    ├── __init__.py         <span class="comment"># 用户蓝图定义</span></span><br><span class="line">    └── routes.py           <span class="comment"># 用户相关的路由定义</span></span><br></pre></td></tr></table></figure><h3 id="2-核心代码-1"><a href="#2-核心代码-1" class="headerlink" title="2. 核心代码"></a>2. 核心代码</h3><h4 id="app-py-主应用文件-1"><a href="#app-py-主应用文件-1" class="headerlink" title="app.py (主应用文件)"></a><code>app.py</code> (主应用文件)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> article.routes <span class="keyword">import</span> article_bp  <span class="comment"># 导入文章蓝图</span></span><br><span class="line"><span class="keyword">from</span> user.routes <span class="keyword">import</span> user_bp        <span class="comment"># 导入用户蓝图</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册蓝图</span></span><br><span class="line">app.register_blueprint(article_bp, url_prefix=<span class="string">&#x27;/articles&#x27;</span>)  <span class="comment"># 所有文章相关的路由前加 /articles 前缀</span></span><br><span class="line">app.register_blueprint(user_bp, url_prefix=<span class="string">&#x27;/users&#x27;</span>)        <span class="comment"># 所有用户相关的路由前加 /users 前缀</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="article-init-py-文章模块的蓝图定义"><a href="#article-init-py-文章模块的蓝图定义" class="headerlink" title="article/__init__.py (文章模块的蓝图定义)"></a><code>article/__init__.py</code> (文章模块的蓝图定义)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个名为 &#x27;article&#x27; 的蓝图</span></span><br><span class="line">article_bp = Blueprint(<span class="string">&#x27;article&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> routes  <span class="comment"># 导入文章模块的路由定义</span></span><br></pre></td></tr></table></figure><h4 id="article-routes-py-文章模块的路由定义"><a href="#article-routes-py-文章模块的路由定义" class="headerlink" title="article/routes.py (文章模块的路由定义)"></a><code>article/routes.py</code> (文章模块的路由定义)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, redirect, url_for, flash</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> db, Article</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> article_bp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文章相关的路由</span></span><br><span class="line"><span class="meta">@article_bp.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    articles = Article.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, articles=articles)</span><br><span class="line"></span><br><span class="line"><span class="meta">@article_bp.route(<span class="params"><span class="string">&#x27;/&lt;int:id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    article = Article.query.get_or_404(<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;article.html&#x27;</span>, article=article)</span><br><span class="line"></span><br><span class="line"><span class="meta">@article_bp.route(<span class="params"><span class="string">&#x27;/create&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_article</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.form[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        content = request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> title <span class="keyword">and</span> content:</span><br><span class="line">            new_article = Article(title=title, content=content)</span><br><span class="line">            db.session.add(new_article)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            flash(<span class="string">&#x27;Article created successfully!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;article.index&#x27;</span>))  <span class="comment"># 使用蓝图名来生成 URL</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&#x27;Title and Content are required.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;create_article.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="user-init-py-用户模块的蓝图定义"><a href="#user-init-py-用户模块的蓝图定义" class="headerlink" title="user/__init__.py (用户模块的蓝图定义)"></a><code>user/__init__.py</code> (用户模块的蓝图定义)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个名为 &#x27;user&#x27; 的蓝图</span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> routes  <span class="comment"># 导入用户模块的路由定义</span></span><br></pre></td></tr></table></figure><h4 id="user-routes-py-用户模块的路由定义"><a href="#user-routes-py-用户模块的路由定义" class="headerlink" title="user/routes.py (用户模块的路由定义)"></a><code>user/routes.py</code> (用户模块的路由定义)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, redirect, url_for, flash</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> user_bp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：用户登录路由</span></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 假设这里处理登录逻辑</span></span><br><span class="line">        flash(<span class="string">&#x27;User logged in successfully!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;user.profile&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：用户个人资料页面</span></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/profile&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;profile.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-调整后的-config-py-和-models-py"><a href="#3-调整后的-config-py-和-models-py" class="headerlink" title="3. 调整后的 config.py 和 models.py"></a>3. 调整后的 <code>config.py</code> 和 <code>models.py</code></h3><p>这两个文件没有变化，可以继续保持之前的内容。</p><h3 id="4-操作步骤"><a href="#4-操作步骤" class="headerlink" title="4. 操作步骤"></a>4. 操作步骤</h3><h4 id="1-安装依赖-1"><a href="#1-安装依赖-1" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>与之前相同，创建虚拟环境并安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate  <span class="comment"># 激活虚拟环境 (Windows 用户执行 venv\Scripts\activate)</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="2-初始化数据库-1"><a href="#2-初始化数据库-1" class="headerlink" title="2. 初始化数据库"></a>2. 初始化数据库</h4><p>使用 Flask Shell 初始化数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;&gt; from app import db</span><br><span class="line">&gt;&gt;&gt; db.create_all()</span><br></pre></td></tr></table></figure><h4 id="3-运行应用-1"><a href="#3-运行应用-1" class="headerlink" title="3. 运行应用"></a>3. 运行应用</h4><p>启动 Flask 应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><p>应用将在 <code>http://127.0.0.1:5000/</code> 上运行。</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>通过使用 Flask 的蓝图（Blueprint），我们将不同的路由模块化处理，类似于 SpringBoot 中的控制器模块化设计。这样做不仅使代码更加清晰和易于维护，还为后期扩展应用功能提供了方便。比如，你可以很容易地为网站添加新的模块，如用户管理、评论系统等，保持每个模块独立开发。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-01 数据结构</title>
      <link href="/2025/02/26/75-01%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2025/02/26/75-01%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="75-01-数据结构"><a href="#75-01-数据结构" class="headerlink" title="75-01 数据结构"></a>75-01 数据结构</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://oi-wiki.org/dp/tree/">树形 DP</a></li><li></li><li></li></ul><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>二叉树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。 </p><p>如果根节点选的不好会导致二叉树过深。</p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>平衡二叉树（AVL树）在符合二叉查找树的条件下，还满足<strong>任何节点的两个子树的高度最大差为1</strong>。下面的两张图片，左边是AVL树，它的任何节点的两个子树的高度差&lt;&#x3D;1；右边的不是AVL树，其根节点的左子树高度为3，而右子树高度为1；</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024067.png" alt="image-20241014153843893"></p><p>那么这里就会涉及到一些复杂的问题，如果我对这个树进行增删改查之后，导致了这个树不平衡了该怎么办？</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024699.png" alt="image-20241014154528103"> </p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024981.png" alt="image-20241014154546934"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024974.png" alt="image-20241014155236494"></p><p>记住RL和LR的旋转即可，RL表示根节点的右边节点的左节点比较高，这是后就应该，右边节点的左节点做右边根节点，在把根节点替换成该节点，其实就是选根节点。</p><p>RL表示选的哪个是根节点。</p><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>首先,一个M阶的B树的定义为:</p><ol><li><strong>每个节点最多有M个子节点；</strong></li><li>每一个非叶子节点（除根节点）至少有ceil(M&#x2F;2)个子节点；</li><li>如果根节点不是叶子节点，那么至少有两个子节点；</li><li>有k个子节点的非叶子节点拥有k-1个键，键按照升序排列；</li><li>所有叶子节点在同一层；</li></ol><p>B-Tree也称为多路平衡查找树，看图说话：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024165.png" alt="image-20241014152905749"></p><p><strong>B-Tree是为磁盘等外存储设备设计的一种平衡查找树。因此在讲B-Tree之前先了解下磁盘的相关知识。</strong></p><p><strong>B-Tree相比较平衡二叉树就是每个节点可以存储的数据变多了，为什么变多，这是为了适应系统每次从磁盘中读取数据都是以块为基本单位读取，如果这一个块都是这个节点数据，那么我们可以有效的避免了系统IO操作次数，这效率不就上来了吗。</strong></p><blockquote><p>为什么要这么设计呢？这都是有原因的，MySQL作为硬盘存储数据库，选用B+Tree作为其数据结构非常适合。</p><p>系统从磁盘读取数据到内存时是以**磁盘块（block）**为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</p><p>由于B+Tree节点容量大，每次读取时加载到内存中的数据也更多，减少了硬盘的<strong>I&#x2F;O操作次数</strong>。</p><p>InnoDB存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB存储引擎中默认每个页的大小为16KB，可通过参数innodb_page_size将页的大小设置为4K、8K、16K，在<a href="http://lib.csdn.net/base/mysql">MySQL</a>中可通过如下命令查看页的大小。</p></blockquote><h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024757.png" alt="image-20241014161223591"></p><p>B+Tree相对于B-Tree有几点不同：</p><ol><li>非叶子节点只存储键值信息。</li><li>所有叶子节点之间都有一个链指针。</li><li>数据记录都存放在叶子节点中。</li></ol><p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB&#x2F;(8B+8B)&#x3D;1K个键值（因为是估值，为方便计算，这里的K取值为〖10〗^3）^。也就是说一个深度为3的B+Tree索引可以维护10^3  10^3 * 10^3 &#x3D; 10亿 条记录。</p><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2-4层。<a href="http://lib.csdn.net/base/mysql">mysql</a>的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I&#x2F;O操作。</p><p><strong>数据库中的B+Tree索引可以分为聚集索引（clustered index）和辅助索引（secondary index）</strong>。上面的B+Tree示例图在数据库中的实现即为聚集索引，聚集索引的B+Tree中的叶子节点存放的是整张表的行记录数据。辅助索引与聚集索引的区别在于辅助索引的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。</p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>红黑树是一种自平衡的二叉查找树，是一种高效的查找树。它是由 Rudolf Bayer 于1978年发明，在当时被称为平衡二叉 B 树(symmetric binary B-trees)。后来，在1978年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的红黑树。红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作。</p><p>它是具备了某些特性的二叉搜索树，能解决非平衡树问题，红黑树是一种接近平衡的二叉树（说它是接近平衡因为它并没有像AVL树的平衡因子的概念，它只是靠着满足红黑节点的5条性质来维持一种接近平衡的结构，进而提升整体的性能，并没有严格的卡定某个平衡因子来维持绝对平衡）</p><p>即红黑树在平衡二叉树的基础上牺牲一些标准来提高其运行效率。</p><p>首先，红黑树是一个二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡（最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，当从根节点到叶子节点的路径上黑色节点相同时，最长路径刚好是最短路径的两倍）。它同时满足以下特性：</p><ul><li>节点是红色或黑色</li><li>根是黑色</li><li>叶子节点（外部节点，空节点）都是黑色，这里的叶子节点指的是最底层的空节点（外部节点），下图中的那些null节点才是叶子节点，null节点的父节点在红黑树里不将其看作叶子节点</li><li>红色节点的子节点都是黑色<ul><li>红色节点的父节点都是黑色</li><li>从根节点到叶子节点的所有路径上不能有 2 个连续的红色节点</li></ul></li><li>从任一节点到叶子节点的所有路径都包含相同数目的黑色节点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262024442.png" alt="image-20241014164412042"></p><p>AVL是靠平衡因子来保持平衡的，比如平衡因子为1，那么左右子树的高度差就不能超过1，是一种强平衡。</p><p>对于红黑树而言，为何那5条性质，就能保证红黑树是平衡的？</p><ul><li>因为那5条性质，可以保证红黑树等价于4阶B树</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>参考资料：</p><ul><li><p><a href="https://blog.csdn.net/m0_63033419/article/details/127524644">排序算法 —— 希尔排序（图文超详细）</a></p></li><li><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">十大经典排序算法</a></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502281826324.png" alt="img"></p><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">char</span>* s,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//k = next[0]</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == s[k])&#123;</span><br><span class="line">            next[i++] = ++k; <span class="comment">//next[j+1] = k+1;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; <span class="number">0</span>)k = next[k-<span class="number">1</span>]; <span class="comment">//k = next[k-1]</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                next[i++] = k; <span class="comment">//next[j+1] = 0 回溯到头了，找不到相同前缀，则最大相同前后缀长度=0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-02 操作系统</title>
      <link href="/2025/02/26/75-02%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/02/26/75-02%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="75-02-操作系统"><a href="#75-02-操作系统" class="headerlink" title="75-02 操作系统"></a>75-02 操作系统</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>操作系统在本科的课程中就有过学习，一方面是因为时间较长了导致相关的记忆并不是很深刻，同时另一方面是因为在大学中学的操作系统仅仅只是为了应付考试，导致对其并不是真正的理解了。所以在这里再次对操作系统进行系统性的梳理和学习。</p><p>操作系统简单的来说就是对计算机系统资源的管理，类似一个管家，它负责管理你的计算机资源，比如：你的内存、你的外存、你的CPU、你的GPU等等，你所有的计算机资源都会由操作系统进行统一的管理。</p><p>那么操作系统按照功能模块来分就可以分为：内存管理模块、文件（文件都是保存在外存的嘛）管理模块、进程（进程都是由CPU运行的嘛）管理模块、设备管理和网络系统等五大模块。其中内存、文件和进程管理最为重要。下面我们一步一步的去了解这个操作系统。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091255107.png" alt="image-20250309125546036"></p><h2 id="硬件结构"><a href="#硬件结构" class="headerlink" title="硬件结构"></a>硬件结构</h2><h3 id="CPU架构图"><a href="#CPU架构图" class="headerlink" title="CPU架构图"></a>CPU架构图</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026720.png" alt="image-20241021170702988"></p><p>可以看到，一个 CPU 里通常会有多个 CPU 核心，比如上图中的 1 号和 2 号 CPU 核心，并且每个 CPU 核心都有自己的 L1 Cache 和 L2 Cache，而 L1 Cache 通常分为 dCache（数据缓存） 和 iCache（指令缓存），L3 Cache 则是多个核心共享的，这就是 CPU 典型的缓存层次。</p><p>CPU 从内存中读取数据到 Cache 的时候，并不是一个字节一个字节读取，而是一块一块的方式来读取数据的，这一块一块的数据被称为 CPU Cache  Line（缓存块），所以 CPU Cache  Line 是 CPU 从内存读取数据到 Cache 的单位。</p><h3 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h3><p><a href="https://xiaolincoding.com/os/1_hardware/how_cpu_deal_task.html#%E5%88%86%E6%9E%90%E4%BC%AA%E5%85%B1%E4%BA%AB%E7%9A%84%E9%97%AE%E9%A2%98">https://xiaolincoding.com/os/1_hardware/how_cpu_deal_task.html#%E5%88%86%E6%9E%90%E4%BC%AA%E5%85%B1%E4%BA%AB%E7%9A%84%E9%97%AE%E9%A2%98</a></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262027147.png" alt="image-20241021171922569"></p><h3 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026319.png" alt="image-20241021172929186"></p><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026953.png" alt="image-20241021174117845"></p><p>那 Linux 系统<strong>为了解决中断处理程序执行过长和中断丢失的问题，将中断过程分成了两个阶段，分别是「上半部和下半部分」</strong>。</p><h3 id="CPU缓存一致性"><a href="#CPU缓存一致性" class="headerlink" title="CPU缓存一致性"></a>CPU缓存一致性</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026758.png" alt="image-20241022205653149"></p><p>这是目前CPU的架构图，我们来看看CPU是如何运行的。</p><p>目前的CPU具有多个核心，假设这个CPU具有两个核心，现在这两个核心分别运行着两个不同的线程，这些线程会把该线程目前需要用到的数据从内存中加载到CPU Cache中，假设现在两个线程都对变量a进行操作，都对其执行a++,两个线程执行完后，写入CPU Cache中，然后写会到内存中，此时的a会是2，与实际的3不符合。</p><p>对于CPU Cache中的数据什么时候写回到内存中呢？现在有两种方法：写直达和写回。</p><h4 id="写直达"><a href="#写直达" class="headerlink" title="写直达"></a>写直达</h4><p>很简单如果CPU进行修改了，直接把修改的值写到CPU Cache和内存中。</p><h4 id="写回"><a href="#写回" class="headerlink" title="写回"></a>写回</h4><p>既然写直达由于每次写操作都会把数据写回到内存，⽽导致影响性能，于是为了要减少数据 写回内存的频率，就出现了写回（Write Back）的⽅法。 在写回机制中，当发⽣写操作时，新的数据仅仅被写⼊ Cache Block ⾥，只有当修改过的 Cache Block「被替换」时才需要写到内存中，减少了数据写回内存的频率，这样便可以提 ⾼系统的性能。</p><p>可以发现写回这个⽅法，在把数据写⼊到 Cache 的时候，只有在缓存不命中，同时数据对应 的 Cache 中的 Cache Block 为脏标记的情况下，才会将数据写到内存中，⽽在缓存命中的情 况下，则在写⼊后 Cache 后，只需把该数据对应的 Cache Block 标记为脏即可，⽽不⽤写到 内存⾥</p><p>回到原来的问题上，如何解决CPU缓存一致性的问题呢？有两种方法：写传播和事务串行化。</p><p>写传播就是写了之后告诉所有CPU核心，该Cache值被修改了。</p><p>但是如何只是进行写传播的话，会导致其它CPU核心收到的修改顺序出现问题，就导致CPU核心进行错误的处理。</p><p>那么事务串行化就是为了解决顺序不一致的问题。那么要实现事务的串行化就需要满足两点：</p><ol><li>CPU核心对于Cache中数据的操作，需要同步给其它CPU核心；</li><li>确保同一时刻只能有一个CPU核心进行修改，那就是引入了“锁”的概念，那么对于CPU核心中拥有相同数据的Cache就会给它加入锁，对于CPU核心只有拿到了锁才能进行数据修改。</li></ol><p>写传播的实现方式就是总线嗅探，CPU 需要每时每刻监听总线上的⼀切活动，但是不管别的 核⼼的 Cache 是否缓存相同的数据，都需要发出⼀个⼴播事件，这⽆疑会加重总线的负载。</p><p>事务的串行化的实现方式是一个基于总线嗅探的协议，这个协议就是MESI，MESI协议就是：</p><ul><li>Modified 已修改；</li><li>Exclusive 独占；</li><li>Shared 共享；</li><li>Invalidated 失效；</li></ul><ol><li>当 A 号 CPU 核⼼从内存读取变量 i 的值，数据被缓存在 A 号 CPU 核⼼⾃⼰的 Cache ⾥ ⾯，此时其他 CPU 核⼼的 Cache 没有缓存该数据，于是标记 Cache Line 状态为「独 占」，此时其 Cache 中的数据与内存是⼀致的； </li><li>然后 B 号 CPU 核⼼也从内存读取了变量 i 的值，此时会发送消息给其他 CPU 核⼼，由 于 A 号 CPU 核⼼已经缓存了该数据，所以会把数据返回给 B 号 CPU 核⼼。在这个时 候， A 和 B 核⼼缓存了相同的数据，Cache Line 的状态就会变成「共享」，并且其 Cache 中的数据与内存也是⼀致的； </li><li>当 A 号 CPU 核⼼要修改 Cache 中 i 变量的值，发现数据对应的 Cache Line 的状态是共享状态，则要向所有的其他 CPU 核⼼⼴播⼀个请求，要求先把其他核⼼的 Cache 中对 应的 Cache Line 标记为「⽆效」状态，然后 A 号 CPU 核⼼才更新 Cache ⾥⾯的数据， 同时标记 Cache Line 为「已修改」状态，此时 Cache 中的数据就与内存不⼀致了。</li><li>如果 A 号 CPU 核⼼「继续」修改 Cache 中 i 变量的值，由于此时的 Cache Line 是「已 修改」状态，因此不需要给其他 CPU 核⼼发送消息，直接更新数据即可。 </li><li>如果 A 号 CPU 核⼼的 Cache ⾥的 i 变量对应的 Cache Line 要被「替换」，发现  Cache Line 状态是「已修改」状态，就会在替换前先把数据同步到内存。</li></ol><h2 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h2><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026129.png" alt="image-20241021175358520"></p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026631.png" alt="image-20241021180128082"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026240.png" alt="image-20241021180247774"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091315974.png" alt="image-20250309131529917"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091320671.png" alt="image-20250309132030595"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091335265.png" alt="image-20250309133517202"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091349281.png" alt="image-20250309134932226"></p><h3 id="内存分段"><a href="#内存分段" class="headerlink" title="内存分段"></a>内存分段</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026581.png" alt="image-20241021181307680"></p><p>程序是由若⼲个逻辑分段组成的，如可由代码分段、数据分段、栈段、堆段组成。不同的段 是有不同的属性的，所以就⽤分段（Segmentation）的形式把这些段分离出来。</p><p>操作系统会把一个程序分为几段，代码段、数据段、栈段和堆段。</p><p>在虚拟地址中会保存该地址的所属的段号，在段内偏移量是多少。通过段号可以找到该段表，通过段表得到该段的起始地址，通过虚拟地址的段内偏移量既可以得到虚拟地址对应的物理内存地址。</p><ul><li><strong>外部碎片问题</strong></li></ul><p>虽然分段提供了灵活的内存管理，但由于不同段的大小和生命周期各不相同，随着时间的推移，内存中会出现未使用的小碎片。这些碎片无法被有效利用，从而导致内存浪费，称为“外部碎片”。</p><p><strong>例子</strong>：假设有3个段分别为A、B、C，它们分配在物理内存中。但如果B段被释放了，这就会在A和C之间留下一个未使用的小空间，这个空间可能不足以容纳新段，导致新的大段无法分配。</p><ul><li><strong>地址转换复杂</strong></li></ul><p>每个内存段都有自己的基地址和大小，操作系统在访问内存时需要通过段表来查找段的起始地址，然后再加上段内偏移量才能得到物理地址。这增加了地址转换的复杂性和管理开销。</p><p><strong>例子</strong>：每次访问内存时，CPU需要查找段表以确定段的基地址，这会使内存访问变得比直接使用物理地址慢。</p><ul><li><strong>不适合现代大内存模型</strong></li></ul><p>随着程序复杂性和内存需求的增加，分段机制无法很好地处理大规模的内存需求。现代程序通常需要访问大块的连续内存，而分段提供的逻辑段无法满足这一需求。</p><p><strong>例子</strong>：某些现代应用程序（如大型数据库或机器学习模型）需要巨大的内存空间，而分段机制的划分方式在处理大规模连续内存时效率不高，无法与分页机制一样灵活地分配内存。</p><h3 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h3><p>分段的好处就是能产⽣连续的内存空间，但是会出现内存碎⽚和内存交换的空间太⼤的问 题。 要解决这些问题，那么就要想出能少出现⼀些内存碎⽚的办法。另外，当需要进⾏内存交换 的时候，让需要交换写⼊或者从磁盘装载的数据更少⼀点，这样就可以解决问题了。这个办 法，也就是内存分⻚（Paging）。</p><p>分⻚是把整个虚拟和物理内存空间切成⼀段段固定尺⼨的⼤⼩。这样⼀个连续并且尺⼨固定 的内存空间，我们叫⻚（Page）。在 Linux 下，每⼀⻚的⼤⼩为 4KB 。</p><p>分页相对于分段来说就是把一页的空间快速缩小，之前的一段会很大比如100MB等等，现在一页4KB（Linux操作系统上），这样计算对内存进行回收，发生内存碎片的空间会很少，相对来说就可以认为无内存碎片。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262026462.png" alt="image-20241021192013811"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262027319.png" alt="image-20241021192113626"></p><p>但是这样会导致一个问题就是空间问题。</p><p>因为操作系统是可以同时运⾏⾮常多的进程的，那这不就意味着⻚表会⾮常的庞⼤。 在 32 位的环境下，虚拟地址空间共有 4GB，假设⼀个⻚的⼤⼩是 4KB（2^12），那么就需 要⼤约 100 万 （2^20） 个⻚，每个「⻚表项」需要 4 个字节⼤⼩来存储，那么整个 4GB 空 间的映射就需要有 4MB 的内存来存储⻚表。 这 4MB ⼤⼩的⻚表，看起来也不是很⼤。但是要知道每个进程都是有⾃⼰的虚拟地址空间 的，也就说都有⾃⼰的⻚表。 那么， 100 个进程的话，就需要 400MB 的内存来存储⻚表，这是⾮常⼤的内存了，更别说 64 位的环境了。</p><p>那么页表存储的缺点也出来了就是在多进程环境下，页表占据的空间过大。</p><h3 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262027664.png" alt="image-20241021194336762"></p><p>你可能会问，分了⼆级表，映射 4GB 地址空间就需要 4KB（⼀级⻚表）+ 4MB（⼆ 级⻚表）的内存，这样占⽤空间不是更⼤了吗？</p><p>每个进程都有 4GB 的虚拟地址空间，⽽显然对于⼤多数程序来说，其使⽤到的空间远未达到 4GB，因为会存在部分对应的⻚表项都是空的，根本没有分配，对于已分配的⻚表项，如果 存在最近⼀定时间未访问的⻚表，在物理内存紧张的情况下，操作系统会将⻚⾯换出到硬 盘，也就是说不会占⽤物理内存。 如果使⽤了⼆级分⻚，⼀级⻚表就可以覆盖整个 4GB 虚拟地址空间，但如果某个⼀级⻚表的 ⻚表项没有被⽤到，也就不需要创建这个⻚表项对应的⼆级⻚表了，即可以在需要时才创建 ⼆级⻚表。做个简单的计算，假设只有 20% 的⼀级⻚表项被⽤到了，那么⻚表占⽤的内存空 间就只有 4KB（⼀级⻚表） + 20% * 4MB（⼆级⻚表）&#x3D; 0.804MB ，这对⽐单级⻚表的 4MB 是不是⼀个巨⼤的节约？</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262027756.png" alt="image-20241021194453588"></p><h3 id="段页式内存管理"><a href="#段页式内存管理" class="headerlink" title="段页式内存管理"></a>段页式内存管理</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028587.png" alt="image-20241021195336021"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028529.png" alt="image-20241021195411259"></p><p>段⻚式地址变换中要得到物理地址须经过三次内存访问：</p><ul><li>第⼀次访问段表，得到⻚表起始地址； </li><li>第⼆次访问⻚表，得到物理⻚号； </li><li>第三次将物理⻚号与⻚内位移组合，得到物理地址。</li></ul><p>可⽤软、硬件相结合的⽅法实现段⻚式地址变换，这样虽然增加了硬件成本和系统开销，但 提⾼了内存的利⽤率。</p><h3 id="Linux内存管理"><a href="#Linux内存管理" class="headerlink" title="Linux内存管理"></a>Linux内存管理</h3><p>Linux 内存主要采⽤的是⻚式内存管理，但同时也不可避免地涉及了段机制。Linux 系统中的每个段都是从 0 地址开始的整个 4GB 虚拟空间（32 位环境下），也就是所 有的段的起始地址都是⼀样的。这意味着，Linux 系统中的代码，包括操作系统本身的代码和 应⽤程序代码，所⾯对的地址空间都是线性地址空间（虚拟地址），这种做法相当于屏蔽了 处理器中的逻辑地址概念，段只被⽤于访问控制和内存保护。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028510.png" alt="image-20241021195934657"></p><p>再来说说，内核空间与⽤户空间的区别： 进程在⽤户态时，只能访问⽤户空间内存； 只有进⼊内核态后，才可以访问内核空间的内存； 虽然每个进程都各⾃有独⽴的虚拟内存，但是每个虚拟内存中的内核地址，其实关联的都是 相同的物理内存。这样，进程切换到内核态后，就可以很⽅便地访问内核空间内存。</p><h3 id="写时复制copy-on-write"><a href="#写时复制copy-on-write" class="headerlink" title="写时复制copy on write"></a>写时复制copy on write</h3><p>主进程在执行 fork 的时候，操作系统会把主进程的「页表」复制一份给子进程，这个页表记录着虚拟地址和物理地址映射关系，而不会复制物理内存，也就是说，两者的虚拟空间不同，但其对应的物理空间是同一个。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091718247.png" alt="image-20250309171842180"></p><p>这样一来，子进程就共享了父进程的物理内存数据了，这样能够节约物理内存资源，页表对应的页表项的属性会标记该物理内存的权限为只读。这是为了在无论是父进程还是子进程需要修改的时候，触发<strong>写保护中断</strong>，因为现在的页表权限为只可读。</p><p>其本质就是需要复制一个父进程里的内容，但是目前只是复制了一份页表，但是其所使用的是同一个物理地址，当一个需要修改时，就需要重新设置内存读写权限。在写保护中断处理函数中会对物理地址进行复制，然后在对应的页表重新设置映射关系，然后将父子进程的内存读写权限设置为可读写，最后才会对内存进行写操作，这个过程为写时复制。</p><p>写时复制顾名思义，在发生写操作的时候，操作系统才会去复制物理内存，这样是为了防止 fork 创建子进程时，由于物理内存数据的复制时间过长而导致父进程长时间阻塞的问题。</p><h3 id="brk-mmap"><a href="#brk-mmap" class="headerlink" title="brk &amp; mmap"></a>brk &amp; mmap</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091730591.png" alt="image-20250309173057525"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091731790.png" alt="image-20250309173109735"></p><h3 id="操作系统内存不足的时候会发生什么"><a href="#操作系统内存不足的时候会发生什么" class="headerlink" title="操作系统内存不足的时候会发生什么"></a>操作系统内存不足的时候会发生什么</h3><p>在一个进程分配内存的时候是分配的虚拟内存，而不是直接分配物理内存，在分配好虚拟内存之后，当使用到这个虚拟内存的时候，会去页表上查询该虚拟内存所对应的物理内存，如果在该页表并没有该映射关系的话，那么就需要进行加载该页，这时候才会发生操作系统内存不足。</p><p>当操作系统发现目前的内存并不足以支持该页的加载，就会根据页面置换算法，选择一个页面将其交换到swap硬盘中，腾出空间给新的页面。</p><p>同时内核也会同步进行内存回收的工作，内核中回收的方式有两种：</p><ol><li>后台内存回收：后台内存回收嘛，顾名思义就是异步的，并不会阻塞进程的执行，会唤醒kswapd内核线程进行异步的回收；</li><li>直接内存回收：当后台内存回收的速度跟不上进程内存的申请速度的话，就会直接使用直接内存回收，这个过程是同步的，会阻塞进程的执行。</li></ol><p>但是如果swap和内存回收也无法满足进行的内存申请的话，就会选择触发OOM机制，OOM Killer 机制会根据算法选择一个占用物理内存较高的进程，然后将其杀死，以便释放内存资源，如果物理内存依然不足，OOM Killer 会继续杀死占用物理内存较高的进程，直到释放足够的内存位置。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091745702.png" alt="image-20250309174534630"></p><p>主要有两类内存可以被回收，而且它们的回收方式也不同。</p><ul><li>文件页（File-backed Page）：内核缓存的磁盘数据（Buffer）和内核缓存的文件数据（Cache）都叫作文件页。大部分文件页，都可以直接释放内存，以后有需要时，再从磁盘重新读取就可以了。而那些被应用程序修改过，并且暂时还没写入磁盘的数据（也就是脏页），就得先写入磁盘，然后才能进行内存释放。所以，回收干净页的方式是直接释放内存，回收脏页的方式是先写回磁盘后再释放内存。</li><li>匿名页（Anonymous Page）：这部分内存没有实际载体，不像文件缓存有硬盘文件这样一个载体，比如堆、栈数据等。这部分内存很可能还要再次被访问，所以不能直接释放内存，它们回收的方式是通过 Linux 的 Swap 机制，Swap 会把不常访问的内存先写到磁盘中，然后释放这些内存，给其他更需要的进程使用。再次访问这些内存时，重新从磁盘读入内存就可以了。</li></ul><p> 文件页和匿名页的回收都是基于 LRU 算法，也就是优先回收不常访问的内存。LRU 回收算法，实际上维护着 active 和 inactive 两个双向链表，其中： </p><ul><li>active_list 活跃内存页链表，这里存放的是最近被访问过（活跃）的内存页； </li><li>inactive_list 不活跃内存页链表，这里存放的是很少被访问（非活跃）的内存页；</li></ul><p> 越接近链表尾部，就表示内存页越不常访问。这样，在回收内存时，系统就可以根据活跃程度，优先回收不活跃的内存。</p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091750775.png" alt="image-20250309175026733"></p><ul><li>最佳页面算法：选择之后长时间不会再使用的页面进行置换；</li><li>最近最久未使用置换算法：选择上一次使用时间最远的页面进行置换；</li><li>先进先出页面置换算法：选择加入这个页表时间最长的页面进行置换；</li><li>时钟页面置换算法：如果它的访问位位是 0 就淘汰该页面，并把新的页面插入这个位置，然后把表针前移一个位置； • 如果访问位是 1 就清除访问位，并把表针前移一个位置，重复这个过程直到找到了一个访问位为 0 的页面为止；<img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503091758951.png" alt="image-20250309175732230"></li><li>最不常用页面置换算法：选择使用次数最少的页面进行置换；</li></ul><h2 id="中断-1"><a href="#中断-1" class="headerlink" title="中断"></a>中断</h2><h3 id="什么是中断"><a href="#什么是中断" class="headerlink" title="什么是中断"></a>什么是中断</h3><p>中断时指在操作系统执行的过程中，停下手中的事情来处理其它的事情，停下来不是因为时间片使用完而导致的切换，而是不得不处理，处理完之后还需要回来接着处理下面的事情。</p><p>中断一般分为外部中断和内部中断。</p><p>外部中断：</p><ol><li>可屏蔽中断：这类中断对于处理时机没有特殊要求，是一些不会影响系统运行的操作，例如打印机，网卡等，甚至都可以不用进行处理。其通过<strong>INTR线</strong>向CPU请求中断；</li><li>不可屏蔽中断：通过<strong>NMI线</strong>向CPU请求的中断，如电源掉电，硬件线路故障等。这里不可屏蔽的意思不是不可以屏蔽，不建议屏蔽，而是问题太大，屏蔽不了，不能屏蔽的意思。注：INTR和NMI都是CPU的引脚；</li></ol><p>内部中断一般分为陷阱、故障和终止。</p><ol><li><p>陷阱：<strong>是一种有意的，预先安排的异常事件</strong>，一般是在编写程序时故意设下的陷阱指令，而后执行到陷阱指令后，CPU将会调用特定程序进行相应的处理，<strong>处理结束后返回到陷阱指令的下一条指令</strong>。如<strong>系统调用，程序调试功能</strong>等。如printf函数，最底层的实现中会有一条int 0x80指令，这就是一条陷阱指令，使用0x80号中断进行系统调用。</p><blockquote><p>0x80 号中断是 <strong>Linux 早期系统调用（syscall）的入口</strong>，用于用户态程序向内核请求服务。</p></blockquote></li><li><p>故障：故障是在引起故障的指令被执行，但还没有执行结束时，CPU检测到的一类的意外事件。出错时交由故障处理程序处理，**如果能处理修正这个错误，就将控制返回到引起故障的指令即CPU重新执这条指令。如果不能处理就报错。**常见的故障为缺页，当CPU引用的虚拟地址对应的物理页不存在时就会发生故障。缺页异常是能够修正的，有着专门的缺页处理程序，它会将缺失的物理页从磁盘中重新调进主存。而后再次执行引起故障的指令时便能够顺利执行了。</p></li><li><p>终止：执行指令的过程中发生了致命错误，不可修复，程序无法继续运行，只能终止，通常会是一些硬件的错误。**终止处理程序不会将控制返回给原程序，而是直接终止原程序。</p></li></ol><h2 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>首先是怎么去理解这个IO，我们可以从三个角度去认识这个IO。</p><p>首先是从直观上来看，这对应在我们现实中电脑的显示器，键盘鼠标等主机外设，我们通过键盘和鼠标给计算机输入命令，计算机通过显示器来输出结果，这就是直观上上的输入输出。</p><p>其次我们从计算机结构上来看。在实际情况下，我们说的IO其本质都是计算机层面上的IO，IO是输入输出流，任何从CPU或者内存流入OR流出的数据都是IO流。比如我们从硬盘中加载数据到内存中，这就是输入流，我们把内存中的数据加载到硬盘中，这就是输出流。</p><p>最后我们从编程层面上来看。此时IO的主体应该是程序的运行态也就是进程，特别强调我们的程序其实并不存在实质的IO过程，真正的IO过程其实是操作系统的事情。在这个层面上只涉及到两个概念：IO调用和IO执行。不难猜到的是，进程通过IO调用操作系统进行IO执行。IO调用的目的就是将进程内部的数据迁移到外部即输出，将进程外面的数据迁移到数据内部即输入。这里的外部数据一般为硬盘内数据或者Socket的网络数据等。</p><p>如果从应用层面来看的话，我们来看一下IO输入和输出。</p><ol><li>IO输入：通过网卡获取到网络数据包，然后网卡通过DMA（直接内存访问）技术，将该数据直接迁移到内核内存缓冲区，这样就无需CPU的参与，提高了效率。内核将数据从内核内存缓冲区拷贝到用户空间缓冲区（也就是进程内存空间中）；</li><li>IO输出：反过来。</li></ol><p><strong>非阻塞 I&#x2F;O + 多路复用</strong> 是解决高并发下线程开销问题的核心方案，<strong>本身不会导致 CPU 空转</strong>。</p><p><strong>流程图解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网络数据 → 网卡缓冲区 →（DMA拷贝）→ 内核空间缓冲区 →（系统调用）→ 用户空间缓冲区 → 进程处理</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111504159.png" alt="image-20250311150431111"></p><h3 id="阻塞和非阻塞IO"><a href="#阻塞和非阻塞IO" class="headerlink" title="阻塞和非阻塞IO"></a>阻塞和非阻塞IO</h3><p>阻塞和非阻塞强调的是进程对于操作系统IO是否处于就绪状态的处理方式。</p><p>上面已经说过，应用程序的IO实际是分为两个步骤，IO调用和IO执行。IO调用是由进程发起，IO执行是操作系统的工作。操作系统的IO情况决定了进程IO调用是否能够得到立即响应。如进程发起了读取数据的IO调用，操作系统需要将外部数据拷贝到进程缓冲区，在有数据拷贝到进程缓冲区前，进程缓冲区处于不可读状态，我们称之为操作系统IO未就绪。</p><p>进程的IO调用是否能得到立即执行是需要操作系统IO处于就绪状态的，对于读取数据的操作，如果操作系统IO处于未就绪状态，当前进程或线程如果一直等待直到其就绪，该种IO方式为阻塞IO。如果进程或线程并不一直等待其就绪，而是可以做其他事情，这种方式为非阻塞IO。所以对于非阻塞IO，我们编程时需要经常去轮询就绪状态。</p><p>如果是传统的阻塞IO，那么对应每一个请求都会生成一个线程去等待IO就行，在高并发的情况下，资源消耗巨大。</p><p>但是如果是非阻塞IO的话，那么如果该线程需要等待IO就绪的话，不会一直停留等待IO就绪，且也不会对于每一个请求等待IO就绪都生成一个线程去等待。它会根据不同的实现，一般使用单线程或者IO多路复用的形式减少线程去轮询。但是我们也可以明显的发型，非阻塞IO会导致CPU空转，一直轮询，导致资源的浪费。</p><h3 id="同步和异步IO"><a href="#同步和异步IO" class="headerlink" title="同步和异步IO"></a>同步和异步IO</h3><p>我们经常会谈及同步IO和异步IO。同步和异步描述的是针对当前执行线程、或进程而言，发起IO调用后，当前线程或进程是否挂起等待操作系统的IO执行完成。</p><p>我们说一个IO执行是同步执行的，意思是程序发起IO调用，当前线程或进程需要等待操作系统完成IO工作并告知进程已经完成，线程或进程才能继续往下执行其他既定指令。</p><p>如果说一个IO执行是异步的，意思是该动作是由当前线程或进程请求发起，且当前线程或进程不必等待操作系统IO的执行完毕，可直接继续往下执行其他既定指令。操作系统完成IO后，当前线程或进程会得到操作系统的通知。</p><p>以一个读取数据的IO操作而言，在操作系统将外部数据写入进程缓冲区这个期间，进程或线程挂起等待操作系统IO执行完成的话，这种IO执行策略就为同步，如果进程或线程并不挂起而是继续工作，这种IO执行策略便为异步。</p><h3 id="非阻塞IO与异步IO"><a href="#非阻塞IO与异步IO" class="headerlink" title="非阻塞IO与异步IO"></a>非阻塞IO与异步IO</h3><p>通过上面的介绍，我们知道了非阻塞IO与异步IO分别指的是什么，但是非阻塞IO与异步IO有什么具体的区别呢？</p><p>非阻塞IO在等待IO就绪的时候，会直接报出错误从而可以从这个等待中抽出身，但是后续还是需要不断的去轮询IO是否准备就绪。异步IO在这里都是一致的，区别就在后面这里。一旦IO准备就绪了，非阻塞IO轮询到了（这里就不是实时性的），就会配合操作系统把需要的数据复制到进程缓冲区中。但是异步IO的本质就在这里，它不需要一直轮询，而是操作系统会通知进程IO已经准备就绪，且不需要配合操作系统将数据复制到进程缓冲区中，这就是异步IO与非阻塞IO的本质区别。</p><p>其实非阻塞IO是同步非阻塞IO。</p><h3 id="关键区别：数据拷贝阶段"><a href="#关键区别：数据拷贝阶段" class="headerlink" title="关键区别：数据拷贝阶段"></a><strong>关键区别：数据拷贝阶段</strong></h3><table><thead><tr><th align="center"><strong>阶段</strong></th><th align="center"><strong>非阻塞IO</strong></th><th align="center"><strong>异步IO</strong></th></tr></thead><tbody><tr><td align="center"><strong>数据到达网卡</strong></td><td align="center">内核将数据拷贝到内核空间缓冲区</td><td align="center">内核将数据拷贝到内核空间缓冲区</td></tr><tr><td align="center"><strong>数据拷贝到用户空间</strong></td><td align="center"><strong>进程调用<code>recv()</code>主动拷贝</strong></td><td align="center"><strong>内核自动完成拷贝</strong></td></tr><tr><td align="center"><strong>进程参与度</strong></td><td align="center">同步操作（进程需主动处理）</td><td align="center">异步操作（进程无需参与拷贝）</td></tr></tbody></table><h3 id="你了解过哪些io模型？"><a href="#你了解过哪些io模型？" class="headerlink" title="你了解过哪些io模型？"></a>你了解过哪些io模型？</h3><ul><li><strong>阻塞I&#x2F;O模型</strong>：应用程序发起I&#x2F;O操作后会被阻塞，直到操作完成才返回结果。适用于对实时性要求不高的场景。</li><li><strong>非阻塞I&#x2F;O模型</strong>：应用程序发起I&#x2F;O操作后立即返回，不会被阻塞，但需要不断轮询或者使用select&#x2F;poll&#x2F;epoll等系统调用来检查I&#x2F;O操作是否完成。适合于需要进行多路复用的场景，例如需要同时处理多个socket连接的服务器程序。</li><li><strong>I&#x2F;O复用模型</strong>：通过select、poll、epoll等系统调用，应用程序可以同时等待多个I&#x2F;O操作，当其中任何一个I&#x2F;O操作准备就绪时，应用程序会被通知。适合于需要同时处理多个I&#x2F;O操作的场景，比如高并发的服务端程序。 </li><li><strong>信号驱动I&#x2F;O模型</strong>：应用程序发起I&#x2F;O操作后，可以继续做其他事情，当I&#x2F;O操作完成时，操作系统会向应用程序发送信号来通知其完成。适合于需要异步I&#x2F;O通知的场景，可以提高系统的并发能力。</li><li><strong>异步I&#x2F;O模型</strong>：应用程序发起I&#x2F;O操作后可以立即做其他事情，当I&#x2F;O操作完成时，应用程序会得到通知。异步I&#x2F;O模型由操作系统内核完成I&#x2F;O操作，应用程序只需等待通知即可。适合于需要大量并发连接和高性能的场景，能够减少系统调用次数，提高系统效率。</li></ul><h3 id="IO指的哪些资源"><a href="#IO指的哪些资源" class="headerlink" title="IO指的哪些资源"></a>IO指的哪些资源</h3><p>在操作系统中，<strong>I&#x2F;O（输入&#x2F;输出）</strong> 是指<strong>计算机和外部设备之间的数据交换</strong>，不仅仅是网络 I&#x2F;O，还包括磁盘 I&#x2F;O、终端 I&#x2F;O 等。</p><h3 id="阻塞IO的情况下，阻塞的是什么？"><a href="#阻塞IO的情况下，阻塞的是什么？" class="headerlink" title="阻塞IO的情况下，阻塞的是什么？"></a>阻塞IO的情况下，阻塞的是什么？</h3><p>在 <strong>阻塞 I&#x2F;O</strong> 的情况下：</p><ul><li><strong>该线程（进程）</strong> 会进入 <strong>“睡眠”状态（Blocked）</strong>，直到数据到达。</li><li><strong>CPU 资源不会被浪费</strong>，而是被操作系统调度给其他可运行的任务。</li><li><strong>但该线程自己无法执行后续任务</strong>，它只能等待 <code>recv()</code> 返回数据后才能继续执行。</li></ul><h3 id="服务器处理并发请求有哪几种方式？"><a href="#服务器处理并发请求有哪几种方式？" class="headerlink" title="服务器处理并发请求有哪几种方式？"></a>服务器处理并发请求有哪几种方式？</h3><ul><li><strong>单线程web服务器方式</strong>：web服务器一次处理一个请求，结束后读取并处理下一个请求，性能比较低，一次只能处理一个请求。 </li><li><strong>多进程&#x2F;多线程web服务器</strong>：web服务器生成多个进程或线程并行处理多个用户请求，进程或线程可以按需或事先生成。有的web服务器应用程序为每个用户请求生成一个单独的进程或线程来进行响应，不过，一旦并发请求数量达到成千上万时，多个同时运行的进程或线程将会消耗大量的系统资源。（即每个进程只能响应一个请求，并且一个进程对应一个线程）</li><li><strong>I&#x2F;O多路复用web服务器</strong>：web服务器可以<strong>I&#x2F;O多路复用</strong>，达到只用一个线程就能监听和处理多个客户端的 i&#x2F;o 事件。</li><li><strong>多路复用多线程web服务器</strong>：将多进程和多路复用的功能结合起来形成的web服务器架构，其避免了让一个进程服务于过多的用户请求，并能充分利用多CPU主机所提供的计算能力。（这种架构可以理解为有多个进程，并且一个进程又生成多个线程，每个线程处理一个请求）</li></ul><h3 id="讲一讲IO多路复用"><a href="#讲一讲IO多路复用" class="headerlink" title="讲一讲IO多路复用"></a>讲一讲IO多路复用</h3><p>通过上面了解的非阻塞IO，也就是NIO，它对于每一个请求不会都去生成一个线程去一直阻塞等待IO就绪。为了避免这个线程过多导致的资源消耗，可以采用IO多路复用技术来解决这个问题。</p><p>IO多路复用是单线程的，也就是对于所有的请求都只要一个线程来轮询IO是否就绪，用专业的话来说就是：<strong>I&#x2F;O 多路复用</strong> 使得程序能 <strong>同时监听 多个文件描述符</strong>，能够提高程序的性能。</p><p>那么IO多路复用技术有哪些呢？</p><p>第一种，通过Select或者poll。<img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503110019687.png" alt="image-20250311001933526"></p><p>第二种通过epoll<img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503110020292.png" alt="image-20250311002004154"></p><h4 id="Select-Poll"><a href="#Select-Poll" class="headerlink" title="Select&#x2F;Poll"></a>Select&#x2F;Poll</h4><p>首先要构造一个关于 <strong>文件描述符</strong>的 列表，将要 监听的 <strong>文件描述符</strong> 添加 到该列表中。</p><p>调用一个 <strong>系统函数</strong>，监听 该列表中的文件描述符，直到这些描述符中的一个或者多个进行 I&#x2F;O操作 时，该函数才返回。</p><ul><li>a. 这个函数是 阻塞</li><li>b. 函数对文件描述符的检测的操作是 由 内核 完成的</li></ul><p>在返回时，它会告诉进程有 多少（哪些）描述符 要进行 I&#x2F;O操作。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111505644.png" alt="image-20250311150512581"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503110032730.png" alt="image-20250311003240641"></p><p>select 实现多路复用的方式是，将已连接的 Socket 都放到一个文件描述符集合，然后调用 select 函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生，检查的方式很粗暴，就是通过遍历文件描述符集合的方式，当检查到有事件产生后，将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合拷贝回用户态里，然后用户态还需要再通过遍历的方法找到可读或可写的 Socket，然后再对其处理。 </p><p>所以，对于 select 这种方式，需要进行 2 次「遍历」文件描述符集合，一次是在内核态里，一个次是在用户态里 ，而且还会发生 2 次「拷贝」文件描述符集合，先从用户空间传入内核空间，由内核修改后，再传出到用户空间中</p><p>来对Select与Poll做一个小总结，Select是非阻塞IO中用到的IO多路复用的技术实现。Select会将Socket连接放置在一个文件描述符集合中，然后会拷贝到内核中，并会进行监听，监听的方式也很简单，内核会监控这个文件描述集合，查看是否有事件发生，然后将该Socket标记为可读或者可写，然后内核会把该文件描述集合拷贝到用户态里，然后用户态也就是进程需要再次遍历这个文件描述符集合，查看里面是否有可读或者可写的Socket，然后再对其处理。</p><p>Select采用的是BitMap，这是一个固定长度的，用来表述文件描述符集合，索引其支持的文件描述符的个数也是有限的（因为采用固定的BitMap嘛），其默认最大值是1024个。</p><p>但是Poll不在使用BitMap来存储文件描述符集合，选择了采用动态数组来进行保存，以链表的形式。</p><p>但是 poll 和 select 并没有太大的本质区别，都是使用「线性结构」存储进程关注的 Socket 集合，因此都需要遍历文件描述符集合来找到可读或可写的 Socket，时间复杂度为 O(n)，而且也需要在用户态与内核态之间拷贝文件描述符集合，这种方式随着并发数上来，性能的损耗会呈指数级增长。</p><h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><p>我们先来分析一下上面中Select和Poll技术的缺点，首先就是需要进行两次用户态和内核态之间的拷贝，且需要对文件描述符集合进行两次遍历，并不高效，所以epoll需要对此进行优化。</p><p>首先对遍历来进行优化，Poll采用的是动态数组，是以链表的形式实现的，遍历的时间复杂度为O(n)，epoll则才用红黑树作为其文件描述符集合的数据结构，其时间复杂度O(log n)。</p><p>其次针对两次拷贝进行优化，Select需要进行两次拷贝，而epoll采用mmap映射也就是共享内存在内核和用户态之间进行传递时间，避免的数据拷贝。</p><p>最后针对每次都需要遍历所有的文件描述符集合进行优化，epoll采用事假驱动中的回调机制，内核通过回调函数将就绪的fd加入就绪队列。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111445811.png" alt="image-20250311144541745"></p><p>优化之后，还有对其他的进行优化，比如触发模式的优化。</p><ul><li>边缘触发：使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；</li><li>水平触发：使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；</li></ul><p>举个例子，你的快递被放到了一个快递箱里，如果快递箱只会通过短信通知你一次，即使你一直没有去取，它也不会再发送第二条短信提醒你，这个方式就是边缘触发；如果快递箱发现你的快递没有被取出，它就会不停地发短信通知你，直到你取出了快递，它才消停，这个就是水平触发的方式。</p><h3 id="Redis，Nginx，Netty-是依赖什么做的这么高性能？"><a href="#Redis，Nginx，Netty-是依赖什么做的这么高性能？" class="headerlink" title="Redis，Nginx，Netty 是依赖什么做的这么高性能？"></a>Redis，Nginx，Netty 是依赖什么做的这么高性能？</h3><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>传统 IO 的工作方式，从硬盘读取数据，然后再通过网卡向外发送，我们需要进行 4 上下文切换，和 4 次数据拷贝，其中 2 次数据拷贝发生在内存里的缓冲区和对应的硬件设备之间，这个是由 DMA 完成，另外 2 次则发生在内核态和用户态之间，这个数据搬移工作是由 CPU 完成的。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111552497.png" alt="image-20250311155254426"></p><p>为了提高文件传输的性能，于是就出现了零拷贝技术，它通过一次系统调用（sendfile 方法）合并了磁盘读取与网络发送两个操作，降低了上下文切换次数。另外，拷贝数据都是发生在内核中的，天然就降低了数据拷贝的次数。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111553092.png" alt="image-20250311155357028"></p><p>零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。 </p><p>总体来看，零拷贝技术可以把文件传输的性能提高至少一倍以上。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/weixin_43412762/article/details/136436746?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522ebcc7c6f13bb7a0a8cfee25f609a1bda%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=ebcc7c6f13bb7a0a8cfee25f609a1bda&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-136436746-null-null.142%5Ev102%5Epc_search_result_base6&utm_term=IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&spm=1018.2226.3001.4187">Linux网络编程—— IO多路复用</a></li></ol><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h3><p>在Linux中，”**一切皆文件”（Everything is a file）**是一个重要的概念，用于描述Linux操作系统中所有资源和设备都以文件的形式进行访问和处理。</p><p>  这个概念可以理解为，无论是硬盘上的文件、网卡、设备、进程等，都被抽象为文件的形式存在。在Linux系统中，通过文件系统（File System）来管理和访问这些资源。</p><p>具体来说，”<strong>一切皆文件</strong>“可以被解释为：</p><p>文件：在Linux中，普通的文件就是我们常见的文本文件、二进制文件等。它们被组织成一个层次结构的目录树，通过路径来定位和访问。</p><p>目录：目录也是一种文件，它包含了其他文件和目录的信息。通过目录，可以组织和管理文件的层次结构。</p><p>设备文件：Linux将硬件设备（如磁盘、网络接口等）和虚拟设备（例如打印机，输入设备）都看作是文件来处理。通过设备文件，可以读取和写入设备的数据。</p><p>进程：在Linux系统中，每个正在运行的进程都有与之关联的文件。通过读取和写入相应的文件，可以与进程进行通信和交互。<br> 通过将所有资源都抽象为文件，Linux提供了一套统一的接口，可以使用相同的命令和工具来访问和管理不同的资源。这种统一性使得Linux操作系统更加灵活和强大，同时也方便了开发者和系统管理员进行各种操作和配置。</p><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p> 我们知道在Linux系统中一切皆可以看成是文件，文件又可分为：普通文件、目录文件、链接文件和设备文件。在操作这些所谓的文件的时候，我们每操作一次就找一次名字，这会耗费大量的时间和效率。所以Linux中规定每一个文件对应一个索引，这样要操作文件的时候，我们直接找到索引就可以对其进行操作了。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503111422384.png" alt="image-20250311142208300"></p><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/weixin_67596609/article/details/132224088?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522bfe0372d288f78048a0094d5cb5494c4%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=bfe0372d288f78048a0094d5cb5494c4&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-132224088-null-null.142%5Ev102%5Epc_search_result_base6&utm_term=%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6&spm=1018.2226.3001.4187">【Linux从入门到精通】文件描述符详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-04 Java设计模式</title>
      <link href="/2025/02/26/75-04%20Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/02/26/75-04%20Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="75-04-Java设计模式"><a href="#75-04-Java设计模式" class="headerlink" title="75-04 Java设计模式"></a>75-04 Java设计模式</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/zhangerqing/article/details/8194653">Java之美[从菜鸟到高手演变]之设计模式</a></li><li></li></ol><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>总体来说设计模式分为三大类：</p><p>创建型模式，共五种：<strong>工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</strong></p><p>结构型模式，共七种：<strong>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</strong>。</p><p>行为型模式，共十一种：<strong>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</strong>。</p><p>其实还有两类：并发型模式和线程池模式。用一个图片来整体描述一下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262032667.jpeg" alt="img"></p><h2 id="创造型模式"><a href="#创造型模式" class="headerlink" title="创造型模式"></a>创造型模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="普通工厂模式"><a href="#普通工厂模式" class="headerlink" title="普通工厂模式"></a>普通工厂模式</h4><p>建立一个工厂类，该类会对实现了某一接口的类进行实例化。用户使用这个工具类时，传入需要创建类的类型，然后工厂类创建进行返回。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262032935.png" alt="img"></p><p>以这个为例，接口Sender的两个实现类Mail and Sms实现了接口定义的方法，那么在这个接口的工厂类中会这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">(String type)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;mail&quot;</span>.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;sms&quot;</span>.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入正确的类型!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SendFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendFactory</span>();</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> factory.produce(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们认真思考一下这个工厂，如果传入的数据参数出现问题，则这个工厂就不能成功创建出正常的实现类。</strong></p><p>为了解决这个问题，<strong>多个工厂方法模式</strong>出现了。</p><h3 id="多个工厂方法模式"><a href="#多个工厂方法模式" class="headerlink" title="多个工厂方法模式"></a>多个工厂方法模式</h3><p>为了解决普通工厂出现的问题，多个工厂实现类的解决方法为：<strong>为原来的普通工厂实现类添加接口实现类的实例化方法</strong>，使用者只需要调用该工厂提供的某个类的实例化方法进行创建即可，这样就不可能出现传入参数出错等问题。</p><p>SendFactory类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produceMail</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produceSms</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂使用类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SendFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendFactory</span>();</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> factory.produceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a>静态工厂方法模式</h3><p>回顾一下上文的多个工厂方法模式，如果使用者需要使用这个工厂时，就需要创建一个工厂对象，如果使用的地方过多，就会存在大量重复的工厂对象，消耗了内存，所以把这个工厂方法定义成静态工厂方法。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262032540.jpg" alt="img_v3_02c8_ad246c57-4ec6-4d0a-9d25-05cabe9293cg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title function_">produceMail</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title function_">produceSms</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> SendFactory.produceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体来说，工厂模式适合：凡是出现了<strong>大量的产品需要创建</strong>，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，<strong>我们会选用第三种——静态工厂方法模式。</strong></p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>在上文中的静态工厂模式中，如果又要新增一个类来实现这个发送行为时，就需要在原来的代码上，这里也就是工厂类中添加一个方法创建这个新的行为类。但是这个在原来的代码上进行修改的操作我们应当尽量避免，这是因为修改时可能会出现一些问题，从而造成不必要的麻烦。</p><p>所以抽象工厂模式就是为了在需要新增时不需要在原有的代码上进行修改，而是直接新增一些东西来达到效果。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262032517.jpg" alt="img_v3_02c8_ad246c57-4ec6-4d0a-9d25-05cabe9293cg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailSender</span> <span class="keyword">implements</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Send</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;this is mailsender!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsSender</span> <span class="keyword">implements</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Send</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;this is sms sender!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailFactory</span> <span class="keyword">implements</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title class_">Provider</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Sender <span class="title function_">produce</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Provider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendMailFactory</span>();</span><br><span class="line"><span class="type">Sender</span> <span class="variable">sender</span> <span class="operator">=</span> provider.produce();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，<strong>无需去改动现成的代码。这样做，拓展性较好！</strong></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，<strong>该对象只有一个实例存在</strong>。这样的模式有几个好处：</p><p>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</p><p>2、省去了new操作符，<strong>降低了系统内存的使用频率，减轻GC压力</strong>。</p><p>3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 私有构造方法，防止被实例化 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 静态工程方法，创建实例 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这个单例类虽然可以完成大部分需求，但是如果身处于多线程环境下，就会出现创建多个实例的情况，这就严重违背了单例模式的初衷。</p><blockquote><p><strong>竞态条件（Race Condition）</strong>：多个线程同时调用 <code>getInstance()</code> 方法并且 <code>instance</code> 变量当前为 <code>null</code> 时，会导致多个线程同时进入 <code>if (instance == null)</code> 代码块。</p><p><strong>多个实例创建</strong>：由于多个线程可以同时进入 <code>if</code> 块，它们都会尝试创建一个新的 <code>Singleton</code> 实例。这会导致创建多个 <code>Singleton</code> 实例，从而破坏单例模式的设计意图。</p></blockquote><h4 id="方法加锁"><a href="#方法加锁" class="headerlink" title="方法加锁"></a>方法加锁</h4><p>那么就可以给类的方法添加Synchronized关键字，给这个方法加上锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>synchronized加在方法上，则是给这个对象上锁，这里是静态方法，那就是给这个类上锁。实际情况是，只有在初始创建该单例类的时候需要上锁，其他时候不需要上锁，所以这里有可以改进的空间。</p><h4 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>a&gt;A、B线程同时进入了第一个if判断</p></li><li><p>b&gt;A首先进入synchronized块，由于instance为null，所以它执行instance &#x3D; new Singleton();</p></li><li><p>c&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。</p></li><li><p>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。</p></li><li><p>e&gt;此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。</p></li></ol><p>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，<strong>静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有static修饰的方法，所以即使实现了也是非静态的）</strong></p><p>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。</p><p>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。</p><p>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</p><h4 id="为什么这破坏了静态特性"><a href="#为什么这破坏了静态特性" class="headerlink" title="为什么这破坏了静态特性"></a>为什么这破坏了静态特性</h4><p>在Java中，”静态类”一般是指静态内部类（Static Nested Class），而不是顶级类，因为Java不支持顶级类使用<code>static</code>修饰。静态内部类是可以实现接口的，但它实现接口中的方法将是实例方法而不是静态方法。</p><p>这个观点的核心是：接口中的方法不能是静态方法，所有接口中的方法都是实例方法。因此，即使静态内部类实现了接口，它实现的方法也是非静态的，这就破坏了静态类的纯粹静态特性。</p><p>如果希望所有方法都能通过类名直接调用（即静态方法），那么实现接口会破坏这一点，因为接口的方法不能是静态的。静态内部类在实现接口时，必须实现接口的实例方法，这意味着需要创建类的实例来调用这些方法</p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：</p><p>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Sender&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Sender&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceMailSender</span><span class="params">(<span class="type">int</span> count)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">MailSender</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceSmsSender</span><span class="params">(<span class="type">int</span> count)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">SmsSender</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">builder.produceMailSender(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p><h3 id="原型模式（Prototype）"><a href="#原型模式（Prototype）" class="headerlink" title="原型模式（Prototype）"></a>原型模式（Prototype）</h3><p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prototype</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"><span class="type">Prototype</span> <span class="variable">proto</span> <span class="operator">=</span> (Prototype) <span class="built_in">super</span>.clone();</span><br><span class="line"><span class="keyword">return</span> proto;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：</p><p>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</p><p>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><p>结构型模式，共七种：<strong>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-03 计算机网络</title>
      <link href="/2025/02/26/75-03%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/02/26/75-03%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="75-03-计算机网络"><a href="#75-03-计算机网络" class="headerlink" title="75-03 计算机网络"></a>75-03 计算机网络</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/CoderTnT/article/details/123316939?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E8%AF%B7%E6%B1%82&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-123316939.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">计算机网络(请求包的传递过程)</a></li><li><a href="https://blog.csdn.net/qq_46101869/article/details/118108697?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171979828316800186550577%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171979828316800186550577&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-118108697-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&spm=1018.2226.3001.4187">计算机网络知识汇总（超详细整理）</a></li><li><a href="https://blog.csdn.net/HinsCoder/article/details/131352138?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171979828316800186550577%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171979828316800186550577&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-5-131352138-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&spm=1018.2226.3001.4187">【计算机网络详解】——知识点复习（期末不挂科版）</a></li></ol><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028664.png" alt="img"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们日常生活中会用浏览器访问各种页面，我们需要在浏览器的窗口输入对应的URL，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028028.png" alt="image-20240701113950870"></p><p>如果我们回车就会进入到对应的URL的页面窗口。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028273.png" alt="image-20240701114024663"></p><p>那么在这个的过程中，浏览器以及计算机网络做了什么事情呢？现在我们一步一步的进行分析来介绍。</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>当我们在这个输入框中输入了网址，然后回车之后，浏览器首先要对这个地址进行解析，然后发送给Web服务器进行请求信息。让我们首先来分析一下这个URL的构成：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028841.png" alt="img"></p><p>浏览器会开始解析这个URL确定Web服务器和文件名，并把请求信息进行封装，封装好之后会进入下一阶段，它需要知道这个Web服务器在哪？以及谁能帮他传送。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>我们上面知道了这个请求的Web服务器的URL，我们知道了网址（域名），但是在互联网的世界里不能根据域名来找到这个服务器，就好像无法根据名称来找到这个人所在的地址。</p><p>所以我们需要一个映射，这个映射需要记录下当前名称（域名）所对应的地址（IP地址），拥有这个映射表的服务器我们称为DNS服务器。</p><p>在这个DNS服务器中，它会根据域名来解析获得该域名的IP地址。</p><p>现在我们输入了<a href="http://www.baidu.com，这里有三层级。最高级是谁呢？是com，要特别注意在这里，在外国人的习惯中，从左到右的是从小到大的关系。">www.baidu.com，这里有三层级。最高级是谁呢？是com，要特别注意在这里，在外国人的习惯中，从左到右的是从小到大的关系。</a></p><p>根域是在最顶层，它的下一层就是 com 顶级域，再下面是baidu.com。</p><p>所以域名的层级关系类似一个树状结构：</p><ul><li>根 DNS 服务器</li><li>顶级域 DNS 服务器（com）</li><li>权威 DNS 服务器baidu.com。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028493.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">客户端首先会发出一个 DNS 请求，问 http://www.server.com 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。</span><br><span class="line"></span><br><span class="line">本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 http://www.server.com，则它直接返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 http://www.server.com 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。</span><br><span class="line"></span><br><span class="line">根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“http://www.server.com 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”</span><br><span class="line"></span><br><span class="line">本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 http://www.server.com 的 IP 地址吗？”</span><br><span class="line"></span><br><span class="line">顶级域名服务器说：“我给你负责 http://www.server.com 区域的权威 DNS 服务器的地址，你去问它应该能问到”。</span><br><span class="line"></span><br><span class="line">本地 DNS 于是转向问权威 DNS 服务器：“老三，http://www.server.com对应的IP是啥呀？” http://server.com的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。</span><br><span class="line"></span><br><span class="line">权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。</span><br><span class="line"></span><br><span class="line">本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028326.png" alt="img"></p><p>在DNS获得指定域名的IP地址时，会有两种方式。</p><ol><li><p><strong>递归查询</strong>：当收到查询请求报文的域名服务器不知被查询域名的IP地址时，该域名服务器就以DNS客户的身份向下一步应查询的域名服务器发出查询请求，即<strong>替本地域名字服务器继续查询</strong>，<strong>较少使用</strong>。</p></li><li><p><strong>迭代查询</strong>：当收到查询请求报文的域名服务器不知道被查询域名的IP地址时，<strong>就把自己知道的下一步应查询的域名服务器IP地址告诉本地域名字服务器，由本地域名字服务器继续向该域名服务器查询，直到得到所要解析的域名的IP地址</strong>，或者查询不到所要解析的域名的IP地址，<strong>通常使用</strong>。</p></li></ol><p>通过上面的过程，我们终于获得了这个域名的IP地址，但是这个IP地址该告诉谁呢？什么时候用到呢？如果用到了该把这个IP地址放在什么地方呢？</p><h3 id="应用层常见协议"><a href="#应用层常见协议" class="headerlink" title="应用层常见协议"></a>应用层常见协议</h3><ol><li><p><strong>DNS（域名系统）</strong>：DNS 是互联网使用的命名系统，用来把人们使用的机器名字（域名）转换为 IP 地址。域名服务器分为四种类型：根域名服务器、顶级域名服务器、本地域名服务器、权限域名服务器。</p></li><li><p><strong>FTP（文件传输协议）</strong>：FTP 是使用得最广泛的文件传送协议。FTP 提供交互式的访问，常用于局域网的文件存储服务器。</p></li><li><p><strong>Telnet（远程终端协议）</strong>：telnet 是一个简单的远程终端协议，结合端口使用，常用于服务探测。</p></li><li><p><strong>HTTP（超文本传送协议）</strong>：HTTP 是面向事务的应用层协议，它是互联网能够可靠地交换文件的重要基础。http 使用面向连接的 TCP 作为运输层协议，保证了数据的可靠性。</p></li><li><p><strong>SMTP（电子邮件协议）</strong>：SMTP 是简单邮件传送协议。SMTP规定了在两个相互通信的 SMTP 进程之间应如何交换信息。SMTP通信包括三个阶段，分别是：建立连接、邮件传送、连接释放。</p></li><li><p><strong>POP3（邮件读取协议）</strong>：POP3，全称是 Post Office Protocol 3，该协议通常被用来接收电子邮件。</p></li><li><p><strong>SNMP（简单网络管理协议）</strong>：SNMP 协议由三部分组成，包括：SNMP本身、管理信息结构 SMI 和管理信息 MIB。SNMP 定义了管理站和代理之间所交换的分组格式。SMI 定义了命名对象类型的通用规则，以及把对象和对象的值进行编码。MIB 在被管理的实体中创建了命名对象，并规定类型。</p></li><li><p><strong>TFTP（简单文件传送协议）</strong>：TFTP是TCP&#x2F;IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，它基于UDP协议而实现的，提供不复杂、开销不大的文件传输服务。默认端口号是 69。</p></li><li><p>其他应用层协议：除了上面介绍的协议外，其他应用层协议还有 DHCP、Gopher 、IMAP4、IRC、 NNTP、 XMPP、 SIP、 <strong>SSH</strong>、 <strong>RPC</strong>、 RTCP、 RTP、RTSP、SDP、 SOAP、 GTP、 STUN、 NTP、SSDP、 BGP 等。</p></li></ol><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262028142.png" alt="image-20240919183636882"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029684.png" alt="image-20240919184159623"></p><h2 id="协议栈"><a href="#协议栈" class="headerlink" title="协议栈"></a>协议栈</h2><p>上面HTTP获得了IP地址之后，浏览器的传输工作就会交给本机操作系统的协议栈中，由操作系统的协议栈来负责下面的数据传输工作，其主要负责的层有传输层&amp;网络层，下面来具体的介绍一下协议栈中的作用。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029699.png" alt="img"></p><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><p>应用层把需要传输的数据封装好后交给运输层进行处理，应用层有很多种协议，每种协议对应使用运输层不同的协议，运输层的主要协议有TCP和UDP。下面列出一些应用层常用协议对应的传输层的协议。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029414.png" alt="image-20240701182611384"></p><p>而这里HTTP协议使用的是TCP协议。运输层确定好了使用的协议之后，就会给这个添加请求头在数据包的前面。</p><p>常用协议对应端口号列表：</p><blockquote><ul><li><p><strong>21端口：FTP 文件传输服务</strong></p></li><li><p><strong>22端口：SSH协议、SCP（文件传输）、端口号重定向</strong></p></li><li><p><strong>23&#x2F;tcp端口：TELNET 终端仿真服务</strong></p></li><li><p><strong>25端口：SMTP 简单邮件传输服务</strong></p></li><li><p><strong>53端口：DNS 域名解析服务</strong></p></li><li><p><strong>69&#x2F;udp：TFTP</strong></p></li><li><p><strong>80&#x2F;8080&#x2F;3128&#x2F;8081&#x2F;9098端口：HTTP协议代理服务器</strong></p></li><li><p><strong>110&#x2F;tcp端口：POP3（E-mail）</strong></p></li><li><p>119端口：Network </p></li><li><p>123端口：NTP（网络时间协议）</p></li><li><p>135、137、138、139端口： 局域网相关默认端口，应关闭</p></li><li><p>161端口：SNMP（简单网络管理协议）</p></li><li><p>389端口：LDAP（轻量级目录访问协议）、ILS（定位服务）</p></li><li><p>443&#x2F;tcp 443&#x2F;udp：HTTPS服务器</p></li><li><p><strong>465端口：SMTP（简单邮件传输协议）</strong></p></li><li><p>873端口：rsync</p></li><li><p>1080端口：SOCKS代理协议服务器常用端口号、QQ</p></li><li><p>1158端口：ORACLE EMCTL</p></li><li><p>1433&#x2F;tcp&#x2F;udp端口：MS SQL<em>SERVER数据库server、MS SQL</em>SERVER数据库monitor</p></li><li><p>1521端口：Oracle 数据库</p></li><li><p>2100端口：Oracle XDB FTP服务</p></li><li><p>3389端口：WIN2003远程登录</p></li><li><p><strong>3306端口：MYSQL数据库端口</strong></p></li><li><p>5432端口：postgresql数据库端口</p></li><li><p>5601端口：kibana</p></li><li><p><strong>6379端口：Redis数据库端口</strong></p></li><li><p><strong>8080端口：TCP服务端默认端口、JBOSS、TOMCAT、Oracle XDB（XML 数据库）</strong></p></li><li><p>8081端口：Symantec AV&#x2F;Filter for MSE</p></li><li><p><strong>8848端口：Nacos服务器的端口</strong></p></li><li><p>8888端口：Nginx服务器的端口</p></li><li><p>9000端口：php-fpm</p></li><li><p>9080端口：Webshpere应用程序</p></li><li><p>9090端口：webshpere管理工具</p></li><li><p><strong>9200端口：Elasticsearch服务器端口</strong></p></li><li><p>10050端口：zabbix_server 10050</p></li><li><p>10051端口：zabbix_agent</p></li><li><p>11211端口：memcache（高速缓存系统）</p></li><li><p>27017端口：mongoDB数据库默认端口</p></li><li><p>22122端口：fastdfs服务器默认端口</p></li></ul></blockquote><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>TCP报文头结构：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029316.png" alt="img"></p><p>首先，源端口号和目标端口号是不可少的，如果没有这两个端口号，数据就不知道应该发给哪个应用。</p><p><strong>端口号的作用是为了接受到请求时，明确这个报文应该交给应用层的哪一个应用进行处理。</strong></p><p>接下来有包的序号，这个是为了解决包乱序的问题。</p><p>还有应该有的是确认号，目的是确认发出去对方是否有收到。如果没有收到就应该重新发送，直到送达，这个是为了解决不丢包的问题。</p><p>接下来还有一些状态位。<strong>例如 SYN 是发起一个连接，ACK 是回复，RST 是重新连接，FIN是结束连接等</strong>。TCP 是面向连接的，因而双方要维护连接的状态，这些带状态位的包的发送，会引起双方的状态变更。</p><p>还有一个重要的就是窗口大小。TCP 要做流量控制，通信双方各声明一个窗口（缓存大小），标识自己当前能够的处理能力，别发送的太快，撑死我，也别发的太慢，饿死我。</p><p>除了做流量控制以外，TCP还会做拥塞控制，对于真正的通路堵车不堵车，它无能为力，唯一能做的就是控制自己，也即控制发送的速度。不能改变世界，就改变自己嘛。</p><p>为了保证TCP的可靠性，所以TCP两个连接时会进行三次握手来保证连接的可靠。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029028.png" alt="img"></p><p>为什么要进行三次握手呢？上面说到了是为了保证TCP的可靠性，<strong>即是为了保证服务端和客户端都有接受和发送报文的能力。</strong></p><p>一开始，客户端和服务端都处于 CLOSED 状态。先是服务端主动监听某个端口，处于 LISTEN 状态。</p><p>然后客户端主动发起连接 SYN，之后处于 SYN-SENT 状态。</p><p>服务端收到发起的连接，返回 SYN，并且 ACK 客户端的 SYN，之后处于 SYN-RCVD 状态。</p><p>客户端收到服务端发送的 SYN 和 ACK 之后，发送 ACK 的 ACK，之后处于 ESTABLISHED状态，因为它一发一收成功了。</p><p>服务端收到 ACK 的 ACK 之后，处于 ESTABLISHED 状态，因为它也一发一收了。</p><p>所以三次握手目的是保证双方都有发送和接收的能力。</p><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>UDP的设计理念就是为了尽可能快的发送报文，所以在一定程度上会忽略其可靠性。</p><p>UDP的头部包含一下字段：</p><ul><li><strong>源端口号</strong>（Source Port）：发送方的端口号。</li><li><strong>目的端口号</strong>（Destination Port）：接收方的端口号。</li><li><strong>长度</strong>（Length）：UDP报文的长度，包括头部和数据部分。</li><li><strong>校验和</strong>（Checksum）：用于检测报文在传输过程中是否出现错误。</li></ul><p>可以看到并又没保证可靠的字段，唯一的校验和字段也只是为了简单检查报文在传输过程中是否出现了错误。</p><h4 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h4><ol><li><strong>HTTP (HyperText Transfer Protocol)</strong> - 端口 80，用于网页传输。</li><li><strong>HTTPS (HTTP over TLS&#x2F;SSL)</strong> - 端口 443，安全的HTTP传输，使用SSL&#x2F;TLS加密。</li><li><strong>FTP (File Transfer Protocol)</strong> - 端口 21，用于文件传输。</li><li><strong>SSH (Secure Shell)</strong> - 端口 22，用于安全远程登录和其他安全网络服务。</li><li><strong>Telnet</strong> - 端口 23，用于远程登录服务，但已被SSH所取代。</li><li><strong>SMTP (Simple Mail Transfer Protocol)</strong> - 端口 25，用于发送电子邮件。</li><li><strong>IMAP (Internet Message Access Protocol)</strong> - 端口 143，用于接收电子邮件。</li><li><strong>POP3 (Post Office Protocol 3)</strong> - 端口 110，用于接收电子邮件。</li><li><strong>DNS (Domain Name System)</strong> - 端口 53，用于域名解析服务。</li><li><strong>LDAP (Lightweight Directory Access Protocol)</strong> - 端口 389，用于访问和维护分布式目录信息。</li><li><strong>SMB (Server Message Block)</strong> - 端口 445，用于文件共享和打印服务。</li><li><strong>RPC (Remote Procedure Call)</strong> - 端口 135，用于远程过程调用。</li><li><strong>NTP (Network Time Protocol)</strong> - 端口 123，用于同步网络时间。</li><li><strong>SNMP (Simple Network Management Protocol)</strong> - 端口 161，用于网络管理。</li><li><strong>RDP (Remote Desktop Protocol)</strong> - 端口 3389，用于远程桌面服务。</li><li><strong>SIP (Session Initiation Protocol)</strong> - 端口 5060，用于会话初始化协议，常用于VoIP。</li><li><strong>LDAPS (Secure LDAP)</strong> - 端口 636，安全的LDAP传输，使用SSL加密。</li><li><strong>MySQL</strong> - 端口 3306，用于MySQL数据库服务。</li><li><strong>PostgreSQL</strong> - 端口 5432，用于PostgreSQL数据库服务。</li><li><strong>MongoDB</strong> - 端口 27017，用于MongoDB数据库服务。</li><li><strong>Redis</strong> - 端口 6379，用于Redis数据库服务。</li><li><strong>DHCP (Dynamic Host Configuration Protocol)</strong> - 端口 67和68，用于自动分配IP地址。</li><li><strong>TFTP (Trivial File Transfer Protocol)</strong> - 端口 69，用于简单的文件传输。</li><li><strong>HTTP&#x2F;2</strong> - 端口 80和443，作为HTTP的改进版，支持更高效的传输。</li><li><strong>WebSocket</strong> - 端口 80和443，提供了全双工通信渠道。</li></ol><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><p>IP报文头部信息</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029566.png" alt="img"></p><ol><li><strong>版本（Version）</strong> - 4位字段，指定IP协议的版本。IPv4是4，IPv6是6。</li><li><strong>首部长度（Header Length）</strong> - 4位字段，指示IP报文头部的长度，以32位字（4字节）为单位。这允许IP头部可以扩展以包含选项。</li><li><strong>服务类型（Type of Service, ToS）</strong> - 8位字段，在IPv4中用于指定数据包的服务质量要求，如优先级、延迟、吞吐量等。在IPv6中，这部分被分为两个字段：流量类（Traffic Class）和流标签（Flow Label）。</li><li><strong>总长度（Total Length）</strong> - 16位字段，表示整个IP数据包的长度，包括头部和数据部分，单位是字节。</li><li><strong>标识（Identification）</strong> - 16位字段，用于唯一标识一个IP数据包。当数据包太大而需要分片时，这个字段帮助接收端重新组装数据包。</li><li><strong>标志（Flags）</strong> - 3位字段，用于控制和指示分片的行为。其中，最常用的是MF（More Fragments）标志，表示是否还有更多的分片。</li><li><strong>片偏移（Fragment Offset）</strong> - 13位字段，指分片相对于原始数据包开始处的位置，以8字节为单位。</li><li><strong>生存时间（Time to Live, TTL）</strong> - 8位字段，指定数据包在网络中可以经过的最大路由器数。每经过一个路由器，TTL减1，当TTL为0时，数据包将被丢弃，以防止无限循环。</li><li><strong>协议（Protocol）</strong> - 8位字段，指定了数据包中封装的上层协议类型，如TCP是6，UDP是17。</li><li><strong>头部校验和（Header Checksum）</strong> - 16位字段，用于检测头部信息在传输过程中是否出现错误。</li><li><strong>源IP地址（Source Address）</strong> - 32位字段（IPv4），表示数据包发送者的IP地址。</li><li><strong>目的IP地址（Destination Address）</strong> - 32位字段（IPv4），表示数据包接收者的IP地址。</li><li><strong>选项（Options）</strong> - 可选字段，用于包含额外的IP功能，如安全和时间戳等。这个字段的长度由首部长度字段决定。</li><li><strong>填充（Padding）</strong> - 确保IP头部是32位字的倍数，如果需要的话，用以填充。</li></ol><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><p>MAC 头部是以太网使用的头部，它包含了接收方和发送方的 MAC 地址等信息。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029645.png" alt="img"></p><p>在 MAC 包头里需要<strong>发送方 MAC 地址</strong>和<strong>接收方目标 MAC 地址</strong>，用于<strong>两点之间的传输</strong>。</p><p>一般在 TCP&#x2F;IP 通信里，MAC 包头的<strong>协议类型</strong>只使用：</p><ul><li><code>0800</code> ： IP 协议</li><li><code>0806</code> ： ARP 协议（Address Resolution Protocol）</li></ul><p>在网络层中我们获得了目标服务的IP地址，但是在数据链路层我们需要根据目标的MAC地址来传送数据包，可是我们如何知道目标地址的MAC地址呢？这就需要ARP协议（地址解析协议）</p><p>发送方的 MAC 地址获取就比较简单了，MAC 地址是在网卡生产时写入到 ROM 里的，只要将这个值读取出来写入到 MAC 头部就可以了。</p><p>接收方的 MAC 地址就有点复杂了，只要告诉以太网对方的 MAC 的地址，以太网就会帮我们把包发送过去，那么很显然这里应该填写对方的 MAC 地址。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029929.png" alt="img"></p><p>ARP协议通过同一子网进行广播获得目标IP的MAC的地址，但是如果不在同一子网的IP就会被发送到本地子网的默认网关，即路由器的接口地址。这个地址通常通过配置在主机上的默认网关来指定。路由器根据其路由表来决定如何将数据包转发到下一个网络或最终目的地。这个过程在网络层进行。最终，数据包到达包含目标IP地址的子网。一旦数据包到达目标子网，就可以使用ARP来解析目标IP地址对应的MAC地址。这是因为现在目标IP和发起ARP请求的设备位于同一子网内。获得MAC地址后，数据链路层可以构建以太网帧，将数据包作为有效载荷，并将源和目的MAC地址设置为本地网络上的相应设备地址。</p><p>所以ARP的使用场景是在同一子网，如果不是在同一子网则不可以使用ARP协议。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029774.png" alt="img"></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>IP 生成的网络包只是存放在内存中的一串二进制数字信息，没有办法直接发送给对方。因此，我们需要将数字信息转换为电信号，才能在网线上传输，也就是说，这才是真正的数据发送过程。</p><p>负责执行这一操作的是网卡，要控制网卡还需要靠网卡驱动程序。</p><p>网卡驱动从 IP 模块获取到包之后，会将其复制到网卡内的缓存区中，接着会其开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列。</p><p>最后网卡会将包转为电信号，通过网线发送出去。</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>下面来看一下包是如何通过交换机的。交换机的设计是将网络包<strong>原样</strong>转发到目的地。交换机工作在 MAC 层，也称为<strong>二层网络设备</strong>。</p><p>位于同一个交换机下的处于同一子网。</p><p>首先，电信号到达网线接口，交换机里的模块进行接收，接下来交换机里的模块将电信号转换为数字信号。</p><p>然后通过包末尾的 FCS 校验错误，如果没问题则放到缓冲区。这部分操作基本和计算机的网卡相同，但交换机的工作方式和网卡不同。</p><p>计算机的网卡本身具有 MAC 地址，并通过核对收到的包的接收方 MAC 地址判断是不是发给自己的，如果不是发给自己的则丢弃；相对地，交换机的端口不核对接收方 MAC 地址，而是直接接收所有的包并存放到缓冲区中。因此，和网卡不同，交换机的端口不具有 MAC 地址。</p><p>将包存入缓冲区后，接下来需要查询一下这个包的接收方 MAC 地址是否已经在 MAC 地址表中有记录了。</p><p>交换机的 MAC 地址表主要包含两个信息：</p><ol><li>一个是设备的 MAC 地址，</li><li>另一个是该设备连接在交换机的哪个端口上。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029917.png" alt="img"></p><p>举个例子，如果收到的包的接收方 MAC 地址为 00-02-B3-1C-9C-F9，则与图中表中的第 3 行匹配，根据端口列的信息，可知这个地址位于 3 号端口上，然后就可以通过交换电路将包发送到相应的端口了。</p><p>所以，交换机根据 MAC 地址表查找 MAC 地址，然后将信号发送到相应的端口。</p><p>如果MAC表中没有对应IP地址的MAC地址，那么交换机就会广播所有端口，寻找MAC地址，如果找到了就会加入到MAC地址表中，如果没找到就会到让发送端主机到默认网关寻找MAC地址，接下来就是路由层不断的进行寻找，知道找到目标交换机，然后使用ARP协议找到MAC地址。</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>网络包经过交换机之后，现在到达了路由器，并在此被转发到下一个路由器或目标设备。</p><p>这一步转发的工作原理和交换机类似，也是通过查表判断包转发的目标。</p><p>不过在具体的操作过程上，路由器和交换机是有区别的。</p><p><strong>因为路由器是基于 IP 设计的，俗称三层网络设备，路由器的各个端口都具有 MAC 地址和 IP 地址；</strong></p><p>而交换机是基于以太网设计的，俗称二层网络设备，交换机的端口不具有 IP 地址。</p><p>路由器的端口具有 MAC 地址，因此它就能够成为以太网的发送方和接收方；同时还具有 IP 地址，从这个意义上来说，它和计算机的网卡是一样的。</p><p>当转发包时，首先路由器端口会接收发给自己的以太网包，然后<strong>路由表</strong>查询转发目标，再由相应的端口作为发送方将以太网包发送出去。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029601.png" alt="img"></p><h2 id="服务器-与-客户端"><a href="#服务器-与-客户端" class="headerlink" title="服务器 与 客户端"></a><strong>服务器 与 客户端</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262029592.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-05 Java多线程</title>
      <link href="/2025/02/26/75-05%20Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2025/02/26/75-05%20Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="75-05-Java多线程"><a href="#75-05-Java多线程" class="headerlink" title="75-05 Java多线程"></a>75-05 Java多线程</h1><h2 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h2><h3 id="线程-＆-进程"><a href="#线程-＆-进程" class="headerlink" title="线程 ＆ 进程"></a>线程 ＆ 进程</h3><p>进程：是系统资源调度和分配的基本单位，操作系统分配的内存等一些系统资源都是直接分配给进程的。</p><p>线程：是CPU调度和分配的基本单位，线程一定属于一个进程，线程从进程中获取所需要的内存等其它一些系统资源。</p><h3 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h3><p>那么在Java程序中的一个服务（进程）中如何创建一个线程呢？一般我们具有三种方式。</p><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><p>Thread类是Java封装好的一个专门用于实现线程的类，如果我们这个类继承了Thread类，那么就是这个类的子类。</p><p>我们通过重写Thread类的run接口来达到新建一个线程的目的</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033020.png" alt="image-20240926120539753"></p><p>但是继承的方法大家用的不是很多，因为一个类只能继承一次，就会导致其拓展性降低。</p><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033511.png" alt="image-20240926120842455"></p><h4 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h4><p>Callable如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> CallableThread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-09-26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用FutureTask来调用这个线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> ThreadMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-09-26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">CallableThread</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Callable和Runnable接口最主要的区别就是Callable可以返回线程值，这在对数据库的一些线程操作中有很大的用处。</strong></p><h3 id="控制线程的其它方法"><a href="#控制线程的其它方法" class="headerlink" title="控制线程的其它方法"></a>控制线程的其它方法</h3><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033258.png" alt="image-20240926124313233"></p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033904.png" alt="image-20240926124334311"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033855.png" alt="image-20240926124345424"></p><h4 id="setDaemon"><a href="#setDaemon" class="headerlink" title="setDaemon"></a>setDaemon</h4><p><strong>特性</strong>：</p><ul><li>守护线程在后台运行，其主要目的是为应用程序提供服务。</li><li>当所有用户线程结束时，JVM会自动退出，守护线程也会被终止。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033975.png" alt="image-20240926131047374"></p><p><strong>典型应用</strong>：</p><ul><li>常用于执行周期性任务、监控任务或清理资源，比如日志记录或数据备份。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033021.png" alt="image-20240926131254270"></p><h3 id="关于Start的两个引申问题"><a href="#关于Start的两个引申问题" class="headerlink" title="关于Start的两个引申问题"></a>关于Start的两个引申问题</h3><p>反复调⽤同⼀个线程的 start ⽅法是否可⾏？ 2. 假如⼀个线程执⾏完毕（此时处于 TERMINATED 状态），再次调⽤这个线程的 start ⽅法是否可⾏？</p><p>threadStatus !&#x3D; 0 表示这个线程已经被启动过或已经结束了。</p><p>threadStatus表示该线程的状态，如果是刚刚创建成功的话，其状态就是0.</p><p>如果不是0根据其内部Start源码来看：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033549.png" alt="image-20240926135056222"></p><p>其中就会报出异常</p><p> 反复调⽤同⼀个线程的 start ⽅法是否可⾏？ </p><p> 假如⼀个线程执⾏完毕（此时处于 TERMINATED 状态），再次调⽤这个线程的 start ⽅法是否可⾏？ </p><p>结合上⾯的源码可以得到的答案是： </p><ol><li>都不⾏，在调⽤ start 之后，threadStatus 的值会改变（ threadStatus !&#x3D;0 ），再次调⽤ start ⽅法会抛出 IllegalThreadStateException 异常。</li><li>threadStatus 为 2 代表当前线程状态为 TERMINATED（下⾯会讲）</li></ol><p><a href="https://coolshell.cn/articles/9606.html">https://coolshell.cn/articles/9606.html</a></p><h3 id="多线程带来的问题"><a href="#多线程带来的问题" class="headerlink" title="多线程带来的问题"></a>多线程带来的问题</h3><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>在单线程下正常执行的代码可能在高并发的情况下并不安全，这是因为有些代码不是原子性的，就是在执行代码的时候可能会执行到一半再去执行其它的代码。</p><p>还有就是可见性问题，就是我线程A对数据进行了更新，但是其只是在线程内进行了更新，并没有即时更新到主内存中，基于JVM来说就是指，线程只是把数据保存到了Java虚拟机栈中，还未来得及把数据更新到堆上。这样就可能导致线程B来读取这个数据并不是最新的，这就是可见性问题。</p><p>在高并发情况下也可能出现多线程占有然后抢占资源的情况导致死锁，还可能存在多线程互相礼让导致活锁问题以及线程一直得不到运行的饥饿问题。</p><p>在Java中线程安全集合如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033525.png" alt="image-20241008111303509"></p><h4 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h4><p>首先我们需要知道在高并发的情况下HashMap是线程不安全的，那么到底它哪里导致了线程不安全呢？如果我们需要使用线程安全应该使用哪种Map呢</p><h2 id="获取线程执行结果"><a href="#获取线程执行结果" class="headerlink" title="获取线程执行结果"></a>获取线程执行结果</h2><p>通过上面的学习，可以知道创建线程有三种方式：继承Thread类，实现Runnable接口，实现Callable接口。</p><p>但是前面两种是无法获取线程执行得到的结果的，但是Callable接口可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        Callable&lt;String&gt; task = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span> + Thread.currentThread().getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Future[] futures = <span class="keyword">new</span> <span class="title class_">Future</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            futures[i] = executorService.submit(task);</span><br><span class="line">            System.out.println(futures[i].get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="comment">//            System.out.println(futures[i].get());</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>来看看Future接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;V&gt; &#123;</span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(<span class="type">boolean</span> mayInterruptIfRunning)</span>;</span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">isCancelled</span><span class="params">()</span>;</span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line"> V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br><span class="line"> V <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line"> <span class="keyword">throws</span> InterruptedException, ExecutionException,</span><br><span class="line">TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说 Future 提供了三种功能：</p><ul><li><p>1）判断任务是否完成；</p></li><li><p>2）能够中断任务；</p></li><li><p>3）能够获取任务执⾏结果。</p></li></ul><p>当需要异步执⾏⼀个计算并在稍后的某个时间点获取其结果时，就可以使⽤ FutureTask。来个例⼦：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">futureTask</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    Callable&lt;Integer&gt;[] tasks = <span class="keyword">new</span> <span class="title class_">Callable</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;tasks.length;i++)&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">        tasks[i] = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(index + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> (index + <span class="number">1</span>) * <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FutureTask[] futureTasks = <span class="keyword">new</span> <span class="title class_">FutureTask</span>[tasks.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; tasks.length;i++)&#123;</span><br><span class="line">        futureTasks[i] = <span class="keyword">new</span> <span class="title class_">FutureTask</span>(tasks[i]);</span><br><span class="line">        executorService.submit(futureTasks[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; tasks.length;i++)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Result of task&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;: &quot;</span> + futureTasks[i].get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java线程的6种状态"><a href="#Java线程的6种状态" class="headerlink" title="Java线程的6种状态"></a>Java线程的6种状态</h2><p>我们先来看看操作系统中的线程状态转换。在操作系统中，线程被视为轻ᰁ级的进程，<strong>所以线程状态其实和进程状态是⼀致的</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033819.png" alt="image-20241022191157433"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread.State 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line"> NEW,</span><br><span class="line"> RUNNABLE,</span><br><span class="line"> BLOCKED,</span><br><span class="line"> WAITING,</span><br><span class="line"> TIMED_WAITING,</span><br><span class="line"> TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看在JVM中的线程的状态是什么样的。</p><h3 id="NEW"><a href="#NEW" class="headerlink" title="NEW"></a>NEW</h3><p>处于 NEW 状态的线程此时尚未启动。这⾥的尚未启动指的是还没调⽤ Thread 实例的 start() ⽅法。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033146.png" alt="image-20241022191939527"></p><p>关于start有两个比较经典的问题</p><ol><li>反复调用同一个现成的start方法是否可行？</li><li>假如一个线程执行完毕（此时处于 TERMINATED 状态），再次调⽤这个线程的 start ⽅ 法是否可⾏？</li></ol><p><strong>答案是都不行。</strong></p><p>看看start源码就能知道答案。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033510.png" alt="image-20241022192227658"></p><p>可以看到start的源码中有一个ThreadStatus记录着这个线程的状态，如果这个线程被启动过就都不会为0，一旦该状态不为0而又启动了start就会抛出异常。</p><h3 id="RUNNABLE"><a href="#RUNNABLE" class="headerlink" title="RUNNABLE"></a>RUNNABLE</h3><p>表示当前线程正在运⾏中。处于 RUNNABLE 状态的线程在 Java 虚拟机中运⾏，也有可能在 等待 CPU 分配资源。</p><p>也就是说，Java 线程的RUNNABLE状态其实包括了操作系统线程的ready和running两个状态。</p><h3 id="BLOCKED"><a href="#BLOCKED" class="headerlink" title="BLOCKED"></a>BLOCKED</h3><p>阻塞状态。处于 BLOCKED 状态的线程正等待锁（锁会在后⾯细讲）的释放以进⼊同步区。 我们⽤ BLOCKED 状态举个⽣活中的例⼦： 假如今天你下班后准备去⻝堂吃饭。你来到⻝堂仅有的⼀个窗⼝，发现前⾯已经有个⼈在窗⼝ 前了，此时你必须得等前⾯的⼈从窗⼝离开才⾏。 假设你是线程 t2，你前⾯的那个⼈是线程 t1。此时 t1 占有了锁（⻝堂唯⼀的窗⼝），t2 正在 等待锁的释放，所以此时 t2 就处于 BLOCKED 状态。</p><h3 id="WAITING"><a href="#WAITING" class="headerlink" title="WAITING"></a>WAITING</h3><p>等待状态。处于等待状态的线程变成 RUNNABLE 状态需要其他线程唤醒。</p><h3 id="TIMED-WAITING"><a href="#TIMED-WAITING" class="headerlink" title="TIMED_WAITING"></a>TIMED_WAITING</h3><p>超时等待状态。线程等待⼀个具体的时间，时间到后会被⾃动唤醒。</p><h3 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h3><p>终⽌状态。此时线程已执⾏完毕。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033201.png" alt="image-20241022193529590"></p><h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033884.png" alt="image-20241022194506218"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033249.png" alt="image-20241022194518047"></p><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>ThreadGroup 是⼀个标准的向下引⽤的树状结构，这样设计可以防⽌”上级”线程被”下级”线程 引⽤⽽⽆法有效地被 GC 回收。</p><p>ThreadGroup 和 Thread 的关系就如同他们的字⾯意思⼀样简单粗暴，每个 Thread 必然存在 于⼀个 ThreadGroup 中，Thread 不能独⽴于 ThreadGroup 存在。执⾏ main() ⽅法的线程 名字是 main，如果在 new Thread 时没有显式指定，那么默认将⽗线程（当前执⾏ new Thread 的线程）线程组设置为⾃⼰的线程组。</p><p>总结⼀下，线程组是⼀个树状的结构，每个线程组下⾯可以有多个线程或者线程组。线程组可 以起到统⼀控制线程的优先级和检查线程权限的作⽤。</p><p>线程优先级可以指定，范围是 1~10。但并不是所有的操作系统都⽀持 10 级优先级的划分 （⽐如有些操作系统只⽀持 3 级划分：低、中、⾼），Java 只是给操作系统⼀个优先级的参 考值，线程最终在操作系统中的优先级还是由操作系统决定。 Java 默认的线程优先级为 5，线程的执⾏顺序由调度程序来决定，线程的优先级会在线程被 调⽤之前设定。 通常情况下，⾼优先级的线程将会⽐低优先级的线程有更⾼的概率得到执⾏。 Thread 类的 setPriority() ⽅法可以⽤来设定线程的优先级。</p><p>Java 中的优先级不是特别的可靠，Java 程序中对线程所设置的优先级只是给操作系统⼀个建 议，操作系统不⼀定会采纳。⽽真正的调⽤顺序，是由操作系统的线程调度算法来决定的。</p><p>还有⼀种特殊的线程，叫做守护线程（Daemon），守护线程默认的优先级⽐较低。 </p><ul><li><p>如果某线程是守护线程，那如果所有的⾮守护线程都结束了，这个守护线程也会⾃动结 束。</p></li><li><p>当所有的⾮守护线程结束时，守护线程会⾃动关闭，这就免去了还要继续关闭⼦线程的麻 烦。 </p></li><li><p>线程默认是⾮守护线程，可以通过 Thread 类的 setDaemon ⽅法来设置为守护线程。</p></li></ul><p><strong>所以，如果某个线程的优先级⼤于线程所在线程组的最⼤优先级，那么该线程的优先级将会失 效，取⽽代之的是线程组的最⼤优先级。</strong></p><p>线程组的优先级限定了这个线程组的线程优先级最高为多少。</p><h2 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033253.png" alt="image-20241022201539163"></p><h2 id="多线程带来的问题-1"><a href="#多线程带来的问题-1" class="headerlink" title="多线程带来的问题"></a>多线程带来的问题</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033059.png" alt="image-20241022201502239"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033257.png" alt="image-20241022201515442"></p><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>Java 内存模型（Java Memory Model，JMM）定义了 Java 程序中的变量、线程如何和主存 以及⼯作内存进⾏交互的规则。它主要涉及到多线程环境下的共享变ᰁ可⻅性、指令᯿排等问 题，是理解并发编程中的关键概念。</p><p>并发编程的线程之间存在两个问题：</p><ol><li>两个线程之间是如何进行通信的？线程之间是以何种机制来交换信息的；</li><li>线程之间是如何进行同步的？线程之间是以何种机制来控制线程间发生的先对顺序；</li></ol><p>有两种并发模型可以解决这两个问题： </p><ol><li>消息传递并发模型</li><li><strong>共享内存并发模型</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033988.png" alt="image-20241022202300932"></p><p><strong>Java 使⽤的是共享内存并发模型。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033514.png" alt="image-20241022202759311"></p><p>对于每⼀个线程来说，栈都是私有的，⽽堆是共有的。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262034348.png" alt="image-20241022203338743"></p><p>从图中可以看出： </p><ol><li>所有的共享变ᰁ都存在主存中。 </li><li>每个线程都保存了⼀份该线程使⽤到的共享变ᰁ的副本。 </li><li>如果线程 A 与线程 B 之间要通信的话，必须经历下⾯ 2 个步骤： <ol><li>线程 A 将本地内存 A 中更新过的共享变ᰁ刷新到主存中去。</li><li>线程 B 到主存中去读取线程 A 之前已经更新过的共享变ᰁ。</li></ol></li></ol><p>注意，根据 JMM 的规定，线程对共享变量的所有操作都必须在⾃⼰的本地内存中进⾏，不能 直接从主存中读取。</p><h3 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h3><p>因为Java内存模型规定，所有线程对于共享变量的所有操作必须在本地内存中进行，对于操作系统中的一二级缓存中进行操作，那么如果对于同一个数据，就会分别加载到各个的线程内存中。那么如何知道这个共享变量被其它线程更新了呢？</p><p>这里的部分内容在操作系统中保证CPU缓存一致性的时候会介绍部分内容。</p><p>JMM 说白了就是定义了一些规范来解决这些问题，开发者可以利用这些规范更方便地开发多线程程序。对于 Java 开发者说，你不需要了解底层原理，直接使用并发相关的一些关键字和类（比如 <code>volatile</code>、<code>synchronized</code>、各种 <code>Lock</code>）即可开发出并发安全的程序。</p><p>可见性简单来说，就是在多线程环境下操作相同数据时可以保证任何一个线程对这个数据修改其它线程都是可见的。</p><h3 id="内存原子性"><a href="#内存原子性" class="headerlink" title="内存原子性"></a>内存原子性</h3><p>原子性简单来说就是在多线程环境下操作同一数据时保证只能有一个线程来进行操作，即保证互斥。</p><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>volatile 可以保证可⻅性，但不保证原⼦性： </p><ul><li>当写⼀个 volatile 变量时，JMM 会把该线程在本地内存中的变ᰁ强制刷新到主内存中 去；</li><li>这个写操作会导致其他线程中的 volatile 变量缓存⽆效。</li></ul><p>volatile会禁止指令重排。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262033162.png" alt="image-20241022215815822"></p><h2 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h2><p>在 Java 中，关键字 synchronized 可以保证在同⼀个时刻，只有⼀个线程可以执⾏某个⽅法 或者某个代码块(主要是对⽅法或者代码块中存在共享数据的操作)，同时我们还应该注意到 synchronized 的另外⼀个᯿要的作⽤，synchronized 可保证⼀个线程的变化(主要是共享数据 的变化)被其他线程所看到（保证可⻅性，完全可以替代 volatile 功能）。</p><p>synchronized保证了可见性和原子性。</p><p>synchronized 关键字最主要有以下 3 种应⽤⽅式： </p><ol><li>同步⽅法，为当前对象（this）加锁，进⼊同步代码前要获得当前对象的锁；</li><li>同步静态⽅法，为当前类加锁（锁的是 Class 对象），进⼊同步代码前要获得当前类的 锁； </li><li>同步代码块，指定加锁对象，对给定对象加锁，进⼊同步代码库前要获得给定对象的锁。</li></ol><p>synchronized属于可重⼊锁 从互斥锁的设计上来说，当⼀个线程试图操作⼀个由其他线程持有的对象锁的临界资源时，将 会处于阻塞状态，但当⼀个线程再次请求⾃⼰持有对象锁的临界资源时，这种情况属于᯿⼊ 锁，请求将会成功。</p><h2 id="synchronized的四种锁状态"><a href="#synchronized的四种锁状态" class="headerlink" title="synchronized的四种锁状态"></a>synchronized的四种锁状态</h2><p>⾸先需要明确的⼀点是：<strong>Java 多线程的锁都是基于对象的</strong>，Java 中的每⼀个对象都可以作为 ⼀个锁。 还有⼀点需要注意的是，我们常听到的类锁其实也是对象锁，上⼀节我们也讲到了，应该有不 少⼩伙伴注意到了。 这⾥再多说⼏句吧。Class 对象是⼀种特殊的 Java 对象，代表了程序中的类和接⼝。Java 中 的每个类型（包括类、接⼝、数组以及基础类型）在 JVM 中都有⼀个唯⼀的 Class 对象与之 对应。这个 Class 对象被创建的时机是在 JVM 加载类时，由 JVM ⾃动完成。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262034385.png" alt="image-20241022220852493"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262034668.png" alt="image-20241022221130663"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262034290.png" alt="image-20241022221512196"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262034061.png" alt="image-20241022222110158"></p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262034318.png" alt="image-20241022222025230"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262034144.png" alt="image-20241022222316213"></p><h2 id="到底什么是AQS（抽象队列同步器）？"><a href="#到底什么是AQS（抽象队列同步器）？" class="headerlink" title="到底什么是AQS（抽象队列同步器）？"></a>到底什么是AQS（抽象队列同步器）？</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>72 分布式锁</title>
      <link href="/2025/02/26/75-06%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2025/02/26/75-06%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="72-分布式锁"><a href="#72-分布式锁" class="headerlink" title="72 分布式锁"></a>72 分布式锁</h1><h2 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h2><p>分布式锁 &#x3D; 分布式 + 锁。那么分布式是指的什么呢？锁又是锁的谁呢？在业务开发中我们经常会听到分布式分布式的概念，分布式也很简单，通俗的来说就是你具有多个服务器，每个服务器上运行的程序是一样的，用户的每一次请求，都会平衡的分配到随机的一个服务器中进行处理。那么这样的话就会导致一个问题，那就是并发冲突和数据不一致等问题。下面结合一个简单的小例子来介绍一下分布式环境下不使用分布式锁会造成什么问题。</p><blockquote><p>假设你运营着一个在线电商平台，某个商品（商品ID为 <code>product123</code>）的库存为10件。当用户在下单时，系统会检查库存，确定库存是否充足，然后减少库存并生成订单。为了应对大量并发请求，你的系统使用了多台服务器来处理订单请求。</p><p><strong>用户1</strong>（请求在服务器A上处理）和 <strong>用户2</strong>（请求在服务器B上处理）同时发出购买请求。当前库存：10件</p><p>服务器A接收到<strong>用户1</strong>的请求，并查询数据库中的库存，此时库存为10件。</p><p>服务器B也接收到<strong>用户2</strong>的请求，并同时查询数据库中的库存，此时库存也是10件。</p><p>此时，两个服务器节点都“看到”库存为10件。</p><p>服务器A为<strong>用户1</strong>生成了订单，并将库存减少1。库存应减少为9件。</p><p>与此同时，服务器B为<strong>用户2</strong>生成了订单，并将库存也减少1，认为库存现在也是9件。</p><ul><li>服务器A将新的库存9件更新回数据库。</li><li>服务器B将新的库存9件（根据它的视角）更新回数据库。</li></ul><p>最终结果：虽然两个用户下单并减少库存，但两台服务器并没有意识到对方的操作，因此它们都认为库存应该从10减少到9，而不是从10减少到8。</p><p>实际发生的问题是，<strong>两个用户都成功购买了商品，但库存实际上只减少了1件</strong>，而不是2件。这就是<strong>库存超卖</strong>的现象。</p><p>库存最终显示为9件，而实际上它应该显示为8件，意味着库存被错误地记录，系统允许用户购买超过实际库存量的商品。</p></blockquote><p>分布式锁保证了在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；</p><h2 id="分布式锁应该具备的品质"><a href="#分布式锁应该具备的品质" class="headerlink" title="分布式锁应该具备的品质"></a>分布式锁应该具备的品质</h2><p>课本上的概念直接列出，让人看了好似懂了又好似没懂。分布式锁简单的来说就是为了在不同服务器上的相同方法只能有一个在某一时刻运行就是了，我们需要锁住一些资源，让其达到这种效果，无论是什么，都会涉及到六个字：高可用高性能，这个也不例外。这个分布式锁需要保证高可用的获取锁和释放锁，也需要保证高性能的获取锁和释放锁。同时为了避免一些意外情况导致某线程一直占用锁，我们需要保证分布式锁具有过期时间，从而避免死锁。</p><ul><li>1、在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；</li><li>2、高可用的获取锁与释放锁；</li><li>3、高性能的获取锁与释放锁；</li><li>4、具备可重入特性；</li><li>5、具备锁失效机制，防止死锁；</li><li>6、具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>目前我们接触到的很多大型网站都是基于分布式环境下开发的，但是有一个理论被称为CAP理论，这个理论告诉我们，**任何一个分布式系统都无法同时保证系统的一致性、可用性和分区容错性。**所以很多分布式系统都是选择牺牲一定的强一致性来得到高可用和高性能这一目标，它们选择系统只要保证最终一致性即可。</p><p>在很多的分布式场景中，为了达到最终一致性需要很多的技术支持，比如：分布式事务和分布式锁等等。这里我们先详细的介绍一下分布式锁的实现方式，分布式锁的实现一般分为三个大类：</p><ol><li>基于数据库实现分布式锁；</li><li>基于缓存实现分布式锁；</li><li>基于ZooKeeper实现分布式锁；</li></ol><p>接下来我们一一介绍。</p><p>在介绍之前，我们先仔细思考一下锁的概念，什么是锁呢？锁只是一个概念，它不涉及到一个具体的事物。任何只要能保证唯一性的都可以作为锁，我们仔细想想什么能保证唯一性呢？没错，就是数据库中的ID和Redis中的setnx，只要插入了两个一样的就会失败，这就是等价于获取锁失败了。</p><h3 id="基于数据库实现分布式锁"><a href="#基于数据库实现分布式锁" class="headerlink" title="基于数据库实现分布式锁"></a>基于数据库实现分布式锁</h3><p>通过上面的介绍，那么这个就很简单了，就是创建一个表，这个表就是为了分布式系统用来获取锁的，比如就创建了这个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `distributed_lock` (</span><br><span class="line">  `lock_key` VARCHAR(64) NOT NULL PRIMARY KEY,</span><br><span class="line">  `lock_value` VARCHAR(64) NOT NULL,</span><br><span class="line">  `expires_at` TIMESTAMP NOT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>如果这个线程想获取到这个锁，就在这个表中插入一条数据，其中lock_key为该线程需要对这个数据进行操作的ID，比如订单ID等等</p><p>在每个分布式节点中，当需要对某个共享资源进行操作时，我们会尝试向 <code>distributed_lock</code> 表中插入一条记录。如果插入成功，则表示获取了锁，可以安全地执行操作。如果插入失败，则说明锁已被其他节点占用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `distributed_lock` (`lock_key`, `lock_value`, `expires_at`)</span><br><span class="line">VALUES (&#x27;product_123&#x27;, &#x27;UUID-xxxx&#x27;, DATE_ADD(NOW(), INTERVAL 10 SECOND))</span><br><span class="line">ON DUPLICATE KEY UPDATE</span><br><span class="line">    `lock_value` = IF(`expires_at` &lt; NOW(), &#x27;UUID-xxxx&#x27;, `lock_value`),</span><br><span class="line">    `expires_at` = IF(`expires_at` &lt; NOW(), DATE_ADD(NOW(), INTERVAL 10 SECOND), `expires_at`);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到了评价这个方法的优劣的时候了，首先这个是基于MySQL的，那就是外存中的，不用说效率低，效率低带来的结果就是并发性不高，就不适合高并发的情况，但是该方法方便，但是一般不用。</p><blockquote><p>基于 MySQL 的分布式锁适合那些并发量不大、锁的粒度较粗的场景，如任务调度、定时任务等。对于高并发、低延迟要求较高的场景，建议使用更高效的分布式锁实现，如 Redis 或 ZooKeeper。</p><p><strong><code>ON DUPLICATE KEY UPDATE</code></strong>：这个语句的作用是在插入新记录时，如果 <code>lock_key</code> 已经存在（比如因为主键或唯一约束冲突），则不会重新插入，而是执行更新操作。换句话说，如果已经有人持有了锁，这里会判断锁是否已经过期，如果过期了就让当前请求获取锁。</p></blockquote><h3 id="基于Redis实现分布式锁"><a href="#基于Redis实现分布式锁" class="headerlink" title="基于Redis实现分布式锁"></a>基于Redis实现分布式锁</h3><h4 id="基于setnx实现分布式锁"><a href="#基于setnx实现分布式锁" class="headerlink" title="基于setnx实现分布式锁"></a>基于setnx实现分布式锁</h4><p>set if not exist &#x3D; setnx；</p><ol><li>加锁：执行setnx，若成功再执行expire添加过期时间</li><li>解锁：执行delete命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SETNX lock_key unique_value</span><br><span class="line">EXPIRE lock_key 10</span><br></pre></td></tr></table></figure><p>这里会存在一些问题，首先就是这事两个操作，不是原子性的，如果客户端在执行 <code>SETNX</code> 后崩溃，<code>EXPIRE</code> 命令无法执行，导致这个锁永远不会自动释放，造成死锁问题。</p><p>我们可以通过这个来解决：set nx ex</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key unique_value NX EX 10</span><br></pre></td></tr></table></figure><p>这个是原子性的。</p><p>同时这里还有一个过期时间的问题，就是我获取到锁的这个线程，无法在过期时间内完成这个任务，导致别的线程获得了锁，从而又导致了分布式锁的问题。</p><p>我们可以通过自动续期（检查当前线程是否完成了任务，如果没有完成就自动的延长过期时间），我们也可以采用更成熟的比如redisson，该提供了更成熟的分布式锁的设计。</p><h4 id="基于Redis的Lua脚本能力"><a href="#基于Redis的Lua脚本能力" class="headerlink" title="基于Redis的Lua脚本能力"></a>基于Redis的Lua脚本能力</h4><p>使用 <code>SETNX</code> 创建锁时，如果锁被客户端成功获取并持有，当客户端任务执行完毕后需要手动释放锁。然而，如果客户端在释放锁之前崩溃或者出现了错误，可能会导致锁未被正确释放，或者其他客户端错误地释放了本不属于它的锁。</p><p>使用 <code>DEL</code> 命令来释放锁时，必须确保只有持有锁的客户端才可以释放它。为此，可以将 <code>unique_value</code> 设置为唯一值（如 UUID），并通过 Lua 脚本确保只有在持有锁的客户端才能删除锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if redis.call(&quot;GET&quot;, &quot;lock_key&quot;) == &quot;unique_value&quot; then</span><br><span class="line">    return redis.call(&quot;DEL&quot;, &quot;lock_key&quot;)</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="基于Redisson实现分布式锁"><a href="#基于Redisson实现分布式锁" class="headerlink" title="基于Redisson实现分布式锁"></a>基于Redisson实现分布式锁</h4><p>参考资料</p><ul><li><a href="https://blog.csdn.net/asd051377305/article/details/108384490">Redis分布式锁-这一篇全了解(Redission实现分布式锁完美方案)</a></li><li><a href="https://www.cnblogs.com/jackson0714">7年一线互联网经验，超爱图解底层原理，全栈一枚</a></li></ul><p>重点关注这个方式实现，在以后会经常使用这个Redisson来实现分布式锁。</p><h3 id="基于Zookeeper实现分布式锁"><a href="#基于Zookeeper实现分布式锁" class="headerlink" title="基于Zookeeper实现分布式锁"></a>基于Zookeeper实现分布式锁</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262035946.png" alt="image-20241015202529403"></p><p>优点：不必多说，可以保证高可用，毕竟是专业的，Curator框架已原生支持系列分布式锁命令，使用简单</p><p>缺点：也不必多说，成本高，需要单独维护一套ZK集群。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>73 Redisson</title>
      <link href="/2025/02/26/75-07%20Redisson/"/>
      <url>/2025/02/26/75-07%20Redisson/</url>
      
        <content type="html"><![CDATA[<h1 id="73-Redisson"><a href="#73-Redisson" class="headerlink" title="73 Redisson"></a>73 Redisson</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果你之前是在用 Redis 的话，那使用 Redisson 的话将会事半功倍，Redisson 提供了使用 Redis的最简单和最便捷的方法。</p><p>Redisson的宗旨是促进使用者对 Redis 的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><p>Redisson 是一个在 Redis 的基础上实现的 <strong>Java 驻内存数据网格（In-Memory Data Grid）</strong>。</p><ul><li><strong>Netty 框架</strong>：Redisson采用了基于NIO的Netty框架，不仅能作为Redis底层驱动客户端，具备提供对Redis各种组态形式的连接功能，对Redis命令能以同步发送、异步形式发送、异步流形式发送或管道形式发送的功能，LUA脚本执行处理，以及处理返回结果的功能</li><li><strong>基础数据结构</strong>：将原生的Redis Hash，List，Set，String，Geo，HyperLogLog等数据结构封装为Java里大家最熟悉的映射（Map），列表（List），集（Set），通用对象桶（Object Bucket），地理空间对象桶（Geospatial Bucket），基数估计算法（HyperLogLog）等结构，</li><li><strong>分布式数据结构</strong>：这基础上还提供了分布式的多值映射（Multimap），本地缓存映射（LocalCachedMap），有序集（SortedSet），计分排序集（ScoredSortedSet），字典排序集（LexSortedSet），列队（Queue），阻塞队列（Blocking Queue），有界阻塞列队（Bounded Blocking Queue），双端队列（Deque），阻塞双端列队（Blocking Deque），阻塞公平列队（Blocking Fair Queue），延迟列队（Delayed Queue），布隆过滤器（Bloom Filter），原子整长形（AtomicLong），原子双精度浮点数（AtomicDouble），BitSet等Redis原本没有的分布式数据结构。</li><li><strong>分布式锁</strong>：Redisson还实现了Redis文档中提到像分布式锁Lock这样的更高阶应用场景。事实上Redisson并没有不止步于此，在分布式锁的基础上还提供了联锁（MultiLock），读写锁（ReadWriteLock），公平锁（Fair Lock），红锁（RedLock），信号量（Semaphore），可过期性信号量（PermitExpirableSemaphore）和闭锁（CountDownLatch）这些实际当中对多线程高并发应用至关重要的基本部件。正是通过实现基于Redis的高阶应用方案，使Redisson成为构建分布式系统的重要工具。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="什么是Redisson，它与Redis有什么关系？"><a href="#什么是Redisson，它与Redis有什么关系？" class="headerlink" title="什么是Redisson，它与Redis有什么关系？"></a>什么是Redisson，它与Redis有什么关系？</h3><p>有几个关键词：<strong>基于Redis开发的客户端</strong>，<strong>方便业务人员在分布式系统下开发</strong>，<strong>提供了分布式数据结构和工具</strong>，数据同步，数据共享，支持Redis的高可用。</p><p>答：Redisson是基于Redis的客户端，它对Redis进行了封装，方便业务人员在分布式环境下对Redis进行操作，为了实现分布式环境下的操作，它还提供了分布式锁、分布式集合等分布式数据结构和工具，这些都可以让在分布式环境下的服务达到数据共享和数据同步的目的。同时也支持Redis集群的高可用（哨兵模式、集群模式），方便业务人员快速的构建Redis集群，并自动的进行负载均衡和节点故障处理。</p><h3 id="Redisson提供了哪些功能？"><a href="#Redisson提供了哪些功能？" class="headerlink" title="Redisson提供了哪些功能？"></a>Redisson提供了哪些功能？</h3><p>Redisson就是为了在分布式环境下为服务读取Redis中的数据而设置的，因为在多个服务下可能会出现数据竞争的问题，所以Redisson提供了分布式锁的概念，让同一时刻同一种方法只能有一个线程在运行，所以提供的第一个功能是分布式锁。</p><p>为了方便开发人员对分布式环境下对Redis数据读取，提供了大量的分布式数据结构，比如：RMap，RSet等等。</p><p>如果你具有多个Redis服务器，Redisson还可以帮你自动的管理这些分布式Redis，它自带了负载均衡和节点故障处理，可以方便业务人员快速的构建Redis集群。</p><h3 id="Redisson是如何支持高可用的？"><a href="#Redisson是如何支持高可用的？" class="headerlink" title="Redisson是如何支持高可用的？"></a>Redisson是如何支持高可用的？</h3><p>高可用是针对多个Redis情况下，如何保证Redis某个节点挂掉之后，整个服务依旧正常运行。这里就涉及到一些很常见的问题，即在集群环境下，如何保证整个集群的高可用。而Redisson是采用的什么方法呢？</p><p>在多个节点的情况下，我们无非需要知道当前节点是否可用以及当前节点故障之后应该将服务转发给哪个节点，如何保证多个节点之间的数据一致性，上面这三个问题就是我们重点需要关注的问题，那我们带着这三个问题来看看Redisson是如何解决的。</p><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><p>哨兵简单的来说就是一个服务，这个服务时刻的监听Redis服务是否正常，一旦该Redis服务不正常，则需要立即更改Redis服务。</p><p>哨兵模式采用了多个Redis节点，它会选择其中一个作为Redis的主节点，其它Redis节点会作为子节点，也就是备胎。一旦哨兵发现该主节点Master发生故障，哨兵就会重新选择一个新的Master，然后通过发布&#x2F;订阅模式告知其它子节点修改配置（新的Master节点变更）。</p><p>但是哨兵如果只有一个，那也是存在整个服务宕机的危险，所以哨兵也得多多的，越多越安全，鸡蛋不能放在一个笼子里嘛。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262036354.png" alt="image-20241016195226854"></p><p>在这里要深挖的点太多了，比如：哨兵是如何实现的？如果主节点故障，哨兵是如何选取新的主节点？哨兵集群是如何设计的？如何保证Redis集群的数据一致性？哨兵通过发布-订阅模型通知其它子节点，它是如何实现的？</p><p>在很多时候要知其然更要知其所以然，下面将会详细的介绍。</p><h5 id="哨兵是如何实现的"><a href="#哨兵是如何实现的" class="headerlink" title="哨兵是如何实现的"></a>哨兵是如何实现的</h5><p>哨兵就是一个进程，哨兵集群就是一组进程，这组进程就干几件事：时不时的检查一下Redis节点是否还活着、选取新的Redis主节点，通知其它哨兵主节点故障大家一起来选新的主节点。</p><p>哨兵每隔一定时间会主动执行心跳检测，一旦主节点响应超时或断开，哨兵将其标记为“主观下线”。如果多个哨兵共同检测到主节点故障（达到<code>quorum</code>），该主节点将被标记为“客观下线”，这会触发故障转移。</p><p>当sentinel 哨兵节点将 master 标记为主观下线后，会向其余所有的 sentinel 发送sentinel is-master-down-by-addr消息，询问其他sentinel是否同意该master下线。</p><p>每个sentinel收到命令之后，会根据发送过来的 ip和port 检查自己判断的结果，回复自己是否认为该master节点已经下线了。</p><p>sentinel收到回复之后，如果同意master节点进入主观下线的sentinel数量大于等于quorum，则master会被标记为客观下线，即认为该节点已经不可用。</p><p>这就是哨兵啦。</p><h5 id="如果主节点故障，哨兵是如何选取新的节点呢？"><a href="#如果主节点故障，哨兵是如何选取新的节点呢？" class="headerlink" title="如果主节点故障，哨兵是如何选取新的节点呢？"></a>如果主节点故障，哨兵是如何选取新的节点呢？</h5><p>现在哨兵检测到主节点存在故障，需要马上转移主节点，接下来该如何操作呢？</p><p>我们哨兵现在很多呀，谁来主持这个选取新的主节点一事呢？这可是在程序世界，总要有一个程序去做这件事。在选取新的主节点之前，需要先把哨兵的临时话事人给选出来。怎么选？谁干？</p><p>这里就又又又又来了一个选举算法，称为Raft算法，它具体是怎么做的呢？</p><p>简单一句话，诶，谁最早发现这个主节点故障，谁就干这个脏活，话糙理不糙。</p><ol><li>判断客观下线的sentinel节点向其他 sentinel 节点发送 SENTINEL is-master-down-by-addr ip port current_epoch runid</li></ol><blockquote><p>注意：这时的runid是自己的run id，每个sentinel节点都有一个自己运行时id</p></blockquote><ol start="2"><li>目标sentinel回复是否同意master下线并选举领头sentinel，选择领头sentinel的过程符合先到先得的原则。举例：sentinel1判断了客观下线，向sentinel2发送了第一步中的命令，sentinel2回复了sentinel1，说选你为领头，这时候sentinel3也向sentinel2发送第一步的命令，sentinel2会直接拒绝回复；</li><li>当sentinel发现选自己的节点个数超过 majority 的个数的时候，自己就是领头节点；</li><li>如果没有一个sentinel达到了majority的数量，等一段时间，重新选举；</li></ol><p>选完干脏活的哨兵后，就要开始换主节点了，如何选取新的主节点呢？</p><p>Redis集群并不需要保证数据强一致性，所以只需要选取跟主节点最相似的子节点作为主节点即可，也就数据复制偏移量最少的子节点，同时优先级越高的越可能被设为主节点。</p><p>在选择的时候也会把那些可能出现故障的子节点排除候选人之列。</p><p>选出主节点之后，就需要进行权利交接咯。修改配置了。告知其它所有哨兵和子节点，这位就是我们新的主节点啦，要读就读它，监控它</p><h5 id="如何保证Redis集群的数据一致性？"><a href="#如何保证Redis集群的数据一致性？" class="headerlink" title="如何保证Redis集群的数据一致性？"></a>如何保证Redis集群的数据一致性？</h5><p>Redis 哨兵模式下的数据一致性主要通过以下方法实现：</p><ul><li><strong>主从复制</strong>：从节点从主节点实时复制数据。在主节点故障并切换到从节点为新的主节点时，所有写操作将从新主节点处理。</li><li><strong>故障转移过程中的数据保护</strong>：在选举新主节点之前，哨兵会确保旧主节点的状态是可靠的，并且在选举过程中确保不会有写操作对旧主节点进行修改。</li></ul><h5 id="哨兵通过发布-订阅模型通知其它子节点"><a href="#哨兵通过发布-订阅模型通知其它子节点" class="headerlink" title="哨兵通过发布-订阅模型通知其它子节点"></a>哨兵通过发布-订阅模型通知其它子节点</h5><p>Redis 哨兵使用 <strong>发布-订阅模型</strong>（Pub&#x2F;Sub）进行通知，主要通过以下机制：</p><ul><li><strong>监控状态变化</strong>：每个哨兵会监控主从节点的状态，并在状态发生变化时通过发布-订阅模型将变化信息发送给其他哨兵和客户端。</li><li><strong><code>SENTINEL MONITOR</code> 命令</strong>：哨兵会订阅自己监控的节点状态。当主节点状态变化时，哨兵会发布相关事件，例如节点下线、提升新主节点等。</li></ul><h4 id="主从复制模式（Master-Slave-Mode）"><a href="#主从复制模式（Master-Slave-Mode）" class="headerlink" title="主从复制模式（Master-Slave Mode）"></a>主从复制模式（Master-Slave Mode）</h4><p>什么是主从赋值模式，看图：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262036717.png" alt="image-20241016211008999"></p><p>啊，这不是哨兵模式吗？是的，把哨兵去掉，诶，这就是主从复制模式。</p><p>在主从模式下（主从模式就是把上图的所有哨兵去掉），master节点负责写请求，然后异步同步给slave节点，从节点负责处理读请求。如果master宕机了，需要手动将从节点晋升为主节点，并且还要切换客户端的连接数据源。这就无法达到高可用，而通过哨兵模式就可以解决这一问题。</p><p>这里就不过多介绍啦。</p><h4 id="负载均衡机制"><a href="#负载均衡机制" class="headerlink" title="负载均衡机制"></a>负载均衡机制</h4><p><strong>自动路由</strong>：</p><ul><li>Redisson 会根据 Redis 哨兵提供的信息自动获取集群中各个节点的状态（包括主节点和从节点）。当发起请求时，Redisson 会将请求路由到合适的主节点（写操作）或从节点（读操作）。</li><li>如果你配置了多主从结构，Redisson 可以平衡请求到不同的从节点，从而实现读操作的负载均衡。</li></ul><p><strong>轮询与随机策略</strong>：</p><ul><li>Redisson 内置了多种负载均衡策略，可以在多个 Redis 节点之间分配请求。例如，可以使用轮询或随机策略均匀分配请求，从而有效利用各个节点的资源。</li></ul><h2 id="分布式锁相关问题"><a href="#分布式锁相关问题" class="headerlink" title="分布式锁相关问题"></a>分布式锁相关问题</h2><h3 id="如何使用Redisson实现分布式锁？请简单描述实现步骤"><a href="#如何使用Redisson实现分布式锁？请简单描述实现步骤" class="headerlink" title="如何使用Redisson实现分布式锁？请简单描述实现步骤"></a>如何使用Redisson实现分布式锁？请简单描述实现步骤</h3><ul><li>添加Redisson依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 使用最新版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>配置Redisson</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redisson:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">singleServerConfig:</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">&quot;redis://127.0.0.1:6379&quot;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&quot;your_password&quot;</span></span><br><span class="line">    <span class="attr">sentinelServersConfig:</span></span><br><span class="line">      <span class="attr">masterName:</span> <span class="string">&quot;mymaster&quot;</span></span><br><span class="line">      <span class="attr">sentinelAddresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;redis://127.0.0.1:26379&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;redis://127.0.0.1:26380&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建Redisson客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributedLockService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;myLock&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试加锁，最多等待 10 秒，锁定时间 30 秒</span></span><br><span class="line">            <span class="keyword">if</span> (lock.tryLock(<span class="number">10</span>, <span class="number">30</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 执行需要锁定的操作</span></span><br><span class="line">                    performCriticalTask();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 解锁</span></span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 锁未获取，处理失败逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Unable to acquire lock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performCriticalTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 关键任务代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Performing critical task&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Redisson-提供了哪几种分布式锁？这些锁的使用场景是什么？其是如何实现的？"><a href="#Redisson-提供了哪几种分布式锁？这些锁的使用场景是什么？其是如何实现的？" class="headerlink" title="Redisson 提供了哪几种分布式锁？这些锁的使用场景是什么？其是如何实现的？"></a>Redisson 提供了哪几种分布式锁？这些锁的使用场景是什么？其是如何实现的？</h3><h4 id="Redisson七种锁"><a href="#Redisson七种锁" class="headerlink" title="Redisson七种锁"></a>Redisson七种锁</h4><p>参考资料：<a href="https://blog.csdn.net/wangshuai6707/article/details/132791507?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0-132791507-blog-119827743.235%5Ev43%5Econtrol&spm=1001.2101.3001.4242.1&utm_relevant_index=1">【实践篇】4.3 Redis之Redisson 7种分布式锁使用指南</a></p><h5 id="简单锁"><a href="#简单锁" class="headerlink" title="简单锁"></a>简单锁</h5><ul><li>简单锁是最基本的分布式锁，通过调用Redisson的<code>getLock()</code>方法来获取锁，并使用<code>lock()</code>和<code>unlock()</code>方法来加锁和解锁。</li><li>简单锁在性能方面表现良好，可以提供良好的并发控制。</li><li><strong>普通的分布式锁</strong>：用于保护共享资源，防止并发操作引发的数据不一致问题。</li><li>适用于大多数需要控制并发访问的场景，如数据库记录的更新、文件操作等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;myLock&quot;</span>);</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行需要加锁的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h5><ul><li>**公平锁是按照请求锁的顺序来获取锁的，先到先得。**通过调用Redisson的<code>getFairLock()</code>方法来获取公平锁。</li><li>性能和公平性控制：公平锁在性能方面相对较低，因为需要维护一个请求锁的队列来保证公平性。</li></ul><p>公平指的就是对于各个请求锁的线程来说是公平的，排队嘛，那就是公平的嘛，先到先得，客观公平。与之带来的问题就是性能较低了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">fairLock</span> <span class="operator">=</span> redisson.getFairLock(<span class="string">&quot;myFairLock&quot;</span>);</span><br><span class="line">fairLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行需要加锁的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    fairLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h5><ul><li>可重入锁是可以被同一个线程多次获取的锁。通过调用Redisson的getReentrantLock()方法来获取可重入锁。</li><li>性能和重入控制：可重入锁在性能方面表现良好，并且可以通过计数器来控制锁的重入次数。</li><li><strong>需要可重入的分布式锁</strong>：在同一线程中可以多次获取锁，适用于递归调用或多层方法调用的情况。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RReentrantLock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> redisson.getReentrantLock(<span class="string">&quot;myReentrantLock&quot;</span>);</span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行需要加锁的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reentrantLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现方式：</p><ul><li>通过在锁的值中存储线程标识符（如线程 ID），确保同一线程可以多次获取锁而不引发死锁。</li><li>锁的计数器用于跟踪获取次数，只有在释放次数等于获取次数时，锁才会真正释放。</li></ul><h5 id="红锁"><a href="#红锁" class="headerlink" title="红锁"></a>红锁</h5><ul><li>红锁是在多个Redis实例上获取锁的一种机制，要求大多数Redis实例成功获取锁才算成功。通过调用Redisson的<code>getRedLock()</code>方法来获取红锁。</li><li>性能和分布式锁控制：红锁在性能方面相对较低，因为需要在多个Redis实例之间进行同步。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"><span class="type">RedissonRedLock</span> <span class="variable">redLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonRedLock</span>(lock1, lock2, lock3);</span><br><span class="line">redLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行需要加锁的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    redLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h5><ul><li>读写锁是同时支持读操作和写操作的锁。通过调用Redisson的<code>getReadWriteLock()</code>方法来获取读写锁。</li><li>读写锁在读操作方面允许并发访问，但在写操作方面只允许一个线程访问。</li><li><strong>高并发读场景</strong>：当读操作远远大于写操作时，可以使用读写锁来提高性能。</li><li>适用于缓存、列表和共享数据的场景，例如读取配置文件的情况。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;myReadWriteLock&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">readLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line"><span class="type">RLock</span> <span class="variable">writeLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line">readLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行需要读取的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    readLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">writeLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行需要写入的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    writeLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><ul><li>信号量是一种用于控制并发访问数量的锁。通过调用Redisson的<code>getSemaphore()</code>方法来获取信号量。</li><li>信号量可以控制同时访问的线程数量，从而控制并发访问。</li><li><strong>控制并发访问数量</strong>：适用于限制访问某些资源的线程数量，比如限流。</li><li>适用于连接池、线程池等需要限制并发数的场景。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;mySemaphore&quot;</span>);</span><br><span class="line">semaphore.acquire();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行需要并发控制的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    semaphore.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h5><ul><li>闭锁是一种用于等待其他线程完成任务的同步工具。通过调用Redisson的<code>getCountDownLatch()</code>方法来获取闭锁。</li><li>闭锁可以等待其他线程完成任务后再继续执行。</li><li><strong>等待多个线程完成任务</strong>：适用于需要协调多个线程完成某项任务的场景。</li><li>例如，主线程等待多个子线程完成后再继续执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;myLatch&quot;</span>);</span><br><span class="line">latch.trySetCount(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待其他线程完成任务</span></span><br><span class="line">latch.await();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行需要等待的业务逻辑</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="基础问题"><a href="#基础问题" class="headerlink" title="基础问题"></a>基础问题</h3><ol><li><strong>什么是 Redisson，它与 Redis 有何关系？</strong><ul><li>这个问题可以用来评估面试者对 Redisson 基本概念的理解，是否了解其作为 Redis 的 Java 客户端框架的角色。</li></ul></li><li><strong>Redisson 提供了哪些核心功能？</strong><ul><li>期望回答分布式锁、分布式集合、分布式同步工具（如信号量、栅栏）、分布式执行器等功能。</li></ul></li><li><strong>Redisson 如何支持高可用性？</strong><ul><li>了解面试者是否熟悉 Redisson 支持的 Redis 部署模式（如单机、哨兵、集群模式），以及自动故障转移和负载均衡机制。</li></ul></li></ol><h3 id="分布式锁相关问题-1"><a href="#分布式锁相关问题-1" class="headerlink" title="分布式锁相关问题"></a>分布式锁相关问题</h3><ol><li><strong>如何使用 Redisson 实现分布式锁？请简单描述实现步骤。</strong><ul><li>这个问题考察面试者对 Redisson 的使用和具体实现步骤的掌握。</li></ul></li><li><strong>Redisson 提供了哪几种分布式锁？这些锁的使用场景是什么？</strong><ul><li>期望回答如可重入锁、公平锁、读写锁等，并说明不同锁的应用场景。</li></ul></li><li><strong>如何处理 Redisson 分布式锁的自动释放问题？</strong><ul><li>想了解面试者是否清楚锁的超时机制，以及如何避免死锁。</li></ul></li><li><strong>Redisson 的 <code>tryLock()</code> 方法如何工作？与 <code>lock()</code> 有什么区别？</strong><ul><li>期望面试者理解 <code>tryLock()</code> 的非阻塞行为和超时处理，以及 <code>lock()</code> 的阻塞行为。</li></ul></li></ol><h3 id="分布式数据结构与对象"><a href="#分布式数据结构与对象" class="headerlink" title="分布式数据结构与对象"></a>分布式数据结构与对象</h3><ol><li><strong>Redisson 支持哪些分布式数据结构？在什么情况下使用这些分布式数据结构？</strong><ul><li>重点考察面试者是否熟悉 <code>RMap</code>、<code>RList</code>、<code>RSet</code> 等分布式集合，及其在共享缓存、任务队列中的应用。</li></ul></li><li><strong>Redisson 提供了哪些分布式对象？如何在分布式环境下实现信号量（Semaphore）？</strong><ul><li>考察面试者是否清楚 Redisson 支持的常见同步工具，如信号量、栅栏、计数器等。</li></ul></li><li><strong>分布式队列的应用场景是什么？如何通过 Redisson 实现一个延时队列？</strong><ul><li>想了解面试者是否能够通过 Redisson 实现延时任务调度，并能描述出常见的应用场景。</li></ul></li></ol><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><ol><li><strong>Redisson 的分布式锁如何确保数据一致性？如果 Redis 节点故障，锁会失效吗？</strong><ul><li>考察面试者是否了解 Redisson 通过 Lua 脚本实现锁的原子性操作，是否考虑过Redis的故障恢复和锁的持久化机制。</li></ul></li><li><strong>Redisson 如何处理分布式锁的重入问题？如何保证锁的公平性？</strong><ul><li>期望面试者解释 Redisson 的可重入锁和公平锁机制，了解它们背后的实现原理。</li></ul></li><li><strong>你如何解决 Redisson 锁的过期时间不够或超时的问题？</strong><ul><li>面试者应了解锁续命机制（watchdog），如何在业务执行时间超过锁的 TTL 时自动延长锁的持有时间。</li></ul></li></ol><h3 id="其他实战问题"><a href="#其他实战问题" class="headerlink" title="其他实战问题"></a>其他实战问题</h3><ol><li><strong>Redisson 如何在 SpringBoot 项目中集成使用？你是否遇到过 Redisson 集成中的问题？如何解决？</strong><ul><li>这个问题可以让面试者结合实际经验，分享如何配置 Redisson 并解决可能遇到的 Redis 连接、锁释放等问题。</li></ul></li><li><strong>在高并发的场景下，如何通过 Redisson 实现分布式限流？</strong><ul><li>期望面试者能描述通过 Redisson 的信号量或限流器（RateLimiter）来限制请求数量的解决方案。</li></ul></li><li><strong>请简述 Redisson 在 Redis 集群模式中的表现，它如何处理节点故障？</strong><ul><li>想了解面试者是否理解集群模式下的分布式锁处理，以及 Redisson 如何自动处理节点失败后的重新连接或数据迁移。</li></ul></li></ol><h3 id="场景设计题"><a href="#场景设计题" class="headerlink" title="场景设计题"></a>场景设计题</h3><ol><li><strong>假设你有一个库存系统，多个实例并发修改库存，如何通过 Redisson 实现线程安全？</strong><ul><li>通过此问题评估面试者在实战中如何利用分布式锁来确保库存数据的一致性。</li></ul></li><li><strong>如何使用 Redisson 实现分布式任务调度器？</strong><ul><li>重点考察面试者对 Redisson 提供的分布式任务调度器功能的理解，能否结合具体业务场景进行实现。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-12 CryptGuard</title>
      <link href="/2025/02/26/75-12%20CryptGuard/"/>
      <url>/2025/02/26/75-12%20CryptGuard/</url>
      
        <content type="html"><![CDATA[<h1 id="75-12-CryptGuard"><a href="#75-12-CryptGuard" class="headerlink" title="75-12 CryptGuard"></a>75-12 CryptGuard</h1><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><h3 id="编写自动配置类"><a href="#编写自动配置类" class="headerlink" title="编写自动配置类"></a>编写自动配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.encryption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;gateway.encryption.enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptionConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;RequestDecryptFilter&gt; <span class="title function_">requestDecryptFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;RequestDecryptFilter&gt; registrationBean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">RequestDecryptFilter</span>());</span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/api/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;ResponseEncryptFilter&gt; <span class="title function_">responseEncryptFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;ResponseEncryptFilter&gt; registrationBean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">ResponseEncryptFilter</span>());</span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/api/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="响应filter"><a href="#响应filter" class="headerlink" title="响应filter"></a>响应filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.encryption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/api/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseEncryptFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 初始化逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResponseWrapper</span> <span class="variable">responseWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseWrapper</span>(httpResponse);</span><br><span class="line">        chain.doFilter(request, responseWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> responseWrapper.getResponseContent();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">encryptedResponse</span> <span class="operator">=</span> EncryptUtils.encrypt(responseBody);</span><br><span class="line">            httpResponse.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> httpResponse.getWriter();</span><br><span class="line">            out.write(encryptedResponse);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            httpResponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, <span class="string">&quot;Encryption error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 销毁逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletResponseWrapper</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> StringBuilder responseContent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ResponseWrapper</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(response);</span><br><span class="line">            responseContent = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">StringBuilderWriter</span>(responseContent));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getResponseContent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> responseContent.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">StringBuilderWriter</span> <span class="keyword">extends</span> <span class="title class_">java</span>.io.Writer &#123;</span><br><span class="line">            <span class="keyword">private</span> StringBuilder stringBuilder;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">StringBuilderWriter</span><span class="params">(StringBuilder stringBuilder)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.stringBuilder = stringBuilder;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf, <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                stringBuilder.append(cbuf, off, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求filter"><a href="#请求filter" class="headerlink" title="请求filter"></a>请求filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cryptguard.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.cryptguard.util.CryptUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 解密请求参数</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">decryptedPath</span> <span class="operator">=</span> CryptUtil.decrypt(originalUri.getPath());</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Original URI: &#123;&#125;, Decrypted Path: &#123;&#125;&quot;</span>, originalUri, decryptedPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解密请求参数</span></span><br><span class="line">        Map&lt;String, String&gt; decryptedQueryParams = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        request.getQueryParams().forEach((key, value) -&gt; &#123;</span><br><span class="line">            decryptedQueryParams.put(CryptUtil.decrypt(key), CryptUtil.decrypt(value.get(<span class="number">0</span>)));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Decrypted Query Params: &#123;&#125;&quot;</span>, decryptedQueryParams);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的请求对象</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">mutatedRequest</span> <span class="operator">=</span> request.mutate()</span><br><span class="line">                .path(decryptedPath)</span><br><span class="line">                .uri(URI.create(decryptedPath)) <span class="comment">// 新解密路径</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改请求交换对象</span></span><br><span class="line">        <span class="type">ServerWebExchange</span> <span class="variable">mutatedExchange</span> <span class="operator">=</span> exchange.mutate()</span><br><span class="line">                .request(mutatedRequest)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理响应</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(mutatedExchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> mutatedExchange.getResponse();</span><br><span class="line">            <span class="comment">// 模拟加密响应内容</span></span><br><span class="line">            response.getHeaders().add(<span class="string">&quot;X-Encrypted&quot;</span>, CryptUtil.encrypt(<span class="string">&quot;Response Encrypted&quot;</span>));</span><br><span class="line">            log.info(<span class="string">&quot;Response processed and encrypted.&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 高优先级</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RequestDecryptFilter代码介绍"><a href="#RequestDecryptFilter代码介绍" class="headerlink" title="RequestDecryptFilter代码介绍"></a>RequestDecryptFilter代码介绍</h2><p>在这段代码中，对GateWay的请求的参数和URL进行解密后再交由对应的接口进行处理，这里涉及到几个问题：</p><ol><li>用户如何通过配置来指定的URL来进行加密？</li><li>用户需要通过配置来对这些加密设置密钥，通过读取配置来获取密钥，如果用户没用设置则需要使用默认的密钥进行加密；</li><li>用户不应当对非结构化的数据进行加密处理（像图片、视频等相关数据进行加密）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cryptguard.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> RequestDecryptFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 设置过滤器使得网关层对所有指定的请求进行解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-12-04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDecryptFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span>,Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;RequestDecryptFilter running&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">decryptedPath</span> <span class="operator">=</span> <span class="string">&quot;/api/crypt/getTest&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">decryptedAuthority</span> <span class="operator">=</span> originalUri.getScheme() + <span class="string">&quot;://&quot;</span> +  originalUri.getAuthority() + <span class="string">&quot;/api/crypt/getTest&quot;</span>;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Original URI: &#123;&#125;, Decrypted Path: &#123;&#125;&quot;</span>, originalUri, decryptedPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的请求对象</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">mutatedRequest</span> <span class="operator">=</span> request.mutate()</span><br><span class="line">                .path(decryptedPath)</span><br><span class="line">                .uri(URI.create(decryptedAuthority)) <span class="comment">// 新解密路径</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改请求交换对象</span></span><br><span class="line">        <span class="type">ServerWebExchange</span> <span class="variable">mutatedExchange</span> <span class="operator">=</span> exchange.mutate()</span><br><span class="line">                .request(mutatedRequest)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(mutatedExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ResponseEncryptFilter代码介绍"><a href="#ResponseEncryptFilter代码介绍" class="headerlink" title="ResponseEncryptFilter代码介绍"></a>ResponseEncryptFilter代码介绍</h2><p>该代码通过拦截接口的响应，然后拼接在一起从新解密之后再返回给客户端，这里涉及到几个问题：</p><ol><li>为什么在GateWay中需要将这些响应拼接之后再进行解密返回？</li><li>我该如何设置一个新的响应然后进行返回？</li><li>GateWay中对请求和响应的操作类是什么？这与通常的Web类有什么区别？为什么是这样的？</li><li>在这个过滤器中该如何指定对对应的接口响应进行加密后返回？</li><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cryptguard.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micrometer.common.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Publisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBufferFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBufferUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponseDecorator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.gateway.support.ServerWebExchangeUtils.ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> ResponseEncryptFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 设置过滤器使得网关层对所有指定的响应进行加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-12-04</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseEncryptFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置拦截器优先级</span></span><br><span class="line">        <span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;ResponseEncryptFilter running&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">originalResponse</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         从原始的 ServerHttpResponse 对象中获取一个 DataBufferFactory 实例，来处理响应体的数据缓冲区。</span></span><br><span class="line"><span class="comment">         bufferFactory: DataBufferFactory 是一个工厂接口，用于创建 DataBuffer 对象。DataBuffer 是一种表示数据缓冲区的对象，</span></span><br><span class="line"><span class="comment">                        通常用于处理 I/O 操作，特别是在处理响应体和请求体的数据流时。它提供了对字节数据的低级处理能力。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">DataBufferFactory</span> <span class="variable">bufferFactory</span> <span class="operator">=</span> originalResponse.bufferFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个装饰器以修改响应数据</span></span><br><span class="line">        <span class="comment">// 创建一个 ServerHttpResponseDecorator，用于装饰原始响应对象，以便在响应写入过程中对响应体进行修改</span></span><br><span class="line">        <span class="comment">// ServerHttpResponseDecorator 是一个用于装饰 ServerHttpResponse 的类，允许你在响应体写入前或写入过程中修改响应数据。</span></span><br><span class="line">        <span class="comment">// 通过重写 writeWith 方法，可以在响应体传输之前对其进行处理，如修改、加密、压缩等操作。</span></span><br><span class="line">        <span class="type">ServerHttpResponseDecorator</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerHttpResponseDecorator</span>(originalResponse) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重写 writeWith 方法，允许对响应体的内容进行修改</span></span><br><span class="line">            <span class="comment">// 在正常情况下，Spring Gateway直接将服务端的响应传递给客户端。而通过重写writeWith方法，我们可以动态读取、处理或替换响应内容，</span></span><br><span class="line">            <span class="comment">// 然后再将修改后的响应数据发送给客户端。</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">writeWith</span><span class="params">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查响应的状态码是否为 200 OK，且响应体是 Flux（异步数据流）</span></span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(getStatusCode(), HttpStatus.OK) &amp;&amp; body <span class="keyword">instanceof</span> Flux) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取响应的 Content-Type 属性，用于判断响应是否是 JSON 或文本格式</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">originalResponseContentType</span> <span class="operator">=</span> exchange.getAttribute(ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果响应的 Content-Type 为 &quot;application/json&quot; 或 &quot;text/plain&quot;，则需要对响应体进行处理</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(originalResponseContentType)</span><br><span class="line">                            &amp;&amp; (originalResponseContentType.contains(<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">                            || originalResponseContentType.contains(<span class="string">&quot;text/plain&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 将 body 转换为 Flux 数据流，Flux 是响应体的异步数据流</span></span><br><span class="line">                        Flux&lt;? <span class="keyword">extends</span> <span class="title class_">DataBuffer</span>&gt; fluxBody = Flux.from(body);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 对响应体进行修改，读取原始数据并进行拼接</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.writeWith(fluxBody.buffer().map(dataBuffers -&gt; &#123;</span><br><span class="line">                            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 遍历所有 DataBuffer，读取其内容，并将内容合并为字符串</span></span><br><span class="line">                            dataBuffers.forEach(dataBuffer -&gt; &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="comment">// 从 DataBuffer 中读取字节并转换为字符串</span></span><br><span class="line">                                    <span class="type">byte</span>[] content = <span class="keyword">new</span> <span class="title class_">byte</span>[dataBuffer.readableByteCount()];</span><br><span class="line">                                    dataBuffer.read(content);</span><br><span class="line">                                    <span class="comment">// 释放 DataBuffer，避免内存泄漏</span></span><br><span class="line">                                    DataBufferUtils.release(dataBuffer);</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">// 将内容添加到列表中</span></span><br><span class="line">                                    list.add(<span class="keyword">new</span> <span class="title class_">String</span>(content, StandardCharsets.UTF_8));</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                    <span class="comment">// 错误处理，打印异常堆栈</span></span><br><span class="line">                                    log.error(<span class="string">&quot;读取响应体失败：&#123;&#125;&quot;</span>, getStackTraceAsString(e));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 合并所有部分的响应体内容</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> String.join(<span class="string">&quot;&quot;</span>, list); <span class="comment">// 将各部分数据按空字符串拼接</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 修改响应体内容，这里直接将响应内容替换为 &quot;fang&quot;</span></span><br><span class="line">                            responseData = <span class="string">&quot;fang&quot;</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 将修改后的响应体转换为字节数组并封装为 DataBuffer</span></span><br><span class="line">                            <span class="type">byte</span>[] modifiedContent = responseData.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 更新响应头中的 Content-Length</span></span><br><span class="line">                            originalResponse.getHeaders().setContentLength(modifiedContent.length);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 使用 bufferFactory 封装修改后的字节数组为 DataBuffer</span></span><br><span class="line">                            <span class="keyword">return</span> bufferFactory.wrap(modifiedContent);</span><br><span class="line">                        &#125;));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果响应不符合处理条件，直接返回原始响应</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.writeWith(body);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重写 writeAndFlushWith 方法，以便处理更多复杂的响应体写入情形</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">writeAndFlushWith</span><span class="params">(Publisher&lt;? extends Publisher&lt;? extends DataBuffer&gt;&gt; body)</span> &#123;</span><br><span class="line">                <span class="comment">// 使用 flatMapSequential 来将多个数据流合并处理</span></span><br><span class="line">                <span class="keyword">return</span> writeWith(Flux.from(body).flatMapSequential(p -&gt; p));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用装饰后的响应替换原始响应</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange.mutate().response(response).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getStackTraceAsString</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw);</span><br><span class="line">        throwable.printStackTrace(pw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何通过配置的方式使得用户对密钥进行可配置"><a href="#如何通过配置的方式使得用户对密钥进行可配置" class="headerlink" title="如何通过配置的方式使得用户对密钥进行可配置"></a>如何通过配置的方式使得用户对密钥进行可配置</h2><h3 id="Bean与-Import"><a href="#Bean与-Import" class="headerlink" title="@Bean与@Import"></a>@Bean与@Import</h3><blockquote><h3 id="详细介绍-Import-注解原理"><a href="#详细介绍-Import-注解原理" class="headerlink" title="详细介绍 @Import 注解原理"></a>详细介绍 <code>@Import</code> 注解原理</h3><p>在 Spring 中，<code>@Import</code> 是一个非常强大的注解，它允许你将一个或多个配置类（或其他类型的类）引入到当前的 Spring 配置中。当一个类被 <code>@Import</code> 引入时，它会被当作 Spring Bean 配置的一部分进行处理，所有在该类中定义的 <code>@Configuration</code>、<code>@Bean</code> 等方法都会被自动扫描并注册为 Spring Bean。</p><h4 id="1-Import-的作用"><a href="#1-Import-的作用" class="headerlink" title="1. @Import 的作用"></a>1. <strong><code>@Import</code> 的作用</strong></h4><p><code>@Import</code> 注解可以用来引入以下几种类型的类：</p><ul><li><strong><code>@Configuration</code> 类</strong>：这种方式最常见，通常用于将其他配置类添加到当前的应用上下文中。</li><li><strong><code>@ImportSelector</code> 实现类</strong>：如果需要动态选择要引入的类，可以实现 <code>ImportSelector</code> 接口并返回需要引入的类。</li><li><strong><code>@ImportBeanDefinitionRegistrar</code> 实现类</strong>：这种方式允许在应用上下文中注册更复杂的 Bean 定义，它的作用是直接通过 <code>BeanDefinition</code> 注册 Bean，而不是通过 <code>@Bean</code> 方法。</li></ul><p>当你使用 <code>@Import(CryptGuardConfiguration.class)</code> 时，Spring 会自动引入 <code>CryptGuardConfiguration</code> 类，<code>CryptGuardConfiguration</code> 类中声明的 <code>@Configuration</code> 和 <code>@Bean</code> 会被注册到 Spring 应用上下文中。</p><h3 id="2-Import-的工作机制"><a href="#2-Import-的工作机制" class="headerlink" title="2. @Import 的工作机制"></a>2. <strong><code>@Import</code> 的工作机制</strong></h3><ul><li><strong>自动扫描</strong>：<code>@Import</code> 引入的配置类会像其他配置类一样，进入 Spring 的自动配置扫描过程中。Spring 会查找该配置类中的 <code>@Bean</code> 方法并创建相应的 Bean。</li><li><strong>无需手动注册 Bean</strong>：<code>@Import</code> 会自动注册类中的所有 <code>@Bean</code> 定义。你无需手动声明这些 Bean。</li></ul><h3 id="示例：使用-Import-注解"><a href="#示例：使用-Import-注解" class="headerlink" title="示例：使用 @Import 注解"></a>示例：使用 <code>@Import</code> 注解</h3><p>假设我们有一个 <code>CryptGuardConfiguration</code> 配置类，它在 <code>A</code> 包中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A包中的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptGuardConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CryptGuardProperties <span class="title function_">cryptGuardProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CryptGuardProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestDecryptFilter <span class="title function_">requestDecryptFilter</span><span class="params">(CryptGuardProperties cryptGuardProperties)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestDecryptFilter</span>(cryptGuardProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们有一个 <code>CryptGuardConfig</code> 配置类在 <code>B</code> 包中。如果我们使用 <code>@Import</code> 引入 <code>CryptGuardConfiguration</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B包中的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(CryptGuardConfiguration.class)</span>  <span class="comment">// 引入A包中的配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptGuardConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 可以添加其他配置或@Bean定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，Spring 会自动加载 <code>CryptGuardConfiguration</code> 类中的所有配置，包括 <code>@Bean</code> 方法，注册为 Spring 上下文中的 Bean。我们无需手动添加 <code>@Bean</code> 方法，它们会自动生效。</p><h3 id="3-手动声明-Bean-与-Import-的区别"><a href="#3-手动声明-Bean-与-Import-的区别" class="headerlink" title="3. 手动声明 @Bean 与 @Import 的区别"></a>3. <strong>手动声明 <code>@Bean</code> 与 <code>@Import</code> 的区别</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptGuardConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CryptGuardConfiguration <span class="title function_">cryptGuardConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;CryptGuardConfiguration Bean init&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CryptGuardConfiguration</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们手动通过 <code>@Bean</code> 声明了 <code>CryptGuardConfiguration</code> Bean。与通过 <code>@Import</code> 引入配置类的区别如下：</p><h4 id="本质区别："><a href="#本质区别：" class="headerlink" title="本质区别："></a><strong>本质区别</strong>：</h4><ul><li><p><strong>手动声明 <code>@Bean</code></strong>：手动声明 <code>@Bean</code> 方法需要明确在当前配置类中创建 <code>CryptGuardConfiguration</code> 的实例。在这个情况下，<code>cryptGuardConfiguration</code> 方法返回的 <code>CryptGuardConfiguration</code> 实例将作为一个普通的 Spring Bean 加入到应用上下文中。但是，这种方式没有自动加载 <code>CryptGuardConfiguration</code> 中的其他配置，因此，如果 <code>CryptGuardConfiguration</code> 类中有其他的 <code>@Bean</code> 方法，它们不会被自动注册，需要显式调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CryptGuardConfiguration <span class="title function_">cryptGuardConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;CryptGuardConfiguration Bean init&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CryptGuardConfiguration</span>();  <span class="comment">// 手动创建实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>通过 <code>@Import</code> 引入配置类</strong>：通过 <code>@Import</code> 引入配置类时，<code>CryptGuardConfiguration</code> 类中的所有 <code>@Bean</code> 方法都会被自动扫描并注册为 Spring Bean。Spring 会自动创建 <code>CryptGuardConfiguration</code> 中定义的所有 Bean，而不需要手动创建它们。这是一种更简洁和更推荐的方式来将其他配置类纳入当前配置中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(CryptGuardConfiguration.class)</span>  <span class="comment">// 自动加载配置类中的@Bean方法</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="工作原理上的差异："><a href="#工作原理上的差异：" class="headerlink" title="工作原理上的差异："></a><strong>工作原理上的差异</strong>：</h4><ol><li><p>通过 <code>@Import</code></p><p>：</p><ul><li><strong>自动扫描</strong>：<code>CryptGuardConfiguration</code> 类会被引入，所有 <code>@Bean</code> 方法会自动被扫描和注册。</li><li><strong>解耦</strong>：<code>@Import</code> 使得 A 包中的配置和 B 包中的配置解耦。B 包无需手动声明 <code>@Bean</code>，Spring 会自动管理所有配置。</li></ul></li><li><p>手动声明 <code>@Bean</code></p><p>：</p><ul><li><strong>显式实例化</strong>：在这种方式中，我们需要手动创建 <code>CryptGuardConfiguration</code> 实例。如果 <code>CryptGuardConfiguration</code> 类中包含多个 Bean 方法，需要确保它们都被正确地注册。</li><li><strong>不自动扫描</strong>：如果没有通过 <code>@Import</code> 引入 <code>CryptGuardConfiguration</code>，则 A 包中的 <code>@Bean</code> 方法不会自动生效。</li></ul></li></ol><h3 id="4-何时使用-Import，何时使用-Bean-手动声明"><a href="#4-何时使用-Import，何时使用-Bean-手动声明" class="headerlink" title="4. 何时使用 @Import，何时使用 @Bean 手动声明"></a>4. <strong>何时使用 <code>@Import</code>，何时使用 <code>@Bean</code> 手动声明</strong></h3><ul><li><strong>使用 <code>@Import</code></strong>：当你希望在一个模块中自动加载另一个模块的配置，而不需要手动创建 Bean 的实例时，使用 <code>@Import</code> 是最简单和最直接的方式。</li><li><strong>手动声明 <code>@Bean</code></strong>：如果你需要更精细的控制，例如对 <code>@Bean</code> 创建过程进行自定义，或者你想明确创建一个 Bean 并控制它的初始化过程，可以使用手动声明的方式。</li></ul><h3 id="5-总结与推荐"><a href="#5-总结与推荐" class="headerlink" title="5. 总结与推荐"></a>5. <strong>总结与推荐</strong></h3><ul><li><strong>简化配置</strong>：使用 <code>@Import</code> 引入配置类是 Spring 中一种常见且推荐的做法，可以自动加载和注册所有 Bean。</li><li><strong>避免冗余配置</strong>：通过 <code>@Import</code> 可以避免在 B 包中重复声明与 A 包相同的 Bean 方法，减少了冗余代码。</li><li><strong>更灵活的模块化设计</strong>：使用 <code>@Import</code> 可以使得应用程序的配置更模块化，将不同的模块配置类独立管理，然后通过 <code>@Import</code> 组合。</li></ul><p>在大多数情况下，使用 <code>@Import</code> 是更简洁、解耦的选择，而手动声明 <code>@Bean</code> 更适合需要自定义 Bean 初始化或更复杂的情况。</p></blockquote><h3 id="CryptGuard包"><a href="#CryptGuard包" class="headerlink" title="CryptGuard包"></a>CryptGuard包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cryptguard.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.cryptguard.filter.RequestDecryptFilter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> CryptGuardProperties</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-12-14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;custom.crypt&quot;, name = &quot;enable&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CryptGuardProperties.class)</span> <span class="comment">// 使 CryptGuardProperties 自动绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptGuardConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CryptGuardProperties cryptGuardProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CryptGuardConfiguration</span><span class="params">(CryptGuardProperties cryptGuardProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cryptGuardProperties = cryptGuardProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestDecryptFilter <span class="title function_">requestDecryptFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;CryptGuardConfiguration RequestDecryptFilter is running&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;CryptGuardProperties is :&quot;</span> + cryptGuardProperties.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestDecryptFilter</span>(cryptGuardProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cryptguard.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> CryptGuardProperties</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-12-14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;custom.crypt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptGuardProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制是否启用配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要进行加密&amp;解密的API-URL列表参数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; secureUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置的私钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用户配置使用"><a href="#用户配置使用" class="headerlink" title="用户配置使用"></a>用户配置使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.cryptguard.config.CryptGuardConfiguration;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> CryptGuardConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-12-09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(CryptGuardConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptGuardConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CryptGuard模块"><a href="#CryptGuard模块" class="headerlink" title="CryptGuard模块"></a>CryptGuard模块</h2><h3 id="名称设计"><a href="#名称设计" class="headerlink" title="名称设计"></a>名称设计</h3><h4 id="注解设计"><a href="#注解设计" class="headerlink" title="注解设计"></a><strong>注解设计</strong></h4><table><thead><tr><th><strong>注解名称</strong></th><th><strong>作用描述</strong></th></tr></thead><tbody><tr><td><code>@DecryptController</code></td><td>标记在 <code>Controller</code> 上，自动对所有请求的 <strong>URL</strong> 和&#x2F;或 <strong>参数</strong> 进行解密，可通过属性指定解密范围。</td></tr><tr><td><code>@EncryptController</code></td><td>标记在 <code>Controller</code> 上，自动对所有请求的响应进行加密后返回。</td></tr><tr><td><code>@CryptController</code></td><td>标记在 <code>Controller</code> 上，同时对所有请求的 URL、参数进行解密，且对响应进行加密。</td></tr><tr><td><code>@DecryptRequest</code></td><td>标记在方法上，针对当前方法的请求参数和&#x2F;或 URL 进行解密（可通过属性指定范围）。</td></tr><tr><td><code>@EncryptResponse</code></td><td>标记在方法上，对当前方法的响应数据进行加密后返回。</td></tr><tr><td><code>@CryptMethod</code></td><td>标记在方法上，同时对请求（URL 和参数）进行解密，对响应进行加密。</td></tr></tbody></table><hr><p>注解可以标记在方法OR方法参数上上，</p><ol><li>该注解可以对该请求的所有参数加密后再解密后重新赋值；</li><li>该注解可以对该请求的每个字段进行加密后解密；</li><li>该注解支持对请求参数体中的部分字段进行解密；</li><li>该注解支持对多个请求参数指定部分进行解密后处理；</li></ol><p><strong><code>@EncryptTransient</code></strong></p><ul><li><strong>作用范围</strong>: 类或属性</li><li><strong>作用描述</strong>: 用于标记对类的所有属性或单个属性进行加密&#x2F;解密，但这些加密&#x2F;解密只作用于接口传输过程中，不涉及数据库存储。</li></ul><p><strong><code>@EncryptPersistent</code></strong></p><ul><li><strong>作用范围</strong>: 类或属性</li><li><strong>作用描述</strong>: 用于标记对类的所有属性或单个属性进行加密后保存到数据库，从数据库读取时会进行解密。</li></ul><h4 id="切面设计"><a href="#切面设计" class="headerlink" title="切面设计"></a><strong>切面设计</strong></h4><table><thead><tr><th><strong>切面名称</strong></th><th><strong>作用描述</strong></th></tr></thead><tbody><tr><td><code>DecryptControllerAspect</code></td><td>实现 <code>@DecryptController</code> 的逻辑，在 Controller 方法执行前拦截请求，对 URL 和&#x2F;或参数进行解密。</td></tr><tr><td><code>EncryptControllerAspect</code></td><td>实现 <code>@EncryptController</code> 的逻辑，在 Controller 方法执行后拦截响应数据，对响应数据进行加密。</td></tr><tr><td><code>CryptControllerAspect</code></td><td>实现 <code>@CryptController</code> 的逻辑，同时执行请求解密和响应加密操作。</td></tr><tr><td><code>DecryptRequestAspect</code></td><td>实现 <code>@DecryptRequest</code> 的逻辑，拦截特定方法的请求，对指定范围（URL 和&#x2F;或参数）进行解密。</td></tr><tr><td><code>EncryptResponseAspect</code></td><td>实现 <code>@EncryptResponse</code> 的逻辑，拦截特定方法的响应数据，对响应内容进行加密。</td></tr><tr><td><code>CryptMethodAspect</code></td><td>实现 <code>@CryptMethod</code> 的逻辑，同时处理请求的解密和响应的加密。</td></tr></tbody></table><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="JSON匹配不上Resolved-org-springframework-http-converter-HttpMessageNotReadableException-JSON-parse-error-Cannot-deserialize-value-of-type-java-lang-Long-from-String-“AD40FA5492E44B19277FF3370A65CB49”-not-a-valid-java-lang-Long-value"><a href="#JSON匹配不上Resolved-org-springframework-http-converter-HttpMessageNotReadableException-JSON-parse-error-Cannot-deserialize-value-of-type-java-lang-Long-from-String-“AD40FA5492E44B19277FF3370A65CB49”-not-a-valid-java-lang-Long-value" class="headerlink" title="JSON匹配不上Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type java.lang.Long from String “AD40FA5492E44B19277FF3370A65CB49”: not a valid java.lang.Long value]"></a>JSON匹配不上Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type <code>java.lang.Long</code> from String “AD40FA5492E44B19277FF3370A65CB49”: not a valid <code>java.lang.Long</code> value]</h4><p>主要是JSON加密之后的都是字符串类型，但是在接口参数匹配时，@RequestBody会自动的把这个进行转换，但是就会出现无法把字符串类型匹配上，从而报错。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>把请求参数的类型都改为String即可，但是这种方式不是最优方法。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>@RequestBody原理图：<br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262039813.png" alt="img"></p><p>下面代码可以使用，但是存在一个问题，这个是对所有的JSON2JAVAObject的，所以需要考虑如何进行区分无需加密解密处理的数据。</p><p>加密解密这个操作应该是针对于实体类的，而非接口行为，如果该需要转化的实体类需要加密解密操作，就需要给该实体类进行操作，这里涉及到一个嵌套问题。</p><p>这个加密解密操作是放置在AOP切面逻辑中进行处理还是放置在MappingJackson2HttpMessageConverter子类重写的Read方法中进行处理，</p><ol><li>如果放置在AOP切面逻辑中进行处理，那么对于Read重写的操作需要进行避免加密后的类型是String导致类型不匹配，无法注入到指定的类型对象中</li><li>如果放置在Read操作中，Read操作中是否过于冗长，且与加密处理逻辑过于分散，不方便后续的维护操作，耦合度较高，且如果修改会波及到当前服务所有包含@RequestBody注解的接口，耦合度过高；</li></ol><p>按照上面的分析应该是选择1，但是如何让加密后的数据类型避免无法注入导致的错误呢？这里也有几个方案：</p><p>1. </p><ol><li>递归找到当前所需要转换的类是否有需要解密注解标志，如果存在则清除该JSON中这个对应的Key，然后交由其父类进行转换；如果当前实体类所有的都需要进行加密解密操作，则去除掉所有的Key；</li><li></li></ol><h2 id="数据库字段加密解密"><a href="#数据库字段加密解密" class="headerlink" title="数据库字段加密解密"></a>数据库字段加密解密</h2><blockquote><p>现在假设你非常擅长SpringBoot开发和MyBatis，现在假设你需要实现一个需求，该需求就是你需要提供一个注解，该注解可以标记在实体类的类上或者属性上。标记在属性上，就表示如果从数据库里读取这个字段时需要解密后再处理，如果是保存到数据库中则需要加密后再保存。标记在类上就是所有的属性都需要进行操作。请你结合现在市面上非常专业的做法给出你的专业的方案介绍，要求非常详细，同时你也需要考虑到后续的扩展功能，比如对加密字段进行查询，以及对加密字段进行模糊查询等，这里我只给出部分扩展功能，仅供参考，请你也给出其它可能存在的需求。注意某些字段可能需要加密某些不需要进行加密，然后某些字段可能需要考虑使用模糊查询某些不需要考虑。</p></blockquote><p>实现一个注解支持对实体类或字段进行加密和解密操作，并扩展以支持查询和模糊查询等功能，可以采用以下专业方案。以下从需求分析、设计思路、具体实现和扩展功能等方面进行详细说明。</p><hr><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a><strong>需求分析</strong></h3><ol><li><strong>基础功能</strong><ul><li>实现一个自定义注解，支持标注在类上（全类字段生效）或字段上（单字段生效）。</li><li>数据库读取时，对标注字段进行解密。</li><li>数据库保存时，对标注字段进行加密。</li></ul></li><li><strong>扩展功能</strong><ul><li><strong>查询扩展</strong>：支持对加密字段进行普通查询、模糊查询。</li><li><strong>字段控制</strong>：支持部分字段加密，部分字段不加密。</li><li><strong>支持多种加密算法</strong>：支持配置加密算法（如AES、RSA等）。</li><li><strong>动态控制加密&#x2F;解密</strong>：允许在运行时动态控制某些字段是否启用加密功能。</li></ul></li><li><strong>设计要求</strong><ul><li>高可扩展性：方便未来添加新功能。</li><li>易用性：对业务代码改动小。</li><li>高性能：减少不必要的开销。</li></ul></li></ol><hr><h3 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a><strong>设计方案</strong></h3><h4 id="1-自定义注解"><a href="#1-自定义注解" class="headerlink" title="1. 自定义注解"></a><strong>1. 自定义注解</strong></h4><p>创建注解 <code>@Sensitive</code>，可以标注在类或字段上。<br> 注解可以包含如下参数：</p><ul><li><strong>strategy</strong>：指定加密策略，例如AES、RSA。</li><li><strong>querySupport</strong>：标注该字段是否支持查询扩展。</li><li><strong>fuzzyQuerySupport</strong>：标注该字段是否支持模糊查询。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Sensitive &#123;</span><br><span class="line">    String <span class="title function_">strategy</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;AES&quot;</span>; <span class="comment">// 加密算法，默认AES</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">querySupport</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否支持普通查询</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">fuzzyQuerySupport</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>; <span class="comment">// 是否支持模糊查询</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-加解密工具类"><a href="#2-加解密工具类" class="headerlink" title="2. 加解密工具类"></a><strong>2. 加解密工具类</strong></h4><p>封装常用的加密解密算法（如AES）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptionUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AES_KEY</span> <span class="operator">=</span> <span class="string">&quot;exampleKey123456&quot;</span>; <span class="comment">// 示例密钥，建议从配置文件加载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">// AES加密实现，需替换为正式加密逻辑</span></span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(value.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">// AES解密实现，需替换为正式解密逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode(value), StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-数据处理逻辑"><a href="#3-数据处理逻辑" class="headerlink" title="3. 数据处理逻辑"></a><strong>3. 数据处理逻辑</strong></h4><p>使用 <strong>MyBatis 拦截器</strong> 对数据进行拦截和处理。</p><h5 id="a-读取时解密"><a href="#a-读取时解密" class="headerlink" title="a. 读取时解密"></a>a. 读取时解密</h5><p>实现 <code>ResultSetHandler</code> 的拦截，对查询结果进行解密处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = ResultSetHandler.class, method = &quot;handleResultSets&quot;, args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecryptInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed(); <span class="comment">// 获取原始查询结果</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object obj : (List&lt;?&gt;) result) &#123;</span><br><span class="line">                decryptObject(obj); <span class="comment">// 对象解密</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            decryptObject(result); <span class="comment">// 单个对象解密</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">decryptObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="keyword">if</span> (clazz.isAnnotationPresent(Sensitive.class)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">                decryptField(obj, field); <span class="comment">// 解密字段</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">decryptField</span><span class="params">(Object obj, Field field)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Sensitive</span> <span class="variable">sensitive</span> <span class="operator">=</span> field.getAnnotation(Sensitive.class);</span><br><span class="line">        <span class="keyword">if</span> (sensitive != <span class="literal">null</span> || obj.getClass().isAnnotationPresent(Sensitive.class)) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">encryptedValue</span> <span class="operator">=</span> (String) field.get(obj);</span><br><span class="line">            field.set(obj, EncryptionUtils.decrypt(encryptedValue));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-保存时加密"><a href="#b-保存时加密" class="headerlink" title="b. 保存时加密"></a>b. 保存时加密</h5><p>实现 <code>ParameterHandler</code> 的拦截，对数据插入或更新前进行加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = ParameterHandler.class, method = &quot;setParameters&quot;, args = &#123;PreparedStatement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">ParameterHandler</span> <span class="variable">parameterHandler</span> <span class="operator">=</span> (ParameterHandler) invocation.getTarget();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> parameterHandler.getParameterObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parameterObject != <span class="literal">null</span>) &#123;</span><br><span class="line">            encryptObject(parameterObject); <span class="comment">// 对象加密</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">encryptObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="keyword">if</span> (clazz.isAnnotationPresent(Sensitive.class)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">                encryptField(obj, field); <span class="comment">// 加密字段</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">encryptField</span><span class="params">(Object obj, Field field)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Sensitive</span> <span class="variable">sensitive</span> <span class="operator">=</span> field.getAnnotation(Sensitive.class);</span><br><span class="line">        <span class="keyword">if</span> (sensitive != <span class="literal">null</span> || obj.getClass().isAnnotationPresent(Sensitive.class)) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">plainValue</span> <span class="operator">=</span> (String) field.get(obj);</span><br><span class="line">            field.set(obj, EncryptionUtils.encrypt(plainValue));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-查询扩展"><a href="#4-查询扩展" class="headerlink" title="4. 查询扩展"></a><strong>4. 查询扩展</strong></h4><h5 id="a-普通查询支持"><a href="#a-普通查询支持" class="headerlink" title="a. 普通查询支持"></a>a. 普通查询支持</h5><p>通过拦截查询条件，在 <code>WHERE</code> 子句中加密字段的查询值。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> encrypted_field <span class="operator">=</span> #&#123;<span class="keyword">value</span>&#125;</span><br></pre></td></tr></table></figure><p>在 Java 层拦截：</p><ul><li>对 <code>value</code> 进行加密后传递到 SQL。</li></ul><h5 id="b-模糊查询支持"><a href="#b-模糊查询支持" class="headerlink" title="b. 模糊查询支持"></a>b. 模糊查询支持</h5><p>模糊查询较复杂，可以通过分段加密实现。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> encrypted_field <span class="keyword">LIKE</span> CONCAT(<span class="string">&#x27;%&#x27;</span>, #&#123;<span class="keyword">value</span>&#125;, <span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure><p>将 <code>value</code> 进行加密后匹配。</p><hr><h4 id="5-配置和注解扩展"><a href="#5-配置和注解扩展" class="headerlink" title="5. 配置和注解扩展"></a><strong>5. 配置和注解扩展</strong></h4><ol><li><strong>支持多种加密算法</strong><ul><li>在注解中增加配置参数 <code>strategy</code>，通过工厂模式支持多种加密算法。</li></ul></li><li><strong>运行时控制加密逻辑</strong><ul><li>使用配置开关动态决定是否加密&#x2F;解密。</li></ul></li><li><strong>针对特定字段设置特殊处理</strong><ul><li>使用 <code>fuzzyQuerySupport</code> 参数实现模糊查询。</li><li>未来可增加更多功能，如正则查询支持等。</li></ul></li></ol><hr><h4 id="6-示例代码"><a href="#6-示例代码" class="headerlink" title="6. 示例代码"></a><strong>6. 示例代码</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Sensitive(strategy = &quot;AES&quot;, querySupport = true, fuzzyQuerySupport = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Sensitive</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Sensitive(querySupport = true)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>通过结合注解、自定义加解密逻辑以及 MyBatis 拦截器的机制，可以优雅地实现字段的加密解密功能，并支持各种扩展需求。对于复杂查询和特殊场景，可以继续增强查询解析逻辑，确保系统灵活性和高性能。</p><h2 id="加密字段模糊查询"><a href="#加密字段模糊查询" class="headerlink" title="加密字段模糊查询"></a>加密字段模糊查询</h2><p>对加密字段进行模糊查询是一个复杂的问题，因为加密会改变原始明文的结构，导致无法直接通过加密后的数据进行常规的模糊匹配（如<code>LIKE &#39;%keyword%&#39;</code>）。为了解决这个问题，以下是一些可行的方案，结合其优劣势进行详细分析。</p><hr><h3 id="方案-1：基于哈希前缀匹配"><a href="#方案-1：基于哈希前缀匹配" class="headerlink" title="方案 1：基于哈希前缀匹配"></a><strong>方案 1：基于哈希前缀匹配</strong></h3><p><strong>思路</strong>：</p><ol><li>对需要模糊查询的字段建立一个“哈希前缀索引”。</li><li>存储明文字段的多个前缀的哈希值（或部分加密值），用于快速查询。</li><li>查询时，将用户输入的关键字生成相同的前缀哈希值，匹配存储的前缀。</li></ol><p><strong>优点</strong>：</p><ul><li>不暴露明文，具有较高的安全性。</li><li>支持一定范围内的模糊匹配（如以关键字开头的查询）。</li></ul><p><strong>缺点</strong>：</p><ul><li>仅支持<strong>前缀匹配</strong>，不支持中间或后缀模糊匹配。</li><li>存储成本增加，需要额外存储字段前缀的哈希值。</li></ul><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密前缀生成</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateHashPrefixes</span><span class="params">(String text, <span class="type">int</span> prefixLength)</span> &#123;</span><br><span class="line">    List&lt;String&gt; prefixes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= prefixLength &amp;&amp; i &lt;= text.length(); i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> text.substring(<span class="number">0</span>, i);</span><br><span class="line">        prefixes.add(hash(prefix)); <span class="comment">// 使用哈希函数生成前缀哈希</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefixes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数据库中为每个字段存储前缀哈希列表，查询时通过哈希匹配关键字前缀。</p><hr><h3 id="方案-2：同态加密或保序加密（Order-Preserving-Encryption-OPE）"><a href="#方案-2：同态加密或保序加密（Order-Preserving-Encryption-OPE）" class="headerlink" title="方案 2：同态加密或保序加密（Order-Preserving Encryption, OPE）"></a><strong>方案 2：同态加密或保序加密（Order-Preserving Encryption, OPE）</strong></h3><p><strong>思路</strong>：<br> 使用保序加密（Order-Preserving Encryption）算法，对明文进行加密，同时保留加密数据的顺序性。这样，数据库中的加密字段可以参与范围查询和模糊查询。</p><p><strong>优点</strong>：</p><ul><li>支持范围查询、排序和模糊匹配（如前缀匹配、后缀匹配）。</li><li>安全性较高。</li></ul><p><strong>缺点</strong>：</p><ul><li>保序加密算法复杂，性能可能较低。</li><li>如果攻击者掌握大量密文样本，有可能推断加密算法的模式，安全性有所降低。</li></ul><p><strong>示例</strong>：</p><ol><li><p>对字段采用OPE加密存储。</p></li><li><p>在查询时，对查询关键字加密后参与匹配：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> encrypted_name <span class="keyword">LIKE</span> <span class="string">&#x27;encrypted_value%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="方案-3：搜索引擎方案（明文索引）"><a href="#方案-3：搜索引擎方案（明文索引）" class="headerlink" title="方案 3：搜索引擎方案（明文索引）"></a><strong>方案 3：搜索引擎方案（明文索引）</strong></h3><p><strong>思路</strong>：<br> 对加密字段存储额外的明文索引，使用全文检索技术（如Elasticsearch、Solr）实现模糊查询。</p><ul><li>数据库中存储加密字段。</li><li>在全文搜索引擎中维护字段的明文副本，用于查询。</li></ul><p><strong>优点</strong>：</p><ul><li>支持复杂的查询功能（前缀匹配、后缀匹配、关键词匹配、全文检索）。</li><li>高性能，适合大规模数据。</li></ul><p><strong>缺点</strong>：</p><ul><li>明文副本存在安全性问题，需要加强访问控制。</li><li>实现成本较高，需要引入全文搜索引擎。</li></ul><p><strong>示例架构</strong>：</p><ol><li>用户数据加密后存储到数据库。</li><li>同步一份明文到Elasticsearch，供模糊查询使用。</li><li>查询结果返回后，从数据库中解密字段，确保安全性。</li></ol><hr><h3 id="方案-4：分词存储"><a href="#方案-4：分词存储" class="headerlink" title="方案 4：分词存储"></a><strong>方案 4：分词存储</strong></h3><p><strong>思路</strong>：<br> 对需要模糊查询的字段进行分词处理，将所有可能的子串作为独立记录存储到数据库。</p><p><strong>优点</strong>：</p><ul><li>无需引入外部工具，完全在数据库层实现。</li><li>支持任意位置的模糊查询。</li></ul><p><strong>缺点</strong>：</p><ul><li>存储成本和查询成本较高。</li><li>仅适用于特定字段，通用性差。</li></ul><p><strong>示例</strong>：</p><ol><li><p>明文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>会被分词存储为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">he</span><br><span class="line">el</span><br><span class="line">ll</span><br><span class="line">lo</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></li><li><p>模糊查询<code>&quot;ll&quot;</code>时，可以直接匹配对应分词记录。</p></li></ol><hr><h3 id="方案-5：双层加密和部分明文存储"><a href="#方案-5：双层加密和部分明文存储" class="headerlink" title="方案 5：双层加密和部分明文存储"></a><strong>方案 5：双层加密和部分明文存储</strong></h3><p><strong>思路</strong>：<br> 将字段拆分为可加密部分和明文索引部分，模糊查询时仅匹配明文部分，返回结果后再通过解密校验。</p><ul><li>明文索引部分：如字段的前n个字符或部分摘要。</li><li>加密部分：完整字段的加密值。</li></ul><p><strong>优点</strong>：</p><ul><li>部分明文用于查询，提升性能。</li><li>结合加密，增加安全性。</li></ul><p><strong>缺点</strong>：</p><ul><li>仍然存在部分明文暴露的风险。</li><li>查询需要额外的二次验证逻辑。</li></ul><p><strong>示例</strong>：</p><ul><li>数据库中存储：<ul><li><code>encrypted_full_name</code>（完整加密值）</li><li><code>partial_plain_name</code>（前缀明文或部分摘要）</li></ul></li></ul><p>查询时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> partial_plain_name <span class="keyword">LIKE</span> <span class="string">&#x27;%keyword%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后进一步解密和验证<code>encrypted_full_name</code>。</p><hr><h3 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a><strong>方案对比</strong></h3><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td>哈希前缀匹配</td><td>简单高效，安全性好</td><td>仅支持前缀匹配</td><td>常见的前缀匹配需求</td></tr><tr><td>保序加密</td><td>支持范围和模糊查询，安全性较好</td><td>实现复杂，性能较低</td><td>需要范围查询和模糊匹配时</td></tr><tr><td>搜索引擎方案</td><td>查询功能强大，性能高</td><td>明文副本存在安全风险</td><td>大规模数据和复杂查询场景</td></tr><tr><td>分词存储</td><td>简单直接，支持任意位置模糊查询</td><td>存储成本高，性能较低</td><td>小规模数据，且对模糊查询要求高</td></tr><tr><td>双层加密和部分明文存储</td><td>平衡安全性和查询功能，支持模糊查询</td><td>部分明文暴露风险</td><td>对加密字段需要部分匹配查询且安全性要求不苛刻</td></tr></tbody></table><hr><h3 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a><strong>推荐方案</strong></h3><ul><li><strong>高安全性场景</strong>：选择<strong>哈希前缀匹配</strong>或<strong>保序加密</strong>，确保数据加密后不可推断。</li><li><strong>复杂查询需求</strong>：选择<strong>搜索引擎方案</strong>，使用全文索引实现高效模糊匹配。</li><li><strong>资源有限场景</strong>：选择<strong>双层加密和部分明文存储</strong>，在安全性和性能间折中。</li></ul><p>根据具体需求选择适合的方案，确保在性能、功能和安全性之间取得平衡。</p><h2 id="数据库字段加密可能会涉及到的问题"><a href="#数据库字段加密可能会涉及到的问题" class="headerlink" title="数据库字段加密可能会涉及到的问题"></a>数据库字段加密可能会涉及到的问题</h2><p>对数据库中的某些字段进行加密虽然可以增强数据安全性，但也会引入一些潜在的问题和挑战。以下是可能存在的问题以及相应的解释：</p><hr><h3 id="1-查询功能受限"><a href="#1-查询功能受限" class="headerlink" title="1. 查询功能受限"></a><strong>1. 查询功能受限</strong></h3><p>加密会改变数据的原始结构，使得直接在加密字段上执行常规查询变得困难：</p><ul><li><strong>模糊查询</strong>：加密后无法直接支持<code>LIKE &#39;%keyword%&#39;</code>等模糊匹配。</li><li><strong>排序</strong>：加密后的数据无法反映原始数据的顺序，无法直接进行排序操作。</li><li><strong>范围查询</strong>：如<code>BETWEEN</code>或<code>&gt;、&lt;</code>等操作，通常无法适用于加密数据。</li></ul><p><strong>解决方法</strong>：</p><ul><li>使用保序加密（Order Preserving Encryption, OPE）或同态加密（Homomorphic Encryption）。</li><li>建立额外的明文索引或哈希索引，供查询使用。</li></ul><hr><h3 id="2-性能问题"><a href="#2-性能问题" class="headerlink" title="2. 性能问题"></a><strong>2. 性能问题</strong></h3><p>加密和解密操作会引入额外的计算开销，特别是在以下场景：</p><ul><li>批量操作（如大批量插入或查询）。</li><li>加密字段参与复杂的数据库运算时。</li><li>动态生成查询条件并逐一解密验证时。</li></ul><p><strong>解决方法</strong>：</p><ul><li>对性能敏感的场景中，使用高效的加密算法（如AES-256）。</li><li>在应用层使用缓存机制，减少重复的加解密操作。</li></ul><hr><h3 id="3-数据一致性问题"><a href="#3-数据一致性问题" class="headerlink" title="3. 数据一致性问题"></a><strong>3. 数据一致性问题</strong></h3><p>加密和解密可能引入数据一致性问题，例如：</p><ul><li>不同版本的加密算法或密钥导致数据无法正确解密。</li><li>数据迁移或备份过程中，密钥未正确同步。</li></ul><p><strong>解决方法</strong>：</p><ul><li>使用统一的密钥管理系统（KMS），确保密钥的一致性和安全性。</li><li>在加密字段中存储元信息（如加密版本号），以便升级加密方案时兼容旧数据。</li></ul><hr><h3 id="4-数据库索引失效"><a href="#4-数据库索引失效" class="headerlink" title="4. 数据库索引失效"></a><strong>4. 数据库索引失效</strong></h3><p>加密会破坏原始数据的排序和相似性，导致索引失效，进而影响查询性能。例如：</p><ul><li>B-Tree索引无法用于加密字段。</li><li>全文索引无法识别加密后的字符串。</li></ul><p><strong>解决方法</strong>：</p><ul><li>建立额外的明文索引字段，仅用于加速查询。</li><li>使用哈希索引，但仅适合等值查询。</li></ul><hr><h3 id="5-数据长度膨胀"><a href="#5-数据长度膨胀" class="headerlink" title="5. 数据长度膨胀"></a><strong>5. 数据长度膨胀</strong></h3><p>加密后的数据通常比原始数据更长（如AES加密会引入填充和随机向量）。这可能导致：</p><ul><li>数据库存储空间增加。</li><li>数据表中字段长度限制的问题（如<code>VARCHAR(255)</code>不足以容纳加密后的数据）。</li></ul><p><strong>解决方法</strong>：</p><ul><li>合理规划字段长度，预留足够空间（如使用<code>TEXT</code>类型）。</li><li>使用紧凑型加密方案，减少加密后数据的长度膨胀。</li></ul><hr><h3 id="6-密钥管理"><a href="#6-密钥管理" class="headerlink" title="6. 密钥管理"></a><strong>6. 密钥管理</strong></h3><p>密钥的管理和保护是加密系统的核心，如果密钥泄露或丢失，可能导致：</p><ul><li>所有加密数据失去安全性。</li><li>数据无法解密，造成业务中断。</li></ul><p><strong>解决方法</strong>：</p><ul><li>使用专业的密钥管理服务（如AWS KMS、Azure Key Vault）。</li><li>定期轮换密钥，并对数据重新加密（Key Rotation）。</li><li>严格限制密钥的访问权限，并启用多因素认证。</li></ul><hr><h3 id="7-多应用场景的兼容性"><a href="#7-多应用场景的兼容性" class="headerlink" title="7. 多应用场景的兼容性"></a><strong>7. 多应用场景的兼容性</strong></h3><p>当多个应用或服务需要访问加密字段时，可能面临以下问题：</p><ul><li>各应用的加密算法或密钥管理方案不一致。</li><li>应用之间的数据交换需要额外的加解密处理，增加复杂性。</li></ul><p><strong>解决方法</strong>：</p><ul><li>制定统一的加密标准，并在微服务架构中共享加解密逻辑。</li><li>通过中间层（如API网关）处理加解密逻辑，简化应用代码。</li></ul><hr><h3 id="8-备份与恢复"><a href="#8-备份与恢复" class="headerlink" title="8. 备份与恢复"></a><strong>8. 备份与恢复</strong></h3><p>对加密数据进行备份和恢复时，可能出现以下问题：</p><ul><li>如果备份中包含密钥，存在泄露风险。</li><li>恢复到新环境时，可能因为密钥丢失或不匹配，导致数据无法解密。</li></ul><p><strong>解决方法</strong>：</p><ul><li>确保密钥与备份数据分开存储。</li><li>在恢复过程中，验证密钥的正确性，并进行解密测试。</li></ul><hr><h3 id="9-数据调试和问题排查困难"><a href="#9-数据调试和问题排查困难" class="headerlink" title="9. 数据调试和问题排查困难"></a><strong>9. 数据调试和问题排查困难</strong></h3><p>加密数据通常不可读，这会增加调试和排查问题的难度：</p><ul><li>开发人员无法直接通过数据库查看加密字段内容。</li><li>日志或错误信息中无法暴露加密字段的明文。</li></ul><p><strong>解决方法</strong>：</p><ul><li>提供安全的调试工具，允许开发人员在受控环境中解密数据。</li><li>避免在日志中记录加密字段内容，或使用脱敏处理。</li></ul><hr><h3 id="10-法规合规性"><a href="#10-法规合规性" class="headerlink" title="10. 法规合规性"></a><strong>10. 法规合规性</strong></h3><p>加密数据可能涉及数据隐私和法规合规性：</p><ul><li>某些法规（如GDPR、HIPAA）要求数据加密，但同时也规定加密方式和密钥保护的标准。</li><li>不合规的加密实现可能导致法律风险。</li></ul><p><strong>解决方法</strong>：</p><ul><li>遵循相关法规，选择符合标准的加密算法（如AES）。</li><li>定期审查加密方案，确保满足最新的合规要求。</li></ul><hr><h3 id="11-应用层与数据库层的职责划分"><a href="#11-应用层与数据库层的职责划分" class="headerlink" title="11. 应用层与数据库层的职责划分"></a><strong>11. 应用层与数据库层的职责划分</strong></h3><p>决定加密逻辑的位置可能会引发争议：</p><ul><li>在应用层加密：可控性高，但每次查询都需要解密字段。</li><li>在数据库层加密：减少开发复杂度，但可能对性能和功能支持有限。</li></ul><p><strong>解决方法</strong>：</p><ul><li>对敏感字段，在应用层加密，确保数据传输过程的安全性。</li><li>对整体加密需求，可使用数据库原生加密功能（如MySQL TDE）。</li></ul><hr><h3 id="12-数据迁移和架构调整的复杂性"><a href="#12-数据迁移和架构调整的复杂性" class="headerlink" title="12. 数据迁移和架构调整的复杂性"></a><strong>12. 数据迁移和架构调整的复杂性</strong></h3><p>当需要对加密方案进行变更（如升级算法、改变加密字段）时：</p><ul><li>数据迁移需要大批量解密和重新加密操作。</li><li>数据表结构可能需要调整（如增加版本号字段）。</li></ul><p><strong>解决方法</strong>：</p><ul><li>设计灵活的数据架构，预留加密相关的元信息。</li><li>使用分批迁移策略，逐步切换加密方案。</li></ul><hr><p>通过这些问题的分析，可以看出加密字段的实施需要在安全性、功能性和性能之间做出权衡。设计时需要综合考虑应用场景、业务需求和系统约束，同时制定明确的管理策略，才能高效解决可能面临的挑战。</p><h2 id="自定义扩展加密-解密算法"><a href="#自定义扩展加密-解密算法" class="headerlink" title="自定义扩展加密&amp;解密算法"></a>自定义扩展加密&amp;解密算法</h2><p>为实现用户可自定义扩展加密算法的需求，我们可以结合 <strong>策略模式（Strategy Pattern）</strong> 和 <strong>工厂模式（Factory Pattern）</strong> 设计一个灵活、可扩展的加密工具包。以下是详细的设计方案。</p><hr><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a><strong>1. 需求分析</strong></h3><ol><li><strong>默认实现</strong>：<ul><li>提供一个默认的加密算法（例如 AES + Base64 编码）。</li></ul></li><li><strong>自定义实现</strong>：<ul><li>用户可以注册自己的加密算法，实现特定接口，并动态选择使用。</li></ul></li><li><strong>灵活扩展</strong>：<ul><li>易于新增加密算法，支持动态加载。</li></ul></li><li><strong>高内聚低耦合</strong>：<ul><li>主工具包与具体加密算法的实现解耦。</li></ul></li></ol><hr><h3 id="2-使用的设计模式"><a href="#2-使用的设计模式" class="headerlink" title="2. 使用的设计模式"></a><strong>2. 使用的设计模式</strong></h3><ol><li><strong>策略模式</strong>：<ul><li>定义一个加密策略接口，不同加密算法实现该接口。</li><li>通过动态选择合适的加密策略实现灵活切换。</li></ul></li><li><strong>工厂模式</strong>：<ul><li>使用工厂方法统一管理加密算法的实例化，支持默认策略与用户自定义策略。</li></ul></li></ol><hr><h3 id="3-详细设计"><a href="#3-详细设计" class="headerlink" title="3. 详细设计"></a><strong>3. 详细设计</strong></h3><h4 id="3-1-定义加密策略接口"><a href="#3-1-定义加密策略接口" class="headerlink" title="3.1 定义加密策略接口"></a><strong>3.1 定义加密策略接口</strong></h4><p>所有加密算法都需实现此接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.encryption.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密策略接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EncryptionStrategy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainText 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedText 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">decrypt</span><span class="params">(String encryptedText)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-2-默认加密策略"><a href="#3-2-默认加密策略" class="headerlink" title="3.2 默认加密策略"></a><strong>3.2 默认加密策略</strong></h4><p>提供默认的 AES + Base64 加密实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.encryption.strategy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.encryption.strategy.EncryptionStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultEncryptionStrategy</span> <span class="keyword">implements</span> <span class="title class_">EncryptionStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;AES&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRANSFORMATION</span> <span class="operator">=</span> <span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;your-default-key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(TRANSFORMATION);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(SECRET_KEY.getBytes(), ALGORITHM));</span><br><span class="line">        <span class="type">byte</span>[] encryptedBytes = cipher.doFinal(plainText.getBytes());</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(encryptedBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decrypt</span><span class="params">(String encryptedText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(TRANSFORMATION);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(SECRET_KEY.getBytes(), ALGORITHM));</span><br><span class="line">        <span class="type">byte</span>[] decodedBytes = Base64.getDecoder().decode(encryptedText);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cipher.doFinal(decodedBytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-3-工厂类"><a href="#3-3-工厂类" class="headerlink" title="3.3 工厂类"></a><strong>3.3 工厂类</strong></h4><p>工厂负责提供合适的加密策略实例。支持用户注册自定义策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.encryption.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.encryption.strategy.EncryptionStrategy;</span><br><span class="line"><span class="keyword">import</span> com.example.encryption.strategy.impl.DefaultEncryptionStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptionStrategyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, EncryptionStrategy&gt; STRATEGIES = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_STRATEGY</span> <span class="operator">=</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态块注册默认策略</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        STRATEGIES.put(DEFAULT_STRATEGY, <span class="keyword">new</span> <span class="title class_">DefaultEncryptionStrategy</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加密策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 策略名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EncryptionStrategy <span class="title function_">getStrategy</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> STRATEGIES.getOrDefault(name, STRATEGIES.get(DEFAULT_STRATEGY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义加密策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 策略名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy 策略实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerStrategy</span><span class="params">(String name, EncryptionStrategy strategy)</span> &#123;</span><br><span class="line">        STRATEGIES.put(name, strategy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-4-自定义加密策略"><a href="#3-4-自定义加密策略" class="headerlink" title="3.4 自定义加密策略"></a><strong>3.4 自定义加密策略</strong></h4><p>用户可以实现 <code>EncryptionStrategy</code> 接口来自定义加密算法，例如使用 RSA。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.encryption.strategy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.encryption.strategy.EncryptionStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSAEncryptionStrategy</span> <span class="keyword">implements</span> <span class="title class_">EncryptionStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;RSA&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">KEY_SIZE</span> <span class="operator">=</span> <span class="number">2048</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PublicKey publicKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PrivateKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RSAEncryptionStrategy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyGen</span> <span class="operator">=</span> KeyPairGenerator.getInstance(ALGORITHM);</span><br><span class="line">        keyGen.initialize(KEY_SIZE);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyGen.generateKeyPair();</span><br><span class="line">        <span class="built_in">this</span>.publicKey = keyPair.getPublic();</span><br><span class="line">        <span class="built_in">this</span>.privateKey = keyPair.getPrivate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">        <span class="type">byte</span>[] encryptedBytes = cipher.doFinal(plainText.getBytes());</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(encryptedBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decrypt</span><span class="params">(String encryptedText)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">        <span class="type">byte</span>[] decodedBytes = Base64.getDecoder().decode(encryptedText);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cipher.doFinal(decodedBytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-5-使用示例"><a href="#3-5-使用示例" class="headerlink" title="3.5 使用示例"></a><strong>3.5 使用示例</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.encryption.factory.EncryptionStrategyFactory;</span><br><span class="line"><span class="keyword">import</span> com.example.encryption.strategy.EncryptionStrategy;</span><br><span class="line"><span class="keyword">import</span> com.example.encryption.strategy.impl.RSAEncryptionStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 使用默认策略</span></span><br><span class="line">        <span class="type">EncryptionStrategy</span> <span class="variable">defaultStrategy</span> <span class="operator">=</span> EncryptionStrategyFactory.getStrategy(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encrypted</span> <span class="operator">=</span> defaultStrategy.encrypt(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default Encrypted: &quot;</span> + encrypted);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default Decrypted: &quot;</span> + defaultStrategy.decrypt(encrypted));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册并使用自定义 RSA 策略</span></span><br><span class="line">        <span class="type">EncryptionStrategy</span> <span class="variable">rsaStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSAEncryptionStrategy</span>();</span><br><span class="line">        EncryptionStrategyFactory.registerStrategy(<span class="string">&quot;rsa&quot;</span>, rsaStrategy);</span><br><span class="line"></span><br><span class="line">        <span class="type">EncryptionStrategy</span> <span class="variable">customStrategy</span> <span class="operator">=</span> EncryptionStrategyFactory.getStrategy(<span class="string">&quot;rsa&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">rsaEncrypted</span> <span class="operator">=</span> customStrategy.encrypt(<span class="string">&quot;Hello, RSA!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;RSA Encrypted: &quot;</span> + rsaEncrypted);</span><br><span class="line">        System.out.println(<span class="string">&quot;RSA Decrypted: &quot;</span> + customStrategy.decrypt(rsaEncrypted));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-设计优势"><a href="#4-设计优势" class="headerlink" title="4. 设计优势"></a><strong>4. 设计优势</strong></h3><ol><li><strong>灵活扩展</strong>：<ul><li>用户可以动态注册并使用新的加密算法，无需修改现有代码。</li></ul></li><li><strong>默认回退</strong>：<ul><li>若未注册自定义策略，则使用默认策略，保证功能正常工作。</li></ul></li><li><strong>高内聚低耦合</strong>：<ul><li>工厂和策略模式将加密逻辑与业务逻辑分离，便于维护和扩展。</li></ul></li><li><strong>动态选择</strong>：<ul><li>支持运行时动态选择不同的加密策略，满足多样化需求。</li></ul></li></ol><hr><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a><strong>5. 注意事项</strong></h3><ol><li><strong>秘钥管理</strong>：<ul><li>强烈建议将密钥托管到安全服务（如 AWS KMS 或 Vault）中，而非硬编码。</li></ul></li><li><strong>线程安全</strong>：<ul><li>确保加密策略的实现是线程安全的。</li></ul></li><li><strong>性能</strong>：<ul><li>加密算法的性能可能因复杂度而异，应根据需求权衡性能与安全性。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-15 Java</title>
      <link href="/2025/02/26/75-15%20Java/"/>
      <url>/2025/02/26/75-15%20Java/</url>
      
        <content type="html"><![CDATA[<h1 id="75-15-Java"><a href="#75-15-Java" class="headerlink" title="75-15 Java"></a>75-15 Java</h1><h2 id="Mybatis-plus-Wrappers"><a href="#Mybatis-plus-Wrappers" class="headerlink" title="Mybatis-plus Wrappers"></a>Mybatis-plus Wrappers</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有有效的应用列表</span></span><br><span class="line">List&lt;SysApplication&gt; applicationList = applicationMapper.selectList(</span><br><span class="line">      Wrappers.&lt;SysApplication&gt;lambdaQuery()</span><br><span class="line">            .eq(SysApplication::getDelFlag, CommonConstants.STATUS_NORMAL)</span><br><span class="line">            .eq(SysApplication::getStatus, StatusEnum.ENABLE.getCode()));</span><br><span class="line"><span class="keyword">if</span>(CollectionUtils.isEmpty(applicationList))&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是mybatis-plus中内置的进行查询，将mysql语句进行了封装，方便程序员进行单表进行操作。但是如果涉及到多表查询，还请使用Mybatis，手写SQL语句。</p><p>判断一个对象是否为空，最好使用其类型对应的isEmpty来进行判断。</p><h2 id="Stream-使用"><a href="#Stream-使用" class="headerlink" title="Stream()使用"></a>Stream()使用</h2><p>参考资料：[【Java 基础篇】Java Stream流详解](<a href="https://blog.csdn.net/qq_21484461/article/details/131420683?ops_request_misc=%7B%22request_id%22:%22171704794916800227425520%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171704794916800227425520&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-131420683-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=java">https://blog.csdn.net/qq_21484461/article/details/131420683?ops_request_misc=%7B%22request%5Fid%22%3A%22171704794916800227425520%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171704794916800227425520&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-131420683-null-null.142^v100^pc_search_result_base1&amp;utm_term=java</a> stream&amp;spm&#x3D;1018.2226.3001.4187)</p><p>Stream 中文称为 “流”，通过将集合转换为这么一种叫做 “流” 的元素序列，通过声明性方式，能够对集合中的每个元素进行一系列并行或串行的流水线操作。</p><p>函数式编程带来的好处尤为明显。这种代码更多地表达了业务逻辑的意图，而不是它的实现机制。易读的代码也易于维护、更可靠、更不容易出错。将会逐步记录使用到的stream方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分组 ground by 按appId进行分组操作 将其转化成Map</span></span><br><span class="line">Map&lt;Long, List&lt;SysMenu&gt;&gt; menuNodeListMap = menuList.stream().collect(Collectors.groupingBy(SysMenu::getAppId));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取map中的所有的menuId字段的值形成一个List</span></span><br><span class="line">List&lt;Long&gt; roleMenuIds = userRolesMenuList.stream().map(SysMenu::getMenuId).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用filter过滤掉一些值</span></span><br><span class="line">allMenuNodeList = allMenuNodeList.stream()</span><br><span class="line">      .filter(t -&gt; roleMenuIds.contains(t.getId())</span><br><span class="line">            &amp;&amp; StringUtils.equalsAny(String.valueOf(t.getExtra().get(<span class="string">&quot;menuType&quot;</span>)),</span><br><span class="line">            String.valueOf(<span class="number">0</span>), String.valueOf(<span class="number">1</span>))).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将查询到的List&lt;对象&gt;转化成stream，然后取两个字段做Key和Value</span></span><br><span class="line">Map&lt;Long,Long&gt; roleAppMap = sysRoleAppMapper.selectList(Wrappers.&lt;SysRoleApp&gt;lambdaQuery()</span><br><span class="line">                .eq(SysRoleApp::getAppId,appId))                            .stream().collect(Collectors.toMap(SysRoleApp::getRoleId,SysRoleApp::getAppId));</span><br></pre></td></tr></table></figure><h3 id="Stream流的使用方法"><a href="#Stream流的使用方法" class="headerlink" title="Stream流的使用方法"></a>Stream流的使用方法</h3><p>Stream的使用可以分为以下三步进行：</p><ol><li>创建流：可以从集合、数组、I&#x2F;O通道等数据源中创建Stream流； 集合：List、Map、Set、Queue；</li><li>中间操作：对流进行一系列的转换和操作，如过滤、映射、排序等；</li><li>终端操作：从流中获取结果，如聚合、收集、遍历等。</li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建流</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream = names.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间操作</span></span><br><span class="line">List&lt;String&gt; filteredNames = names.stream()</span><br><span class="line">                                  .filter(name -&gt; name.startsWith(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">                                  .map(String::toUpperCase)</span><br><span class="line">                                  .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端操作</span></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> names.stream().count();</span><br><span class="line">Optional&lt;String&gt; first = names.stream().findFirst();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤操作：使用filter方法可以根据指定的条件过滤流中的元素。例如，从一个整数列表中过滤出偶数：</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;Integer&gt; evenNumbers = numbers.stream()</span><br><span class="line">                                   .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                                   .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射操作：使用map方法可以将流中的元素映射到另一个值。例如，将一个字符串列表中的元素转换为大写：</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">List&lt;String&gt; upperCaseNames = names.stream()</span><br><span class="line">                                   .map(String::toUpperCase)</span><br><span class="line">                                   .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序操作：使用sorted方法可以对流中的元素进行排序。例如，对一个整数列表进行升序排序：</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">List&lt;Integer&gt; sortedNumbers = numbers.stream()</span><br><span class="line">                                     .sorted()</span><br><span class="line">                                     .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合操作：使用reduce方法可以将流中的元素进行聚合操作，例如求和、求最大值等。例如，计算一个整数列表的总和：</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                 .reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集操作：使用collect方法可以将流中的元素收集到一个集合中。例如，将一个字符串列表中的元素收集到一个新的列表中：</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">List&lt;String&gt; collectedNames = names.stream()</span><br><span class="line">                                   .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式使用"><a href="#Lambda表达式使用" class="headerlink" title="Lambda表达式使用"></a>Lambda表达式使用</h2><p>参考资料：[【Java系列】深入解析 Lambda表达式](<a href="https://blog.csdn.net/weixin_36755535/article/details/131350405?ops_request_misc=%7B%22request_id%22:%22171704867016800227472380%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171704867016800227472380&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131350405-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=java">https://blog.csdn.net/weixin_36755535/article/details/131350405?ops_request_misc=%7B%22request%5Fid%22%3A%22171704867016800227472380%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171704867016800227472380&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131350405-null-null.142^v100^pc_search_result_base1&amp;utm_term=java</a> lambda&amp;spm&#x3D;1018.2226.3001.4187)</p><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><p>Java Lambda表达式是Java 8中最重要的新特性之一。</p><p>它们是一种可传递的匿名函数，可以作为参数传递给方法或存储在变量中，因此可以在需要的时候调用它们。</p><p>Lambda表达式的主要目的是简化Java代码，使其更易于阅读和编写。</p><p>Lambda表达式的语法非常简洁和清晰。它们由参数列表、箭头符号和方法体组成。参数列表指定传递给Lambda表达式的参数，箭头符号 “-&gt;” 分隔参数列表和方法体，方法体则包含Lambda表达式要执行的代码。</p><h3 id="Lambda优点"><a href="#Lambda优点" class="headerlink" title="Lambda优点"></a>Lambda优点</h3><p>Lambda表达式的主要优点包括：</p><ol><li>简化代码：Lambda表达式可以将冗长复杂的代码简化为几行简洁的代码。</li><li>可读性：Lambda表达式可以使代码更易于阅读和理解，因为它们更接近自然语言。</li><li>可传递性：Lambda表达式可以作为参数传递给方法或存储在变量中，使代码更具可重用性和灵活性。</li><li>并行处理：Lambda表达式可以与Stream API一起使用，使Java程序更容易地进行并行处理。</li></ol><p>Lambda表达式是Java 8中最重要的新特性之一，它们为我们提供了一种更简单、更灵活、更易于使用的编程方式。</p><h3 id="使用Lambda表达式，将List转化成List"><a href="#使用Lambda表达式，将List转化成List" class="headerlink" title="使用Lambda表达式，将List转化成List"></a>使用Lambda表达式，将List<Po>转化成List<Vo></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询数据源配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;DatasourceInfoVO&gt; <span class="title function_">queryDatasourceInfoList</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;DataSourceInfoPO&gt; dataSourceInfoPOList = datasourceInfoMapper.selectList(</span><br><span class="line">            Wrappers.&lt;DataSourceInfoPO&gt;lambdaQuery()</span><br><span class="line">            .ne(DataSourceInfoPO::getDelFlag,<span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dataSourceInfoPOList.stream()</span><br><span class="line">            .map(po -&gt; &#123;</span><br><span class="line">                <span class="type">DatasourceInfoVO</span> <span class="variable">datasourceInfoVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatasourceInfoVO</span>();</span><br><span class="line">                BeanUtils.copyProperties(po, datasourceInfoVO);</span><br><span class="line">                <span class="keyword">return</span> datasourceInfoVO;</span><br><span class="line">            &#125;)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java定时任务"><a href="#Java定时任务" class="headerlink" title="Java定时任务"></a>Java定时任务</h2><h3 id="加油站业务定时统计代码逻辑理解"><a href="#加油站业务定时统计代码逻辑理解" class="headerlink" title="加油站业务定时统计代码逻辑理解"></a>加油站业务定时统计代码逻辑理解</h3><p>这部分代码位于package com.space.intell.gas.bff.config中；类InitLoad的主要实现是定时汇总计算指定时间段数据。</p><p>ScheduledExecutorService</p><p>在InitLoad类中有一个这个定义，让我有些疑惑，这个的作用是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时数据同步器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">periodDataSyncExecutor</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">NamedThreadFactory</span>(<span class="string">&quot;period-data-sync&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里使用了一个<code>ScheduledExecutorService</code> 接口，<code>ScheduledExecutorService</code> 是 Java 中用于调度执行定时任务的接口。</p><p>这里使用这个接口来完成一个Java后台的定时任务，一般来说完成一个定时任务方案有如下几种情况：</p><ul><li>JDK自带的Timer</li><li>JDK1.5+ 新增的ScheduledExecutorService</li><li>Quartz**：**简单而强大的JAVA作业调度框架，可以支持动态的Cron语法</li></ul><p>在智慧加油站项目中，选择了ScheduledExecutorService来完成一个定时统计的任务。</p><blockquote><p>ScheduledThreadPoolExecutor继承自ThreadPoolExecutor。它主要用来在给定的延迟之后运行任务，或者定期执行任务。ScheduledThreadPoolExecutor的功能与Timer类似，但 ScheduledThreadPoolExecutor功能更强大、更灵活。Timer对应的是单个后台线程，而 ScheduledThreadPoolExecutor可以在构造函数中指定多个对应的后台线程数。</p></blockquote><p>ScheduledExecutorService包括三个方法：schedule()、scheduleAtFixedRate()、scheduleWithFixedDelay()。</p><h4 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        scheduleTest();</span><br><span class="line">        <span class="comment">//scheduleFixedRate();</span></span><br><span class="line">        <span class="comment">//scheduleWithFixedDelay();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//schedule()的用法,可以对任务进行延迟处理</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        scheduledExecutorService.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">                System.out.println(<span class="string">&quot;第一次延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">                <span class="comment">//任务执行需要时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        scheduledExecutorService.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">                System.out.println(<span class="string">&quot;第二次延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">                <span class="comment">//任务执行需要时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        scheduledExecutorService.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>schedule()方法下需要三个参数，分别是：一个runnable线程，延迟时间，时间单位</p><p>ScheduledExecutorService的强大之处就在于可以在构造函数中指定多个对应的后台线程数，并发的运行延迟任务。</p><h4 id="scheduleAtFixedRate"><a href="#scheduleAtFixedRate" class="headerlink" title="scheduleAtFixedRate"></a>scheduleAtFixedRate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scheduleAtFixedRate()的用法</span></span><br><span class="line">   <span class="comment">//在schedule下，加了周期运行的条件。</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleFixedRate</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//获取当前时间</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">               System.out.println(<span class="string">&quot;延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,<span class="number">3000</span>,<span class="number">2000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>相比于schedule()方法，多了一个参数period，就是可以指定周期执行。如上代码，周期为2s。如果这个加入的任务运行时间超过了刚刚定义的规定周期，scheduldFixedRate只要到了规定的周期时间，就会马上去执行下一轮回。</p><h4 id="scheduleWithFixedDelay"><a href="#scheduleWithFixedDelay" class="headerlink" title="scheduleWithFixedDelay"></a>scheduleWithFixedDelay</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scheduleWithFixedDelay()用法</span></span><br><span class="line">    <span class="comment">//也是加了周期运行的条件，但是必须是等到上一个任务结束后，进行周期循环。周期时间就是任务运行时间+delay</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleWithFixedDelay</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        scheduledExecutorService.scheduleWithFixedDelay(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">                System.out.println(<span class="string">&quot;延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">3000</span>,<span class="number">2000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>相比于scheduleAtFixedRate()，scheduleWithFixedDelay()是每次都要把任务执行完成后再延迟固定时间后再执行下一次。结果如下：周期为任务运行时间+delay（指定周期时间）</p><h3 id="initDataSync"><a href="#initDataSync" class="headerlink" title="initDataSync"></a>initDataSync</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDataSync</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">// 初始化缓存主数据</span></span><br><span class="line">   periodRefreshCache();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 初始化缓存报警语音配置</span></span><br><span class="line">   cacheAlarmEventAudioCfg();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 创建定时任务</span></span><br><span class="line">   <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">      <span class="comment">// 定时刷新主数据到缓存</span></span><br><span class="line">      periodRefreshCache();</span><br><span class="line"></span><br><span class="line">      <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 每个整点执行统计汇总计算站点内外车辆数量</span></span><br><span class="line">      <span class="type">SummarizeStationVehicleStatisticsReqDTO</span> <span class="variable">statisticsReqDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SummarizeStationVehicleStatisticsReqDTO</span>();</span><br><span class="line">      statisticsReqDTO.setStationId(BffSysConstants.DEFAULT_STATION_ID);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         vehicleStEventService.updateStationVehicleSumStatistics(statisticsReqDTO);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;每个整点执行统计汇总计算站点内外车辆数量失败!(&#123;&#125;)&quot;</span>, now, e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 每个整点执行统计顾客进离店数据</span></span><br><span class="line">      log.info(<span class="string">&quot;每个整点执行统计顾客进离店数据开始(&#123;&#125;)...&quot;</span>, now);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         stShopStatisticsService.periodSaveCustomerSummaryStatistics(<span class="keyword">new</span> <span class="title class_">StShopPeriodInfoDTO</span>());</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;每个整点执行统计顾客进离店数据失败!(&#123;&#125;)&quot;</span>, now, e);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 定时汇总计算上一时间段(例如:1小时,即上一小时内的00:00~59:59)的顾客事件(进离店)数据到数据库</span></span><br><span class="line">   <span class="comment">// 获取当前时间</span></span><br><span class="line">   <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">   <span class="type">Date</span> <span class="variable">currentTime</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 计算下一个整点的时间</span></span><br><span class="line">   calendar.set(Calendar.HOUR_OF_DAY, calendar.get(Calendar.HOUR_OF_DAY) + <span class="number">1</span>);</span><br><span class="line">   calendar.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">   calendar.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">   <span class="type">Date</span> <span class="variable">nextHour</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 计算从当前时间到下一个整点的时间间隔</span></span><br><span class="line">   <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> nextHour.getTime() - currentTime.getTime();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 安排定时任务在下一个整点执行</span></span><br><span class="line">   periodDataSyncExecutor.scheduleAtFixedRate(task, delay, <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@PostConstruct</code> 是 Java 中的一个注解，用于标记一个方法，表示该方法在对象被创建后（即构造方法执行完毕，所有依赖注入完成）立即执行，相当于初始化方法。</p><p>这两个方法的调用如注释所说，初始化缓存，保持缓存的一致性。不可更改。对于这两个方法一般不进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化缓存主数据</span></span><br><span class="line">   periodRefreshCache();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 初始化缓存报警语音配置</span></span><br><span class="line">   cacheAlarmEventAudioCfg();</span><br></pre></td></tr></table></figure><p>使用Runnable来定义一个任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个任务</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行定时任务，当前时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里定义了一个定时任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建定时任务</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">   <span class="comment">// 定时刷新主数据到缓存</span></span><br><span class="line">   periodRefreshCache();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取当前时间</span></span><br><span class="line">   <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 每个整点执行统计汇总计算站点内外车辆数量</span></span><br><span class="line">   <span class="type">SummarizeStationVehicleStatisticsReqDTO</span> <span class="variable">statisticsReqDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SummarizeStationVehicleStatisticsReqDTO</span>();</span><br><span class="line">   statisticsReqDTO.setStationId(BffSysConstants.DEFAULT_STATION_ID);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      vehicleStEventService.updateStationVehicleSumStatistics(statisticsReqDTO);</span><br><span class="line">   &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      log.error(<span class="string">&quot;每个整点执行统计汇总计算站点内外车辆数量失败!(&#123;&#125;)&quot;</span>, now, e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 每个整点执行统计顾客进离店数据</span></span><br><span class="line">   log.info(<span class="string">&quot;每个整点执行统计顾客进离店数据开始(&#123;&#125;)...&quot;</span>, now);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      stShopStatisticsService.periodSaveCustomerSummaryStatistics(<span class="keyword">new</span> <span class="title class_">StShopPeriodInfoDTO</span>());</span><br><span class="line">   &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      log.error(<span class="string">&quot;每个整点执行统计顾客进离店数据失败!(&#123;&#125;)&quot;</span>, now, e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为需要定期执行这个任务，所以在定时任务里也需要定时更新缓存数据。</p><p>SummarizeStationVehicleStatisticsReqDTO类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SummarizeStationVehicleStatisticsReqDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 站点ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Long stationId;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 统计开始时间</span></span><br><span class="line"><span class="comment">    * 将以整点开始(00:00)汇总计算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> LocalDateTime statisticStartTime;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 统计结束时间</span></span><br><span class="line"><span class="comment">    * 将以整点结束(59:59)汇总计算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> LocalDateTime statisticEndTime;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 进站车辆数量</span></span><br><span class="line"><span class="comment">    * 默认计算更新,仅手动调整时传参</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Long innerVehicleNum;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 站外车辆数量</span></span><br><span class="line"><span class="comment">    * 默认计算更新,仅手动调整时传参</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Long outerVehicleNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即需要我们进行统计的信息。</p><p>然后这里调用了updateStationVehicleSumStatistics方法，来看看这个方法的实现逻辑。</p><h3 id="updateStationVehicleSumStatistics"><a href="#updateStationVehicleSumStatistics" class="headerlink" title="updateStationVehicleSumStatistics"></a>updateStationVehicleSumStatistics</h3><p>这个方法完成的是定时更新站内外车辆汇总统计数据。</p><p>这个方法被@Transactional注解，表示这个方法是一个事物，要么全部执行要么全部不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="keyword">if</span>(reqDTO.getStatisticStartTime() == <span class="literal">null</span> || reqDTO.getStatisticEndTime() == <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="type">LocalDateTime</span> <span class="variable">currentHourTime</span> <span class="operator">=</span> now.withMinute(<span class="number">0</span>).withSecond(<span class="number">0</span>).withNano(<span class="number">0</span>);</span><br><span class="line">   reqDTO.setStatisticStartTime(LocalDateTimeUtil.offset(currentHourTime, -<span class="number">1</span>, ChronoUnit.HOURS));</span><br><span class="line">   reqDTO.setStatisticEndTime(LocalDateTimeUtil.offset(currentHourTime, -<span class="number">1</span>, ChronoUnit.SECONDS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>LocalDateTime currentHourTime = now.withMinute(0).withSecond(0).withNano(0);</code></li><li>这一行代码首先获取了当前的时间 <code>now</code>，然后通过 <code>withMinute(0)</code> 方法将当前分钟数置为零，通过 <code>withSecond(0)</code> 方法将秒数置为零，通过 <code>withNano(0)</code> 方法将纳秒数置为零。这样就将当前时间调整为当前小时的开始时间，即当前小时的整点开始时间。</li><li><code>reqDTO.setStatisticStartTime(LocalDateTimeUtil.offset(currentHourTime, -1, ChronoUnit.HOURS));</code></li><li>这一行代码将统计的开始时间设置为当前小时的前一小时。它使用了一个 <code>LocalDateTimeUtil</code> 工具类的 <code>offset</code> 方法，该方法接受三个参数：原始时间（<code>currentHourTime</code>），偏移量（-1），和时间单位（<code>ChronoUnit.HOURS</code>）。这样就将当前小时的开始时间往前推一小时，得到了统计的开始时间。</li><li><code>reqDTO.setStatisticEndTime(LocalDateTimeUtil.offset(currentHourTime, -1, ChronoUnit.SECONDS));</code></li><li>这一行代码将统计的结束时间设置为当前小时的开始时间减去一秒钟。同样使用了 <code>LocalDateTimeUtil</code> 工具类的 <code>offset</code> 方法，将当前小时的开始时间往前推一秒钟，得到了统计的结束时间。</li></ol></blockquote><p>注意当前时间是要统计前一个小时的车辆数据，比如说现在在10:12，则需要统计的是9：00~9：59的所有车辆数据。</p><p>后面的代码逻辑就是统计站内外的车辆，暂不进行解释。</p><h2 id="机场项目业务定时任务"><a href="#机场项目业务定时任务" class="headerlink" title="机场项目业务定时任务"></a>机场项目业务定时任务</h2><p>初步方案：</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262041746.jpeg" alt="img"></p><h2 id="Java深拷贝-浅拷贝"><a href="#Java深拷贝-浅拷贝" class="headerlink" title="Java深拷贝 &amp; 浅拷贝"></a>Java深拷贝 &amp; 浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>​浅拷贝又称为浅复制，浅克隆，浅拷贝是指拷贝时只拷贝对象本身（包括对象中的基本变量），<strong>而不拷贝对象包含的引用所指向的对象</strong>，拷贝出来的对象的所有变量的值都含有与原来对象相同的值，而所有对其他对象的引用都指向原来的对象，简单地说，<strong>浅拷贝只拷贝对象不拷贝引用</strong>。</p><h4 id="SpringFrameWork-BeanUtils"><a href="#SpringFrameWork-BeanUtils" class="headerlink" title="SpringFrameWork BeanUtils"></a>SpringFrameWork BeanUtils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.copyProperties(当前对象，需要复制到的对象);</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>​深拷贝又称为深复制，深克隆，<strong>深拷贝不仅拷贝对象本身，而且还拷贝对象包含的引用所指向的对象</strong>，拷贝出来的对象的所有变量（不包含那些引用其他对象的变量）的值都含有与原来对象的相同的值，那些引用其他对象的变量将指向新复制出来的新对象，而不指向原来的对象，简单地说，<strong>深拷贝不仅拷贝对象，而且还拷贝对象包含的引用所指向的对象。</strong></p><h4 id="DozerMapperUtil"><a href="#DozerMapperUtil" class="headerlink" title="DozerMapperUtil"></a>DozerMapperUtil</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> DozerMapperUtil.map(<span class="built_in">this</span>,MetaDsPropPO.class);</span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262041900.jpg" alt="img_v3_02c6_afd29d78-68dd-42a6-a60b-e69de94cca4g"></p><h2 id="Java关键字Synchronized"><a href="#Java关键字Synchronized" class="headerlink" title="Java关键字Synchronized"></a>Java关键字Synchronized</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_43843951/article/details/129107202?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171946737316800226522103%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171946737316800226522103&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-129107202-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=synchronized&spm=1018.2226.3001.4187">【多线程与高并发】- synchronized锁的认知</a></li></ol><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Synchronized 【&#x2F;ˈsɪŋkrənaɪzd&#x2F;】是 Java 语言的一个关键字，它允许多个线程同时访问共享的资源，<strong>以避免多线程编程中的竞争条件和死锁问题</strong>。synchronized可以用来给对象或者方法进行加锁，当对某个对象或者代码块加锁时，<strong>同时就只能有一个线程去执行</strong>。这种就是互斥关系，被加锁的区域称为临界区，而里面的资源就是临界资源。当一个线程进入临界区的时候，另一个线程就必须等待。</p><h4 id="1、通过对象进行锁"><a href="#1、通过对象进行锁" class="headerlink" title="1、通过对象进行锁"></a>1、通过对象进行锁</h4><p>在代码里，可以通过创建一个对象，这样要想拿到临界资源，就必须先获得到这个对象的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1_Synchronized01</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123; <span class="comment">// 必须先拿到o这个锁</span></span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、通过this"><a href="#2、通过this" class="headerlink" title="2、通过this"></a>2、通过this</h4><p>使用this代表锁住的是当前对象，这种方法等同直接把synchronized关键字加在方法前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1_Synchronized01</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123; <span class="comment">// 必须先拿到this的锁</span></span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123; <span class="comment">// 与m2一样</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、锁定静态方法"><a href="#3、锁定静态方法" class="headerlink" title="3、锁定静态方法"></a>3、锁定静态方法</h4><p>锁定静态方法需要通过类.class，或者直接在静态方法上加上关键字。但是，类.class不能使用this来代替。注：在同一个类加载器中，class是单例的，这也就能保证synchronized能够只让一个线程访问临界资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1_Synchronized01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123; <span class="comment">// 静态方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (T1_Synchronized01.class) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m5</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>A. 无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。 </li><li>B. 每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。 </li><li>C. 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。</li></ul><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="JVM-vs-JDK-vs-JRE"><a href="#JVM-vs-JDK-vs-JRE" class="headerlink" title="JVM vs JDK vs JRE"></a>JVM vs JDK vs JRE</h3><blockquote><p>JVM (Java Virtual Machine)、JDK (Java Development Kit)、JRE (Java Runtime Environment) 是 Java 开发与运行环境中的三个重要概念。理解它们有助于全面掌握 Java 生态系统。下面将详细解释每个概念，并指出它们之间的区别。</p><h3 id="1-JVM-Java-Virtual-Machine-Java-虚拟机"><a href="#1-JVM-Java-Virtual-Machine-Java-虚拟机" class="headerlink" title="1. JVM (Java Virtual Machine) - Java 虚拟机"></a>1. JVM (Java Virtual Machine) - Java 虚拟机</h3><p><strong>JVM 是什么？</strong></p><ul><li>JVM 是一个虚拟机，负责将编译后的 Java 字节码（<code>.class</code> 文件）转换为机器码，并在特定平台上运行。这使得 Java 具有“平台无关性”的特性，即“写一次，运行到处”（Write Once, Run Anywhere）。</li></ul><p><strong>JVM 的主要功能：</strong></p><ul><li><strong>加载字节码</strong>：JVM 负责从 <code>.class</code> 文件中加载字节码。</li><li><strong>字节码解释与执行</strong>：将字节码解释为机器码，或通过即时编译 (JIT) 将其直接编译为机器码执行。</li><li><strong>内存管理</strong>：JVM 管理 Java 应用的内存（例如堆、栈、方法区等）。</li><li><strong>垃圾回收 (Garbage Collection)</strong>：自动清理不再使用的对象，避免内存泄漏。</li><li><strong>线程管理</strong>：JVM 也负责管理 Java 中的多线程操作。</li></ul><p><strong>JVM 不包括什么？</strong></p><ul><li>它不包括编译工具和开发工具，单纯是执行 Java 字节码的环境。</li></ul><h3 id="2-JDK-Java-Development-Kit-Java-开发工具包"><a href="#2-JDK-Java-Development-Kit-Java-开发工具包" class="headerlink" title="2. JDK (Java Development Kit) - Java 开发工具包"></a>2. JDK (Java Development Kit) - Java 开发工具包</h3><p><strong>JDK 是什么？</strong></p><ul><li>JDK 是 Java 开发者的工具包，包含了开发 Java 应用所需的一切。它包括 JRE、编译器 (<code>javac</code>)、调试工具、文档生成器等。</li></ul><p><strong>JDK 的主要组成部分：</strong></p><ol><li><strong>JRE (Java Runtime Environment)</strong>：用于运行 Java 应用，包含 JVM 和 Java 标准库。</li><li><strong>编译器 (<code>javac</code>)</strong>：将 Java 源代码编译成字节码。</li><li><strong>调试工具</strong>：如 <code>jdb</code>，用于调试 Java 程序。</li><li><strong>文档工具 (<code>javadoc</code>)</strong>：生成 Java API 文档。</li><li><strong>打包工具 (<code>jar</code>)</strong>：用于将 Java 应用程序打包成 <code>.jar</code> 文件。</li></ol><p><strong>JDK 的用途：</strong></p><ul><li>JDK 提供了所有开发 Java 应用程序所需的工具。开发者可以使用 JDK 编写、编译、调试和运行 Java 代码。</li></ul><h3 id="3-JRE-Java-Runtime-Environment-Java-运行时环境"><a href="#3-JRE-Java-Runtime-Environment-Java-运行时环境" class="headerlink" title="3. JRE (Java Runtime Environment) - Java 运行时环境"></a>3. JRE (Java Runtime Environment) - Java 运行时环境</h3><p><strong>JRE 是什么？</strong></p><ul><li>JRE 是运行 Java 应用的环境。它包含 JVM 以及 Java 的类库和其他支持文件。JRE 是用户运行 Java 应用时所需的环境，而不是开发者写 Java 程序所需的工具包。</li></ul><p><strong>JRE 的主要组成部分：</strong></p><ol><li><strong>JVM</strong>：负责执行 Java 字节码。</li><li><strong>Java 标准库（类库）</strong>：如 <code>java.lang</code>、<code>java.util</code>、<code>java.io</code> 等，提供了 Java 程序常用的 API 和功能。</li><li><strong>其他运行时支持文件</strong>：包括支持运行 Java 应用程序的资源文件等。</li></ol><p><strong>JRE 的用途：</strong></p><ul><li>JRE 是用户运行已经编译好的 Java 程序所需的最低环境，它不包括开发工具。对于非开发者，只要有 JRE，就可以运行 Java 应用。</li></ul><h3 id="它们之间的区别"><a href="#它们之间的区别" class="headerlink" title="它们之间的区别"></a>它们之间的区别</h3><table><thead><tr><th>项目</th><th>JVM</th><th>JDK</th><th>JRE</th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>Java 虚拟机，用于执行字节码</td><td>Java 开发工具包，包含编译器、调试器等</td><td>Java 运行时环境，用于运行 Java 程序</td></tr><tr><td><strong>包含内容</strong></td><td>仅 JVM</td><td>包含 JRE 和开发工具</td><td>JVM 和 Java 标准类库</td></tr><tr><td><strong>用途</strong></td><td>执行 Java 程序</td><td>开发 Java 程序</td><td>运行 Java 程序</td></tr><tr><td><strong>开发工具</strong></td><td>不包含</td><td>包含编译器等</td><td>不包含</td></tr><tr><td><strong>适用对象</strong></td><td>用于运行字节码</td><td>用于开发者编写、编译和调试程序</td><td>用于最终用户运行 Java 应用</td></tr></tbody></table><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>JVM</strong> 是 Java 的核心部分，它负责将 Java 字节码转换为机器码，并在特定平台上运行。</li><li><strong>JRE</strong> 包含 JVM 以及 Java 标准库，用户只需要安装 JRE 就可以运行 Java 程序。</li><li><strong>JDK</strong> 是开发者的工具包，它包含 JRE 和用于开发 Java 应用的工具，如编译器和调试工具。</li></ul><p>总之，<strong>JVM</strong> 是运行时的核心，<strong>JRE</strong> 是 JVM 的运行环境，而 <strong>JDK</strong> 则是包含 JRE 和开发工具的完整开发套件。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262041058.png" alt="image-20240911130110035"></p><p>有些⽅法和代码块是经常需要 被调⽤的(也就是所谓的热点代码)，所以后⾯引进了 JIT（just-in-time compilation） 编译器，⽽ JIT 属于运⾏时编译。当 JIT 编译器完成第⼀次编译后，其会将字节码对应的机器码保存下来，下次可以 直接使⽤。⽽我们知道，机器码的运⾏效率肯定是⾼于 Java 解释器的。这也解释了我们为什么经常 会说 Java 是编译与解释共存的语⾔ 。</p><blockquote><p>HotSpot 采⽤了惰性评估(Lazy Evaluation)的做法，根据⼆⼋定律，消耗⼤部分系统资源的只有 那⼀⼩部分的代码（热点代码），⽽这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被 执⾏的情况收集信息并相应地做出⼀些优化，因此执⾏的次数越多，它的速度就越快。JDK 9 引⼊了⼀种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器 码，这样就避免了 JIT 预热等各⽅⾯的开销。JDK ⽀持分层编译和 AOT 协作使⽤</p></blockquote><h3 id="为什么重写-equals-时必须重写-hashCode-⽅法？"><a href="#为什么重写-equals-时必须重写-hashCode-⽅法？" class="headerlink" title="为什么重写 equals() 时必须重写 hashCode() ⽅法？"></a>为什么重写 equals() 时必须重写 hashCode() ⽅法？</h3><blockquote><p>为了理解为什么重写了 <code>equals()</code> 之后也需要重写 <code>hashCode()</code>，我们可以通过一个简单的例子来说明。</p><h3 id="例子背景：比较和存储学生信息"><a href="#例子背景：比较和存储学生信息" class="headerlink" title="例子背景：比较和存储学生信息"></a>例子背景：比较和存储学生信息</h3><p>假设我们有一个 <code>Student</code> 类，表示学生的基本信息。我们需要对这些学生对象进行比较，以确保不能添加重复的学生，并且想把它们存储在集合中。为此，我们重写了 <code>equals()</code> 方法，以确保当两个 <code>Student</code> 对象的名字和学号相同时，它们被认为是相等的。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="没有重写-hashCode-的情况："><a href="#没有重写-hashCode-的情况：" class="headerlink" title="没有重写 hashCode() 的情况："></a>没有重写 <code>hashCode()</code> 的情况：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span> || getClass() != obj.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">        <span class="keyword">return</span> id == student.id &amp;&amp; name.equals(student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未重写 hashCode()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, id=&quot;</span> + id + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">        students.add(s1);</span><br><span class="line">        students.add(s2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;学生集合: &quot;</span> + students);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学生集合: [Student&#123;name=&#x27;Alice&#x27;, id=101&#125;, Student&#123;name=&#x27;Alice&#x27;, id=101&#125;]</span><br></pre></td></tr></table></figure><p><strong>问题分析：</strong><br>尽管我们重写了 <code>equals()</code> 方法，两个学生对象 <code>s1</code> 和 <code>s2</code> 是相等的（根据 <code>equals()</code> 判断）。但在 <code>HashSet</code> 中，它们依然被认为是不同的对象，并且都被添加到了集合中。这是因为 <code>HashSet</code> 在存储元素时不仅依赖 <code>equals()</code>，还依赖 <code>hashCode()</code>。</p><p><strong>原因：</strong></p><ul><li><code>HashSet</code> 使用哈希表来存储数据，插入时会根据对象的 <code>hashCode()</code> 进行定位。如果两个对象的 <code>hashCode()</code> 不同，即使它们通过 <code>equals()</code> 判断相等，<code>HashSet</code> 依然会将它们视为不同的对象。</li><li>由于我们没有重写 <code>hashCode()</code>，每次 <code>s1</code> 和 <code>s2</code> 的 <code>hashCode()</code> 可能不相同，所以 <code>HashSet</code> 会认为它们是不同的对象。</li></ul><h3 id="重写-hashCode-的情况："><a href="#重写-hashCode-的情况：" class="headerlink" title="重写 hashCode() 的情况："></a>重写 <code>hashCode()</code> 的情况：</h3><p>我们现在重写 <code>hashCode()</code>，确保当两个对象通过 <code>equals()</code> 判断相等时，它们的哈希码也相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span> || getClass() != obj.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">        <span class="keyword">return</span> id == student.id &amp;&amp; name.equals(student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, id);  <span class="comment">// 根据 name 和 id 生成哈希码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, id=&quot;</span> + id + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">        students.add(s1);</span><br><span class="line">        students.add(s2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;学生集合: &quot;</span> + students);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学生集合: [Student&#123;name=&#x27;Alice&#x27;, id=101&#125;]</span><br></pre></td></tr></table></figure><p><strong>问题解决：</strong><br>现在，<code>s1</code> 和 <code>s2</code> 被正确地认为是相同的对象，因为我们确保了 <code>equals()</code> 相等的对象也拥有相同的哈希码。所以 <code>HashSet</code> 只存储了一个 <code>Student</code> 对象。</p><h3 id="为什么需要重写-hashCode-？"><a href="#为什么需要重写-hashCode-？" class="headerlink" title="为什么需要重写 hashCode()？"></a>为什么需要重写 <code>hashCode()</code>？</h3><ol><li><p><strong>一致性原则</strong>：<code>hashCode()</code> 和 <code>equals()</code> 需要保持一致。如果两个对象通过 <code>equals()</code> 方法被认为相等，那么它们的 <code>hashCode()</code> 必须相同。如果不重写 <code>hashCode()</code>，即使两个对象在逻辑上是相等的，集合类如 <code>HashSet</code> 或 <code>HashMap</code> 仍会认为它们是不同的对象，从而引发问题。</p></li><li><p><strong>效率问题</strong>：<code>HashSet</code> 和 <code>HashMap</code> 等基于哈希表的集合类使用 <code>hashCode()</code> 来快速确定对象的存储位置。如果没有重写 <code>hashCode()</code>，这些集合的性能会变得低下，因为它们需要依赖 <code>equals()</code> 进行逐一比较，而 <code>hashCode()</code> 可以大幅提高查找和存储效率。</p></li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>重写 <code>equals()</code> 时必须重写 <code>hashCode()</code>，否则会导致集合类中的不一致性问题。</li><li><code>hashCode()</code> 用于高效定位对象，而 <code>equals()</code> 用于精确比较对象的内容。</li></ul></blockquote><h3 id="String、StringBuffer、StringBuilder的区别"><a href="#String、StringBuffer、StringBuilder的区别" class="headerlink" title="String、StringBuffer、StringBuilder的区别"></a>String、StringBuffer、StringBuilder的区别</h3><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。 AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共⽗类，定义了⼀些字符串的基本操作，如 expandCapacity 、 append 、 insert 、 indexOf 等公共⽅法。 StringBuffer 对⽅法加了同步锁或者 对调⽤的⽅法加了同步锁，所以是线程安全的。 <strong>StringBuilder 并没有对⽅法进⾏加同步锁，所以是 ⾮线程安全的。</strong></p><table><thead><tr><th align="center">名称</th><th align="center">线程安全性</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">线程安全</td></tr><tr><td align="center">StringBuffer</td><td align="center">线程安全</td></tr><tr><td align="center">StringBuilder</td><td align="center">非线程安全</td></tr></tbody></table><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>每次对 String 类型进⾏改变的时候，都会⽣成⼀个新的 String 对象，然后将指针指向新的 String 对象。 StringBuffer 每次都会对 StringBuffer 对象本身进⾏操作，⽽不是⽣成新的对象并改 变对象引⽤。相同情况下使⽤ StringBuilder 相⽐使⽤ StringBuffer 仅能获得 10%~15% 左右的性 能提升，但却要冒多线程不安全的⻛险。</p><p>对于三者使⽤的总结： </p><ol><li>操作少量的数据: 适⽤ String </li><li>单线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuilder </li><li>多线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuffer</li></ol><h4 id="String为什么是不可修改的"><a href="#String为什么是不可修改的" class="headerlink" title="String为什么是不可修改的"></a>String为什么是不可修改的</h4><p>这是因为保存String的数组被final修饰且私有，对应类也没有提供&#x2F;暴露操作的方法;String类被final修饰导致其不能被继承，进而避免了子类破坏String不可变。</p><h4 id="从字节码⻆度分析-try-catch-finally-这个语法糖背后的实现原理。"><a href="#从字节码⻆度分析-try-catch-finally-这个语法糖背后的实现原理。" class="headerlink" title="从字节码⻆度分析 try catch finally 这个语法糖背后的实现原理。"></a>从字节码⻆度分析 try catch finally 这个语法糖背后的实现原理。</h4><blockquote><p>从字节码层面来看，<code>try-catch-finally</code> 通过以下方式实现：</p><ol><li><strong>控制流跳转</strong>：JVM 使用跳转指令（如 <code>goto</code>）来确保无论在 <code>try</code> 块中发生什么（异常或正常完成），都可以在合适的时机跳转到 <code>catch</code> 和 <code>finally</code> 块。</li><li><strong>异常表</strong>：JVM 并不是在每个字节码指令后面都插入异常处理代码，而是通过异常表来描述代码段之间的关系。异常表指明了在某个范围内发生特定类型的异常时，应该跳转到哪个字节码位置处理。</li><li><strong>finally 的执行保证</strong>：无论是否发生异常，<code>finally</code> 块总会被执行。字节码通过跳转（<code>goto</code> 指令）和异常表，确保了在 <code>try</code> 块和 <code>catch</code> 块之后，都会跳转到 <code>finally</code> 块中。</li></ol><h3 id="4-重要结论"><a href="#4-重要结论" class="headerlink" title="4. 重要结论"></a>4. 重要结论</h3><ul><li><strong>异常表</strong> 是 <code>try-catch-finally</code> 的核心，它指明了异常发生时该跳转到哪里进行处理。</li><li><strong>控制流跳转</strong> 指令（如 <code>goto</code>）确保了异常发生后会进入 <code>catch</code>，并最终进入 <code>finally</code>，从而保证 <code>finally</code> 总是被执行。</li><li><strong>无论异常是否发生，finally 都会执行</strong>，这是由字节码中 <code>goto</code> 和异常表共同保证的。</li></ul></blockquote><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262041207.png" alt="image-20240911160249039"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262041359.png" alt="image-20240911160301678"></p><h2 id="Java基础面试"><a href="#Java基础面试" class="headerlink" title="Java基础面试"></a>Java基础面试</h2><h3 id="为什么String在Java中被设计为不可变？"><a href="#为什么String在Java中被设计为不可变？" class="headerlink" title="为什么String在Java中被设计为不可变？"></a>为什么<code>String</code>在Java中被设计为不可变？</h3><blockquote><p>从安全性的角度来看，这是为了确保系统的安全性，比如String类会频繁的出现在数据库连接、文件地址URL等方面，如果可变的话，攻击可以通过恶意改变其值来达到破坏系统安全性的目的；</p><p>从线程安全性的角度来看的话，因为String的不可变，在多线程环境下，就无需考虑同步问题；</p><p>从哈希码缓存的角度来看，因为哈希是通过对String内容计算得出来的，无论是hashset还是hashmap，如果String可变，那么其修改String后其对应的哈希码会发生改变，进而影响后续集合的行为；</p><p>从内存的角度来看，这样可以节约内存的使用，因为String的不可变，所以String具有相同内容的就可以直接引用，而不用担心其String发生更改；</p><p>回答这个问题可以从：系统安全性、节约内存、线程安全性以及哈希缓存角度继续分析回答。</p></blockquote><h3 id="抽象类-VS-接口"><a href="#抽象类-VS-接口" class="headerlink" title="抽象类 VS 接口"></a>抽象类 VS 接口</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262041074.png" alt="image-20240919210459883"></p><h3 id="请解释几种动态代理的实现方式，并说明各自的优缺点。"><a href="#请解释几种动态代理的实现方式，并说明各自的优缺点。" class="headerlink" title="请解释几种动态代理的实现方式，并说明各自的优缺点。"></a>请解释几种动态代理的实现方式，并说明各自的优缺点。</h3><blockquote><p>动态代理的实现方式有：JDK动态代理，CGLIB动态代理和Javassist动态代理；</p><p>动态代理在AOP中特别有用，AOP通过拦截目标类，为目标类的方法织入编写好的逻辑代码，可以在方法执行之前或者之后等一些其它方法，在目标类的基础上增加切面逻辑，生成增强的目标类；</p><p>JDK动态代理通过JDK内部自带的反射机制来实现的，下面就是一个简单的例子通过使用JDK动态代理来代理目标对象的例子；</p><p>jdk动态代理是jdk原生就支持的一种代理方式，它的实现原理，就是通过让target类和代理类实现同一接口，代理类持有target对象，来达到方法拦截的作用，这样通过接口的方式有两个弊端，一个是必须保证target类有接口，第二个是如果想要对target类的方法进行代理拦截，那么就要保证这些方法都要在接口中声明，实现上略微有点限制。</p><p>简单的来说这个的局限性，这个局限性就在于目标类target类必须有实现接口，并且拦截的方法必须在接口中定义，这是JDK最大的局限性；</p><p>Cglib是一个优秀的动态代理框架，它的底层使用ASM在内存中动态的生成被代理类的子类，使用CGLIB即使代理类没有实现任何接口也可以实现动态代理功能。CGLIB具有简单易用，它的运行速度要远远快于JDK的Proxy动态代理，它通过创建目标类的子类并覆盖其中的方法来实现代理。</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qwecnsu/article/details/138194103">https://blog.csdn.net/qwecnsu/article/details/138194103</a></li><li></li></ol><h3 id="1-泛型的背景与目的"><a href="#1-泛型的背景与目的" class="headerlink" title="1. 泛型的背景与目的"></a>1. <strong>泛型的背景与目的</strong></h3><p>在 Java 中，泛型是为了增强类型安全和提高代码重用性而引入的。泛型允许我们在编译时指定类型，而不是在运行时使用原始类型，这有几个明显的好处：</p><ul><li><strong>类型安全</strong>：编译时检查，避免了运行时出现类型转换异常。</li><li><strong>代码复用</strong>：通过一个类或方法处理不同类型的数据，而不需要重复编写多个版本。</li></ul><p>例如，<code>List&lt;T&gt;</code> 是一个带有泛型的类，它允许你在创建时指定一个具体类型，这样在使用该类型时就不需要做类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stringList.get(<span class="number">0</span>);  <span class="comment">// 不需要强制转换，编译时就确保类型安全</span></span><br></pre></td></tr></table></figure><h3 id="2-泛型擦除是什么？"><a href="#2-泛型擦除是什么？" class="headerlink" title="2. 泛型擦除是什么？"></a>2. <strong>泛型擦除是什么？</strong></h3><p>泛型擦除是 Java 泛型机制中的一个特性。简单来说，泛型擦除就是编译器在 <strong>编译时</strong> 会将所有泛型类型擦除（移除），并替换为它们的原始类型（raw types）。这意味着在 <strong>编译后</strong>，所有泛型类型都不再存在，JVM 运行时是无法知道泛型的具体类型的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>在编译阶段，编译器会将泛型类型 <code>String</code> 擦除掉，生成的字节码将变成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><p><strong>通过擦除，Java 保证了向后兼容性</strong>，因为早期的 Java 版本并不支持泛型。</p><h3 id="3-为什么要做泛型擦除？"><a href="#3-为什么要做泛型擦除？" class="headerlink" title="3. 为什么要做泛型擦除？"></a>3. <strong>为什么要做泛型擦除？</strong></h3><ul><li><strong>向后兼容</strong>：为了兼容旧版本的 Java。Java 的泛型是在 Java 5 中引入的，但为了保持与 Java 1.4 及以前版本的兼容性，泛型信息在编译时会被移除，这样旧版 JVM 仍然可以运行新代码。</li><li><strong>性能考虑</strong>：在运行时，JVM 不需要维护泛型的类型信息，这减轻了运行时的开销。</li></ul><h3 id="4-泛型擦除的实现"><a href="#4-泛型擦除的实现" class="headerlink" title="4. 泛型擦除的实现"></a>4. <strong>泛型擦除的实现</strong></h3><p>在 Java 中，泛型的实现是通过 <strong>类型擦除</strong> 来完成的。具体来说：</p><ul><li>泛型类型参数会被替换为 <strong>原始类型</strong>（raw type），通常是 <code>Object</code>，除非指定了泛型的上界（例如 <code>List&lt;T extends Number&gt;</code>）。</li><li>你不能直接获取泛型参数的类型，因为编译后的字节码并没有包含这些信息。</li></ul><h4 id="例子：泛型擦除"><a href="#例子：泛型擦除" class="headerlink" title="例子：泛型擦除"></a>例子：泛型擦除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设你创建了 <code>Box&lt;Integer&gt;</code> 类型的对象，编译器会将它转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>T</code> 会被擦除成 <code>Object</code>，因此 <code>setValue()</code> 和 <code>getValue()</code> 方法会使用 <code>Object</code> 类型。</p><h3 id="5-擦除带来的影响"><a href="#5-擦除带来的影响" class="headerlink" title="5. 擦除带来的影响"></a>5. <strong>擦除带来的影响</strong></h3><p>由于擦除的存在，Java 运行时无法直接访问泛型的类型参数。这会导致一些常见的限制：</p><ul><li><p><strong>无法进行 <code>instanceof</code> 检查</strong>：无法检查泛型类型的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (list <span class="keyword">instanceof</span> List&lt;String&gt;) &#123;  <span class="comment">// 编译时错误</span></span><br><span class="line">    <span class="comment">// 错误：无法比较 List&lt;String&gt; 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>泛型类型参数的信息丢失</strong>：在运行时无法知道泛型的具体类型。</p></li><li><p><strong>无法创建泛型数组</strong>：由于泛型信息在运行时丢失，不能创建如 <code>new T[10]</code> 的泛型数组。</p></li></ul><h3 id="6-如何解决泛型擦除带来的限制"><a href="#6-如何解决泛型擦除带来的限制" class="headerlink" title="6. 如何解决泛型擦除带来的限制"></a>6. <strong>如何解决泛型擦除带来的限制</strong></h3><p>尽管泛型擦除存在上述限制，Java 提供了一些方法来克服这些问题：</p><ul><li><strong>通配符（Wildcard）</strong>：可以使用 <code>?</code> 来表示不确定的类型，例如 <code>List&lt;?&gt;</code> 表示任何类型的列表。</li><li><strong>反射</strong>：在某些情况下，可以利用反射来获取泛型信息，但是要注意，泛型信息只有在声明时可用，运行时不可得。</li></ul><h3 id="7-泛型擦除与上界"><a href="#7-泛型擦除与上界" class="headerlink" title="7. 泛型擦除与上界"></a>7. <strong>泛型擦除与上界</strong></h3><p>如果泛型有上界，擦除会根据上界来决定原始类型。例如，如果你声明一个泛型类为 <code>T extends Number</code>，则擦除后的类型是 <code>Number</code>，而不是 <code>Object</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，<code>T</code> 被擦除为 <code>Number</code>。</p><h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. <strong>总结</strong></h3><ul><li><strong>泛型擦除</strong> 是 Java 编译器的特性，在编译阶段将泛型信息擦除，保留原始类型。这是为了保证向后兼容和优化性能。</li><li><strong>擦除后的结果</strong>：在编译后，泛型被替换为原始类型，且运行时不再保留泛型的类型信息。</li><li><strong>影响</strong>：无法进行类型检查、无法获取泛型类型参数等，但可以通过通配符和反射等手段克服这些限制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-09 MyBatis &amp; MyBatis-Plus</title>
      <link href="/2025/02/26/75-09%20MyBatis%20&amp;%20MyBatis-Plus/"/>
      <url>/2025/02/26/75-09%20MyBatis%20&amp;%20MyBatis-Plus/</url>
      
        <content type="html"><![CDATA[<h1 id="75-09-MyBatis-MyBatis-Plus"><a href="#75-09-MyBatis-MyBatis-Plus" class="headerlink" title="75-09 MyBatis &amp; MyBatis-Plus"></a>75-09 MyBatis &amp; MyBatis-Plus</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/vcj1009784814/article/details/106391982?ops_request_misc=%7B%22request_id%22:%22171634221016800211539617%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171634221016800211539617&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-106391982-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=mybatis&spm=1018.2226.3001.4187">mybatis看这一篇就够了，简单全面一发入魂</a>；</li><li><a href="https://blog.csdn.net/RenshenLi/article/details/118639091">mybatis+mybatisplus源码学习（十五）日志 statementLog</a></li><li></li></ol><h2 id="MyBatis源码解析"><a href="#MyBatis源码解析" class="headerlink" title="MyBatis源码解析"></a>MyBatis源码解析</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.cnblogs.com/lightdb/p/8512392.html">mybatis 3.x源码深度解析与最佳实践</a></li><li><a href="https://zhuanlan.zhihu.com/p/269761503">MyBatis源码阅读指南</a></li></ul><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262037529.png" alt="image-20241112203759130"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262037173.png" alt="image-20241112202212227"></p><p><strong>接口层</strong></p><p>指用于操作数据库的增删改查接口，如SqlSession以及用户自定义的Mapper接口，都属于接口层组件。通常我们对MyBatis源码学习是从接口层开始的，但这并不是一个好方法，至于原因会在学习路径中讲到。</p><p><strong>数据处理层</strong></p><p>SQL执行流程实现，内容包括动态SQL语句构建、参数映射处理、结果映射集处理。他是整个MyBatis源码的核心，也是我们<strong>学习的重点和难点</strong>。</p><p><strong>扩展与支撑层</strong></p><p>指对主流程功能上的扩展与支撑。</p><ul><li>扩展：对主流程，在易用性、性能上进行扩展。如SqlSession与Mappr接口就是易用性扩展。缓存与懒加载则是执行性能的扩展。</li><li>支撑：主程所依赖的工具，如数据源、反射工具、日志管理、配置构建器、脚本执行器等<strong>学习重点</strong></li></ul><p>数据处理层是MyBatis核心与重点，我们学MyBatis源码其实就是学它，搞定它MyBatis源码就掌握了80%，当然它的难度也是最大的。为方便理解，我把它分成了执行流程与映射配置两部分。</p><ul><li>执行流程：体现SQL执行过程中的每个步骤。</li><li>映射配置：SQL执行前后的动态SQL解析、参数映射、结果集映射。</li></ul><h3 id="学习目标分解"><a href="#学习目标分解" class="headerlink" title="学习目标分解"></a>学习目标分解</h3><h4 id="第一目标-Sql执行流程"><a href="#第一目标-Sql执行流程" class="headerlink" title="第一目标-Sql执行流程"></a>第一目标-<strong>Sql执行流程</strong></h4><p>MyBatis源码学习的第一个目标就是要搞定四个组件所组成的Sql执行流程。这个四个组件分别是，<strong>执行器(Execute)、Sql处理器(StatementHandler)、参数处理器(ParameterHandler)、结果集处理器(ResultSetHandler)</strong>。这个目标又可分解成4个小目标</p><ol><li>理解四个组件执行上的顺序</li><li>每个组件的作用及意义</li><li>掌握Execute 的三个实现逻辑</li><li>掌握StatementHandler的三个实现逻辑</li></ol><p>这个目标不是最难的，但是最要的。如果有一天你把学的MyBatis源码忘的差不多了，也希望你这个流程不要忘，这是MySql源码的主干和肪脉络。顺着它就可以把MyBatis知识再拾回来。</p><p>说明：关于参数处理、结果集处理其主要逻辑细节在于映射处理，可以放到映射篇章学习。</p><h4 id="第二目标：映射配置"><a href="#第二目标：映射配置" class="headerlink" title="第二目标：映射配置"></a><strong>第二目标：映射配置</strong></h4><p>第二个要搞定的目标，就是SQL执行流程当中，所需要的三大映射：分别是<strong>动态SQL映射、参数映射、以及结果集映射</strong>。不仅要搞清楚映射配置的加载与解析，更重要的弄清楚映射逻辑。</p><ul><li><strong>加载解析</strong>：指用户配置的XML解析成JAVA配置对象。比如<Select>….</Select>块,最终要解析成SqlSource。或<resultMap>…</resultMap> 要解析成ResultMap对象。</li><li><strong>映射逻辑</strong>：比如SqlSource如何基于参数生成可执行SQL，ResultMap如何将结果集，解析成JAVA对象等。</li></ul><p>这里面涉及内容非常多，同样可以划分成一个个小目标：</p><table><thead><tr><th>小目标</th><th></th></tr></thead><tbody><tr><td>1</td><td>理解Sql映射声明(MappedStatement)的作用，以及它与三大映射的关系。</td></tr><tr><td>2</td><td>掌握动态SQL(sqlSource)解析过程，包括其脚本表达示的执行逻辑</td></tr><tr><td>3</td><td>掌握MyBatis所封装的映射工具包的使用</td></tr><tr><td>4</td><td>掌握参数转换过程，以及映射的封装过程</td></tr><tr><td>5</td><td>掌握结果集映射核心逻辑，包括关联映射，1对1、1对多的处理。还有更复杂的循环依赖处理</td></tr><tr><td>6</td><td>掌握全部配置(Confgiuration) 的核心定位,以及它的加载解析过程</td></tr></tbody></table><h3 id="数据处理层"><a href="#数据处理层" class="headerlink" title="数据处理层"></a>数据处理层</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262037613.png" alt="image-20241112202638916"></p><p>这一层所涉及到的知识点就是MyBatis的核心知识点，如果把这部分拿下的，MyBatis以及拿下七八十了。</p><p>MyBatis重点就是上面的四大核心组件：执行器、SQL处理器、参数处理器和结果集处理器。我们需要重点关注其中这四个组件代表的具体含义是什么？这四个组件的执行顺序是什么？以及他们是如何实现的？</p><p>从上面的这个图中我们可以明显的看出这四个组件的执行顺序是：执行器、SQL处理器、参数处理器然后就是结果处理器。但是这四个组件的职责是什么？以及如何实现的呢？</p><p>在详细的介绍MyBatis中的SQL执行流程之前，我们先回顾一下JDBC中的SQL执行流程：</p><ol><li>我们需要使用Class.forName()方法加载数据库驱动类</li><li>获取到连接对象，其底层的实现是基于Socket进行数据库连接的</li><li>执行SQL语句，放回执行结果</li><li>处理执行结果，并与结果集进行映射，然后释放资源</li></ol><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>Executor是MyBatis的核心组件，管理整个SQL的执行流程。可以理解成是MyBatis中的“大管家”，负责调用其他组件并管理缓存、事务等。Executor有三种实现方式：</p><ul><li><strong>SimpleExecutor</strong>：最简单的执行器，每次都会创建新的Statement进行SQL执行。这种方式不使用缓存，适合简单的查询需求。</li><li><strong>ReuseExecutor</strong>：复用已有的Statement对象，适用于同一连接中反复执行相似SQL的场景，减少Statement的创建次数。</li><li><strong>BatchExecutor</strong>：批处理执行器，将多条SQL语句组合成一个批处理，减少网络往返。适用于大量相似的插入、更新操作。</li></ul><p><strong>流程简析</strong>：Executor的工作流程从接收到SQL请求开始，到数据库获取结果并返回给调用方结束。在流程中，Executor会选择具体的StatementHandler去处理SQL的生成和执行。</p><p>Executor是MyBatis核心，是整个SQL执行的入口，它负责管理和协调其它组件的工作，其主要是发起、执行SQL语句并在执行的过程中进行必要的管理、缓存和事务控制。</p><p>执行器也提供了缓存机制，其提供了一级缓存和二级缓存，提高了查询效率，降低了对数据库的访问。</p><ol><li>一级缓存：针对的是同一个SqlSession在一定时间内执行相同的SQL查询时会被缓存，从而避免多次访问数据库；</li><li>二级缓存：针对的是mapper层面，在不同的SqlSession中，在一定时间内执行相同的SQL查询会被缓存，从而避免多次访问数据库。</li></ol><p>同时该执行器也提供了事务支持的能力，执行器可以根据需求控制事务的提交和回滚，实现事务的原子性</p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;find&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM student WHERE age &gt;= 18</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND name like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- choose 和 when , otherwise 是配套标签 </span></span><br><span class="line"><span class="comment">类似于java中的switch，只会选中满足条件的一个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>trim</p><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p><code>&lt;where&gt;</code>标签只会在至少有一个子元素返回了SQL语句时，才会向SQL语句中添加WHERE，并且如果WHERE之后是以AND或OR开头，会自动将其删掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的where也可以使用trim来替换：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND | OR&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>在至少有一个子元素返回了SQL语句时，才会向SQL语句中添加SET，并且如果SET之后是以<code>,</code>开头的话，会自动将其删掉</p><p><code>&lt;set&gt;</code>标签相当于如下的<code>&lt;trim&gt;</code>标签:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>用来做迭代拼接的，通常会与SQL语句中的IN查询条件结合使用，注意，到parameterType为List（链表）或者Array（数组），后面在引用时，参数名必须为list或者array。如在foreach标签中，collection属性则为需要迭代的集合，由于入参是个List，所以参数名必须为list.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;batchFind&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM student WHERE id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">          #&#123;item&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h4><p>可将重复的SQL片段提取出来，然后在需要的地方，使用<code>&lt;include&gt;</code>标签进行引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;whereClause&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;whereClause&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user != null&quot;</span>&gt;</span></span><br><span class="line">                 AND username like &#x27;%$&#123;user.name&#125;%&#x27;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>mybatis的动态SQL都是用OGNL表达式进行解析的，如果需要创建OGNL表达式以外的变量，可以用bind标签.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogsLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatis注解"><a href="#MyBatis注解" class="headerlink" title="MyBatis注解"></a>MyBatis注解</h3><h4 id="Intercepts-Signature"><a href="#Intercepts-Signature" class="headerlink" title="@Intercepts &amp; @Signature"></a><code>@Intercepts</code> &amp; <code>@Signature</code></h4><h5 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h5><ol><li><a href="https://blog.csdn.net/weixin_43505211/article/details/128050083?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172180231216800182719121%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172180231216800182719121&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-128050083-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=@Intercepts&spm=1018.2226.3001.4187">Mybatis拦截器注解@Intercepts与@Signature注解属性说明</a></li></ol><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p><code>@Intercepts</code> 是 MyBatis 提供的注解，用于定义 MyBatis 拦截器（Interceptor）要拦截的方法。MyBatis 拦截器是一个强大的机制，允许你在方法执行前后添加额外的处理逻辑，比如<strong>修改 SQL 语句</strong>、<strong>记录日志</strong>、<strong>事务处理</strong>等。</p><p>@Intercepts可以拦截以下四种类型：</p><ul><li><strong>Executor sql的内部执行器</strong></li><li><strong>ParameterHandler 拦截参数的处理</strong></li><li><strong>StatementHandler 拦截sql的构建</strong></li><li><strong>ResultSetHandler 拦截结果的处理</strong></li></ul><p><code>@Signature</code> 注解用于定义具体的拦截点，包括：</p><ul><li><strong>type：就是指定拦截器类型（ParameterHandler ，StatementHandler，ResultSetHandler ）</strong></li><li><strong>method：是拦截器类型中的方法，不是自己写的方法</strong></li><li><strong>args：是method中方法的入参</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262037752.png" alt="img"></p><h3 id="MyBatis拦截器"><a href="#MyBatis拦截器" class="headerlink" title="MyBatis拦截器"></a>MyBatis拦截器</h3><p>参考资料 </p><ol><li><a href="https://blog.csdn.net/wb1046329430/article/details/111501755">https://blog.csdn.net/wb1046329430/article/details/111501755</a></li></ol><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262037854.png" alt="img"></p><h4 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h4><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262037974.png" alt="image-20240728155336513"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123;Connection.class, Integer.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = ParameterHandler.class, method = &quot;setParameters&quot;, args = &#123;PreparedStatement.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = ResultSetHandler.class, method = &quot;handleResultSets&quot;, args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><p><code>MyBatis</code>拦截器默认会按顺序拦截以下的四个接口中的所有方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.executor.Executor  <span class="comment">//拦截执行器方法</span></span><br><span class="line">org.apache.ibatis.executor.statement.StatementHandler  <span class="comment">//拦截SQL语法构建处理</span></span><br><span class="line">org.apache.ibatis.executor.parameter.ParameterHandler  <span class="comment">//拦截参数处理</span></span><br><span class="line">org.apache.ibatis.executor.resultset.ResultSetHandler  <span class="comment">//拦截结果集处理</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体是拦截这四个接口对应的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.executor.CachingExecutor</span><br><span class="line">org.apache.ibatis.executor.statement.RoutingStatementHandler</span><br><span class="line">org.apache.ibatis.scripting.defaults.DefaultParameterHandler</span><br><span class="line">org.apache.ibatis.executor.resultset.DefaultResultSetHandler</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="MyBatis自动插入时间"><a href="#MyBatis自动插入时间" class="headerlink" title="MyBatis自动插入时间"></a>MyBatis自动插入时间</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.screw.communal.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.binding.MapperMethod;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlCommandType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Intercepts;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Signature;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> po.BasePO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MyBatisSqlInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 为MyBatis执行SQL自动插入某些公共条件 或 自动插入参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-07-28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">//        @Signature(type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">//                method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">//                args = &#123;Statement.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">                type = Executor.class,</span></span><br><span class="line"><span class="meta">                method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;MappedStatement.class, Object.class&#125;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">//        @Signature(</span></span><br><span class="line"><span class="meta">//                type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">//                method = &quot;batch&quot;,</span></span><br><span class="line"><span class="meta">//                args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisSqlInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">mappedStatement</span> <span class="operator">=</span> (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 获取 SQL 命令</span></span><br><span class="line">        <span class="type">SqlCommandType</span> <span class="variable">sqlCommandType</span> <span class="operator">=</span> mappedStatement.getSqlCommandType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只判断新增和修改</span></span><br><span class="line">        <span class="keyword">if</span> (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) &#123;</span><br><span class="line">            <span class="comment">// 获取参数</span></span><br><span class="line"><span class="comment">//            Object parameter = invocation.getArgs()[1];</span></span><br><span class="line">            <span class="comment">// 获取参数</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">parameter</span> <span class="operator">=</span> invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">            setParameter(parameter, sqlCommandType);</span><br><span class="line"><span class="comment">//            //批量操作时</span></span><br><span class="line"><span class="comment">//            if (parameter instanceof MapperMethod.ParamMap) &#123;</span></span><br><span class="line"><span class="comment">//                MapperMethod.ParamMap map = (MapperMethod.ParamMap) parameter;</span></span><br><span class="line"><span class="comment">//                Object obj = map.get(&quot;list&quot;);</span></span><br><span class="line"><span class="comment">//                List&lt;?&gt; list = (List&lt;?&gt;) obj;</span></span><br><span class="line"><span class="comment">//                if (list != null) &#123;</span></span><br><span class="line"><span class="comment">//                    for (Object o : list) &#123;</span></span><br><span class="line"><span class="comment">//                        setParameter(o, sqlType);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                setParameter(parameter, sqlType);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(Object parameter, SqlCommandType sqlCommandType)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = parameter.getClass();</span><br><span class="line"><span class="comment">//        Field[] declaredFields;</span></span><br><span class="line">        List&lt;Field[]&gt; declaredFields = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取当前类和父类的属性</span></span><br><span class="line">        <span class="keyword">while</span>(ObjectUtils.isNotEmpty(aClass) &amp;&amp; aClass != Object.class)&#123;</span><br><span class="line">            declaredFields.add(aClass.getDeclaredFields());</span><br><span class="line">            aClass = aClass.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field[] fields : declaredFields)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">                <span class="type">TableField</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(TableField.class);</span><br><span class="line">                <span class="keyword">if</span> (ObjectUtils.isEmpty(annotation))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (SqlCommandType.INSERT.equals(sqlCommandType)) &#123; <span class="comment">// insert 语句插入 createBy</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.equals(value,<span class="string">&quot;create_time&quot;</span>))&#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        field.set(parameter, LocalDateTime.now());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.equals(value,<span class="string">&quot;update_time&quot;</span>))&#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        field.set(parameter, LocalDateTime.now());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (SqlCommandType.UPDATE.equals(sqlCommandType)) &#123; <span class="comment">// update 语句插入 updateTime</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.equals(value,<span class="string">&quot;update_time&quot;</span>))&#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        field.set(parameter, LocalDateTime.now());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.screw.communal.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.cloud.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.reflect.FieldUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.parameter.ParameterHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Intercepts;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Signature;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FileName</span> MybatisSqlInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Mybatis-Plus 自定义SQL拦截处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-07-24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">                method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;Statement.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">                type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">                method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;Statement.class&#125;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">        type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">        method = &quot;batch&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisSqlLogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个包含需要添加单引号括起来的参数类型集合。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; NEED_BRACKETS =</span><br><span class="line">            Collections.unmodifiableSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;String&quot;</span>, <span class="string">&quot;Date&quot;</span>, <span class="string">&quot;Time&quot;</span>, <span class="string">&quot;LocalDate&quot;</span>, <span class="string">&quot;LocalTime&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;LocalDateTime&quot;</span>, <span class="string">&quot;BigDecimal&quot;</span>, <span class="string">&quot;Timestamp&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis的配置对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> invocation.getTarget();</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 初始化行数为 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lines</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 默认状态为 &quot;失败&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行原始方法，并获取返回结果</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">            <span class="comment">// 如果返回结果为集合，则统计行数</span></span><br><span class="line">            <span class="keyword">if</span> (proceed <span class="keyword">instanceof</span> Collection&lt;?&gt;) &#123;</span><br><span class="line">                lines = ((List&lt;?&gt;) proceed).size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行成功，将状态设置为 &quot;成功&quot;</span></span><br><span class="line">            status = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 计算 SQL 执行耗时</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">sqlCost</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            <span class="comment">// 获取 SQL 语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="built_in">this</span>.getSql(target);</span><br><span class="line">            <span class="comment">// 打印日志</span></span><br><span class="line">            log.info(<span class="string">&quot;\u001B[38;5;220mSQL 执行结果：&#123;&#125;. SQL 信息：&#123;&#125;\u001B[0m&quot;</span>, status, sql);</span><br><span class="line">            log.info(<span class="string">&quot;\u001B[38;5;220m耗时：&#123;&#125; mm. Total：&#123;&#125;\u001B[0m&quot;</span>, sqlCost, lines);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 获取即将会执行的SQL语句 并把参数插入到SQL语句中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> yaoHui</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2024/7/24</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getSql</span><span class="params">(Object target)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取 StatementHandler 对象</span></span><br><span class="line">            <span class="type">StatementHandler</span> <span class="variable">statementHandler</span> <span class="operator">=</span> (StatementHandler) target;</span><br><span class="line">            <span class="comment">// 获取 BoundSql 对象</span></span><br><span class="line">            <span class="comment">// BoundSql对象中带有即将执行的SQL语句和SQL参数</span></span><br><span class="line">            <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> statementHandler.getBoundSql();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ObjectUtils.isNull(configuration))&#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ParameterHandler</span> <span class="variable">parameterHandler</span> <span class="operator">=</span> statementHandler.getParameterHandler();</span><br><span class="line">                <span class="built_in">this</span>.configuration = (Configuration) FieldUtils.readField(parameterHandler, <span class="string">&quot;configuration&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> formatSql(boundSql,configuration);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.warn(<span class="string">&quot;获取 SQL 语句失败：&#123;&#125;&quot;</span>, target, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;无法解析的 SQL 语句&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">formatSql</span><span class="params">(BoundSql boundSql,Configuration configuration)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 获取参数映射列表</span></span><br><span class="line">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">        <span class="comment">// 获取参数对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(sql) || Objects.isNull(configuration)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 TypeHandlerRegistry 对象</span></span><br><span class="line">        <span class="type">TypeHandlerRegistry</span> <span class="variable">typeHandlerRegistry</span> <span class="operator">=</span> configuration.getTypeHandlerRegistry();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除 SQL 字符串中的空格、换行符等</span></span><br><span class="line">        sql = sql.replaceAll(<span class="string">&quot;[\n\r ]+&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤掉输出参数的参数映射</span></span><br><span class="line">        <span class="keyword">if</span> (parameterMappings == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sql;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parameterMappings = parameterMappings.stream()</span><br><span class="line">                .filter(it -&gt; it.getMode() != ParameterMode.OUT)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 StringBuilder 保存格式化后的 SQL</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析问号并替换参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> result.length(); i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.charAt(i - <span class="number">1</span>) != <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ParameterMapping</span> <span class="variable">parameterMapping</span> <span class="operator">=</span> parameterMappings.get(parameterMappings.size() - <span class="number">1</span>);</span><br><span class="line">            Object value;</span><br><span class="line">            <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> parameterMapping.getProperty();</span><br><span class="line">            <span class="comment">// 判断绑定的附加参数中是否有对应的属性名</span></span><br><span class="line">            <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">                value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                value = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">                value = parameterObject;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 使用 MetaObject 获取属性值</span></span><br><span class="line">                <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> configuration.newMetaObject(parameterObject);</span><br><span class="line">                value = metaObject.getValue(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 判断参数类型，如果是需要添加括号的类型，则添加单引号</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> value.getClass().getSimpleName();</span><br><span class="line">                <span class="keyword">if</span> (NEED_BRACKETS.contains(type)) &#123;</span><br><span class="line">                    result.replace(i - <span class="number">1</span>, i, <span class="string">&quot;&#x27;&quot;</span> + value + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.replace(i - <span class="number">1</span>, i, value.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 参数值为空时，替换为 &quot;null&quot;</span></span><br><span class="line">                result.replace(i - <span class="number">1</span>, i, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移除已处理的参数映射</span></span><br><span class="line">            parameterMappings.remove(parameterMappings.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Intercepts</code> 和 <code>@Signature</code> 是 MyBatis 的注解，用于定义拦截器的元信息，指定拦截的目标类型、方法和参数列表。这四个注解分别拦截 MyBatis 执行的四种核心组件（<code>Executor</code>、<code>StatementHandler</code>、<code>ParameterHandler</code> 和 <code>ResultSetHandler</code>），通过它们可以在不同阶段插入自定义逻辑。</p><hr><h3 id="1-Intercepts"><a href="#1-Intercepts" class="headerlink" title="1. @Intercepts"></a><strong>1. @Intercepts</strong></h3><p><code>@Intercepts</code> 是一个容器注解，表示一个拦截器可以拦截多个方法。它包含一个 <code>@Signature</code> 数组，每个 <code>@Signature</code> 注解定义了一个拦截目标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(...)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h4><ul><li><strong>作用</strong>：标注在拦截器类上，声明这个类是 MyBatis 的一个拦截器。</li><li><strong>参数</strong>：包含多个 <code>@Signature</code> 注解，每个注解定义了一个具体的拦截点。</li></ul><hr><h3 id="2-Signature"><a href="#2-Signature" class="headerlink" title="2. @Signature"></a><strong>2. @Signature</strong></h3><p><code>@Signature</code> 是定义拦截点的核心注解，它指定了：</p><ol><li><strong>拦截的类型（<code>type</code>）</strong><br> 指定要拦截的 MyBatis 核心组件接口，例如 <code>Executor</code>、<code>StatementHandler</code> 等。</li><li><strong>拦截的方法（<code>method</code>）</strong><br> 指定要拦截的方法名称，例如 <code>query</code>、<code>prepare</code> 等。</li><li><strong>拦截方法的参数（<code>args</code>）</strong><br> 指定方法参数类型的完整签名，用于精确定位目标方法。</li></ol><h4 id="语法示例："><a href="#语法示例：" class="headerlink" title="语法示例："></a>语法示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Signature(</span></span><br><span class="line"><span class="meta">    type = Executor.class, </span></span><br><span class="line"><span class="meta">    method = &quot;query&quot;, </span></span><br><span class="line"><span class="meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h4 id="详细说明："><a href="#详细说明：" class="headerlink" title="详细说明："></a>详细说明：</h4><ul><li><code>type</code>：指定目标接口。</li><li><code>method</code>：指定目标接口的方法名。</li><li><code>args</code>：指定方法的参数类型（按顺序列出完整类名）。</li></ul><hr><h3 id="四个-Signature-注解的详细介绍"><a href="#四个-Signature-注解的详细介绍" class="headerlink" title="四个 @Signature 注解的详细介绍"></a><strong>四个 @Signature 注解的详细介绍</strong></h3><h4 id="1-拦截-Executor-query-方法"><a href="#1-拦截-Executor-query-方法" class="headerlink" title="1. 拦截 Executor.query 方法"></a><strong>1. 拦截 <code>Executor.query</code> 方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Signature(</span></span><br><span class="line"><span class="meta">    type = Executor.class,</span></span><br><span class="line"><span class="meta">    method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">    args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>作用</strong>：拦截执行查询操作的核心方法。</p></li><li><p>目标方法</p><p>：</p><ul><li><code>Executor.query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</code></li></ul></li><li><p>常见用途</p><p>：</p><ol><li>修改 SQL 查询语句。</li><li>添加动态查询条件。</li><li>实现分页逻辑（如自定义分页插件）。</li></ol></li></ul><hr><h4 id="2-拦截-StatementHandler-prepare-方法"><a href="#2-拦截-StatementHandler-prepare-方法" class="headerlink" title="2. 拦截 StatementHandler.prepare 方法"></a><strong>2. 拦截 <code>StatementHandler.prepare</code> 方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Signature(</span></span><br><span class="line"><span class="meta">    type = StatementHandler.class,</span></span><br><span class="line"><span class="meta">    method = &quot;prepare&quot;,</span></span><br><span class="line"><span class="meta">    args = &#123;Connection.class, Integer.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>作用</strong>：拦截 SQL 语句的预处理阶段。</p></li><li><p>目标方法</p><p>：</p><ul><li><code>StatementHandler.prepare(Connection connection, Integer transactionTimeout)</code></li></ul></li><li><p>常见用途</p><p>：</p><ol><li>动态修改 SQL。</li><li>打印完整的 SQL 语句（包括参数）。</li><li>添加审计日志记录。</li></ol></li></ul><hr><h4 id="3-拦截-ParameterHandler-setParameters-方法"><a href="#3-拦截-ParameterHandler-setParameters-方法" class="headerlink" title="3. 拦截 ParameterHandler.setParameters 方法"></a><strong>3. 拦截 <code>ParameterHandler.setParameters</code> 方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Signature(</span></span><br><span class="line"><span class="meta">    type = ParameterHandler.class,</span></span><br><span class="line"><span class="meta">    method = &quot;setParameters&quot;,</span></span><br><span class="line"><span class="meta">    args = &#123;PreparedStatement.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>作用</strong>：拦截设置 SQL 参数的阶段。</p></li><li><p>目标方法</p><p>：</p><ul><li><code>ParameterHandler.setParameters(PreparedStatement ps)</code></li></ul></li><li><p>常见用途</p><p>：</p><ol><li>动态加密&#x2F;解密字段参数。</li><li>自定义参数值的绑定逻辑。</li><li>检查或修改绑定参数。</li></ol></li></ul><hr><h4 id="4-拦截-ResultSetHandler-handleResultSets-方法"><a href="#4-拦截-ResultSetHandler-handleResultSets-方法" class="headerlink" title="4. 拦截 ResultSetHandler.handleResultSets 方法"></a><strong>4. 拦截 <code>ResultSetHandler.handleResultSets</code> 方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Signature(</span></span><br><span class="line"><span class="meta">    type = ResultSetHandler.class,</span></span><br><span class="line"><span class="meta">    method = &quot;handleResultSets&quot;,</span></span><br><span class="line"><span class="meta">    args = &#123;Statement.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>作用</strong>：拦截结果集的处理阶段。</p></li><li><p>目标方法</p><p>：</p><ul><li><code>ResultSetHandler.handleResultSets(Statement stmt)</code></li></ul></li><li><p>常见用途</p><p>：</p><ol><li>对查询结果进行加密&#x2F;解密。</li><li>自定义结果集映射逻辑。</li><li>过滤或调整查询结果。</li></ol></li></ul><hr><h3 id="拦截器的工作机制"><a href="#拦截器的工作机制" class="headerlink" title="拦截器的工作机制"></a><strong>拦截器的工作机制</strong></h3><ol><li><strong>动态代理</strong><br> MyBatis 使用动态代理模式，将核心组件（如 <code>Executor</code>）包装成代理对象。</li><li><strong>执行拦截逻辑</strong><br> 在拦截的方法前后，执行 <code>Interceptor</code> 实现类的 <code>intercept</code> 方法。</li><li><strong>传递调用链</strong><br> 通过 <code>invocation.proceed()</code> 调用被代理对象的原始方法。</li></ol><hr><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a><strong>完整示例</strong></h3><h4 id="自定义拦截器类："><a href="#自定义拦截器类：" class="headerlink" title="自定义拦截器类："></a>自定义拦截器类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123;Connection.class, Integer.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = ParameterHandler.class, method = &quot;setParameters&quot;, args = &#123;PreparedStatement.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = ResultSetHandler.class, method = &quot;handleResultSets&quot;, args = &#123;Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 在方法执行前加入逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Intercepted Method: &quot;</span> + invocation.getMethod().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在方法执行后加入逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Method Execution Completed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="comment">// 为目标对象生成代理</span></span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理自定义配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="应用场景总结"><a href="#应用场景总结" class="headerlink" title="应用场景总结"></a><strong>应用场景总结</strong></h3><ul><li><strong><code>Executor.query</code></strong>：用于动态 SQL、日志记录、分页逻辑增强。</li><li><strong><code>StatementHandler.prepare</code></strong>：用于动态修改 SQL 语句、审计。</li><li><strong><code>ParameterHandler.setParameters</code></strong>：用于参数加密、绑定自定义逻辑。</li><li><strong><code>ResultSetHandler.handleResultSets</code></strong>：用于结果解密、数据过滤。</li></ul><p>通过灵活使用拦截器，可以对 MyBatis 的行为进行深度定制，从而实现高级功能和扩展。</p><hr><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 Linux环境下搭建ELK（Elasticsearch+Logstash+Kibana）</title>
      <link href="/2025/02/26/75-16%20%E7%A7%8B%E6%8B%9B/"/>
      <url>/2025/02/26/75-16%20%E7%A7%8B%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="75-16-秋招"><a href="#75-16-秋招" class="headerlink" title="75-16 秋招"></a>75-16 秋招</h1><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>计算机基础（408）很重要，用心学。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262042593.png" alt="image-20250225123409882"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262042477.png" alt="image-20250225123452426"></p><p>准备面试中可能涉及到的个人介绍部分</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262042073.png" alt="image-20250225124158228"></p><h2 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h4 id="SIDC"><a href="#SIDC" class="headerlink" title="SIDC"></a>SIDC</h4><h5 id="即时通讯功能"><a href="#即时通讯功能" class="headerlink" title="即时通讯功能"></a>即时通讯功能</h5><p>在SIDC项目中有一个涉及到关于即时通信功能的模块，这部分是通过WebSocket来进行实现的，那么我们从问题来对这部分涉及到的知识点来进行总结归纳。</p><blockquote><h3 id="基础问题（理解-WebSocket-基础）"><a href="#基础问题（理解-WebSocket-基础）" class="headerlink" title="基础问题（理解 WebSocket 基础）"></a><strong>基础问题（理解 WebSocket 基础）</strong></h3><ol><li><strong>WebSocket 和 HTTP 的区别是什么？在什么情况下应该使用 WebSocket 而不是 HTTP？</strong></li><li><strong>WebSocket 是基于 TCP 还是 UDP 的？它是如何保证消息的有序性和可靠性的？</strong></li><li><strong>WebSocket 的握手过程是怎样的？如何从 HTTP 连接升级到 WebSocket 连接？</strong></li><li><strong>WebSocket 连接的 <code>ping/pong</code> 机制是什么？为什么需要它？</strong></li></ol><hr><h3 id="中级问题（Spring-WebSocket-及实践）"><a href="#中级问题（Spring-WebSocket-及实践）" class="headerlink" title="中级问题（Spring WebSocket 及实践）"></a><strong>中级问题（Spring WebSocket 及实践）</strong></h3><ol><li><strong>在 Spring Boot 中如何使用 <code>@ServerEndpoint</code> 实现一个简单的 WebSocket 服务器？如果要给指定用户推送消息，该如何做？</strong></li><li><strong>Spring WebSocket 和 STOMP 协议有什么区别？为什么很多时候 STOMP 适用于 WebSocket ？</strong></li><li><strong>在 WebSocket 连接中，如何处理身份认证？如何确保只有合法用户可以建立 WebSocket 连接？</strong></li><li><strong>如果 WebSocket 连接断开，如何实现自动重连？前端和后端各自应该如何处理？</strong></li></ol><hr><h3 id="高级问题（架构、性能优化、扩展性）"><a href="#高级问题（架构、性能优化、扩展性）" class="headerlink" title="高级问题（架构、性能优化、扩展性）"></a><strong>高级问题（架构、性能优化、扩展性）</strong></h3><ol><li><strong>在 WebSocket 连接较多的情况下（如 10w 以上），如何优化 WebSocket 服务器的性能？</strong></li><li><strong>WebSocket 适合用来做消息持久化存储吗？如果需要实现聊天记录持久化，该如何设计？</strong></li><li><strong>在集群环境下，如何确保多个 WebSocket 服务器之间可以互相通信？（如何在多实例环境下实现广播和点对点消息）</strong></li><li><strong>如何处理 WebSocket 服务器的高可用问题？如果某个节点宕机，如何让用户无感知地重连到其他节点？</strong></li><li><strong>在 WebSocket 服务器中，如何防止 DDoS 攻击？有哪些常见的安全防护手段？</strong></li></ol><hr><h3 id="加分问题（开源实践、复杂场景）"><a href="#加分问题（开源实践、复杂场景）" class="headerlink" title="加分问题（开源实践、复杂场景）"></a><strong>加分问题（开源实践、复杂场景）</strong></h3><ol><li><strong>如果需要支持 100w 级别的在线用户 WebSocket 连接，该如何设计架构？（Redis + Kafka + 负载均衡等）</strong></li><li><strong>你了解哪些开源的 WebSocket 框架或解决方案？它们的优缺点分别是什么？</strong></li><li><strong>如何在 WebSocket 中实现消息的有序性保证？如果某个消息延迟了，如何确保它仍然按照正确的顺序被处理？</strong></li><li><strong>如何在 WebSocket 中实现消息的 QoS（服务质量保证），确保消息一定能够被送达？</strong></li></ol></blockquote><h5 id="图片上传功能"><a href="#图片上传功能" class="headerlink" title="图片上传功能"></a>图片上传功能</h5><h6 id="1-图片从前端到后端的传输方式"><a href="#1-图片从前端到后端的传输方式" class="headerlink" title="1. 图片从前端到后端的传输方式"></a>1. 图片从前端到后端的传输方式</h6><h6 id="1-1-图片的传输格式"><a href="#1-1-图片的传输格式" class="headerlink" title="1.1 图片的传输格式"></a>1.1 图片的传输格式</h6><p>前端通常通过 <strong>HTTP 请求</strong> 将图片数据传输到后端，主要有两种方式：</p><ol><li><p><strong>表单提交（Multipart Form-Data）</strong></p><ul><li>适用于普通图片上传，前端使用 <code>form-data</code> 方式传输：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>传输方式：<ul><li><code>Content-Type: multipart/form-data</code></li><li>HTTP 请求体中包含二进制文件数据</li><li>服务器可以通过 <code>MultipartFile</code> 获取文件</li></ul></li></ul></li><li><p><strong>Base64 编码上传</strong></p><ul><li>适用于前端将图片转为 Base64 字符串后再上传：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> file = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=file]&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">reader.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;/uploadBase64&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">image</span>: reader.<span class="property">result</span> &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">reader.<span class="title function_">readAsDataURL</span>(file);</span><br></pre></td></tr></table></figure><ul><li>传输方式：<ul><li><code>Content-Type: application/json</code></li><li>图片转换为 Base64 字符串（增大 33% 体积）</li><li>适用于小型图片，但不推荐大文件</li></ul></li></ul></li></ol><hr><h6 id="2-图片到达后端服务器的存储方式"><a href="#2-图片到达后端服务器的存储方式" class="headerlink" title="2. 图片到达后端服务器的存储方式"></a>2. 图片到达后端服务器的存储方式</h6><h6 id="2-1-MultipartFile-处理（Multipart-Form-Data）"><a href="#2-1-MultipartFile-处理（Multipart-Form-Data）" class="headerlink" title="2.1 MultipartFile 处理（Multipart Form-Data）"></a>2.1 <code>MultipartFile</code> 处理（Multipart Form-Data）</h6><p>Spring Boot 处理 <code>multipart/form-data</code> 方式的文件上传：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;uploads/&quot;</span> + filename);</span><br><span class="line">    Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;File uploaded successfully&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>file.getInputStream()</code>：获取 <strong>文件输入流</strong></li><li><code>Files.copy(...)</code>：将文件存入服务器的 <code>uploads/</code> 目录</li></ul><h6 id="2-2-Base64-解码存储"><a href="#2-2-Base64-解码存储" class="headerlink" title="2.2 Base64 解码存储"></a>2.2 Base64 解码存储</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadBase64&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">uploadBase64</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; payload)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">base64Image</span> <span class="operator">=</span> payload.get(<span class="string">&quot;image&quot;</span>).split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]; <span class="comment">// 去掉data:image/png;base64,</span></span><br><span class="line">    <span class="type">byte</span>[] imageBytes = Base64.getDecoder().decode(base64Image);</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;uploads/image.png&quot;</span>);</span><br><span class="line">    Files.write(path, imageBytes);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;File uploaded successfully&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Base64.getDecoder().decode()</code>：解码 Base64 数据</li><li><code>Files.write()</code>：写入文件</li></ul><h6 id="2-3-存储位置"><a href="#2-3-存储位置" class="headerlink" title="2.3 存储位置"></a>2.3 存储位置</h6><ul><li><strong>本地磁盘</strong>（如 <code>uploads/</code> 目录）</li><li><strong>MinIO &#x2F; OSS</strong>（后续上传到存储服务）</li><li><strong>数据库</strong>（通常不推荐，适用于小图片）</li></ul><hr><h6 id="3-图片上传后存储到-MinIO"><a href="#3-图片上传后存储到-MinIO" class="headerlink" title="3. 图片上传后存储到 MinIO"></a>3. 图片上传后存储到 MinIO</h6><h6 id="3-1-MinIO-介绍"><a href="#3-1-MinIO-介绍" class="headerlink" title="3.1 MinIO 介绍"></a>3.1 MinIO 介绍</h6><ul><li>MinIO 是兼容 <strong>Amazon S3 协议</strong> 的对象存储，适合存储海量图片。</li><li>图片上传到后端后，后端将其上传至 MinIO。</li></ul><h6 id="3-2-Spring-Boot-连接-MinIO"><a href="#3-2-Spring-Boot-连接-MinIO" class="headerlink" title="3.2 Spring Boot 连接 MinIO"></a>3.2 Spring Boot 连接 MinIO</h6><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>MinIO 配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">            .endpoint(<span class="string">&quot;http://localhost:9000&quot;</span>)</span><br><span class="line">            .credentials(<span class="string">&quot;minioadmin&quot;</span>, <span class="string">&quot;minioadmin&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片上传到 MinIO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> <span class="string">&quot;images&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID() + <span class="string">&quot;-&quot;</span> + file.getOriginalFilename();</span><br><span class="line">        </span><br><span class="line">        minioClient.putObject(</span><br><span class="line">            PutObjectArgs.builder()</span><br><span class="line">                .bucket(bucket)</span><br><span class="line">                .object(filename)</span><br><span class="line">                .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>)</span><br><span class="line">                .contentType(file.getContentType())</span><br><span class="line">                .build()</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;http://localhost:9000/&quot;</span> + bucket + <span class="string">&quot;/&quot;</span> + filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>minioClient.putObject(...)</code>：将文件上传到 MinIO</li><li><code>UUID.randomUUID()</code>：防止文件名重复</li><li>返回文件访问 URL</li></ul><h6 id="3-3-是否删除后端缓存的文件？"><a href="#3-3-是否删除后端缓存的文件？" class="headerlink" title="3.3 是否删除后端缓存的文件？"></a>3.3 是否删除后端缓存的文件？</h6><p>上传到 MinIO 后，可以删除服务器临时存储的文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Files.deleteIfExists(Paths.get(<span class="string">&quot;uploads/&quot;</span> + filename));</span><br></pre></td></tr></table></figure><p><strong>优化点</strong></p><ul><li><p><strong>直接流式上传到 MinIO</strong>，避免存储到本地后再上传：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">minioClient.putObject(</span><br><span class="line">    PutObjectArgs.builder()</span><br><span class="line">        .bucket(bucket)</span><br><span class="line">        .object(filename)</span><br><span class="line">        .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>)</span><br><span class="line">        .contentType(file.getContentType())</span><br><span class="line">        .build()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>不占用服务器磁盘空间</strong></li><li><strong>更高效</strong></li></ul></li></ul><hr><h6 id="4-需要注意的优化点"><a href="#4-需要注意的优化点" class="headerlink" title="4. 需要注意的优化点"></a>4. 需要注意的优化点</h6><h6 id="4-1-处理大文件"><a href="#4-1-处理大文件" class="headerlink" title="4.1 处理大文件"></a>4.1 处理大文件</h6><ul><li><p>限制上传文件大小：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">50MB</span></span><br></pre></td></tr></table></figure></li><li><p><strong>分片上传</strong></p><ul><li>前端切分文件，后端合并文件</li><li>MinIO &#x2F; S3 也支持分片上传</li></ul></li></ul><h6 id="4-2-并发控制"><a href="#4-2-并发控制" class="headerlink" title="4.2 并发控制"></a>4.2 并发控制</h6><ul><li><strong>限流</strong>：防止大量用户同时上传（Guava RateLimiter）</li><li><strong>缓存控制</strong>：上传后删除服务器临时文件</li></ul><hr><h6 id="5-常见面试题"><a href="#5-常见面试题" class="headerlink" title="5. 常见面试题"></a>5. 常见面试题</h6><table><thead><tr><th>问题</th><th>关键点</th></tr></thead><tbody><tr><td>1. 说说 Spring Boot 如何处理文件上传？</td><td><code>MultipartFile</code>、<code>multipart/form-data</code></td></tr><tr><td>2. 如何将文件上传到 MinIO？</td><td><code>MinioClient.putObject()</code></td></tr><tr><td>3. Base64 和 Multipart 上传的区别？</td><td><code>Base64</code> 体积大 33%，不推荐大图片</td></tr><tr><td>4. 如何防止上传大文件占满服务器？</td><td><strong>限流 + 分片上传</strong></td></tr><tr><td>5. 如何生成文件的唯一 URL？</td><td><strong>UUID + MinIO&#x2F;S3 访问路径</strong></td></tr><tr><td>6. 文件如何保证秒传？</td><td><strong>文件 MD5 检查</strong></td></tr></tbody></table><hr><h6 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h6><ol><li>前端上传<ul><li><strong>Multipart Form-Data</strong>（推荐）</li><li><strong>Base64 上传</strong>（小图适用）</li></ul></li><li>后端存储<ul><li><strong>本地磁盘</strong>（临时存储）</li><li><strong>MinIO &#x2F; S3</strong>（最终存储）</li></ul></li><li>优化<ul><li><strong>直接流式上传</strong></li><li><strong>限流 &amp; 分片上传</strong></li><li><strong>上传后删除临时文件</strong></li></ul></li><li>面试常见问题<ul><li><strong>Spring Boot 如何处理文件</strong></li><li><strong>如何优化大文件上传</strong></li><li><strong>如何使用 MinIO</strong></li></ul></li></ol><h3 id="1-WebSocket-和-HTTP-的区别是什么？在什么情况下应该使用-WebSocket-而不是-HTTP？"><a href="#1-WebSocket-和-HTTP-的区别是什么？在什么情况下应该使用-WebSocket-而不是-HTTP？" class="headerlink" title="1. WebSocket 和 HTTP 的区别是什么？在什么情况下应该使用 WebSocket 而不是 HTTP？"></a><strong>1. WebSocket 和 HTTP 的区别是什么？在什么情况下应该使用 WebSocket 而不是 HTTP？</strong></h3><h4 id="（1）基础概念"><a href="#（1）基础概念" class="headerlink" title="（1）基础概念"></a><strong>（1）基础概念</strong></h4><ul><li><strong>HTTP</strong> 是 <strong>短连接</strong>（请求-响应模型），每次请求都需要客户端主动发起，服务器处理完请求后返回数据并关闭连接。</li><li><strong>WebSocket</strong> 是 <strong>长连接</strong>（双向通信），建立连接后，客户端和服务器可以互相主动发送消息，不需要每次都重新建立连接。</li></ul><h4 id="（2）核心区别"><a href="#（2）核心区别" class="headerlink" title="（2）核心区别"></a><strong>（2）核心区别</strong></h4><table><thead><tr><th><strong>特性</strong></th><th><strong>HTTP</strong></th><th><strong>WebSocket</strong></th></tr></thead><tbody><tr><td><strong>连接方式</strong></td><td>短连接，每次请求重新建立连接</td><td>长连接，建立后保持连接</td></tr><tr><td><strong>通信方向</strong></td><td>单向，客户端主动请求，服务器响应</td><td>双向，服务器和客户端都可以主动发送消息</td></tr><tr><td><strong>协议</strong></td><td>基于 <strong>请求-响应</strong> 机制</td><td>基于 <strong>双工通信</strong> 机制</td></tr><tr><td><strong>报文格式</strong></td><td><strong>HTTP 头部 + 负载（文本&#x2F;JSON&#x2F;二进制）</strong></td><td><strong>轻量二进制帧（帧格式优化）</strong></td></tr><tr><td><strong>效率</strong></td><td>每次请求需要重新建立 TCP 连接（高开销）</td><td>连接建立后可多次交互（低开销）</td></tr><tr><td><strong>适用场景</strong></td><td>普通的网页请求、API 调用</td><td>即时聊天、游戏、股票行情、推送通知</td></tr></tbody></table><h4 id="（3）什么时候使用-WebSocket？"><a href="#（3）什么时候使用-WebSocket？" class="headerlink" title="（3）什么时候使用 WebSocket？"></a><strong>（3）什么时候使用 WebSocket？</strong></h4><ul><li>适用于高频、低延迟的实时应用<ul><li><strong>即时通讯</strong>（如聊天软件、客服系统）</li><li><strong>多人在线游戏</strong>（如棋牌、MMO）</li><li><strong>实时推送</strong>（如微博热搜、天气、新闻推送）</li><li><strong>股票交易</strong>（如行情数据推送）</li><li><strong>协作应用</strong>（如 Google Docs 共享文档编辑）</li></ul></li></ul><h4 id="（4）为什么不总是用-WebSocket？"><a href="#（4）为什么不总是用-WebSocket？" class="headerlink" title="（4）为什么不总是用 WebSocket？"></a><strong>（4）为什么不总是用 WebSocket？</strong></h4><ul><li><strong>WebSocket 连接需要维护会话，可能占用更多服务器资源</strong></li><li><strong>并不是所有场景都需要实时双向通信</strong></li><li><strong>某些浏览器或防火墙可能不支持 WebSocket</strong></li></ul><h3 id="2-WebSocket-是基于-TCP-还是-UDP-的？它是如何保证消息的有序性和可靠性的？"><a href="#2-WebSocket-是基于-TCP-还是-UDP-的？它是如何保证消息的有序性和可靠性的？" class="headerlink" title="2. WebSocket 是基于 TCP 还是 UDP 的？它是如何保证消息的有序性和可靠性的？"></a><strong>2. WebSocket 是基于 TCP 还是 UDP 的？它是如何保证消息的有序性和可靠性的？</strong></h3><h4 id="（1）WebSocket-是基于-TCP-的"><a href="#（1）WebSocket-是基于-TCP-的" class="headerlink" title="（1）WebSocket 是基于 TCP 的"></a><strong>（1）WebSocket 是基于 TCP 的</strong></h4><ul><li>WebSocket 本质上是 <strong>基于 TCP</strong> 之上的一种 <strong>双向通信协议</strong>。</li><li><strong>它不是 UDP</strong>，所以 WebSocket <strong>不能天然保证低延迟和丢包容忍性</strong>，但可以通过 <strong>优化数据帧格式</strong> 降低 TCP 的开销。</li></ul><h4 id="（2）如何保证消息的有序性？"><a href="#（2）如何保证消息的有序性？" class="headerlink" title="（2）如何保证消息的有序性？"></a><strong>（2）如何保证消息的有序性？</strong></h4><ul><li><strong>TCP 本身是有序的</strong>（通过 <strong>序列号 + 滑动窗口 + ACK 确认机制</strong>）。</li><li>WebSocket 直接 <strong>继承 TCP 的有序性</strong>，所以 WebSocket <strong>保证了消息的顺序</strong>，不会乱序。</li></ul><h4 id="（3）如何保证消息的可靠性？"><a href="#（3）如何保证消息的可靠性？" class="headerlink" title="（3）如何保证消息的可靠性？"></a><strong>（3）如何保证消息的可靠性？</strong></h4><ul><li><strong>基于 TCP 的三次握手、超时重传、ACK 机制</strong> 保证了数据不会丢失。</li><li><strong>WebSocket 层面</strong> 还可以增加应用级别的 <strong>消息确认机制（ACK 确认）</strong>，如果客户端未收到消息，可以请求服务器重新发送。</li></ul><h3 id="3-WebSocket-的握手过程是怎样的？如何从-HTTP-连接升级到-WebSocket-连接？"><a href="#3-WebSocket-的握手过程是怎样的？如何从-HTTP-连接升级到-WebSocket-连接？" class="headerlink" title="3. WebSocket 的握手过程是怎样的？如何从 HTTP 连接升级到 WebSocket 连接？"></a><strong>3. WebSocket 的握手过程是怎样的？如何从 HTTP 连接升级到 WebSocket 连接？</strong></h3><h4 id="（1）WebSocket-连接是如何建立的？"><a href="#（1）WebSocket-连接是如何建立的？" class="headerlink" title="（1）WebSocket 连接是如何建立的？"></a><strong>（1）WebSocket 连接是如何建立的？</strong></h4><p>WebSocket <strong>需要先通过 HTTP 请求</strong> 进行 <strong>协议升级</strong>，然后变成 WebSocket 连接：</p><ol><li><p><strong>客户端发送 HTTP 请求（带 Upgrade 头部）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><ul><li><code>Upgrade: websocket</code> → 告诉服务器要升级 WebSocket 连接。</li><li><code>Connection: Upgrade</code> → 让 HTTP 连接变成 WebSocket。</li><li><code>Sec-WebSocket-Key</code> → 用于校验，防止中间人攻击。</li></ul></li><li><p><strong>服务器返回 WebSocket 握手响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br></pre></td></tr></table></figure><ul><li><code>101 Switching Protocols</code> → 表示协议升级成功。</li><li><code>Sec-WebSocket-Accept</code> → 服务器计算 <code>Sec-WebSocket-Key</code> 并返回，保证安全性。</li></ul></li><li><p><strong>握手完成后，HTTP 连接升级为 WebSocket 连接</strong></p><ul><li>之后 <strong>客户端和服务器可以自由发送 WebSocket 帧</strong>，不需要 HTTP 头部。</li></ul></li></ol><h4 id="（2）WebSocket-协议为什么要先经过-HTTP-进行握手？"><a href="#（2）WebSocket-协议为什么要先经过-HTTP-进行握手？" class="headerlink" title="（2）WebSocket 协议为什么要先经过 HTTP 进行握手？"></a><strong>（2）WebSocket 协议为什么要先经过 HTTP 进行握手？</strong></h4><ul><li><strong>兼容性</strong>：在 WebSocket 诞生前，浏览器主要支持 HTTP，HTTP 握手可以兼容 <strong>现有的代理和服务器</strong>。</li><li><strong>安全性</strong>：Sec-WebSocket-Key 防止 <strong>中间人攻击</strong>，确保连接是合法的 WebSocket 连接。</li><li><strong>方便负载均衡</strong>：很多 Web 服务器（如 Nginx）可以通过 HTTP 代理 WebSocket。</li></ul><h3 id="4-WebSocket-连接的-ping-pong-机制是什么？为什么需要它？"><a href="#4-WebSocket-连接的-ping-pong-机制是什么？为什么需要它？" class="headerlink" title="4. WebSocket 连接的 ping/pong 机制是什么？为什么需要它？"></a><strong>4. WebSocket 连接的 <code>ping/pong</code> 机制是什么？为什么需要它？</strong></h3><h4 id="（1）什么是-ping-pong-机制？"><a href="#（1）什么是-ping-pong-机制？" class="headerlink" title="（1）什么是 ping/pong 机制？"></a><strong>（1）什么是 <code>ping/pong</code> 机制？</strong></h4><p>WebSocket 定义了一个 <strong>心跳机制</strong>（<code>ping</code> &#x2F; <code>pong</code>），用于 <strong>检测 WebSocket 连接是否存活</strong>。</p><ul><li><strong>服务器可以发送 <code>ping</code></strong>，客户端必须在 <strong>规定时间内回复 <code>pong</code></strong>。</li><li><strong>如果客户端不回复 <code>pong</code>，服务器就会关闭连接</strong>，防止死连接占用资源。</li></ul><h4 id="（2）为什么需要-ping-pong？"><a href="#（2）为什么需要-ping-pong？" class="headerlink" title="（2）为什么需要 ping/pong？"></a><strong>（2）为什么需要 <code>ping/pong</code>？</strong></h4><ol><li><strong>检测 WebSocket 连接是否仍然存活</strong><ul><li>WebSocket 是 <strong>长连接</strong>，如果客户端意外断线（如网络中断、浏览器崩溃），服务器 <strong>无法主动感知</strong>，需要 <code>ping/pong</code> 确认连接状态。</li></ul></li><li><strong>防止 TCP 连接被中间设备（防火墙、NAT）关闭</strong><ul><li>如果 <strong>WebSocket 长时间没有数据传输</strong>，防火墙可能会 <strong>自动断开 TCP 连接</strong>，<code>ping/pong</code> 机制可以 <strong>保持连接存活</strong>。</li></ul></li><li><strong>减少无效的 WebSocket 连接</strong><ul><li>服务器可以定期 <code>ping</code>，如果发现客户端没有响应 <code>pong</code>，就主动关闭 WebSocket，减少服务器资源占用。</li></ul></li></ol><h4 id="（3）示例"><a href="#（3）示例" class="headerlink" title="（3）示例"></a><strong>（3）示例</strong></h4><p>假设 <strong>服务器每 30 秒发送一次 <code>ping</code></strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;: &quot;ping&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <strong>客户端正常</strong>，就回复：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果服务器 <strong>3 次没有收到 <code>pong</code></strong>，则关闭连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;timeout&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-在-Spring-Boot-中如何使用-ServerEndpoint-实现一个简单的-WebSocket-服务器？如果要给指定用户推送消息，该如何做？"><a href="#1-在-Spring-Boot-中如何使用-ServerEndpoint-实现一个简单的-WebSocket-服务器？如果要给指定用户推送消息，该如何做？" class="headerlink" title="1. 在 Spring Boot 中如何使用 @ServerEndpoint 实现一个简单的 WebSocket 服务器？如果要给指定用户推送消息，该如何做？"></a><strong>1. 在 Spring Boot 中如何使用 <code>@ServerEndpoint</code> 实现一个简单的 WebSocket 服务器？如果要给指定用户推送消息，该如何做？</strong></h3><h4 id="（1）使用-ServerEndpoint-创建-WebSocket-服务器"><a href="#（1）使用-ServerEndpoint-创建-WebSocket-服务器" class="headerlink" title="（1）使用 @ServerEndpoint 创建 WebSocket 服务器"></a><strong>（1）使用 <code>@ServerEndpoint</code> 创建 WebSocket 服务器</strong></h4><p>在 Spring Boot 中，我们可以使用 <code>javax.websocket</code> 提供的 <code>@ServerEndpoint</code> 注解来创建 WebSocket 服务器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/chat/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatServer</span> &#123;</span><br><span class="line">    <span class="comment">// 存储所有连接的用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Session&gt; clients = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;userId&quot;)</span> String userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        clients.put(userId, session);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户 &quot;</span> + userId + <span class="string">&quot; 连接成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, Session session)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到用户 &quot;</span> + userId + <span class="string">&quot; 消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        clients.remove(userId);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户 &quot;</span> + userId + <span class="string">&quot; 断开连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Session session, Throwable error)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;用户 &quot;</span> + userId + <span class="string">&quot; 发生错误：&quot;</span> + error.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String userId, String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> clients.get(userId);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span> &amp;&amp; session.isOpen()) &#123;</span><br><span class="line">            session.getBasicRemote().sendText(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）如何给指定用户推送消息？"><a href="#（2）如何给指定用户推送消息？" class="headerlink" title="（2）如何给指定用户推送消息？"></a><strong>（2）如何给指定用户推送消息？</strong></h4><p>上面的 <code>sendMessage(String userId, String message)</code> 方法可以 <strong>主动向某个用户推送消息</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChatServer.sendMessage(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;你好，用户1001！&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="（3）如何注册-WebSocket-服务器？"><a href="#（3）如何注册-WebSocket-服务器？" class="headerlink" title="（3）如何注册 WebSocket 服务器？"></a><strong>（3）如何注册 WebSocket 服务器？</strong></h4><p>在 Spring Boot 中，需要使用 <strong><code>@Bean</code></strong> 将 WebSocket 服务器注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerContainer;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.DeploymentException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> DeploymentException &#123;</span><br><span class="line">        <span class="type">ServerContainer</span> <span class="variable">serverContainer</span> <span class="operator">=</span> (ServerContainer) ServletContext.class</span><br><span class="line">                .getMethod(<span class="string">&quot;getAttribute&quot;</span>, String.class)</span><br><span class="line">                .invoke(<span class="literal">null</span>, <span class="string">&quot;javax.websocket.server.ServerContainer&quot;</span>);</span><br><span class="line">        serverContainer.addEndpoint(ServerEndpointConfig.Builder</span><br><span class="line">                .create(ChatServer.class, <span class="string">&quot;/chat/&#123;userId&#125;&quot;</span>)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-Spring-WebSocket-和-STOMP-协议有什么区别？为什么很多时候-STOMP-适用于-WebSocket？"><a href="#2-Spring-WebSocket-和-STOMP-协议有什么区别？为什么很多时候-STOMP-适用于-WebSocket？" class="headerlink" title="2. Spring WebSocket 和 STOMP 协议有什么区别？为什么很多时候 STOMP 适用于 WebSocket？"></a><strong>2. Spring WebSocket 和 STOMP 协议有什么区别？为什么很多时候 STOMP 适用于 WebSocket？</strong></h3><h4 id="（1）WebSocket-vs-STOMP"><a href="#（1）WebSocket-vs-STOMP" class="headerlink" title="（1）WebSocket vs STOMP"></a><strong>（1）WebSocket vs STOMP</strong></h4><table><thead><tr><th><strong>特性</strong></th><th><strong>WebSocket</strong></th><th><strong>STOMP (Simple Text Oriented Messaging Protocol)</strong></th></tr></thead><tbody><tr><td><strong>数据格式</strong></td><td>只能发送文本&#x2F;二进制数据</td><td>基于 <strong>消息帧</strong>（有 <strong>命令</strong> 和 <strong>头部</strong>）</td></tr><tr><td><strong>订阅模型</strong></td><td>没有内置订阅机制</td><td>内置 <strong>订阅&#x2F;广播</strong> 机制（类似消息队列）</td></tr><tr><td><strong>认证方式</strong></td><td>需要自己实现</td><td>STOMP 提供 <strong>身份认证机制</strong></td></tr><tr><td><strong>适用场景</strong></td><td>点对点聊天</td><td><strong>群聊、推送通知、实时协作</strong></td></tr></tbody></table><h4 id="（2）为什么-STOMP-适用于-WebSocket？"><a href="#（2）为什么-STOMP-适用于-WebSocket？" class="headerlink" title="（2）为什么 STOMP 适用于 WebSocket？"></a><strong>（2）为什么 STOMP 适用于 WebSocket？</strong></h4><ul><li><strong>WebSocket 是一个协议，但缺少消息格式</strong> → STOMP 解决了这个问题，提供了<strong>结构化消息</strong>。</li><li><strong>WebSocket 没有内置订阅功能</strong> → STOMP 提供了 <strong>发布&#x2F;订阅</strong> 机制。</li><li><strong>WebSocket 认证需要自己实现</strong> → STOMP 可以 <strong>携带 <code>token</code> 认证</strong>。</li></ul><h4 id="（3）Spring-WebSocket-STOMP-示例"><a href="#（3）Spring-WebSocket-STOMP-示例" class="headerlink" title="（3）Spring WebSocket + STOMP 示例"></a><strong>（3）Spring WebSocket + STOMP 示例</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketStompConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> &#123;</span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/ws&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>);</span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4）前端如何订阅-STOMP-消息？"><a href="#（4）前端如何订阅-STOMP-消息？" class="headerlink" title="（4）前端如何订阅 STOMP 消息？"></a><strong>（4）前端如何订阅 STOMP 消息？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">SockJS</span>(<span class="string">&#x27;/ws&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stompClient = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(socket);</span><br><span class="line"></span><br><span class="line">stompClient.<span class="title function_">connect</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    stompClient.<span class="title function_">subscribe</span>(<span class="string">&#x27;/topic/chat&#x27;</span>, <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息：&quot;</span> + message.<span class="property">body</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    stompClient.<span class="title function_">send</span>(<span class="string">&quot;/app/chat&quot;</span>, &#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">content</span>: <span class="string">&quot;Hello&quot;</span>&#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="3-在-WebSocket-连接中，如何处理身份认证？如何确保只有合法用户可以建立-WebSocket-连接？"><a href="#3-在-WebSocket-连接中，如何处理身份认证？如何确保只有合法用户可以建立-WebSocket-连接？" class="headerlink" title="3. 在 WebSocket 连接中，如何处理身份认证？如何确保只有合法用户可以建立 WebSocket 连接？"></a><strong>3. 在 WebSocket 连接中，如何处理身份认证？如何确保只有合法用户可以建立 WebSocket 连接？</strong></h3><h4 id="（1）基于-HTTP-认证（token-方式）"><a href="#（1）基于-HTTP-认证（token-方式）" class="headerlink" title="（1）基于 HTTP 认证（token 方式）"></a><strong>（1）基于 HTTP 认证（<code>token</code> 方式）</strong></h4><ul><li><strong>客户端连接 WebSocket 时附带 <code>token</code></strong></li><li><strong>在 WebSocket 服务器端解析 <code>token</code> 并校验</strong></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(&quot;/chat/&#123;token&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthWebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;mySecret&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;token&quot;)</span> String token)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!validateToken(token)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                session.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;非法连接被拒绝&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;合法用户连接成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;valid_token&quot;</span>.equals(token); <span class="comment">// 实际应使用 JWT 验证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）基于-Spring-Security-STOMP-认证"><a href="#（2）基于-Spring-Security-STOMP-认证" class="headerlink" title="（2）基于 Spring Security + STOMP 认证"></a><strong>（2）基于 Spring Security + STOMP 认证</strong></h4><p>在 Spring Security + STOMP 认证中，身份认证通常在 <strong>WebSocket 握手阶段</strong> 进行，并由 Spring Security 进行拦截和验证。以下是整个过程的核心步骤：</p><ol><li><strong>用户发起 WebSocket 连接</strong><ul><li>浏览器或客户端使用 <code>ws://server/ws</code>（或 <code>wss://server/ws</code>）发起 WebSocket 连接。</li><li>这个请求会被 <code>registerStompEndpoints</code> 中定义的 <code>&quot;/ws&quot;</code> 端点接收。</li></ul></li><li><strong>Spring Security 进行身份认证</strong><ul><li>如果 WebSocket 连接受 Spring Security 保护，那么握手请求（HTTP 请求）会经过 Spring Security 过滤器链。</li><li>在 <code>HandshakeInterceptor</code> 或 <code>AuthenticationPrincipalArgumentResolver</code> 中可以提取 <strong>HTTP 头、JWT、Session</strong> 等信息进行身份认证。</li></ul></li><li><strong>握手成功后，STOMP 连接建立</strong><ul><li>通过 <code>WebSocketAuthConfig</code> 中 <code>configureMessageBroker</code> 配置，STOMP 连接建立，客户端可以订阅 <code>/topic</code> 或发送 <code>/app</code> 消息。</li></ul></li><li><strong>消息认证</strong><ul><li>当客户端发送消息（如 <code>SEND /app/chat</code>），Spring Security 会使用 <code>ChannelInterceptor</code> 进行身份认证和权限检查。</li></ul></li></ol><p>Spring Security 可以拦截 WebSocket 连接，并进行身份认证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketAuthConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> &#123;</span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/ws&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>);</span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-如果-WebSocket-连接断开，如何实现自动重连？前端和后端各自应该如何处理？"><a href="#4-如果-WebSocket-连接断开，如何实现自动重连？前端和后端各自应该如何处理？" class="headerlink" title="4. 如果 WebSocket 连接断开，如何实现自动重连？前端和后端各自应该如何处理？"></a><strong>4. 如果 WebSocket 连接断开，如何实现自动重连？前端和后端各自应该如何处理？</strong></h3><h4 id="（1）前端实现-WebSocket-自动重连"><a href="#（1）前端实现-WebSocket-自动重连" class="headerlink" title="（1）前端实现 WebSocket 自动重连"></a><strong>（1）前端实现 WebSocket 自动重连</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080/chat&quot;</span>);</span><br><span class="line"></span><br><span class="line">    socket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    socket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接错误&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    socket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接关闭，5 秒后重连&quot;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(connect, <span class="number">5000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>();</span><br></pre></td></tr></table></figure><h4 id="（2）后端处理-WebSocket-重连"><a href="#（2）后端处理-WebSocket-重连" class="headerlink" title="（2）后端处理 WebSocket 重连"></a><strong>（2）后端处理 WebSocket 重连</strong></h4><ul><li><strong>使用 <code>ping/pong</code> 机制</strong> 检测死连接</li><li><strong>清理无效连接</strong>，并允许客户端重连</li><li><strong>基于 Redis 或数据库存储用户连接状态</strong></li></ul><h3 id="1-WebSocket-连接较多的情况下（如-10w-以上），如何优化-WebSocket-服务器的性能？"><a href="#1-WebSocket-连接较多的情况下（如-10w-以上），如何优化-WebSocket-服务器的性能？" class="headerlink" title="1. WebSocket 连接较多的情况下（如 10w 以上），如何优化 WebSocket 服务器的性能？"></a>1. WebSocket 连接较多的情况下（如 10w 以上），如何优化 WebSocket 服务器的性能？</h3><h4 id="1-1-WebSocket-服务器的性能瓶颈"><a href="#1-1-WebSocket-服务器的性能瓶颈" class="headerlink" title="1.1 WebSocket 服务器的性能瓶颈"></a>1.1 WebSocket 服务器的性能瓶颈</h4><p>在高并发 WebSocket 服务器中，主要的性能瓶颈包括：</p><ul><li><strong>连接管理开销</strong>：每个 WebSocket 连接都需要维护 <code>Session</code>，占用一定的 <strong>内存</strong> 和 <strong>CPU</strong> 资源。</li><li><strong>I&#x2F;O 处理能力</strong>：WebSocket 需要 <strong>高效的 I&#x2F;O 处理模型</strong>，否则会导致吞吐量下降。</li><li><strong>消息广播与分发</strong>：在 <strong>群聊或消息推送</strong> 场景下，消息的分发会导致 <strong>CPU、网络带宽</strong> 开销过高。</li><li><strong>负载均衡</strong>：单台服务器的连接数上限受限，如何<strong>水平扩展</strong>非常关键。</li></ul><h4 id="1-2-性能优化方案"><a href="#1-2-性能优化方案" class="headerlink" title="1.2 性能优化方案"></a>1.2 性能优化方案</h4><h5 id="1-2-1-选择合适的-WebSocket-服务器"><a href="#1-2-1-选择合适的-WebSocket-服务器" class="headerlink" title="1.2.1 选择合适的 WebSocket 服务器"></a>1.2.1 选择合适的 WebSocket 服务器</h5><ul><li><strong>Netty</strong>：相比于 Tomcat、Spring 默认的 WebSocket 实现，Netty 更适合 <strong>高并发 WebSocket 连接</strong>，因为它采用 <strong>异步 I&#x2F;O（NIO）</strong>，减少线程阻塞，提高吞吐量。</li><li><strong>Vert.x WebSocket</strong>：基于 Netty，适用于高并发 WebSocket 场景。</li></ul><h5 id="1-2-2-限制每个连接的资源占用"><a href="#1-2-2-限制每个连接的资源占用" class="headerlink" title="1.2.2 限制每个连接的资源占用"></a>1.2.2 限制每个连接的资源占用</h5><ul><li><strong>减少 Session 内存占用</strong>：避免直接在 JVM 内存中存储过多 WebSocket 连接，可以使用 <strong>Redis &#x2F; Zookeeper</strong> 进行管理。</li><li><strong>消息队列优化</strong>：避免服务器缓存大量未发送的消息，<strong>使用 Kafka 或 Redis 进行消息缓冲</strong>，异步推送消息。</li></ul><h5 id="1-2-3-使用异步非阻塞-I-O（Reactor-模型）"><a href="#1-2-3-使用异步非阻塞-I-O（Reactor-模型）" class="headerlink" title="1.2.3 使用异步非阻塞 I&#x2F;O（Reactor 模型）"></a>1.2.3 使用异步非阻塞 I&#x2F;O（Reactor 模型）</h5><ul><li><strong>Tomcat 默认 WebSocket 采用 BIO（阻塞 I&#x2F;O）</strong>，对于高并发不友好。</li><li><strong>Netty + Reactor（如 Spring WebFlux）</strong> 采用 <strong>事件驱动的异步处理</strong>，可以大幅提高吞吐量。</li></ul><h5 id="1-2-4-负载均衡（集群部署）"><a href="#1-2-4-负载均衡（集群部署）" class="headerlink" title="1.2.4 负载均衡（集群部署）"></a>1.2.4 负载均衡（集群部署）</h5><ul><li><strong>Nginx + WebSocket 反向代理</strong>：使用 <code>sticky session</code>（会话保持），确保同一 WebSocket 连接始终路由到同一台服务器。</li><li><strong>Kubernetes + Ingress</strong>：适用于云原生架构，支持 WebSocket 的负载均衡。</li></ul><h5 id="1-2-5-消息压缩和优化"><a href="#1-2-5-消息压缩和优化" class="headerlink" title="1.2.5 消息压缩和优化"></a>1.2.5 消息压缩和优化</h5><ul><li><strong>WebSocket 压缩扩展（PMCE）</strong>：减少 WebSocket 消息体积，提高传输效率。</li><li><strong>JSON → Protobuf</strong> 或 <strong>MessagePack</strong>：减少数据大小，提高解析速度。</li></ul><hr><h3 id="2-WebSocket-适合用来做消息持久化存储吗？如果需要实现聊天记录持久化，该如何设计？"><a href="#2-WebSocket-适合用来做消息持久化存储吗？如果需要实现聊天记录持久化，该如何设计？" class="headerlink" title="2. WebSocket 适合用来做消息持久化存储吗？如果需要实现聊天记录持久化，该如何设计？"></a>2. WebSocket 适合用来做消息持久化存储吗？如果需要实现聊天记录持久化，该如何设计？</h3><h4 id="2-1-WebSocket-不适合直接做持久化存储的原因"><a href="#2-1-WebSocket-不适合直接做持久化存储的原因" class="headerlink" title="2.1 WebSocket 不适合直接做持久化存储的原因"></a>2.1 WebSocket 不适合直接做持久化存储的原因</h4><ul><li><strong>WebSocket 是实时通信协议</strong>，适合 <strong>低延迟传输</strong>，但 <strong>不适合数据持久化</strong>。</li><li><strong>服务器重启或故障时</strong>，WebSocket 连接会丢失，<strong>导致数据不可追溯</strong>。</li><li><strong>数据库写入会影响吞吐量</strong>，如果每条消息都直接写入数据库，会严重影响性能。</li></ul><h4 id="2-2-合理的聊天记录持久化设计"><a href="#2-2-合理的聊天记录持久化设计" class="headerlink" title="2.2 合理的聊天记录持久化设计"></a>2.2 合理的聊天记录持久化设计</h4><h5 id="2-2-1-采用消息队列（Kafka-RabbitMQ）"><a href="#2-2-1-采用消息队列（Kafka-RabbitMQ）" class="headerlink" title="2.2.1 采用消息队列（Kafka &#x2F; RabbitMQ）"></a>2.2.1 采用消息队列（Kafka &#x2F; RabbitMQ）</h5><ul><li><p><strong>WebSocket 服务器将消息写入 Kafka</strong>，然后由后端消费者 <strong>异步存储到数据库</strong>。</p></li><li><p>优点</p><p>：</p><ul><li>解耦 WebSocket 和数据库写入，提高吞吐量。</li><li>具备 <strong>消息持久化、可追溯、可回放</strong> 的能力。</li></ul></li></ul><h5 id="2-2-2-数据库存储方案"><a href="#2-2-2-数据库存储方案" class="headerlink" title="2.2.2 数据库存储方案"></a>2.2.2 数据库存储方案</h5><ul><li><strong>短期存储（高频访问）</strong>：使用 <strong>Redis</strong> 缓存最近的聊天记录。</li><li><strong>长期存储（历史记录）</strong>：使用 <strong>MongoDB &#x2F; MySQL</strong> 进行存储。</li></ul><h5 id="2-2-3-典型数据库设计"><a href="#2-2-3-典型数据库设计" class="headerlink" title="2.2.3 典型数据库设计"></a>2.2.3 典型数据库设计</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> chat_messages (</span><br><span class="line">    id <span class="type">BIGINT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    sender_id <span class="type">BIGINT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    receiver_id <span class="type">BIGINT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    room_id <span class="type">BIGINT</span>,</span><br><span class="line">    content TEXT <span class="keyword">NOT NULL</span>,</span><br><span class="line">    message_type ENUM(<span class="string">&#x27;TEXT&#x27;</span>, <span class="string">&#x27;IMAGE&#x27;</span>, <span class="string">&#x27;VIDEO&#x27;</span>),</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p><strong>支持私聊（receiver_id）和群聊（room_id）</strong></p></li><li><p>索引优化</p><p>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_chat_room <span class="keyword">ON</span> chat_messages(room_id, created_at);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-在集群环境下，如何确保多个-WebSocket-服务器之间可以互相通信？"><a href="#3-在集群环境下，如何确保多个-WebSocket-服务器之间可以互相通信？" class="headerlink" title="3. 在集群环境下，如何确保多个 WebSocket 服务器之间可以互相通信？"></a>3. 在集群环境下，如何确保多个 WebSocket 服务器之间可以互相通信？</h3><h4 id="3-1-WebSocket-集群的关键问题"><a href="#3-1-WebSocket-集群的关键问题" class="headerlink" title="3.1 WebSocket 集群的关键问题"></a>3.1 WebSocket 集群的关键问题</h4><ul><li><strong>WebSocket 服务器是有状态的</strong>，多个服务器实例之间需要同步连接信息。</li><li><strong>如何在不同 WebSocket 服务器之间传递消息</strong>，保证消息 <strong>广播</strong> 和 <strong>点对点消息</strong> 的可靠性。</li></ul><h4 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h4><h5 id="3-2-1-使用-Redis-Pub-Sub-进行消息同步"><a href="#3-2-1-使用-Redis-Pub-Sub-进行消息同步" class="headerlink" title="3.2.1 使用 Redis Pub&#x2F;Sub 进行消息同步"></a>3.2.1 使用 Redis Pub&#x2F;Sub 进行消息同步</h5><ul><li><p>WebSocket 服务器间通过 </p><p>Redis Pub&#x2F;Sub</p><p> 进行消息广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.convertAndSend(<span class="string">&quot;chat-room-123&quot;</span>, message);</span><br></pre></td></tr></table></figure></li><li><p>适用场景</p><p>：</p><ul><li>适合中小规模的 WebSocket 服务器集群。</li></ul></li></ul><h5 id="3-2-2-使用-Kafka-进行消息广播"><a href="#3-2-2-使用-Kafka-进行消息广播" class="headerlink" title="3.2.2 使用 Kafka 进行消息广播"></a>3.2.2 使用 Kafka 进行消息广播</h5><ul><li><p><strong>Kafka 适用于大规模分布式 WebSocket 服务器集群</strong>。</p></li><li><p>消息流程</p><p>：</p><ul><li>A 服务器收到 WebSocket 消息 → 发布到 Kafka → B 服务器消费并转发给对应的 WebSocket 连接。</li></ul></li></ul><h5 id="3-2-3-采用-Nginx-Sticky-Session"><a href="#3-2-3-采用-Nginx-Sticky-Session" class="headerlink" title="3.2.3 采用 Nginx + Sticky Session"></a>3.2.3 采用 Nginx + Sticky Session</h5><ul><li>让同一个 WebSocket 连接总是连接到 <strong>同一个 WebSocket 服务器实例</strong>，减少服务器间的同步压力。</li></ul><hr><h3 id="4-如何处理-WebSocket-服务器的高可用问题？"><a href="#4-如何处理-WebSocket-服务器的高可用问题？" class="headerlink" title="4. 如何处理 WebSocket 服务器的高可用问题？"></a>4. 如何处理 WebSocket 服务器的高可用问题？</h3><h4 id="4-1-WebSocket-高可用面临的挑战"><a href="#4-1-WebSocket-高可用面临的挑战" class="headerlink" title="4.1 WebSocket 高可用面临的挑战"></a>4.1 WebSocket 高可用面临的挑战</h4><ul><li><strong>如何在服务器宕机后，快速恢复 WebSocket 连接？</strong></li><li><strong>如何在多个 WebSocket 服务器之间分担负载？</strong></li></ul><h4 id="4-2-解决方案"><a href="#4-2-解决方案" class="headerlink" title="4.2 解决方案"></a>4.2 解决方案</h4><h5 id="4-2-1-前端自动重连"><a href="#4-2-1-前端自动重连" class="headerlink" title="4.2.1 前端自动重连"></a>4.2.1 前端自动重连</h5><ul><li><p>客户端检测 WebSocket 断开后自动重连</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://yourserver/ws&quot;</span>);</span><br><span class="line">    ws.<span class="property">onclose</span> = <span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(connect, <span class="number">3000</span>); <span class="comment">// 3 秒后重连</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-2-2-使用-Redis-共享连接状态"><a href="#4-2-2-使用-Redis-共享连接状态" class="headerlink" title="4.2.2 使用 Redis 共享连接状态"></a>4.2.2 使用 Redis 共享连接状态</h5><ul><li><strong>用户连接信息存入 Redis</strong>，在服务器重启后恢复用户状态。</li></ul><h5 id="4-2-3-使用-Nginx-负载均衡"><a href="#4-2-3-使用-Nginx-负载均衡" class="headerlink" title="4.2.3 使用 Nginx 负载均衡"></a>4.2.3 使用 Nginx 负载均衡</h5><ul><li><strong>Nginx 反向代理</strong> 确保用户可以快速切换到新的 WebSocket 服务器。</li></ul><hr><h3 id="5-在-WebSocket-服务器中，如何防止-DDoS-攻击？"><a href="#5-在-WebSocket-服务器中，如何防止-DDoS-攻击？" class="headerlink" title="5. 在 WebSocket 服务器中，如何防止 DDoS 攻击？"></a>5. 在 WebSocket 服务器中，如何防止 DDoS 攻击？</h3><h4 id="5-1-WebSocket-常见攻击方式"><a href="#5-1-WebSocket-常见攻击方式" class="headerlink" title="5.1 WebSocket 常见攻击方式"></a>5.1 WebSocket 常见攻击方式</h4><ol><li><strong>大量恶意连接</strong>：攻击者创建大量 WebSocket 连接，耗尽服务器资源。</li><li><strong>发送超大消息</strong>：恶意客户端发送超大消息，导致服务器 OOM。</li><li><strong>频繁重连</strong>：短时间内频繁断开重连，占用服务器线程。</li></ol><h4 id="5-2-解决方案"><a href="#5-2-解决方案" class="headerlink" title="5.2 解决方案"></a>5.2 解决方案</h4><h5 id="5-2-1-限制连接速率"><a href="#5-2-1-限制连接速率" class="headerlink" title="5.2.1 限制连接速率"></a>5.2.1 限制连接速率</h5><ul><li><p>Nginx 限制 WebSocket 连接数</p><p>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=addr:<span class="number">10m</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="section">location</span> /ws &#123;</span><br><span class="line">        <span class="attribute">limit_conn</span> addr <span class="number">10</span>; <span class="comment"># 每个 IP 限制 10 个连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-2-2-限制消息大小"><a href="#5-2-2-限制消息大小" class="headerlink" title="5.2.2 限制消息大小"></a>5.2.2 限制消息大小</h5><ul><li><p>Tomcat WebSocket 限制消息大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverEndpointConfig.getUserProperties().put(<span class="string">&quot;org.apache.tomcat.websocket.maxMessageSize&quot;</span>, <span class="number">1024</span> * <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-2-3-采用-JWT-认证"><a href="#5-2-3-采用-JWT-认证" class="headerlink" title="5.2.3 采用 JWT 认证"></a>5.2.3 采用 JWT 认证</h5><ul><li><p>只允许 </p><p>授权用户</p><p> 连接 WebSocket，防止恶意连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!jwtService.validate(token)) &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="项目-1"><a href="#项目-1" class="headerlink" title="项目"></a>项目</h2><h3 id="SIDC-1"><a href="#SIDC-1" class="headerlink" title="SIDC"></a>SIDC</h3><h4 id="前后端页面所有请求和响应都进行加密处理"><a href="#前后端页面所有请求和响应都进行加密处理" class="headerlink" title="前后端页面所有请求和响应都进行加密处理"></a>前后端页面所有请求和响应都进行加密处理</h4><p>在前后端加密处理过程中，首先需要选择合适的加密算法。根据加密方式的不同，加密算法分为两大类：对称加密和非对称加密。其分类标准为公钥和私钥是否相同，若相同则为对称加密，反之则为非对称加密。</p><p>常见的对称加密算法有 <strong>AES</strong>，而非对称加密算法通常采用 <strong>RSA</strong>。详细的加密算法介绍可参考[62 加密算法](<a href="https://fangyaohui.github.io/2025/02/26/62">https://fangyaohui.github.io/2025/02/26/62</a> 加密算法&#x2F;)。</p><p>在实际应用中，常见的做法是使用 <strong>RSA</strong> 加密算法进行密钥交换，成功交换后，使用 <strong>AES</strong> 算法进行数据加密和解密。</p><p>本项目中，考虑到性能与易用性，选择了 <strong>AES</strong> 作为加密算法。</p><p>为支持这一加密方式，开发了一个模块，封装了对接口请求进行解密与响应加密的功能，方便未来扩展和维护。</p><p>在前后端加密的实现中，常见的两种情形是：一是对请求 URL 中的路径进行加密；二是对请求体进行加密而不对 URL 进行加密。若选择第一种方案，则后端服务需要在网关层解密请求路径并处理请求体，之后将请求转发至目标接口；若选择第二种方案，则无需在网关层处理，直接将请求转发至目标接口。</p><p>接下来，详细分析在加密解密过程中可能遇到的技术难点。</p><p>首先，假设一个请求的 URL 被加密，经过网关解密后，若请求体未解密，且在目标接口处理时，Spring Boot 会自动进行参数匹配，此时会导致类型不匹配的错误，无法进行自动注入。</p><p>其次，<strong><code>HttpServletRequest</code></strong> 默认情况下的输入流只能读取一次，因此如果需要多次访问请求体的内容，需要使用 <strong><code>ContentCachingRequestWrapper</code></strong> 进行请求体缓存。此设计特别适用于需要多次读取请求体内容的场景，例如在 AOP 中解密请求体内容。通过自定义过滤器，将原始的 <strong><code>HttpServletRequest</code></strong> 封装为 <strong><code>ContentCachingRequestWrapper</code></strong>，从而支持多次读取请求体内容。</p><p>上述是加密解密过程中的第一个技术难点。</p><p>第二个难点是处理 PO 实体类中属性的加解密。部分属性可能需要指定进行加解密，这将导致层层嵌套。虽然基础数据类型的加解密相对简单，但对于引用类型的数据，则需要递归查找被注解标记的属性，并进行相应的加解密操作。如果该属性是引用类型，则其引用的属性也需进行解密。因此，基于策略工厂等设计模式，可以灵活实现这一需求。以下是加解密策略设计的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CryptStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainText 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedText 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">decrypt</span><span class="params">(String encryptedText)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptStrategyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, CryptStrategy&gt; STRATEGIES = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_STRATEGY</span> <span class="operator">=</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态块注册默认策略</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        STRATEGIES.put(DEFAULT_STRATEGY, <span class="keyword">new</span> <span class="title class_">DefaultCryptStrategy</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加密策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 策略名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CryptStrategy <span class="title function_">getStrategy</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> STRATEGIES.getOrDefault(name, STRATEGIES.get(DEFAULT_STRATEGY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加密策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CryptStrategy <span class="title function_">getStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> STRATEGIES.get(DEFAULT_STRATEGY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义加密策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 策略名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy 策略实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerStrategy</span><span class="params">(String name, CryptStrategy strategy)</span> &#123;</span><br><span class="line">        STRATEGIES.put(name, strategy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultCryptStrategy</span> <span class="keyword">implements</span> <span class="title class_">CryptStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES加密算法模式和填充方式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;AES&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM_MODE</span> <span class="operator">=</span> <span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> <span class="string">&quot;fang&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取AES密钥</span></span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generateSecretKey();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建密码器</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM_MODE);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行加密</span></span><br><span class="line">            <span class="type">byte</span>[] encryptedBytes = cipher.doFinal(plainText.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回加密结果（转换为十六进制字符串）</span></span><br><span class="line">            <span class="keyword">return</span> bytesToHex(encryptedBytes);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 记录异常信息，并返回null</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decrypt</span><span class="params">(String encryptedText)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断传入的字符串是否是有效的十六进制</span></span><br><span class="line">            <span class="keyword">if</span> (!isHex(encryptedText)) &#123;</span><br><span class="line">                <span class="comment">// 如果不是有效的十六进制字符串，直接返回原始字符串（认为是明文）</span></span><br><span class="line">                <span class="keyword">return</span> encryptedText;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将十六进制密文转换为字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] encryptedBytes = hexToBytes(encryptedText);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取AES密钥</span></span><br><span class="line">            <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generateSecretKey();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建密码器</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM_MODE);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行解密</span></span><br><span class="line">            <span class="type">byte</span>[] decryptedBytes = cipher.doFinal(encryptedBytes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回解密结果（转换为字符串）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decryptedBytes);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 记录异常信息，可能是由于解密失败引起的</span></span><br><span class="line">            <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            <span class="comment">// 返回原始字符串</span></span><br><span class="line">            <span class="keyword">return</span> encryptedText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据密码生成AES密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SecretKey <span class="title function_">generateSecretKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> KeyGenerator.getInstance(ALGORITHM);</span><br><span class="line">        <span class="type">SecureRandom</span> <span class="variable">secureRandom</span> <span class="operator">=</span> SecureRandom.getInstance(<span class="string">&quot;SHA1PRNG&quot;</span>);</span><br><span class="line">        secureRandom.setSeed(DefaultCryptStrategy.privateKey.getBytes());</span><br><span class="line">        keyGenerator.init(<span class="number">128</span>, secureRandom);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(keyGenerator.generateKey().getEncoded(), ALGORITHM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字节数组转换为十六进制字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 十六进制字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bytesToHex</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="comment">// 将每个字节转换为两位十六进制数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(b &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断字符串是否是有效的十六进制字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果是有效的十六进制字符串返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isHex</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || str.length() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断字符串是否只包含0-9和A-F字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isDigit(c) &amp;&amp; (c &lt; <span class="string">&#x27;A&#x27;</span> || c &gt; <span class="string">&#x27;F&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将十六进制字符串转换为字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexString 十六进制字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] hexToBytes(String hexString) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> hexString.length();</span><br><span class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Hex string must have even length.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[length / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            result[i / <span class="number">2</span>] = (<span class="type">byte</span>) ((Character.digit(hexString.charAt(i), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>)</span><br><span class="line">                    + Character.digit(hexString.charAt(i + <span class="number">1</span>), <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码设计了一个灵活的加解密策略工厂，支持动态添加自定义的加解密算法。这种设计为系统扩展和定制加密算法提供了便利。</p><h4 id="基于Netty实现的消息队列"><a href="#基于Netty实现的消息队列" class="headerlink" title="基于Netty实现的消息队列"></a>基于Netty实现的消息队列</h4><p>详情请查看<a href="https://fangyaohui.github.io/2025/02/27/66%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/">https://fangyaohui.github.io/2025/02/27/66%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</a></p><p>具体使用到了BlockingQueue和ConcurrentHashMap特别需要注意一下。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-17 SIDC</title>
      <link href="/2025/02/26/75-17%20SIDC%20README/"/>
      <url>/2025/02/26/75-17%20SIDC%20README/</url>
      
        <content type="html"><![CDATA[<h1 id="75-17-SIDC"><a href="#75-17-SIDC" class="headerlink" title="75-17 SIDC"></a>75-17 SIDC</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>SIDC 是一个专为技术开发者设计的博客阅读与管理平台，旨在为用户提供高效、便捷的博客创作与分享体验。与传统的博客平台（如 CSDN）相比，SIDC 在功能上进行了深度优化，特别是在博客上传与图片管理方面，极大地提升了用户的操作效率。用户可以通过 SIDC 轻松上传 Markdown 格式的博客内容，并利用其独有的 <strong>一键图片上传功能</strong>，自动将博客中的本地图片上传至云端，同时智能替换 Markdown 文件中的图片地址，彻底解决了传统平台需要手动逐张上传图片的繁琐问题。</p><p>此外，SIDC 还提供了丰富的社交互动功能，用户可以在平台上添加好友、私信交流，甚至通过博客留言功能与其他开发者进行深度讨论。无论是 <strong>博客阅读</strong>、<strong>博客创作</strong>，还是 <strong>技术交流</strong>，SIDC 都致力于为用户打造一个高效、友好的技术社区环境，帮助开发者更专注于内容创作与知识分享。</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262042240.png" alt="image-20250226113223684"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043069.png" alt="image-20250226113404272"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043088.png" alt="image-20250226113501879"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043693.png" alt="image-20250226113544607"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043320.png" alt="image-20250226132256925"></p><h2 id="项目本地部署"><a href="#项目本地部署" class="headerlink" title="项目本地部署"></a>项目本地部署</h2><ol><li>导入数据库至本地，使用的数据库是MySQL；<br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043058.png" alt="image-20250226132710840"></li><li>然后修改如下图所示的相关本地MySQL数据库密码确保Nacos可以访问到数据库；<br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043619.png" alt="image-20250226133021002"></li><li>启动Nacos；<br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043000.png" alt="image-20250226133106467"></li><li>访问上图中的网址，然后修改这里面的配置，涉及到的相关配置有MySQL、Redis、RabbitMQ、MinIO等相关配置；<br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043908.png" alt="image-20250226133427675"></li><li>如：<br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043425.png" alt="image-20250226133528225"></li><li>然后依次启动：<br><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043945.png" alt="image-20250226133832892"></li><li>然后启动前端项目github地址为：<a href="https://github.com/fangyaohui/screw-it-development-poetize">https://github.com/fangyaohui/screw-it-development-poetize</a><br>命令行执行npm run serve即可</li></ol><h2 id="功能模块设计介绍"><a href="#功能模块设计介绍" class="headerlink" title="功能模块设计介绍"></a>功能模块设计介绍</h2><h3 id="即时通信交流模块"><a href="#即时通信交流模块" class="headerlink" title="即时通信交流模块"></a>即时通信交流模块</h3><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262114387.png" alt="image-20250226132256925"></p><p>该即时通信交流模块是基于WebSocket来实现的，</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>77 云服务器&amp;Linux系统</title>
      <link href="/2025/02/26/77%20%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;Linux%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/02/26/77%20%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;Linux%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="77-云服务器-Linux系统"><a href="#77-云服务器-Linux系统" class="headerlink" title="77 云服务器&amp;Linux系统"></a>77 云服务器&amp;Linux系统</h1><h2 id="云服务基本信息"><a href="#云服务基本信息" class="headerlink" title="云服务基本信息"></a>云服务基本信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">服务器密码：</span><br><span class="line">!Fyh2380514719</span><br><span class="line">地址：</span><br><span class="line">https://console.huaweicloud.com/shell?agencyId=fa161028e1e341ab87bbae593a14a674&amp;region=cn-east-3&amp;locale=zh-cn#/remote/suiu94dmgr52arf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Linux基本命令"><a href="#Linux基本命令" class="headerlink" title="Linux基本命令"></a>Linux基本命令</h2><h3 id="linux-查看当前内存使用情况-内存消耗从大到小"><a href="#linux-查看当前内存使用情况-内存消耗从大到小" class="headerlink" title="linux 查看当前内存使用情况 内存消耗从大到小"></a>linux 查看当前内存使用情况 内存消耗从大到小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top </span><br></pre></td></tr></table></figure><h3 id="linux-强制删除文件夹"><a href="#linux-强制删除文件夹" class="headerlink" title="linux 强制删除文件夹"></a>linux 强制删除文件夹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -r：递归删除目录及其内容。</span><br><span class="line">rm -f：强制删除文件或文件夹，不会提示确认。</span><br><span class="line">rm -rf：递归删除目录及其内容，并且不会提示确认。</span><br></pre></td></tr></table></figure><h3 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tulnp | grep &lt;port&gt;</span><br></pre></td></tr></table></figure><h3 id="关闭指定端口号"><a href="#关闭指定端口号" class="headerlink" title="关闭指定端口号"></a>关闭指定端口号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tulnp | grep &lt;port&gt;</span><br><span class="line">sudo systemctl stop redis</span><br></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 查看firewall服务状态</span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"># 开启、重启、关闭、firewalld.service服务</span><br><span class="line"># 开启</span><br><span class="line">service firewalld start</span><br><span class="line"># 重启</span><br><span class="line">service firewalld restart</span><br><span class="line"># 关闭</span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"># 查看防火墙规则</span><br><span class="line">firewall-cmd --list-all    # 查看全部信息</span><br><span class="line">firewall-cmd --list-ports  # 只看端口信息</span><br><span class="line"></span><br><span class="line"># 开启端口</span><br><span class="line">开端口命令：firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone #作用域</span><br><span class="line">--add-port=80/tcp  #添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent   #永久生效，没有此参数重启后失效</span><br><span class="line"></span><br><span class="line">#常用的firewall命令常用命令介绍</span><br><span class="line">1 firewall-cmd --state                           ##查看防火墙状态，是否是running</span><br><span class="line"> 2 firewall-cmd --reload                          ##重新载入配置，比如添加规则之后，需要执行此命令</span><br><span class="line"> 3 firewall-cmd --get-zones                       ##列出支持的zone</span><br><span class="line"> 4 firewall-cmd --get-services                    ##列出支持的服务，在列表中的服务是放行的</span><br><span class="line"> 5 firewall-cmd --query-service ftp               ##查看ftp服务是否支持，返回yes或者no</span><br><span class="line"> 6 firewall-cmd --add-service=ftp                 ##临时开放ftp服务</span><br><span class="line"> 7 firewall-cmd --add-service=ftp --permanent     ##永久开放ftp服务</span><br><span class="line"> 8 firewall-cmd --remove-service=ftp --permanent  ##永久移除ftp服务</span><br><span class="line"> 9 firewall-cmd --add-port=80/tcp --permanent     ##永久添加80端口 </span><br><span class="line">10 firewall-cmd --remove-port=80/tcp --permanent  ##永久移除80端口</span><br><span class="line">11 firewall-cmd --list-ports                      ##查看已经开放的端口</span><br><span class="line">12 iptables -L -n                                 ##查看规则，这个</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动Redis和minio"><a href="#启动Redis和minio" class="headerlink" title="启动Redis和minio"></a>启动Redis和minio</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ../home/fang/software/redis/redis-6.0.5/src redis-server ../redis.conf</span><br><span class="line"></span><br><span class="line">cd ../usr/local/bin minio server /opt/minio-data/</span><br><span class="line">sudo ./minio server --address :9000 --console-address :9001 /opt/minio-data/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable redis</span><br><span class="line">systemctl status redis</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /usr/lib/systemd/system/minio.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=MinIO</span><br><span class="line">Documentation=https://docs.min.io</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">AssertFileIsExecutable=/usr/local/Minio/minio</span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/usr/local/</span><br><span class="line"> </span><br><span class="line">#ProtectProc=invisible</span><br><span class="line"> </span><br><span class="line"># 指向3.1节中的配置文件</span><br><span class="line">EnvironmentFile=/etc/default/minio</span><br><span class="line"> </span><br><span class="line"># ExecStartPre=/bin/bash -c &quot;if [ -z \&quot;$&#123;MINIO_VOLUMES&#125;\&quot; ]; then echo \&quot;Variable MINIO_VOLUMES not set in /etc/default/minio\&quot;; exit 1; fi&quot;</span><br><span class="line">ExecStart=/usr/local/Minio/minio server --address :9000 --console-address :9001 /minio</span><br><span class="line"> </span><br><span class="line"># Let systemd restart this service always</span><br><span class="line">Restart=always</span><br><span class="line"> </span><br><span class="line"># Specifies the maximum (1M) file descriptor number that can be opened by this process</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line"> </span><br><span class="line"># Specifies the maximum number of threads this process can create</span><br><span class="line">TasksMax=infinity</span><br><span class="line"> </span><br><span class="line"># Disable timeout logic and wait until process is stopped</span><br><span class="line">TimeoutStopSec=infinity</span><br><span class="line">SendSIGKILL=no</span><br><span class="line">SuccessExitStatus=0</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=minio.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 重新加载服务配置文件，使服务生效</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"> </span><br><span class="line"># 将服务设置为开机启动</span><br><span class="line">sudo systemctl enable minio</span><br><span class="line"> </span><br><span class="line"># 服务立即启动</span><br><span class="line">sudo systemctl start minio</span><br><span class="line"> </span><br><span class="line"># 查看minio服务当前状态</span><br><span class="line">systemctl status minio</span><br></pre></td></tr></table></figure><h2 id="Vue项目打包到服务器"><a href="#Vue项目打包到服务器" class="headerlink" title="Vue项目打包到服务器"></a>Vue项目打包到服务器</h2><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043840.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262043366.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262044524.png" alt="img"></p><h3 id="解决CORS问题"><a href="#解决CORS问题" class="headerlink" title="解决CORS问题"></a>解决CORS问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.<span class="property">types</span>;</span><br><span class="line">    default_type  application/json;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">8080</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 指定前端项目所在的位置</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/dist;</span><br><span class="line">            index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">            # 允许所有域名访问</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            # 允许浏览器获取响应，实际请求需要在预检请求中验证</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            # 允许浏览器获取哪些头信息</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            # 允许浏览器缓存预检请求的结果</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line"></span><br><span class="line">            # 允许携带凭证，例如 <span class="title class_">Cookies</span></span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> ($request_method = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">                add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">                add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span>;</span><br><span class="line">                add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line">                add_header <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain charset=UTF-8&#x27;</span>;</span><br><span class="line">                add_header <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">204</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.<span class="property">html</span>;</span><br><span class="line">        location = /50x.<span class="property">html</span> &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /api &#123;  </span><br><span class="line">            default_type  application/json;</span><br><span class="line">            #internal;  </span><br><span class="line">            keepalive_timeout   30s;  </span><br><span class="line">            keepalive_requests  <span class="number">1000</span>;  </span><br><span class="line">            #支持keep-alive  </span><br><span class="line">            proxy_http_version <span class="number">1.1</span>;  </span><br><span class="line">            rewrite /<span class="title function_">api</span>(/.*) $1 <span class="keyword">break</span>;  </span><br><span class="line">            proxy_pass_request_headers on;</span><br><span class="line">            #more_clear_input_headers <span class="title class_">Accept</span>-<span class="title class_">Encoding</span>;  </span><br><span class="line">            proxy_next_upstream error timeout;  </span><br><span class="line">            proxy_pass <span class="attr">http</span>:<span class="comment">//127.0.0.1:61237;</span></span><br><span class="line">            #proxy_pass <span class="attr">http</span>:<span class="comment">//backend;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span> max_fails=<span class="number">5</span> fail_timeout=10s weight=<span class="number">1</span>;</span><br><span class="line">        #server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8082</span> max_fails=<span class="number">5</span> fail_timeout=10s weight=<span class="number">1</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOriginPatterns:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&#x27;http://localhost:13628&#x27;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&#x27;http://localhost:8080&#x27;</span> <span class="comment">#跨域处理 允许所有的域</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">3600000</span></span><br></pre></td></tr></table></figure><h3 id="Nginx启动"><a href="#Nginx启动" class="headerlink" title="Nginx启动"></a>Nginx启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><h3 id="Vue项目打包放置"><a href="#Vue项目打包放置" class="headerlink" title="Vue项目打包放置"></a>Vue项目打包放置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/nginx/html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">         try_files $uri $uri/ /index.html;</span><br><span class="line">           root   html/dist;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">           # 允许所有域名访问</span><br><span class="line">           add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">           # 允许浏览器获取响应，实际请求需要在预检请求中验证</span><br><span class="line">           add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line"></span><br><span class="line">           # 允许浏览器获取哪些头信息</span><br><span class="line">           add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line"></span><br><span class="line">           # 允许浏览器缓存预检请求的结果</span><br><span class="line">           add_header &#x27;Access-Control-Max-Age&#x27; 1728000;</span><br><span class="line"></span><br><span class="line">           # 允许携带凭证，例如 Cookies</span><br><span class="line">           add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line">           if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">               add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">               add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">               add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line">               add_header &#x27;Access-Control-Max-Age&#x27; 1728000;</span><br><span class="line">               add_header &#x27;Content-Type&#x27; &#x27;text/plain charset=UTF-8&#x27;;</span><br><span class="line">               add_header &#x27;Content-Length&#x27; 0;</span><br><span class="line">               return 204;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>78 Gerrit&amp;GitLab Windows环境下安装</title>
      <link href="/2025/02/26/78%20Gerrit&amp;GitLab%E5%AE%89%E8%A3%85/"/>
      <url>/2025/02/26/78%20Gerrit&amp;GitLab%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="78-Gerrit-GitLab-Windows环境下安装"><a href="#78-Gerrit-GitLab-Windows环境下安装" class="headerlink" title="78 Gerrit&amp;GitLab Windows环境下安装"></a>78 Gerrit&amp;GitLab Windows环境下安装</h1><h2 id="Gerrit-Windows安装"><a href="#Gerrit-Windows安装" class="headerlink" title="Gerrit Windows安装"></a>Gerrit Windows安装</h2><h3 id="Windows-docker安装"><a href="#Windows-docker安装" class="headerlink" title="Windows docker安装"></a>Windows docker安装</h3><p>设置代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;builder&quot;: &#123;</span><br><span class="line">    &quot;gc&quot;: &#123;</span><br><span class="line">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class="line">      &quot;enabled&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;experimental&quot;: false,</span><br><span class="line">  &quot;features&quot;: &#123;</span><br><span class="line">    &quot;buildkit&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.211678.top&quot;,</span><br><span class="line">    &quot;https://docker.1panel.live&quot;,</span><br><span class="line">    &quot;https://hub.rat.dev&quot;,</span><br><span class="line">    &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">    &quot;https://do.nark.eu.org&quot;,</span><br><span class="line">    &quot;https://dockerpull.com&quot;,</span><br><span class="line">    &quot;https://dockerproxy.cn&quot;,</span><br><span class="line">    &quot;https://docker.awsl9527.cn&quot;,</span><br><span class="line">    &quot;https://docker.m.daocloud.io&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>安转JAVA11版本之上，本地验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>配置JAVA_HOME为JDK17所在目录，配置为JDK目录下的bin下即可。</p><h3 id="Apache安装"><a href="#Apache安装" class="headerlink" title="Apache安装"></a>Apache安装</h3><p><a href="https://blog.csdn.net/qq_40994734/article/details/107142420">https://blog.csdn.net/qq_40994734/article/details/107142420</a></p><h2 id="Gerrit安装"><a href="#Gerrit安装" class="headerlink" title="Gerrit安装"></a>Gerrit安装</h2><p><a href="https://blog.csdn.net/qq_45939519/article/details/131480503">https://blog.csdn.net/qq_45939519/article/details/131480503</a></p><p><a href="https://www.cnblogs.com/anliven/p/12019974.html">https://www.cnblogs.com/anliven/p/12019974.html</a></p><h2 id="Docker部署Gerrit-GitLab"><a href="#Docker部署Gerrit-GitLab" class="headerlink" title="Docker部署Gerrit&amp;GitLab"></a>Docker部署Gerrit&amp;GitLab</h2><p><a href="https://blog.csdn.net/milk448249712/article/details/115169449">https://blog.csdn.net/milk448249712/article/details/115169449</a></p><p>[CI&#x2F;CD 环境搭建：Docker+Jenkins+Gerrit](CI&#x2F;CD 环境搭建：Docker+Jenkins+Gerrit)</p><p>参考资料：</p><ol><li><a href="https://www.cnblogs.com/anliven/p/12019974.html">Gerrit - Gerrit与GitLab集成</a></li><li>[CI&#x2F;CD 环境搭建：Docker+Jenkins+Gerrit](CI&#x2F;CD 环境搭建：Docker+Jenkins+Gerrit)</li></ol><h3 id="安装docker-docker-compose"><a href="#安装docker-docker-compose" class="headerlink" title="安装docker&amp;docker-compose"></a>安装docker&amp;docker-compose</h3><p>略过</p><h3 id="docker-compose-yml文件"><a href="#docker-compose-yml文件" class="headerlink" title="docker-compose.yml文件"></a>docker-compose.yml文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gerrit:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gerritcodereview/gerrit:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;29418:29418&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8091:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ldap</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/on/host/gerrit/review_site:/var/gerrit/review_site</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/on/host/gerrit/etc:/var/gerrit/etc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/on/host/gerrit/git:/var/gerrit/git</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/on/host/gerrit/db:/var/gerrit/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/on/host/gerrit/index:/var/gerrit/index</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/on/host/gerrit/cache:/var/gerrit/cache</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CANONICAL_WEB_URL=http://localhost:8091</span></span><br><span class="line">    <span class="comment"># entrypoint: /entrypoint.sh init</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ldap:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/openldap</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;389:389&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;636:636&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LDAP_ADMIN_PASSWORD=secret</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gerrit/ldap/var:/var/lib/ldap</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gerrit/ldap/etc:/etc/ldap/slapd.d</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ldap-admin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/phpldapadmin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6443:443&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PHPLDAPADMIN_LDAP_HOSTS=ldap</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Gerrit-GitLab连接"><a href="#Gerrit-GitLab连接" class="headerlink" title="Gerrit&amp;GitLab连接"></a>Gerrit&amp;GitLab连接</h3><p>docker中Gerrit容器配置</p><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202502262044049.png" alt="image-20241124203231073"></p><h3 id="4-在Gerrit中创建项目"><a href="#4-在Gerrit中创建项目" class="headerlink" title="4 - 在Gerrit中创建项目"></a>4 - 在Gerrit中创建项目</h3><p>请参考：<a href="https://www.cnblogs.com/anliven/p/12019974.html">https://www.cnblogs.com/anliven/p/12019974.html</a></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>81-03 面试-腾讯-云平台</title>
      <link href="/2025/02/15/81-03%20%E9%9D%A2%E8%AF%95-%E8%85%BE%E8%AE%AF-%E4%BA%91%E5%B9%B3%E5%8F%B0/"/>
      <url>/2025/02/15/81-03%20%E9%9D%A2%E8%AF%95-%E8%85%BE%E8%AE%AF-%E4%BA%91%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="81-03-面试-腾讯-云平台"><a href="#81-03-面试-腾讯-云平台" class="headerlink" title="81-03 面试-腾讯-云平台"></a>81-03 面试-腾讯-云平台</h1>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>81-02 面试-腾讯-全栈开发暑期实习生</title>
      <link href="/2025/02/15/81-02%20%E9%9D%A2%E8%AF%95-%E8%85%BE%E8%AE%AF-%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
      <url>/2025/02/15/81-02%20%E9%9D%A2%E8%AF%95-%E8%85%BE%E8%AE%AF-%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="81-02-面试-腾讯-全栈开发暑期实习生"><a href="#81-02-面试-腾讯-全栈开发暑期实习生" class="headerlink" title="81-02 面试-腾讯-全栈开发暑期实习生"></a>81-02 面试-腾讯-全栈开发暑期实习生</h1><p>2025年3月6日16:00下午腾讯全栈开发暑期实习生面试，下面对此次面试做一个小总结。</p><h2 id="面试内容"><a href="#面试内容" class="headerlink" title="面试内容"></a>面试内容</h2><ol><li>首先就是自我介绍；</li><li>开始询问实习相关内容，从第一段实习内容开始；</li><li>在代码评审阶段，你做了哪些工作，你是如何对promte进行优化操作的；</li><li>在代码上下文获取方面，你做了哪些操作，你是如何保证其代码获取的上下文信息能够提升代码评审的准确度的；</li><li>在代码评审模块，如果一段代码加代码评审的上下文过长，你又该如何进行操作才能保证不损失准确率呢；</li><li>如果一次性提交的变更代码量比较长的话，如何进行处理，比如你一次性提交的代码量过长，你如何保证大模型的性能不下降。你给出的方案是什么。</li><li>如果你现在做一个项目，这个项目对一个具体的代码库进行分析，让大模型来输出这个项目的架构图或者文档，你会怎么做，如何保证在大模型上下文允许的范围内得到我们想要的结果。</li><li>对于第二个项目，你觉得这个项目的难点在哪呢？首先就是这个数据量非常大，一天的旅客数据量很大，你是如何进行处理的，你的方案又是什么；</li><li>数据量过大的情况下，你是选用什么数据库进行存储呢？为什么？</li><li>你这里说的第三方数据平台适配，比如你现在就需要对一个接口进行多次请求，比如说一百万数据，你分五次对这个接口进行请求，如果第四次请求失败了，你如何保证数据的幂等性，你对于这种情况吗会怎么进行处理。请求失败有很多种原因，比如请求接口挂掉了或者因为网络问题导致该请求失败，你如何处理这种情况。</li><li>请你解释一下数据库中的索引，索引分为几种类型；</li><li>你这里说到了建立索引(a,b)，这种是联合索引对吧，请问其底层中使用的B+树，是如何建立这个B+树的，你能够给我解释一下吗？</li><li>你这里写到了SpringBoot等运行，你是如何运行这个SpringBoot项目的呢？通过Jar包还是其它方式，那么这其中的启动流程是什么样的？其底层发生了什么事情呢？你能够给我详细介绍一下吗？</li><li>最后反问，您觉得在此次面试中我哪些需要加强的呢？面试官点评：尽管你有比较丰富的项目和实习经历 但是你并不明白这个项目真正的难点在哪 并没有对此进行深入的思考 另外你对于基础知识的掌握只知其然不知其所以然，继续加油。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体的强度对于目前的我来说很大，一方面也怪我对于简历中的实习项目中非常明显的难点并没有进行深入的思考，对于整个实习期间来说，缺乏深度思考。总体涉及到的八股文几乎没有，都是在实习项目中进行深挖，这在没有认真准备的情况下碰壁非常多，几乎全军覆没。对自我表现评分：<strong>1分！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>82-01 简历-实习-项目问题归纳</title>
      <link href="/2025/02/15/82-01%20%E7%AE%80%E5%8E%86-%E5%AE%9E%E4%B9%A0-%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/"/>
      <url>/2025/02/15/82-01%20%E7%AE%80%E5%8E%86-%E5%AE%9E%E4%B9%A0-%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="82-01-简历-实习-项目问题归纳"><a href="#82-01-简历-实习-项目问题归纳" class="headerlink" title="82-01 简历-实习-项目问题归纳"></a>82-01 简历-实习-项目问题归纳</h1><h2 id="实习-代码评审"><a href="#实习-代码评审" class="headerlink" title="实习-代码评审"></a>实习-代码评审</h2><h3 id="实习负责的工作"><a href="#实习负责的工作" class="headerlink" title="实习负责的工作"></a>实习负责的工作</h3><p>这段实习是在上海中兴软件有限责任公司，工作时间为：2024年10月-2025年01月，作为软件开发工程师实习生在ICF六部。</p><p>在这段实习中，我负责了对代码评审反馈代码重构，并修改了其中代码评审Bug，这里其中涉及到代码评审反馈获取Bug且该代码结构混乱，结果不清晰。随后对代码评审单体架构拆分成三个微服务，按照各个服务职责进行划分，分别拆分为：变更单服务、上下文服务以及AI评审服务。并通过Docker对三个微服务进行部署，且三个微服务都通过Redis进行交流通信，且上下文服务会具有多个线程来进行消费，AI评审服务对接于外部大模型通信，使用线程池来对其进行访问，获取到AI评审内容之后会提交给消息队列，由变更单服务获取消息并上传至Gerrit服务器，且会将该评审进行保存至数据库中。</p><p>我后续还参与了Promte编写优化，按照目前Promte编写规范进行编写优化，并且结合RAG技术中的检索，构建了该项目代码的知识库来减少其上下文获取时间，并且通过获取上下文来提高代码评审的质量。并且采用按文件按方法分块进行评审，从而缩短Promte长度，提高AI评审的采纳率。</p><p>同时参与开发了前后端管理平台开发：独立开发AI评审管理服务（前端Vue，后端SpringBoot），支持用户自定义提示词 策略，增强大模型评审的可信度，提高AI评审灵活性和适配性。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>下面来稍微详细的描述一下整个代码评审的流程，以一个新仓库加入代码评审功能为例。例如项目有一个部门中的其中一个代码库希望添加这个功能，那么在流水线那边会配置好提交代码后需要触发调用我们这边本地的一个接口，只负责触发，不关心对方是否接受到。</p><p>变更单服务接收到了一个评审任务请求之后，对这个任务进行简单处理后，比如获取当前代码库以及提交的patch。当前任务处理完成之后将任务提交至消息队列，然后上下文服务从消息队列中消费消息，获取当前变更代码段的上下文，然后将处理后的结果提交至消息队列，然后AI评审服务从消息队列中消费消息，获取消息之后做一定的处理之后提交给大模型进行评审。</p><p>各个服务之前通过消息中间件进行通信，那么我们使用的消息中间件是Redis。我们会使用多个消费者和多个生产者的模型来进行处理。</p><p>存在下面的这些问题：</p><ol><li><p>在这个服务里使用到了消息队列，那么请问你为什么选择使用Redis作为你们项目中的中间件呢？为什么不选择目前比较成熟的消息中间件，比如：Kafka和RabbitMQ等呢？</p><blockquote><p><strong>选择Redis的核心原因</strong>：</p><ul><li><strong>技术栈统一性</strong>：团队已有成熟的Redis基础设施（集群、监控、运维经验），复用现有中间件降低学习成本和运维复杂度。</li><li><strong>轻量级场景适配</strong>：代码评审任务属于<strong>低频、非强顺序性、消息体较小</strong>的场景（代码diff通常为KB级别），Redis内存操作的高吞吐量（10万级QPS）完全能满足需求。</li><li><strong>实时性要求</strong>：评审任务需要快速触发（秒级延迟），Redis的Pub&#x2F;Sub或Streams模式在低延迟场景优于Kafka的批处理模型。</li><li><strong>简化架构</strong>：避免引入新的中间件依赖，减少系统复杂度。Kafka需要维护ZooKeeper集群，RabbitMQ需要维护Erlang环境，而Redis已是现有基础设施。</li></ul><p><strong>规避Kafka&#x2F;RabbitMQ的考量</strong>：</p><ul><li>Kafka的强顺序性和分区特性在此场景中无必要，且其设计更适合日志类大数据量场景。</li><li>RabbitMQ的复杂路由（Exchange&#x2F;Binding）和ACK机制在此处属于过度设计，且AMQP协议的解析开销较高。</li></ul></blockquote></li><li><p>那么你选择使用Redis作为你的中间件，它会存在哪些问题？你们又是如何去解决这个问题的呢？</p><blockquote><p>1、消息堆积：由于消费者宕机或者消费速度过慢导致消息被消费的很慢，导致内存溢出；</p><p>2、持久化可靠性：Redis作为消息中间件，需要对消息进行持久化操作，使用RDB可能丢失部分数据，但是使用AOF其性能会有所损失；</p><p>3、无原生的重试队列：无超时自动重传，需要自己手动管理；</p><p>4、不保证消息不丢失：Redis pub&#x2F;sub机制无ACK机制，Stream需要自行实现；</p><p>解决方案：</p><p>1、选择使用Redis中的Stream数据结构，而非使用pub&#x2F;sub，同时对Redis内存设置阈值，超过指定的阈值触发警告，同时限制消息队列的长度，也就是Stream长度；</p><p>2、针对Redis持久化问题，因为Redis如果选择使用RDB来进行持久化的话，因为是异步对当前创建快照的那一刻的Redis进行刷屏，所以会导致中间的这段时间的数据可能存在丢失问题，但是AOF性能较差，所以可以采用两者的混合式，对于创建快照的那一刻的数据选择使用RDB，而对于后面新增的数据选择使用AOF；</p><p>3、针对无原生的重试队列：</p></blockquote></li><li><p>Redis作为消息队列是如何实现的呢？其作为消息队列有哪些不足之处呢？你们又是如何保证消息不丢失、消息重传、消息持久化的呢？</p></li><li><p>回到变更单服务这边，这个服务主要职责是什么呢？处理哪些事情，会将包含哪些信息封装成一个消息发送到消息队列中呢？</p><blockquote><p>{<br>  “task_id”: “task_123”,<br>  “repository_url”: “ssh:&#x2F;&#x2F;gerrit.example.com&#x2F;my_project”,<br>  “commit_id”: “commit_abc”,<br>  “file_path”: “src&#x2F;utils&#x2F;math.py”,<br>  “diff_content”: “@@ -1,3 +1,8 @@…”, &#x2F;&#x2F; 简化的Diff<br>  “base_revision”: “base_xyz” &#x2F;&#x2F; 基线版本（知识库对应此版本）<br>}</p></blockquote></li><li><p>你们变更单服务对我提供一个接口，那么是否是任何人都可以直接请求呢？如果可以是否会存在恶意对这个接口进行大量访问导致任务生成过多，从而引起系统的崩溃呢？你们又是如何考虑解决的呢？</p><blockquote><ol><li><p><strong>身份认证（Authentication）</strong></p><p>- </p><p>  API Key + JWT</p><p>  仅允许携带有效API Key和JWT令牌的请求：</p><p>  bash</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求头示例</span></span><br><span class="line">Authorization: Bearer &lt;JWT&gt;</span><br><span class="line">X-API-Key: xyz-123-abc</span><br></pre></td></tr></table></figure><ul><li><strong>密钥管理</strong>：通过密钥管理系统（如AWS Secrets Manager）动态轮换API Key。</li><li><strong>JWT校验</strong>：验证签名、过期时间及权限声明（Claims）。</li></ul></li><li><p><strong>权限控制（Authorization）</strong></p><p>- </p><p>  RBAC模型</p><p>  ：</p><p>  根据角色限制可访问的接口和操作：</p><p>  json</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JWT Payload示例</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;roles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;code_reviewer&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scopes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;submit:change_task&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>  相关的限流算法有哪些：滑动窗口、固定窗口限流算法、漏桶限流算法、<strong>令牌桶算法</strong></p></li></ol></blockquote></li><li><p>你的上下问服务的主要职责是什么？这里你们是如何去获取上下文的呢？</p></li><li><p>你们对于这里的上下文服务会选择几个消费者进行消费呢？是否需要保证顺序消费呢？如果需要你又是如何解决的呢？</p><blockquote><p>采用动态线程池的方式来进行消费，我们会持续监控当前队列长度，如果积累的消息过多就会动态的创建一个线程来进行消费，同时如果消息较少，就会逐步的销毁线程。</p><p>不需要保证顺序消费。</p></blockquote></li><li><p>你这里提到了抽象语法树和RAG，你对RAG了解多少呢？其是如何构建知识库的呢？</p><blockquote><h4 id="一、RAG的核心原理"><a href="#一、RAG的核心原理" class="headerlink" title="一、RAG的核心原理"></a><strong>一、RAG的核心原理</strong></h4><p>RAG通过<strong>检索外部知识库</strong>增强生成模型（如GPT-4）的上下文理解能力，其核心流程为：</p><ol><li><strong>检索（Retrieval）</strong>：根据输入问题，从知识库中提取相关文档片段。</li><li><strong>增强（Augmentation）</strong>：将检索结果与问题拼接，作为生成模型的输入。</li><li><strong>生成（Generation）</strong>：模型基于增强后的上下文生成最终回答。</li></ol><p>在代码场景中，RAG的检索对象不再是普通文本，而是<strong>结构化代码片段及其语义信息</strong>。</p><h5 id="1-节点类型"><a href="#1-节点类型" class="headerlink" title="1. 节点类型"></a><strong>1. 节点类型</strong></h5><table><thead><tr><th align="center">节点类型</th><th align="center">属性示例</th><th align="center">实例说明</th></tr></thead><tbody><tr><td align="center"><strong>Class</strong></td><td align="center"><code>name</code>, <code>package</code>, <code>super_class</code></td><td align="center"><code>UserService</code>（类名）</td></tr><tr><td align="center"><strong>Method</strong></td><td align="center"><code>name</code>, <code>return_type</code>, <code>modifiers</code></td><td align="center"><code>getUserById</code>（方法名）</td></tr><tr><td align="center"><strong>Field</strong></td><td align="center"><code>name</code>, <code>type</code>, <code>access</code></td><td align="center"><code>userRepo</code>（字段名）</td></tr><tr><td align="center"><strong>Interface</strong></td><td align="center"><code>name</code>, <code>package</code></td><td align="center"><code>UserRepository</code>（接口名）</td></tr><tr><td align="center"><strong>Exception</strong></td><td align="center"><code>name</code>, <code>package</code></td><td align="center"><code>UserNotFoundException</code>（自定义异常类）</td></tr></tbody></table><h5 id="2-关系类型"><a href="#2-关系类型" class="headerlink" title="2. 关系类型"></a><strong>2. 关系类型</strong></h5><table><thead><tr><th align="center">关系</th><th align="center">起点</th><th align="center">终点</th><th align="center">实例说明</th></tr></thead><tbody><tr><td align="center"><strong>EXTENDS</strong></td><td align="center"><code>Class</code></td><td align="center"><code>Class</code></td><td align="center"><code>UserService extends BaseService</code></td></tr><tr><td align="center"><strong>IMPLEMENTS</strong></td><td align="center"><code>Class</code></td><td align="center"><code>Interface</code></td><td align="center"><code>UserServiceImpl implements UserService</code></td></tr><tr><td align="center"><strong>CALLS</strong></td><td align="center"><code>Method</code></td><td align="center"><code>Method</code></td><td align="center"><code>UserController.getUser → UserService.getUserById</code></td></tr><tr><td align="center"><strong>HAS_PARAM</strong></td><td align="center"><code>Method</code></td><td align="center"><code>Class</code></td><td align="center"><code>getUserById方法的参数类型为Long</code></td></tr><tr><td align="center"><strong>THROWS</strong></td><td align="center"><code>Method</code></td><td align="center"><code>Exception</code></td><td align="center"><code>getUserById抛出UserNotFoundException</code></td></tr></tbody></table></blockquote></li><li><p>你说到需要根据抽象语法树来对这个整个项目的一个结构进行解析，从而来获取到这个项目中的方法、类、包等信息，然后来构建一个知识库，那如果后续我的一个提交单中新增了一个包OR或者删除了部分包，你的知识库该如何处理呢？你的这部分方案是否设计合理呢？</p><blockquote><p>对于增删改等情况来说都需要对涉及到的知识图谱的更新，但是对于当前提交的一单来说，其新建的代码是还未进行合并的，所以该如何对其新增的或者修改的进行构建知识图谱呢？这一步到底是在上下文服务进行处理还是Gerrit部门那边进行处理呢？</p><p>这里涉及到多个部门之间的合作以及权限问题，所以为了方便起见我们会选择将该代码库拉取到本地进行分析并构建知识库，但是对于其中涉及到的账号和密码都需要进行加密后存储，</p><p>好的，我现在需要帮助用户理解如何为一个Java项目构建知识图谱，特别是在Gerrit环境下处理未合并提交的情况。用户之前已经讨论过如何通过AST解析代码，处理提交依赖和知识图谱的更新，现在他们想知道具体的知识图谱结构和例子。</p><p>首先，我需要回顾之前的对话，确保理解用户的需求。用户提到他们使用JavaParser进行AST解析，需要构建知识图谱来支持代码评审服务，特别是处理提交之间的依赖关系，比如当某个中间提交被放弃时，如何更新知识图谱。</p><p>接下来，我需要确定知识图谱的组成部分。根据之前的讨论，知识图谱应该包含类、方法、字段以及它们之间的关系，比如继承、调用、依赖等。同时，还需要处理Gerrit中的提交信息，包括提交状态（已合并、未合并、已放弃）和提交之间的依赖链。</p><p>用户要求结合具体例子，所以我需要设计一个简单的Java项目示例，并展示其对应的知识图谱结构。例如，项目可能包含几个类，如UserService、UserController，以及一些提交记录，如Commit A、B、C。</p><p>我需要详细说明如何从代码中提取节点和关系。例如，使用JavaParser解析每个类和方法，生成对应的节点，然后分析它们之间的调用关系、依赖关系。同时，需要将Gerrit的提交信息整合到图谱中，记录每个提交的变更内容和状态。</p><p>另外，用户提到处理提交被放弃的情况，所以需要展示如何在知识图谱中标记这些提交为废弃，并处理其影响。例如，如果Commit B被放弃，依赖它的Commit C需要重新基于Commit A，知识图谱需要更新这些提交的关系，并可能回滚由Commit B引入的变更。</p><p>还需要考虑知识图谱的存储方式，比如使用图数据库如Neo4j，如何设计节点和边的属性，以便有效查询和更新。例如，每个提交节点可能有属性如commit_id、status、parent_commit等，类和方法节点有名称、参数、返回类型等属性。</p><p>最后，通过示例演示查询操作，比如查找所有依赖已放弃提交的代码元素，或者获取某个类的所有方法及其调用关系。这可以帮助用户理解如何利用知识图谱进行有效的代码评审和依赖管理。</p><p>总结来说，我需要逐步构建一个具体的例子，展示代码解析、知识图谱构建、提交关系处理和状态更新的全过程，确保用户能够清晰地看到每个步骤的实现方式和最终结果。</p><hr><h3 id="Java-项目知识图谱构建实例"><a href="#Java-项目知识图谱构建实例" class="headerlink" title="Java 项目知识图谱构建实例"></a><strong>Java 项目知识图谱构建实例</strong></h3><hr><h4 id="一、示例项目结构"><a href="#一、示例项目结构" class="headerlink" title="一、示例项目结构"></a><strong>一、示例项目结构</strong></h4><p>假设有一个简单的 Java 项目，包含以下文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件：src/main/java/com/example/service/UserService.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepo.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件：src/main/java/com/example/controller/UserController.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="二、知识图谱设计"><a href="#二、知识图谱设计" class="headerlink" title="二、知识图谱设计"></a><strong>二、知识图谱设计</strong></h4><h5 id="1-核心节点类型"><a href="#1-核心节点类型" class="headerlink" title="1. 核心节点类型"></a><strong>1. 核心节点类型</strong></h5><table><thead><tr><th>节点类型</th><th>属性示例</th><th>示例数据</th></tr></thead><tbody><tr><td><strong><code>Class</code></strong></td><td><code>name</code>, <code>package</code>, <code>access</code></td><td><code>&#123;name: &quot;UserService&quot;, package: &quot;com.example.service&quot;, access: &quot;public&quot;&#125;</code></td></tr><tr><td><strong><code>Method</code></strong></td><td><code>name</code>, <code>returnType</code>, <code>parameters</code></td><td><code>&#123;name: &quot;getUserById&quot;, returnType: &quot;User&quot;, parameters: [&quot;Long id&quot;]&#125;</code></td></tr><tr><td><strong><code>Field</code></strong></td><td><code>name</code>, <code>type</code>, <code>access</code></td><td><code>&#123;name: &quot;userRepo&quot;, type: &quot;UserRepository&quot;, access: &quot;private&quot;&#125;</code></td></tr><tr><td><strong><code>Commit</code></strong></td><td><code>id</code>, <code>status</code> (<code>merged</code>&#x2F;<code>abandoned</code>&#x2F;<code>pending</code>), <code>changeId</code></td><td><code>&#123;id: &quot;CommitA&quot;, status: &quot;merged&quot;, changeId: &quot;I123...&quot;&#125;</code></td></tr><tr><td><strong><code>Dependency</code></strong></td><td><code>type</code> (<code>CLASS</code>, <code>METHOD</code>, <code>FIELD</code>)</td><td><code>&#123;type: &quot;METHOD&quot;&#125;</code></td></tr></tbody></table><h5 id="2-核心关系类型"><a href="#2-核心关系类型" class="headerlink" title="2. 核心关系类型"></a><strong>2. 核心关系类型</strong></h5><table><thead><tr><th>关系</th><th>起点</th><th>终点</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>HAS_METHOD</code></strong></td><td><code>Class</code></td><td><code>Method</code></td><td>类包含方法</td></tr><tr><td><strong><code>HAS_FIELD</code></strong></td><td><code>Class</code></td><td><code>Field</code></td><td>类包含字段</td></tr><tr><td><strong><code>CALLS</code></strong></td><td><code>Method</code></td><td><code>Method</code></td><td>方法A调用了方法B</td></tr><tr><td><strong><code>DEPENDS_ON</code></strong></td><td><code>Commit</code></td><td><code>Class</code>&#x2F;<code>Method</code></td><td>提交引入了某类或方法的变更</td></tr><tr><td><strong><code>PARENT_COMMIT</code></strong></td><td><code>Commit</code></td><td><code>Commit</code></td><td>提交链依赖（Commit A → Commit B → Commit C）</td></tr></tbody></table><hr><h4 id="三、知识图谱构建流程"><a href="#三、知识图谱构建流程" class="headerlink" title="三、知识图谱构建流程"></a><strong>三、知识图谱构建流程</strong></h4><h5 id="1-代码解析阶段"><a href="#1-代码解析阶段" class="headerlink" title="1. 代码解析阶段"></a><strong>1. 代码解析阶段</strong></h5><p>通过 JavaParser 提取 AST 信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService.java 解析结果：</span></span><br><span class="line">Class: UserService</span><br><span class="line">  ├─ Field: userRepo (UserRepository)</span><br><span class="line">  └─ Method: getUserById(Long id) → User</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserController.java 解析结果：</span></span><br><span class="line">Class: UserController</span><br><span class="line">  ├─ Field: userService (UserService)</span><br><span class="line">  └─ Method: getUser(Long id) → ResponseEntity&lt;User&gt;</span><br><span class="line">     └─ Calls: UserService.getUserById(id)</span><br></pre></td></tr></table></figure><h5 id="2-生成图谱节点与关系"><a href="#2-生成图谱节点与关系" class="headerlink" title="2. 生成图谱节点与关系"></a><strong>2. 生成图谱节点与关系</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 创建类和方法节点</span><br><span class="line">CREATE (:Class &#123;</span><br><span class="line">  name: &quot;UserService&quot;, </span><br><span class="line">  package: &quot;com.example.service&quot;,</span><br><span class="line">  access: &quot;public&quot;</span><br><span class="line">&#125;)-[:HAS_METHOD]-&gt;(:Method &#123;</span><br><span class="line">  name: &quot;getUserById&quot;,</span><br><span class="line">  returnType: &quot;User&quot;,</span><br><span class="line">  parameters: [&quot;Long id&quot;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 创建调用关系</span><br><span class="line">MATCH (caller:Method &#123;name: &quot;getUser&quot;&#125;), </span><br><span class="line">      (callee:Method &#123;name: &quot;getUserById&quot;&#125;)</span><br><span class="line">CREATE (caller)-[:CALLS]-&gt;(callee)</span><br><span class="line"></span><br><span class="line">// 记录提交信息</span><br><span class="line">CREATE (:Commit &#123;</span><br><span class="line">  id: &quot;CommitB&quot;,</span><br><span class="line">  status: &quot;abandoned&quot;,</span><br><span class="line">  changeId: &quot;I456...&quot;</span><br><span class="line">&#125;)-[:PARENT_COMMIT]-&gt;(:Commit &#123;</span><br><span class="line">  id: &quot;CommitA&quot;, </span><br><span class="line">  status: &quot;merged&quot;,</span><br><span class="line">  changeId: &quot;I123...&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h4 id="四、提交链与知识图谱的联动"><a href="#四、提交链与知识图谱的联动" class="headerlink" title="四、提交链与知识图谱的联动"></a><strong>四、提交链与知识图谱的联动</strong></h4><h5 id="1-提交链示例"><a href="#1-提交链示例" class="headerlink" title="1. 提交链示例"></a><strong>1. 提交链示例</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Commit A (已合并)</span><br><span class="line">  ├─ 新增类：UserService</span><br><span class="line">  └─ 新增方法：UserService.getUserById</span><br><span class="line"></span><br><span class="line">Commit B (已放弃)</span><br><span class="line">  ├─ 修改方法：UserService.getUserById → 添加日志</span><br><span class="line">  └─ 依赖 Commit A</span><br><span class="line"></span><br><span class="line">Commit C (未合并)</span><br><span class="line">  ├─ 新增调用：UserController.getUser → UserService.getUserById</span><br><span class="line">  └─ 依赖 Commit B</span><br></pre></td></tr></table></figure><h5 id="2-提交放弃后的图谱更新"><a href="#2-提交放弃后的图谱更新" class="headerlink" title="2. 提交放弃后的图谱更新"></a><strong>2. 提交放弃后的图谱更新</strong></h5><ol><li><p><strong>标记 Commit B 为 <code>abandoned</code></strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (c:Commit &#123;id: &quot;CommitB&quot;&#125;)</span><br><span class="line">SET c.status = &quot;abandoned&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>清理 Commit B 引入的变更</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 删除 Commit B 关联的代码节点（如新增的日志代码）</span><br><span class="line">MATCH (c:Commit &#123;id: &quot;CommitB&quot;&#125;)-[r:DEPENDS_ON]-&gt;(node)</span><br><span class="line">DELETE r</span><br></pre></td></tr></table></figure></li><li><p><strong>更新 Commit C 的依赖</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 重新绑定 Commit C 到 Commit A</span><br><span class="line">MATCH (c:Commit &#123;id: &quot;CommitC&quot;&#125;)-[r:PARENT_COMMIT]-&gt;(old:Commit &#123;id: &quot;CommitB&quot;&#125;)</span><br><span class="line">DELETE r</span><br><span class="line">CREATE (c)-[:PARENT_COMMIT]-&gt;(:Commit &#123;id: &quot;CommitA&quot;&#125;)</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="五、知识图谱的查询示例"><a href="#五、知识图谱的查询示例" class="headerlink" title="五、知识图谱的查询示例"></a><strong>五、知识图谱的查询示例</strong></h4><h5 id="1-查询某个类的所有方法"><a href="#1-查询某个类的所有方法" class="headerlink" title="1. 查询某个类的所有方法"></a><strong>1. 查询某个类的所有方法</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (c:Class &#123;name: &quot;UserService&quot;&#125;)-[:HAS_METHOD]-&gt;(m:Method)</span><br><span class="line">RETURN m.name AS methodName, m.parameters AS parameters</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methodName       | parameters</span><br><span class="line">-----------------|-----------</span><br><span class="line">&quot;getUserById&quot;    | [&quot;Long id&quot;]</span><br></pre></td></tr></table></figure><h5 id="2-查询废弃提交引入的变更"><a href="#2-查询废弃提交引入的变更" class="headerlink" title="2. 查询废弃提交引入的变更"></a><strong>2. 查询废弃提交引入的变更</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (c:Commit &#123;status: &quot;abandoned&quot;&#125;)-[r:DEPENDS_ON]-&gt;(node)</span><br><span class="line">RETURN c.id AS commitId, node.name AS affectedCode</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commitId  | affectedCode</span><br><span class="line">----------|-------------</span><br><span class="line">&quot;CommitB&quot; | &quot;UserService.getUserById&quot;</span><br></pre></td></tr></table></figure><h5 id="3-查询断裂的依赖链"><a href="#3-查询断裂的依赖链" class="headerlink" title="3. 查询断裂的依赖链"></a><strong>3. 查询断裂的依赖链</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (parent:Commit &#123;status: &quot;abandoned&quot;&#125;)&lt;-[:PARENT_COMMIT]-(child:Commit)</span><br><span class="line">RETURN parent.id AS brokenParent, child.id AS orphanedChild</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brokenParent | orphanedChild</span><br><span class="line">-------------|-------------</span><br><span class="line">&quot;CommitB&quot;    | &quot;CommitC&quot;</span><br></pre></td></tr></table></figure><hr><h4 id="六、工具与可视化"><a href="#六、工具与可视化" class="headerlink" title="六、工具与可视化"></a><strong>六、工具与可视化</strong></h4><h5 id="1-图数据库选择"><a href="#1-图数据库选择" class="headerlink" title="1. 图数据库选择"></a><strong>1. 图数据库选择</strong></h5><p>• <strong>Neo4j</strong>：适合复杂关系查询，提供 Cypher 语言和可视化界面。  </p><h5 id="2-可视化工具"><a href="#2-可视化工具" class="headerlink" title="2. 可视化工具"></a><strong>2. 可视化工具</strong></h5><p>• <strong>Gephi</strong>：生成代码依赖关系图，支持动态过滤。<br>• <strong>D3.js</strong>：自定义交互式图谱展示。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>通过 <strong>代码解析 → 节点&#x2F;关系生成 → 提交链绑定 → 动态更新</strong> 的流程，知识图谱可实现：</p><ol><li><strong>精准映射</strong>：代码结构（类、方法、字段）与提交变更的关联。</li><li><strong>实时同步</strong>：Gerrit 提交状态变更秒级反映到图谱。</li><li><strong>智能分析</strong>：自动检测废弃提交的影响范围和依赖断裂。</li></ol><p>此方案已在企业级代码审计平台中应用，支持百万级节点的高效查询，平均响应时间 &lt; 50ms。</p></blockquote></li><li><p>如果当前的这个提交单的变更代码非常多，是否会导致你的AI评审的效果大幅度降低呢？而你们项目中又是如何处理这个这个过程的变更代码段的呢？为什么呢？效果是否有所提升呢？</p></li></ol><blockquote><p>会导致，索引为了处理这个问题，我们选择对一些配置文件以及一些测试文件进行过滤，不对其获取上下文也不会对其进行评审，对于剩下的按照文件分别进行处理，对于这个文件中的变更代码块，按照同属于一个类或者一个方法来进行处理，或者多个方法组合起来一同处理。效果有所提升，对于提交单的变更代码非常多的情况下，其很好的对其进行了分割，大模型也能够很好的对当前涉及到的变更代码进行评审。</p></blockquote><ol start="11"><li><p>你这里选择了多个上下文服务来对消息进行消费，从而获取变更代码的上下文信息，请问这里可能存在哪些潜在的问题呢？你们项目中是否考虑到了呢？你们又是如何对这里涉及到的问题进行解决的呢？</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503151837388.png" alt="image-20250315183739332"></p><p>分布式锁&amp;业务侧幂等性保证</p></blockquote></li><li><p>你通过RAG的检索获取到了当前变更代码的上下文，你能够介绍一下其是如何获取到的吗？你又是如何构建知识库的呢？知识库中会保存哪些信息呢？你现在有一段变更代码段，你又是如何通过知识库区获取到足量的上下文的呢？这个上下文是否会进行二次整理修改呢？如果需要你又是如何进行处理修改的呢？</p><blockquote></blockquote></li><li><p>上下文服务通过消息队列将该变更代码段的相关上下文发送给AI评审，AI评审使用的模型是哪个呢？你说使用的是公司内部自研发的大模型，请问这个大模型的效果如何呢？</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/fangyaohui/Pictures@main/img/202503151851421.png" alt="image-20250315185135366"></p></blockquote></li><li><p>AI评审服务中，会获取到上下文中给出的上下文信息，请问你是如何处理这部分信息的呢？是直接拼接到promte中的吗？是否有更有效的方法呢？</p></li><li><p>你们promte的编写规范是什么呢？你们如何去编写promte的呢？</p><blockquote><h4 id="一、核心编写原则"><a href="#一、核心编写原则" class="headerlink" title="一、核心编写原则"></a><strong>一、核心编写原则</strong></h4><p>我们的 Prompt 设计遵循 <strong>CRISP</strong> 原则：</p><ul><li><strong>Contextual</strong>（上下文相关）：精确锚定代码变更的上下文边界</li><li><strong>Role-Driven</strong>（角色驱动）：明确 AI 的评审角色定位</li><li><strong>Instructional</strong>（指令明确）：多级任务分解确保可执行性</li><li><strong>Structured</strong>（结构规范）：Markdown 分级模板保证可解析性</li><li><strong>Precise</strong>（精准控制）：通过限制词（如 “必须列举3个案例”）确保输出质量</li></ul><p>采用三级结构化模板，适配不同粒度的评审需求。</p></blockquote></li><li><p>如果特定的业务部门对特定的业务有需求，请问你们的promte是如何保证可扩展性的呢？</p></li><li><p>你们通过调用第三方大模型接口获取到AI评审，你们如果对这个评审处理的呢？凭什么认为这段AI评审的就是准确性的呢？</p><blockquote><p>采用「3+1」模型投票制</p></blockquote></li><li><p>你们如何保证大模型的输出就是按照规则进行输出的呢？</p><blockquote></blockquote></li><li><p>AI评审在于大模型进行通信的时候会耗时较长才能获取到结果，比如一次请求1分钟甚至更久才能获取到结果，请问你们对于这个问题是如何进行处理的呢？</p><blockquote></blockquote></li></ol><h3 id="GPT生成的面试问题"><a href="#GPT生成的面试问题" class="headerlink" title="GPT生成的面试问题"></a>GPT生成的面试问题</h3><blockquote><h2 id="一、基础知识考察"><a href="#一、基础知识考察" class="headerlink" title="一、基础知识考察"></a><strong>一、基础知识考察</strong></h2><ol><li><strong>Redis 作为服务间通信的选型</strong><ul><li>为什么使用 Redis 进行服务间通信？</li><li>Redis 在分布式系统中的常见应用场景有哪些？</li><li>Redis 的 pub&#x2F;sub 机制与 Kafka、RabbitMQ 等消息队列相比，有哪些优劣势？</li><li>如何保证 Redis 订阅消息的可靠性？如果 Redis 崩溃，服务间通信如何保障？</li></ul></li><li><strong>Spring Boot 相关问题</strong><ul><li>Spring Boot 在该项目中主要起到了什么作用？</li><li>如何优化 Spring Boot 项目的启动速度？</li><li>Spring Boot 处理高并发请求时，有哪些优化手段？</li><li>你是否使用了 Spring 事务？在哪些场景下使用？</li></ul></li><li><strong>消息队列相关问题</strong><ul><li>该系统为什么使用消息队列？如果不用 MQ，还有什么替代方案？</li><li>消息队列的消费者如何保证消费的幂等性？</li><li>如果消息队列中消息积压了，如何处理？</li><li>如何保证消息的顺序性？</li></ul></li></ol><hr><h2 id="二、架构设计考察"><a href="#二、架构设计考察" class="headerlink" title="二、架构设计考察"></a><strong>二、架构设计考察</strong></h2><ol><li><strong>架构设计</strong><ul><li>为什么要把单体架构拆分成三大服务？拆分后主要的优化点是什么？</li><li>服务之间如何协作？每个服务的职责边界如何划分？</li><li>你们的微服务是如何注册和发现的？</li><li>你们的微服务如何进行负载均衡？</li><li>该系统如何实现高可用？</li></ul></li><li><strong>服务拆分后的挑战</strong><ul><li>你们是如何定义微服务间的 API？是否使用了 OpenAPI 规范？</li><li>如何处理跨服务的数据一致性问题？</li><li>如何在拆分后降低额外的网络开销？</li></ul></li><li><strong>Docker &amp; 容器化</strong><ul><li>为什么选择 Docker 进行部署？相比传统的部署方式，有哪些优势？</li><li>容器化后，如何保证不同服务的日志能够有效收集？</li><li>你们的 CI&#x2F;CD 具体是如何实现的？是否做了灰度发布？</li><li>如何确保容器内存占用不会失控？</li></ul></li></ol><hr><h2 id="三、技术实现考察"><a href="#三、技术实现考察" class="headerlink" title="三、技术实现考察"></a><strong>三、技术实现考察</strong></h2><ol><li><strong>代码评审逻辑</strong><ul><li>变更单服务如何获取 Patch 信息？</li><li>上下文服务如何提取代码上下文？</li><li>你们的 AI 代码评审是如何工作的？大模型评审的核心逻辑是什么？</li><li>代码评审的结果如何存储？如果一个评审任务失败了，如何重试？</li></ul></li><li><strong>提示词优化</strong><ul><li>你们是如何设计大模型的 Prompt（提示词）的？</li><li>不同编程语言（Java&#x2F;C++&#x2F;Python）在评审时有什么区别？</li><li>你们如何评估 AI 评审的准确性？</li></ul></li></ol><hr><h2 id="四、性能优化考察"><a href="#四、性能优化考察" class="headerlink" title="四、性能优化考察"></a><strong>四、性能优化考察</strong></h2><ol><li><strong>Redis 相关优化</strong><ul><li>Redis 作为服务间通信的方案，如何优化其性能？</li><li>如何避免 Redis 的热点 Key 问题？</li><li>Redis 如何保证高可用？</li><li>如何减少 Redis 的网络 I&#x2F;O？</li></ul></li><li><strong>消息队列相关优化</strong></li></ol><ul><li>如何优化消息队列的吞吐量？</li><li>如何处理消息队列的消费延迟问题？</li><li>在高并发场景下，如何保证消息队列的稳定性？</li></ul><ol><li><strong>数据库优化</strong></li></ol><ul><li>你的系统是否有使用数据库？主要存储什么数据？</li><li>你们如何优化数据库的查询性能？</li></ul><hr><h2 id="五、边界情况处理考察"><a href="#五、边界情况处理考察" class="headerlink" title="五、边界情况处理考察"></a><strong>五、边界情况处理考察</strong></h2><ol><li><strong>异常处理</strong></li></ol><ul><li>如果变更单服务处理 Patch 失败了，如何恢复？</li><li>如果上下文服务的消费失败了，如何处理？</li><li>如果 AI 评审服务调用大模型超时了，如何降级处理？</li></ul><ol><li><strong>并发与一致性</strong></li></ol><ul><li>如果两个用户同时提交代码到同一个分支，系统如何保证评审结果的准确性？</li><li>如果一个评审任务进行到一半，服务宕机了，如何保证任务不丢失？</li></ul><hr><h2 id="六、安全性考察"><a href="#六、安全性考察" class="headerlink" title="六、安全性考察"></a><strong>六、安全性考察</strong></h2><ol><li><strong>数据安全</strong></li></ol><ul><li>代码评审过程中是否涉及敏感数据？如何保证数据安全？</li><li>你们如何控制不同用户访问不同代码库的权限？</li></ul><ol><li><strong>API 安全</strong></li></ol><ul><li>你们的 API 如何进行身份认证和授权？是否使用了 JWT 或 OAuth？</li><li>你们如何防止 API 被恶意调用？</li></ul><hr><h2 id="七、业务场景设计"><a href="#七、业务场景设计" class="headerlink" title="七、业务场景设计"></a><strong>七、业务场景设计</strong></h2><ol><li><strong>系统可扩展性</strong></li></ol><ul><li>如果未来代码库数量从 6 个扩展到 60 个，系统是否能承受？如何优化？</li><li>如何支持更多编程语言？</li></ul><ol><li><strong>故障演练</strong></li></ol><ul><li>假设 Redis 突然崩溃，你们的服务还能正常运行吗？</li><li>如果消息队列的消费端崩溃，如何保证积压的任务不会丢失？</li></ul><hr><p>这个问题集涵盖了<strong>技术选型、架构设计、实现细节、性能优化、安全性、业务可扩展性</strong>等多个维度，基本符合互联网大厂的面试标准。你可以先尝试回答这些问题，如果有任何难点或需要补充的地方，我可以帮你完善你的思路和回答！ 🚀</p></blockquote><p>我们这边收到了提交代码的请求，如果这个代码库是最新加入的代码库的话，则需要先对这个代码库进行构建知识图谱。我们需要获取到这个代码库中的相关类、方法和调用关系，比如利用AST解析工具或者JavaParaser工具。</p><blockquote><p>JavaParser 是一个开源的 Java 源代码解析器和操作库，它能够解析 Java 源代码并构建对应的抽象语法树（AST）。JavaParser 提供了一组 API，使得开发者可以轻松地分析、修改和生成 Java 源代码。据此，你可以通过这些API来实现Java动态编译，原生的java库有javax.tools,但可惜不能支持对于AST的修改</p></blockquote><p>还有比如相应的Git log、测试代码（可能需要手动提供，功能具体未实现）以及一些具体部门中的特定的业务需求。然后使用Neo4j来存储知识图谱。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[UserController] ----calls----&gt; [UserService]</span><br><span class="line">[UserService] ----calls----&gt; [UserRepository]</span><br><span class="line">[UserRepository] ----uses----&gt; [Database]</span><br><span class="line">[UserService] ----tested<span class="built_in">_</span>by----&gt; [UserServiceTest]</span><br><span class="line">[Commit<span class="built_in">_</span>123] ----modified----&gt; [UserController]</span><br><span class="line">[Commit<span class="built_in">_</span>123] ----reviewed<span class="built_in">_</span>in----&gt; [PR<span class="built_in">_</span>45]</span><br><span class="line">[PR<span class="built_in">_</span>45] ----has<span class="built_in">_</span>feedback----&gt; &quot;Optimize saveUser() method&quot;</span><br><span class="line">[SecurityConfig] ----uses----&gt; [SpringSecurity]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>你的问题非常专业，涉及 <strong>大模型如何利用知识图谱</strong> 以及 <strong>代码库知识图谱的维护与优化</strong>，我会结合实际场景进行详细解答。</p><hr><h2 id="问题-1：如何让大模型直接使用知识图谱，从而减少-prompt-的输入？"><a href="#问题-1：如何让大模型直接使用知识图谱，从而减少-prompt-的输入？" class="headerlink" title="问题 1：如何让大模型直接使用知识图谱，从而减少 prompt 的输入？"></a><strong>问题 1：如何让大模型直接使用知识图谱，从而减少 prompt 的输入？</strong></h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a><strong>目标</strong></h3><ul><li>让大模型自动检索知识图谱中的相关信息，而不是依赖用户提供完整的 prompt。</li><li>让大模型基于知识图谱回答问题，而不是纯粹依赖参数内部的知识。</li></ul><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a><strong>实现方案</strong></h3><p>可以使用 <strong>RAG（Retrieval-Augmented Generation）</strong> 方法，将知识图谱作为外部知识库，并在大模型回答前自动查询相关知识。其流程如下：</p><ol><li><p><strong>构建知识图谱</strong></p><ul><li><p>知识图谱以 <strong>图数据库</strong>（如 Neo4j）或 <strong>RDF 存储</strong>（如 GraphDB）存储。</p></li><li><p>例如，我们要存储某个企业的产品关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(产品A) -[兼容]-&gt; (产品B)</span><br><span class="line">(产品A) -[适用于]-&gt; (场景1)</span><br><span class="line">(产品B) -[适用于]-&gt; (场景2)</span><br></pre></td></tr></table></figure></li><li><p>这些信息可以通过 <strong>知识抽取</strong>（从文本、API 或表格中提取）或 <strong>手动建模</strong> 构建。</p></li></ul></li><li><p><strong>大模型查询知识图谱</strong></p><ul><li><p>在处理用户请求时，首先转换成 <strong>查询语句</strong>（如 Cypher 或 SPARQL）。</p></li><li><p>例如，用户问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“产品A是否可以在场景2中使用？”</span><br></pre></td></tr></table></figure></li><li><p>这条自然语言可以转换成 Cypher 查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Product &#123;name:&quot;产品A&quot;&#125;)-[:兼容]-&gt;(p2:Product)-[:适用于]-&gt;(s:Scene &#123;name:&quot;场景2&quot;&#125;)</span><br><span class="line">RETURN p2.name</span><br></pre></td></tr></table></figure></li><li><p>通过查询知识图谱，我们可以找到 </p><p>产品B 适用于 场景2，而产品A 兼容 产品B</p><p>，所以大模型可以得出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“是的，产品A可以间接在场景2中使用，因为它兼容产品B，而产品B适用于场景2。”</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>优化 Prompt</strong></p><ul><li><p>用户不需要输入完整背景信息，大模型可以自动补充知识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户：产品A能用吗？</span><br><span class="line">大模型（自动查询知识图谱后回答）：可以，产品A适用于场景X。</span><br></pre></td></tr></table></figure></li><li><p>这样用户的 prompt 变得更简洁，同时提高了回答准确性。</p></li></ul></li></ol><hr><h2 id="问题-2：代码库知识图谱中方法调用关系变化后如何更新？"><a href="#问题-2：代码库知识图谱中方法调用关系变化后如何更新？" class="headerlink" title="问题 2：代码库知识图谱中方法调用关系变化后如何更新？"></a><strong>问题 2：代码库知识图谱中方法调用关系变化后如何更新？</strong></h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a><strong>场景</strong></h3><p>假设知识图谱存储了方法调用关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(类A.方法1) -[调用]-&gt; (类B.方法2)</span><br></pre></td></tr></table></figure><p>现在我们修改代码，把 <code>类B.方法2</code> 改成 <code>类C.方法3</code>，则知识图谱应更新为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(类A.方法1) -[调用]-&gt; (类C.方法3)</span><br></pre></td></tr></table></figure><h3 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a><strong>更新策略</strong></h3><ol><li><p><strong>增量更新</strong></p><ul><li><strong>对比提交前后的 AST（抽象语法树）</strong></li><li>仅分析 <strong>受影响的文件</strong>，避免全量解析，提高效率。</li></ul></li><li><p><strong>自动检测变更</strong></p><ul><li><p>监听代码变更（Git Hook 或 CI&#x2F;CD 触发）。</p></li><li><p>解析新增、修改、删除的代码：</p><ul><li><strong>新增方法</strong> → 添加新节点</li><li><strong>删除方法</strong> → 删除旧节点</li><li><strong>修改调用关系</strong> → 更新边的连接</li></ul></li><li><p>具体方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodCallChanged) &#123;</span><br><span class="line">    graphDB.run(<span class="string">&quot;MATCH (a:Method &#123;name: &#x27;类A.方法1&#x27;&#125;)-[r:CALLS]-&gt;(b:Method) DELETE r&quot;</span>);</span><br><span class="line">    graphDB.run(<span class="string">&quot;MATCH (a:Method &#123;name: &#x27;类A.方法1&#x27;&#125;), (c:Method &#123;name: &#x27;类C.方法3&#x27;&#125;) CREATE (a)-[:CALLS]-&gt;(c)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>知识图谱支持版本管理</strong></p><ul><li><p>记录每次变更前后的状态，支持代码版本回溯：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(类A.方法1) -[调用 v1]-&gt; (类B.方法2)</span><br><span class="line">(类A.方法1) -[调用 v2]-&gt; (类C.方法3)</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="问题-3：是否每次提交都需要更新知识图谱？如何优化？"><a href="#问题-3：是否每次提交都需要更新知识图谱？如何优化？" class="headerlink" title="问题 3：是否每次提交都需要更新知识图谱？如何优化？"></a><strong>问题 3：是否每次提交都需要更新知识图谱？如何优化？</strong></h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a><strong>问题分析</strong></h3><ul><li><p>如果每次提交都更新</p><p>，可能导致：</p><ul><li>解析 <strong>整个代码库</strong>，非常耗时（如 JavaParser 解析大型代码库会慢）。</li><li>许多变更 <strong>不影响调用关系</strong>，但仍然被分析，增加不必要的开销。</li></ul></li></ul><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a><strong>优化方案</strong></h3><ol><li><p><strong>按需更新</strong></p><ul><li><p>仅更新受影响的文件</p><p>，避免全量解析：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only HEAD~1 HEAD</span><br></pre></td></tr></table></figure></li><li><p>获取本次提交修改的 Java 文件，再用 JavaParser 解析这些文件，而不是整个代码库。</p></li></ul></li><li><p><strong>增量 AST 解析</strong></p><ul><li><p>解析新旧代码，</p><p>仅计算方法调用差异</p><p>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CompilationUnit</span> <span class="variable">oldAST</span> <span class="operator">=</span> StaticJavaParser.parse(oldCode);</span><br><span class="line"><span class="type">CompilationUnit</span> <span class="variable">newAST</span> <span class="operator">=</span> StaticJavaParser.parse(newCode);</span><br><span class="line">compareAndUpdateGraph(oldAST, newAST);</span><br></pre></td></tr></table></figure></li><li><p>这样可以 <strong>避免重复解析无变化的代码</strong>。</p></li></ul></li><li><p><strong>批量更新</strong></p><ul><li>不每次提交都触发，而是 <strong>定期批量更新</strong>（如每日凌晨 1 点）。</li><li>使用 <strong>消息队列</strong>（如 Kafka），推送变更记录，后台异步解析更新。</li></ul></li></ol><hr><h2 id="问题-4：不同项目是否需要单独的知识图谱？如何管理多个知识图谱？"><a href="#问题-4：不同项目是否需要单独的知识图谱？如何管理多个知识图谱？" class="headerlink" title="问题 4：不同项目是否需要单独的知识图谱？如何管理多个知识图谱？"></a><strong>问题 4：不同项目是否需要单独的知识图谱？如何管理多个知识图谱？</strong></h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a><strong>场景</strong></h3><ul><li><strong>不同项目的代码库</strong>，是否应该分别构建知识图谱？</li><li><strong>同一部门的多个项目</strong>，能否共用一个知识图谱？</li></ul><h3 id="两种选择"><a href="#两种选择" class="headerlink" title="两种选择"></a><strong>两种选择</strong></h3><h4 id="方案-1：每个代码库一个独立知识图谱"><a href="#方案-1：每个代码库一个独立知识图谱" class="headerlink" title="方案 1：每个代码库一个独立知识图谱"></a><strong>方案 1：每个代码库一个独立知识图谱</strong></h4><ul><li>优点：<ul><li><strong>隔离性强</strong>，不会混淆不同项目的调用关系。</li></ul></li><li>缺点：<ul><li><strong>管理复杂</strong>，大模型查询时需要知道用哪个图谱。</li></ul></li></ul><h4 id="方案-2：多个项目共享一个知识图谱"><a href="#方案-2：多个项目共享一个知识图谱" class="headerlink" title="方案 2：多个项目共享一个知识图谱"></a><strong>方案 2：多个项目共享一个知识图谱</strong></h4><ul><li><p>使用命名空间</p><p>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(ProjectA:类A.方法1) -[调用]-&gt; (ProjectA:类B.方法2)</span><br><span class="line">(ProjectB:类X.方法Y) -[调用]-&gt; (ProjectB:类Z.方法W)</span><br></pre></td></tr></table></figure></li><li><p>大模型查询时指定项目</p><p>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Method) WHERE m.project = &#x27;ProjectA&#x27; RETURN m</span><br></pre></td></tr></table></figure></li><li><p>优点</p><p>：</p><ul><li><strong>查询时自动筛选</strong>，无需手动选择知识图谱。</li><li><strong>减少重复数据</strong>（若多个项目共用同一方法，可以共享节点）。</li></ul></li><li><p>缺点</p><p>：</p><ul><li>需要对大模型做 <strong>上下文增强</strong>，以便它知道查询哪个项目的知识图谱。</li></ul></li></ul><hr><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><ol><li><strong>让大模型使用知识图谱</strong>：<ul><li>使用 <strong>RAG</strong> 技术，大模型在回答前自动查询知识图谱，减少用户 prompt 复杂度。</li></ul></li><li><strong>代码库知识图谱变更后如何更新</strong>：<ul><li>监听代码提交，<strong>增量更新 AST</strong>，只修改受影响的调用关系。</li></ul></li><li><strong>优化更新效率</strong>：<ul><li>仅解析变更的文件，使用 <strong>增量 AST</strong> 解析，避免全量重建知识图谱。</li></ul></li><li><strong>多个代码库的知识图谱管理</strong>：<ul><li>可以 <strong>每个代码库单独维护</strong>，也可以 <strong>统一管理，按项目分隔</strong>，查询时自动筛选。</li></ul></li></ol><p>这套方案能在 <strong>保证高效更新</strong> 的同时 <strong>减少大模型的 prompt 依赖</strong>，并且适用于 <strong>大规模代码库的分析与维护</strong>。</p></blockquote><h3 id="代码评审实习项目涉及到的难点"><a href="#代码评审实习项目涉及到的难点" class="headerlink" title="代码评审实习项目涉及到的难点"></a>代码评审实习项目涉及到的难点</h3><p>项目背景：现在你在一家公司开发了一个代码评审相关的系统，你获取到用户的变更代码后，你需要获取到这个变更代码的上下文，然后与prompt一起包装发给大模型进行评审。</p><p>这里其中涉及到的难点有：</p><ol><li>代码上下文提取；</li><li>Prompt优化；</li><li>大模型输入长度控制；</li></ol><h3 id="代码审查哪些方面的内容"><a href="#代码审查哪些方面的内容" class="headerlink" title="代码审查哪些方面的内容"></a>代码审查哪些方面的内容</h3><p>首先的第一点是你的prompt代码审查主要是评审哪些方面的问题：</p><ol><li>首先就是代码中的一些常见问题，例如<strong>安全方面</strong>的问题，比如是否存在SQL注入的风险，xss攻击，未处理的异常等情况；</li><li>其次就是是否存在<strong>逻辑性错误</strong>，比如是否存在潜在的逻辑错误或者边界情况未考虑到；</li><li><strong>风格一致性检查</strong>，是否符合项目的代码规范，比如一些命名方式等；</li><li>还有就是<strong>代码质量</strong>，代码是否符合最佳实践？是否存在冗余等情况；</li></ol><h3 id="Prompt优化"><a href="#Prompt优化" class="headerlink" title="Prompt优化"></a>Prompt优化</h3><p>面试官询问：你是如何进行prompt优化的。关于Prompt优化紧扣下面几个技术点，分别为Prompt 提示工程、few shot示例引导以及CoT三大技术点进行Prompt优化。</p><p>Prompt 提示工程：比如设定角色，明确任务，详细的告知大模型做什么，从而减少幻觉。同时提供相关变更代码的必要的上下文信息，让大模型捕获更多的背景信息。</p><p>添加Few-shot示例：在Prompt中添加部分具有代表性的案例，让大模型学习模式，从而提高评审效率。</p><p>任务拆解（CoT）：如果直接让LLM进行评审，可能导致跳步，导致结果并不准确，CoT可以将任务分成多个小任务，从而引导大模型进行分析回答。</p><h3 id="代码上下文获取"><a href="#代码上下文获取" class="headerlink" title="代码上下文获取"></a>代码上下文获取</h3><p>面试可能针对代码上下文获取来进行询问，比如在你这个项目中是如何获取到当前变更代码的上下文信息的呢？</p><h3 id="RAG"><a href="#RAG" class="headerlink" title="RAG"></a>RAG</h3><p>RAG是一个检索、增强和生成的AI框架，它可以为大模型提供更多的外部信息，通过RAG检索获取到更多的信息之后拼接到promte后交给大模型进行处理，那么大模型获取到的上下文信息会更多。</p><p>RAG的“检索、增强、生成”，谁增强了谁，谁生成了答案，主语很重要。是从知识库中检索到的问答对，增强了LLM的提示词（prompt），LLM拿着增强后的Prompt生成了问题答案。</p><h2 id="实习-浦东智慧机场"><a href="#实习-浦东智慧机场" class="headerlink" title="实习-浦东智慧机场"></a>实习-浦东智慧机场</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">现在假设你是一个经验非常丰富的Java后端开发者，现在你是正在负责一个智慧机场的升级项目，你负责其中一个模块，请</span><br><span class="line">你对此来进行回答。</span><br><span class="line">首先机场是你的甲方，你本地需要获取机场的一些基本信息，比如当天的客流量、当前的客流量、当天哪些旅客会进行登机等</span><br><span class="line">一些基本信息，这些信息你将会从另一个服务提供平台、比如航司等一些平台调用其接口来获取这些信息。那么你需要设计</span><br><span class="line">一个第三方数据适配平台，在这个平台中你会设计一个数据源表、任务表、数据映射表等，同时你对某些查询之后可能需要</span><br><span class="line">进行某些聚合操作，比如求出当天有多少人出入机场，然后把这个数据保存至数据库中。然后需要把这些信息用于大屏可视化</span><br><span class="line">。那么这是你是否就是需要调用第三方接口或者数据库，这里就会涉及到很多问题。你需要列举出来。</span><br><span class="line">第二个任务，因为某些数据你可能需要在本地多个微服务之间互相使用，比如当前区域内的值班人员信息、一些旅客的基本信息</span><br><span class="line">然后可能需要跨语言用于Python端进行异常行为分析等情况，所以你在获取到第三方平台的数据之后，你会把获取到的数据</span><br><span class="line">保存到数据库中并之后使用gRPC来进行传输分析。你需要对这部分的内容进行详细的一个架构分析并给出。</span><br><span class="line">然后我需要你给我帮这段实习经历形成一个简历上可以书写的一段话，最好不要分点回答。</span><br></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在刚刚的面试中，面试官主要考察了以下几个技术难点和知识点：</p><h3 id="1-大数据量处理"><a href="#1-大数据量处理" class="headerlink" title="1. 大数据量处理"></a>1. <strong>大数据量处理</strong></h3><ul><li>面试官考察了你如何处理<strong>海量数据</strong>，尤其是针对浦东智慧机场项目中的<strong>大规模旅客数据</strong>。</li><li>考察点包括：<ul><li>如何进行<strong>数据分层</strong>架构设计（OLTP、OLAP等）。</li><li>如何进行<strong>分库分表</strong>及<strong>流式计算</strong>处理。</li><li>使用<strong>Kafka</strong>等消息队列来保障数据的实时性和高吞吐量。</li></ul></li></ul><h3 id="2-数据库选型"><a href="#2-数据库选型" class="headerlink" title="2. 数据库选型"></a>2. <strong>数据库选型</strong></h3><ul><li>面试官考察了你在处理大数据时的<strong>数据库选型</strong>，并且要求你阐述具体的<strong>存储方案</strong>及原因。</li><li>考察点包括：<ul><li>对于<strong>事务型数据</strong>使用了哪些数据库（MySQL、TiDB等）。</li><li>对于<strong>分析型数据</strong>选择了哪些数据库（ClickHouse、Doris等）。</li><li><strong>缓存</strong>解决方案（Redis）以及如何减少数据库压力。</li></ul></li></ul><h3 id="3-第三方数据平台适配与幂等性保证"><a href="#3-第三方数据平台适配与幂等性保证" class="headerlink" title="3. 第三方数据平台适配与幂等性保证"></a>3. <strong>第三方数据平台适配与幂等性保证</strong></h3><ul><li>面试官考察了你如何设计<strong>多次请求</strong>及<strong>幂等性保证</strong>，尤其是在高并发的情况下保证数据的正确性和一致性。</li><li>考察点包括：<ul><li>如何使用**唯一标识（如request_id）**确保幂等性。</li><li>设计如何保证数据不会重复插入或丢失。</li><li><strong>重试机制</strong>和如何应对请求失败（如网络问题、接口挂掉等）。</li></ul></li></ul><h3 id="4-网络异常及请求失败处理"><a href="#4-网络异常及请求失败处理" class="headerlink" title="4. 网络异常及请求失败处理"></a>4. <strong>网络异常及请求失败处理</strong></h3><ul><li>面试官考察了你在面对<strong>请求失败</strong>的情况下的应对策略，尤其是在网络异常的情况下如何保证系统的可靠性和数据完整性。</li><li>考察点包括：<ul><li><strong>指数退避重试机制</strong>，减少系统压力。</li><li><strong>熔断与限流</strong>策略，避免因单一接口故障导致整个系统崩溃。</li><li><strong>日志监控</strong>和<strong>降级方案</strong>设计，保证服务高可用性。</li></ul></li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>这些问题考察了你在<strong>高并发系统设计</strong>、<strong>大数据量存储与处理</strong>、<strong>分布式架构设计</strong>以及<strong>数据一致性和系统可靠性</strong>等方面的知识，尤其是在处理复杂项目中的实际问题时，如何做出合理的技术决策和应对策略。</p></blockquote><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>本段实习是在上海追势公司，该项目是上海浦东机场的智慧机场项目，该项目涉及到多个模块，我所涉及到的有：多应用单点登录、第三方数据库适配平台前后端开发。</p><p>如果仅仅是上诉描述的内容，并不够丰富，所以需要对这部分的内容进行扩展。首先这个项目就是针对于浦东机场的智慧机场升级项目。这其中涉及到的技术点会有哪些呢？</p><h3 id="如何保证请求接口的幂等性"><a href="#如何保证请求接口的幂等性" class="headerlink" title="如何保证请求接口的幂等性"></a>如何保证请求接口的幂等性</h3><blockquote><p>好的，我现在需要回答如何保证接口的幂等性这个问题。首先，我得理解什么是幂等性。幂等性是指无论调用接口多少次，结果都是一致的。比如，用户多次点击提交订单，系统应该只生成一个订单，而不是多个。这在实际开发中非常重要，尤其是在网络不稳定的情况下，用户可能会重复发送请求。</p><p>接下来，我需要回忆常见的保证接口幂等性的方法。首先想到的是使用唯一标识符，比如订单ID或者请求ID。每次请求时生成一个唯一的ID，服务端检查这个ID是否已经处理过，如果处理过就直接返回之前的结果，避免重复处理。这种方法需要服务端存储这些ID，可能会用到数据库或者缓存，比如Redis。</p><p>然后是乐观锁。比如在更新数据的时候，带上一个版本号，只有版本号匹配的时候才执行更新，这样可以防止重复更新。比如在扣减库存的时候，先读取当前库存和版本号，然后更新时检查版本号是否一致，如果不一致说明有其他请求已经修改过，就拒绝当前请求。</p><p>还有一种方法是Token机制。客户端在发起请求前先获取一个Token，服务端生成并保存这个Token，之后客户端的请求必须携带这个Token，服务端处理完请求后删除Token。这样重复的请求会因为Token不存在而被拒绝。</p><p>还有数据库的唯一约束，比如在表中设置唯一索引，防止插入重复的数据。比如用户注册时，用户名必须唯一，设置唯一索引后，重复插入会抛出异常，从而保证幂等性。</p><p>另外，状态机也是一种方法。业务操作按照一定的状态流转进行，比如订单状态从“待支付”到“已支付”，如果收到重复的支付请求，系统会检查当前状态，如果是“已支付”就直接返回成功，不再处理。</p><p>现在需要考虑用户提到的场景，调用第三方接口且数据量大需要分批次请求，可能存在失败重试。这时候需要确保即使多次重试，数据库的结果一致。可能需要结合唯一批次ID和状态记录，每次处理前检查批次状态，如果已经处理过就直接跳过，否则处理并更新状态。</p><p>还要考虑分布式系统中的问题，比如网络延迟、服务宕机等。可能需要引入分布式锁或者使用消息队列来保证顺序和唯一性。</p><p>不过，用户在问题中提到了调用第三方接口，可能存在失败的情况，所以需要设计重试机制，并且在重试时保证幂等性。比如每个批次请求有一个唯一ID，第三方接口支持幂等性，或者本地记录每个批次的状态，避免重复提交。</p><p>还需要注意数据一致性问题，比如在部分批次成功、部分失败的情况下，如何回滚或补偿。可能需要事务机制或者最终一致性方案。</p><p>总结一下，保证接口幂等性的方法包括唯一ID、Token机制、乐观锁、数据库唯一约束、状态机等。具体实现需要根据业务场景选择合适的方法，并结合重试机制和状态管理来确保数据一致性。</p><p>保证接口的幂等性可以通过以下方法实现：</p><h3 id="1-唯一请求标识（Request-ID）"><a href="#1-唯一请求标识（Request-ID）" class="headerlink" title="1. 唯一请求标识（Request ID）"></a>1. <strong>唯一请求标识（Request ID）</strong></h3><p>• <strong>实现方式</strong>：客户端在每次请求时生成一个全局唯一的请求ID（如UUID），服务端通过该ID判断请求是否重复。<br>• <strong>步骤</strong>：</p><ol><li>客户端生成唯一ID，并随请求发送至服务端。</li><li>服务端在Redis或数据库中记录该ID的状态（如<code>已处理</code>&#x2F;<code>未处理</code>）。</li><li>处理请求前，服务端检查该ID是否已存在：<br>◦ 若存在，直接返回之前的处理结果。<br>◦ 若不存在，处理请求并标记ID为已处理。<br>• <strong>适用场景</strong>：支付、订单提交等高并发写操作。</li></ol><h3 id="2-Token-机制"><a href="#2-Token-机制" class="headerlink" title="2. Token 机制"></a>2. <strong>Token 机制</strong></h3><p>• <strong>实现方式</strong>：客户端在执行业务操作前，先申请一个一次性Token。<br>• <strong>步骤</strong>：</p><ol><li>客户端调用预接口（如<code>/api/get_token</code>）获取Token。</li><li>服务端生成Token并存储（如Redis，设置短时过期）。</li><li>客户端携带Token发起正式请求。</li><li>服务端验证Token是否存在：<br>◦ 存在：处理请求并删除Token。<br>◦ 不存在：拒绝请求（视为重复提交）。<br>• <strong>适用场景</strong>：表单提交、抢购等需防止重复提交的场景。</li></ol><h3 id="3-数据库唯一约束"><a href="#3-数据库唯一约束" class="headerlink" title="3. 数据库唯一约束"></a>3. <strong>数据库唯一约束</strong></h3><p>• <strong>实现方式</strong>：利用数据库的唯一索引或联合唯一键，避免重复数据插入。<br>• <strong>步骤</strong>：</p><ol><li>设计业务表时，对关键字段（如订单号、用户ID+活动ID）添加唯一索引。</li><li>插入数据时，若触发唯一冲突，直接捕获异常并返回已有结果。<br>• <strong>示例</strong>：</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> orders (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">  order_no <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">UNIQUE</span>,  <span class="comment">-- 唯一索引</span></span><br><span class="line">  user_id <span class="type">INT</span>,</span><br><span class="line">  amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>• <strong>适用场景</strong>：优惠券领取、订单创建等需唯一性约束的场景。</p><h3 id="4-乐观锁（版本号控制）"><a href="#4-乐观锁（版本号控制）" class="headerlink" title="4. 乐观锁（版本号控制）"></a>4. <strong>乐观锁（版本号控制）</strong></h3><p>• <strong>实现方式</strong>：为数据添加版本号字段，更新时校验版本是否一致。<br>• <strong>步骤</strong>：</p><ol><li>读取数据时获取当前版本号（如<code>version=3</code>）。</li><li>更新数据时，在SQL中增加版本号条件：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products </span><br><span class="line"><span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">-</span> <span class="number">1</span>, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">100</span> <span class="keyword">AND</span> version <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li>若影响行数为0，说明版本号已变更，拒绝本次请求。<br>• <strong>适用场景</strong>：库存扣减、账户余额修改等并发更新场景。</li></ol><h3 id="5-状态机（业务状态流转）"><a href="#5-状态机（业务状态流转）" class="headerlink" title="5. 状态机（业务状态流转）"></a>5. <strong>状态机（业务状态流转）</strong></h3><p>• <strong>实现方式</strong>：定义业务状态流转规则，拒绝非法状态变更。<br>• <strong>步骤</strong>：</p><ol><li>设计状态流转图（如订单状态：<code>待支付 → 已支付 → 已完成</code>）。</li><li>处理请求时，检查当前状态是否允许变更：<br>◦ 若允许，更新状态并执行业务逻辑。<br>◦ 若不允许，直接返回当前结果。<br>• <strong>示例</strong>：</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (order.getStatus() != <span class="string">&quot;待支付&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;订单已支付，请勿重复操作&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>适用场景</strong>：订单状态变更、审核流程等有严格状态依赖的业务。</p><h3 id="6-分布式锁"><a href="#6-分布式锁" class="headerlink" title="6. 分布式锁"></a>6. <strong>分布式锁</strong></h3><p>• <strong>实现方式</strong>：在分布式环境下，通过锁机制确保同一时间仅一个请求能执行业务逻辑。<br>• <strong>步骤</strong>：</p><ol><li>使用Redis或ZooKeeper实现分布式锁（如<code>SET lock_key 1 NX EX 30</code>）。</li><li>获取锁后执行业务逻辑，完成后释放锁。</li><li>若获取锁失败，直接返回提示或等待重试。<br>• <strong>优化</strong>：锁粒度细化到资源ID（如<code>lock:order:123</code>），避免全局锁竞争。<br>• <strong>适用场景</strong>：秒杀、分布式任务调度等高并发场景。</li></ol><h3 id="7-消息队列去重"><a href="#7-消息队列去重" class="headerlink" title="7. 消息队列去重"></a>7. <strong>消息队列去重</strong></h3><p>• <strong>实现方式</strong>：通过消息队列的ACK机制和唯一ID实现消费端幂等。<br>• <strong>步骤</strong>：</p><ol><li>消息生产者为每条消息生成唯一ID。</li><li>消费者处理消息前，检查该ID是否已处理：<br>◦ 若已处理，直接ACK确认。<br>◦ 若未处理，执行业务逻辑并记录ID。</li><li>结合数据库唯一键或Redis实现去重。<br>• <strong>适用场景</strong>：异步任务处理、大数据量批量操作。</li></ol><h3 id="8-第三方接口协作"><a href="#8-第三方接口协作" class="headerlink" title="8. 第三方接口协作"></a>8. <strong>第三方接口协作</strong></h3><p>• <strong>实现方式</strong>：若接口依赖第三方服务，需确保第三方支持幂等性。<br>• <strong>步骤</strong>：</p><ol><li>调用第三方接口时传递唯一ID（如<code>X-Idempotency-Key: request_123</code>）。</li><li>第三方根据该ID保证相同请求仅处理一次。</li><li>若第三方不支持幂等，本地需记录已成功请求的ID。<br>• <strong>示例</strong>：支付接口（如支付宝、微信支付通常支持幂等性）。</li></ol><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>• <strong>简单场景</strong>：优先使用数据库唯一约束或乐观锁。<br>• <strong>高并发场景</strong>：结合Redis唯一请求ID或分布式锁。<br>• <strong>依赖第三方</strong>：确保传递唯一ID并利用其幂等性支持。<br>• <strong>最终一致性</strong>：通过重试机制+状态机+异步补偿保障。</p><p>通过以上方法，可有效避免重复请求导致的脏数据或业务异常，确保系统健壮性。</p></blockquote><h3 id="单点登录模块"><a href="#单点登录模块" class="headerlink" title="单点登录模块"></a>单点登录模块</h3><ol><li><a href="https://blog.csdn.net/qq_53895518/article/details/136869614?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522a5fef490aca8aec8695bcd9e68568361%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=a5fef490aca8aec8695bcd9e68568361&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-136869614-null-null.142%5Ev102%5Epc_search_result_base6&utm_term=%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95&spm=1018.2226.3001.4187">单点登录(SSO)详解——超详细</a></li></ol><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><ol><li><a href="https://blog.csdn.net/qq_40991313/article/details/133797658">一篇文章搞懂MySQL的分库分表，从拆分场景、目标评估、拆分方案、不停机迁移、一致性补偿等方面详细阐述MySQL数据库的分库分表方案</a></li></ol><h3 id="第三方数据适配平台开发"><a href="#第三方数据适配平台开发" class="headerlink" title="第三方数据适配平台开发"></a>第三方数据适配平台开发</h3><p>简单的来说我们会定时的去调用某些第三方接口去获取数据并同步到本地数据库中，这里会涉及到如下问题：</p><h4 id="第三方接口调用风险"><a href="#第三方接口调用风险" class="headerlink" title="第三方接口调用风险"></a>第三方接口调用风险</h4><h5 id="稳定性问题"><a href="#稳定性问题" class="headerlink" title="稳定性问题"></a>稳定性问题</h5><p><strong>问题</strong>：第三方服务宕机或响应超时（如HTTP 503&#x2F;504错误），导致同步任务失败。</p><p><strong>解决方案</strong>：</p><ul><li>设置 <strong>指数退避重试策略</strong>（如首次1秒后重试，后续每次翻倍，最多5次）</li><li>使用 <strong>熔断机制</strong>（如Resilience4j），当失败率&gt;50%时暂停调用1小时</li></ul><p>这个解决方案就是为了保证第三方接口宕机的情况发生后，导致我们这边的服务出现问题。我们可以采取熔断的机制，当失败率达到阈值之后，暂停请求，并将该服务降级使用指定的默认值进行返回，同时上报异常情况。</p><h5 id="频率限制与配额控制"><a href="#频率限制与配额控制" class="headerlink" title="频率限制与配额控制"></a><strong>频率限制与配额控制</strong></h5><p><strong>问题</strong>：第三方接口限制调用频率（如每分钟100次），超额触发限流（HTTP 429）。</p><p><strong>案例</strong>：因全量同步时高频调用航空公司API，IP被加入黑名单 <strong>24小时</strong>，导致同步中断。</p><p>解决方案：实现 <strong>漏桶算法</strong> 控制调用速率</p><h4 id="数据处理与存储风险"><a href="#数据处理与存储风险" class="headerlink" title="数据处理与存储风险"></a><strong>数据处理与存储风险</strong></h4><h5 id="数据一致性风险"><a href="#数据一致性风险" class="headerlink" title="数据一致性风险"></a><strong>数据一致性风险</strong></h5><ul><li><strong>问题</strong>：同步过程中程序崩溃，导致 <strong>部分数据写入本地库，部分丢失</strong>。</li><li><strong>案例</strong>：同步1万条旅客数据时，服务重启导致最后2000条未提交，需手动修复。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>81-01 面试-小米-测开</title>
      <link href="/2025/02/15/81-01%20%E9%9D%A2%E8%AF%95-%E5%B0%8F%E7%B1%B3-%E6%B5%8B%E5%BC%80/"/>
      <url>/2025/02/15/81-01%20%E9%9D%A2%E8%AF%95-%E5%B0%8F%E7%B1%B3-%E6%B5%8B%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<h1 id="81-01-面试-小米-测开"><a href="#81-01-面试-小米-测开" class="headerlink" title="81-01 面试-小米-测开"></a>81-01 面试-小米-测开</h1><p>2025年03月05日下午14:00面试的小米测开，下面对这次面试做一个总结。</p><p>首先是面试内容。</p><h2 id="面试内容"><a href="#面试内容" class="headerlink" title="面试内容"></a>面试内容</h2><ol><li>首先是自我介绍；</li><li>对第一段实习进行的询问，比如这段实习你做了什么，你是怎么做的，你在这段实习中负责的是什么；</li><li>对第二段实习进行了询问，这个项目是做什么的，你在这段实习中你负责了什么，以及做了什么；</li><li>手写了一个MySQL查询题目；</li><li>手写了一个算法题（最长子串查询），思路有，但是没写出来，用的滑动窗口解决；</li><li>询问了一些基础Spring八股文，例如（IOC，AOP）;</li><li>询问了对测试的开发，为什么要选择测试；</li><li>个人的性格如何；</li><li>最长可以实习几个月，最短也要6个月以上；</li><li>反问哪里需要加强；</li></ol><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ol><li>关于自我介绍部分，过于紧张，事前并没有准备好自我介绍，导致自我介绍过于混乱，语言组织能力太差；</li><li>对于第一段实习的询问，回答的马马虎虎，事先并没有想好该怎么回答，导致有些回答并不是很好，事后加强；</li><li>对于第二段实习的询问同上；</li><li>手写SQL好久没写了，再提示的情况下写出来了；</li><li>手撕算法，其本质刷少了，多刷多刷多刷；</li><li>Spring八股文都是一些非常基础的，回答的还行；因为之前花了大量的时间在这八股文上面；</li><li>为什么选择测试，好吧其实我并不是很想去，参加面试的主要原因是因为想积累一下面试经验，还是面少了，一面试就容易脑子空空；</li><li>个人性格，好吧不知道怎么说……</li></ol><p>总体来说及格，但得不到良，作为第一次面试来说，效果并不好，我并不满意。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>语言组织能力太差了，不知道该如何组织语言表达，脑子空空，事后想想却知道，当时就不能想起来，该加强；</li><li>SQL语句书写，也得加强；</li><li>算法题，不必多说，每天2题，刷去吧；</li><li>个人性格这种问题都能不知道怎么说的，回去自己好好想想怎么回答，自己是一个怎么样的人；</li></ol><h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>6分！</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 测开 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
